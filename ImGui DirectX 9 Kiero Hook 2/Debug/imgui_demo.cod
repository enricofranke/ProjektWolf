; Listing generated by Microsoft (R) Optimizing Compiler Version 19.27.29112.0 

	TITLE	D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	??_C@_05DDEOPHNO@Bobby@				; `string'
PUBLIC	??_C@_08FLMMIHDE@Beatrice@			; `string'
PUBLIC	??_C@_05BECHDIPO@Betty@				; `string'
PUBLIC	??_C@_07OEGNBIJH@Brianna@			; `string'
PUBLIC	??_C@_05MAEBLNFA@Barry@				; `string'
PUBLIC	??_C@_07JNHNGBFJ@Bernard@			; `string'
PUBLIC	??_C@_04KCKMHEOC@Bibi@				; `string'
PUBLIC	??_C@_06HGIOBEEM@Blaine@			; `string'
PUBLIC	??_C@_04HKIGHOCK@Bryn@				; `string'
PUBLIC	??_C@_08HGEMKAAG@Item?5One@			; `string'
PUBLIC	??_C@_08BIEMAAON@Item?5Two@			; `string'
PUBLIC	??_C@_0L@PNIFIMNF@Item?5Three@			; `string'
PUBLIC	??_C@_09FNJGFEIF@Item?5Four@			; `string'
PUBLIC	??_C@_09HPDIDBJG@Item?5Five@			; `string'
msvcjmc	SEGMENT
__ED9CC025_corecrt_memcpy_s@h DB 01H
__241EEA0C_corecrt_memory@h DB 01H
__875914C9_corecrt_wstring@h DB 01H
__731387C4_string@h DB 01H
__8BAA8EBB_imgui@h DB 01H
__40DF0D2D_ctype@h DB 01H
__E2865EBA_corecrt_math@h DB 01H
__1850469A_corecrt_stdio_config@h DB 01H
__01D10305_corecrt_wstdio@h DB 01H
__9FF75F13_stdio@h DB 01H
__F5601360_stdlib@h DB 01H
__B5B020C2_imgui_demo@cpp DB 01H
__6D9F1981_predefined C++ types (compiler internal) DB 01H
msvcjmc	ENDS
;	COMDAT ??_C@_09HPDIDBJG@Item?5Five@
CONST	SEGMENT
??_C@_09HPDIDBJG@Item?5Five@ DB 'Item Five', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FNJGFEIF@Item?5Four@
CONST	SEGMENT
??_C@_09FNJGFEIF@Item?5Four@ DB 'Item Four', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PNIFIMNF@Item?5Three@
CONST	SEGMENT
??_C@_0L@PNIFIMNF@Item?5Three@ DB 'Item Three', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BIEMAAON@Item?5Two@
CONST	SEGMENT
??_C@_08BIEMAAON@Item?5Two@ DB 'Item Two', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGEMKAAG@Item?5One@
CONST	SEGMENT
??_C@_08HGEMKAAG@Item?5One@ DB 'Item One', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HKIGHOCK@Bryn@
CONST	SEGMENT
??_C@_04HKIGHOCK@Bryn@ DB 'Bryn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HGIOBEEM@Blaine@
CONST	SEGMENT
??_C@_06HGIOBEEM@Blaine@ DB 'Blaine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCKMHEOC@Bibi@
CONST	SEGMENT
??_C@_04KCKMHEOC@Bibi@ DB 'Bibi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07JNHNGBFJ@Bernard@
CONST	SEGMENT
??_C@_07JNHNGBFJ@Bernard@ DB 'Bernard', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MAEBLNFA@Barry@
CONST	SEGMENT
??_C@_05MAEBLNFA@Barry@ DB 'Barry', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07OEGNBIJH@Brianna@
CONST	SEGMENT
??_C@_07OEGNBIJH@Brianna@ DB 'Brianna', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BECHDIPO@Betty@
CONST	SEGMENT
??_C@_05BECHDIPO@Betty@ DB 'Betty', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08FLMMIHDE@Beatrice@
CONST	SEGMENT
??_C@_08FLMMIHDE@Beatrice@ DB 'Beatrice', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDEOPHNO@Bobby@
CONST	SEGMENT
??_C@_05DDEOPHNO@Bobby@ DB 'Bobby', 00H			; `string'
CONST	ENDS
PUBLIC	??0ImVec2@@QAE@MM@Z				; ImVec2::ImVec2
PUBLIC	??0ImVec4@@QAE@XZ				; ImVec4::ImVec4
PUBLIC	??0ImVec4@@QAE@MMMM@Z				; ImVec4::ImVec4
PUBLIC	?ShowDemoWindow@ImGui@@YAXPA_N@Z		; ImGui::ShowDemoWindow
PUBLIC	?ShowAboutWindow@ImGui@@YAXPA_N@Z		; ImGui::ShowAboutWindow
PUBLIC	?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z	; ImGui::ShowStyleEditor
PUBLIC	?ShowStyleSelector@ImGui@@YA_NPBD@Z		; ImGui::ShowStyleSelector
PUBLIC	?ShowFontSelector@ImGui@@YAXPBD@Z		; ImGui::ShowFontSelector
PUBLIC	?ShowUserGuide@ImGui@@YAXXZ			; ImGui::ShowUserGuide
PUBLIC	??A?$ImVector@G@@QAEAAGH@Z			; ImVector<unsigned short>::operator[]
PUBLIC	?IsActive@ImGuiTextFilter@@QBE_NXZ		; ImGuiTextFilter::IsActive
PUBLIC	??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>
PUBLIC	?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QBE_NXZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty
PUBLIC	??1ImGuiTextFilter@@QAE@XZ			; ImGuiTextFilter::~ImGuiTextFilter
PUBLIC	??0?$ImVector@D@@QAE@XZ				; ImVector<char>::ImVector<char>
PUBLIC	??1?$ImVector@D@@QAE@XZ				; ImVector<char>::~ImVector<char>
PUBLIC	?empty@?$ImVector@D@@QBE_NXZ			; ImVector<char>::empty
PUBLIC	?size@?$ImVector@D@@QBEHXZ			; ImVector<char>::size
PUBLIC	?capacity@?$ImVector@D@@QBEHXZ			; ImVector<char>::capacity
PUBLIC	?clear@?$ImVector@D@@QAEXXZ			; ImVector<char>::clear
PUBLIC	?begin@?$ImVector@D@@QAEPADXZ			; ImVector<char>::begin
PUBLIC	?front@?$ImVector@D@@QBEABDXZ			; ImVector<char>::front
PUBLIC	?back@?$ImVector@D@@QBEABDXZ			; ImVector<char>::back
PUBLIC	?_grow_capacity@?$ImVector@D@@QBEHH@Z		; ImVector<char>::_grow_capacity
PUBLIC	?resize@?$ImVector@D@@QAEXH@Z			; ImVector<char>::resize
PUBLIC	?reserve@?$ImVector@D@@QAEXH@Z			; ImVector<char>::reserve
PUBLIC	?push_back@?$ImVector@D@@QAEXABD@Z		; ImVector<char>::push_back
PUBLIC	??0ImGuiTextBuffer@@QAE@XZ			; ImGuiTextBuffer::ImGuiTextBuffer
PUBLIC	??AImGuiTextBuffer@@QBEDH@Z			; ImGuiTextBuffer::operator[]
PUBLIC	?begin@ImGuiTextBuffer@@QBEPBDXZ		; ImGuiTextBuffer::begin
PUBLIC	?end@ImGuiTextBuffer@@QBEPBDXZ			; ImGuiTextBuffer::end
PUBLIC	?size@ImGuiTextBuffer@@QBEHXZ			; ImGuiTextBuffer::size
PUBLIC	?clear@ImGuiTextBuffer@@QAEXXZ			; ImGuiTextBuffer::clear
PUBLIC	??1ImGuiTextBuffer@@QAE@XZ			; ImGuiTextBuffer::~ImGuiTextBuffer
PUBLIC	??0ImGuiListClipper@@QAE@HM@Z			; ImGuiListClipper::ImGuiListClipper
PUBLIC	??1ImGuiListClipper@@QAE@XZ			; ImGuiListClipper::~ImGuiListClipper
PUBLIC	??0ImColor@@QAE@MMMM@Z				; ImColor::ImColor
PUBLIC	??0ImColor@@QAE@ABUImVec4@@@Z			; ImColor::ImColor
PUBLIC	??BImColor@@QBEIXZ				; ImColor::operator unsigned int
PUBLIC	??BImColor@@QBE?AUImVec4@@XZ			; ImColor::operator ImVec4
PUBLIC	?HSV@ImColor@@SA?AU1@MMMM@Z			; ImColor::HSV
PUBLIC	??0?$ImVector@UImVec2@@@@QAE@XZ			; ImVector<ImVec2>::ImVector<ImVec2>
PUBLIC	??1?$ImVector@UImVec2@@@@QAE@XZ			; ImVector<ImVec2>::~ImVector<ImVec2>
PUBLIC	?empty@?$ImVector@UImVec2@@@@QBE_NXZ		; ImVector<ImVec2>::empty
PUBLIC	??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z	; ImVector<ImVec2>::operator[]
PUBLIC	?clear@?$ImVector@UImVec2@@@@QAEXXZ		; ImVector<ImVec2>::clear
PUBLIC	?_grow_capacity@?$ImVector@UImVec2@@@@QBEHH@Z	; ImVector<ImVec2>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UImVec2@@@@QAEXH@Z		; ImVector<ImVec2>::reserve
PUBLIC	?push_back@?$ImVector@UImVec2@@@@QAEXABUImVec2@@@Z ; ImVector<ImVec2>::push_back
PUBLIC	?pop_back@?$ImVector@UImVec2@@@@QAEXXZ		; ImVector<ImVec2>::pop_back
PUBLIC	??A?$ImVector@PAUImFont@@@@QAEAAPAUImFont@@H@Z	; ImVector<ImFont *>::operator[]
PUBLIC	?GetDebugName@ImFont@@QBEPBDXZ			; ImFont::GetDebugName
PUBLIC	_cosf
PUBLIC	_fmodf
PUBLIC	_sinf
PUBLIC	_sqrtf
PUBLIC	___local_stdio_printf_options
PUBLIC	__vsnprintf_l
PUBLIC	__vsnprintf
PUBLIC	__vsprintf_l
PUBLIC	_sprintf
PUBLIC	??$__builtin_array_init_helper@UImVec4@@@@YAXPAUImVec4@@I@Z ; __builtin_array_init_helper<ImVec4>
PUBLIC	??0?$ImVector@PAD@@QAE@XZ			; ImVector<char *>::ImVector<char *>
PUBLIC	??1?$ImVector@PAD@@QAE@XZ			; ImVector<char *>::~ImVector<char *>
PUBLIC	??A?$ImVector@PAD@@QAEAAPADH@Z			; ImVector<char *>::operator[]
PUBLIC	?clear@?$ImVector@PAD@@QAEXXZ			; ImVector<char *>::clear
PUBLIC	?begin@?$ImVector@PAD@@QAEPAPADXZ		; ImVector<char *>::begin
PUBLIC	?_grow_capacity@?$ImVector@PAD@@QBEHH@Z		; ImVector<char *>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PAD@@QAEXH@Z		; ImVector<char *>::reserve
PUBLIC	?push_back@?$ImVector@PAD@@QAEXABQAD@Z		; ImVector<char *>::push_back
PUBLIC	?erase@?$ImVector@PAD@@QAEPAPADPBQAD@Z		; ImVector<char *>::erase
PUBLIC	??0?$ImVector@PBD@@QAE@XZ			; ImVector<char const *>::ImVector<char const *>
PUBLIC	??1?$ImVector@PBD@@QAE@XZ			; ImVector<char const *>::~ImVector<char const *>
PUBLIC	??A?$ImVector@PBD@@QAEAAPBDH@Z			; ImVector<char const *>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@PBD@@QBEHH@Z		; ImVector<char const *>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PBD@@QAEXH@Z		; ImVector<char const *>::reserve
PUBLIC	?push_back@?$ImVector@PBD@@QAEXABQBD@Z		; ImVector<char const *>::push_back
PUBLIC	??0ExampleAppConsole@@QAE@XZ			; ExampleAppConsole::ExampleAppConsole
PUBLIC	??1ExampleAppConsole@@QAE@XZ			; ExampleAppConsole::~ExampleAppConsole
PUBLIC	?Stricmp@ExampleAppConsole@@SAHPBD0@Z		; ExampleAppConsole::Stricmp
PUBLIC	?Strnicmp@ExampleAppConsole@@SAHPBD0H@Z		; ExampleAppConsole::Strnicmp
PUBLIC	?Strdup@ExampleAppConsole@@SAPADPBD@Z		; ExampleAppConsole::Strdup
PUBLIC	?Strtrim@ExampleAppConsole@@SAXPAD@Z		; ExampleAppConsole::Strtrim
PUBLIC	?ClearLog@ExampleAppConsole@@QAEXXZ		; ExampleAppConsole::ClearLog
PUBLIC	?AddLog@ExampleAppConsole@@QAAXPBDZZ		; ExampleAppConsole::AddLog
PUBLIC	?Draw@ExampleAppConsole@@QAEXPBDPA_N@Z		; ExampleAppConsole::Draw
PUBLIC	?ExecCommand@ExampleAppConsole@@QAEXPBD@Z	; ExampleAppConsole::ExecCommand
PUBLIC	?TextEditCallbackStub@ExampleAppConsole@@SAHPAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallbackStub
PUBLIC	?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallback
PUBLIC	??0?$ImVector@H@@QAE@XZ				; ImVector<int>::ImVector<int>
PUBLIC	??1?$ImVector@H@@QAE@XZ				; ImVector<int>::~ImVector<int>
PUBLIC	??A?$ImVector@H@@QAEAAHH@Z			; ImVector<int>::operator[]
PUBLIC	?clear@?$ImVector@H@@QAEXXZ			; ImVector<int>::clear
PUBLIC	?_grow_capacity@?$ImVector@H@@QBEHH@Z		; ImVector<int>::_grow_capacity
PUBLIC	?reserve@?$ImVector@H@@QAEXH@Z			; ImVector<int>::reserve
PUBLIC	?push_back@?$ImVector@H@@QAEXABH@Z		; ImVector<int>::push_back
PUBLIC	??0ExampleAppLog@@QAE@XZ			; ExampleAppLog::ExampleAppLog
PUBLIC	?Clear@ExampleAppLog@@QAEXXZ			; ExampleAppLog::Clear
PUBLIC	?AddLog@ExampleAppLog@@QAAXPBDZZ		; ExampleAppLog::AddLog
PUBLIC	?Draw@ExampleAppLog@@QAEXPBDPA_N@Z		; ExampleAppLog::Draw
PUBLIC	??1ExampleAppLog@@QAE@XZ			; ExampleAppLog::~ExampleAppLog
PUBLIC	??0MyDocument@@QAE@PBD_NABUImVec4@@@Z		; MyDocument::MyDocument
PUBLIC	?DoOpen@MyDocument@@QAEXXZ			; MyDocument::DoOpen
PUBLIC	?DoQueueClose@MyDocument@@QAEXXZ		; MyDocument::DoQueueClose
PUBLIC	?DoForceClose@MyDocument@@QAEXXZ		; MyDocument::DoForceClose
PUBLIC	?DoSave@MyDocument@@QAEXXZ			; MyDocument::DoSave
PUBLIC	?DisplayContents@MyDocument@@SAXPAU1@@Z		; MyDocument::DisplayContents
PUBLIC	?DisplayContextMenu@MyDocument@@SAXPAU1@@Z	; MyDocument::DisplayContextMenu
PUBLIC	??0?$ImVector@UMyDocument@@@@QAE@XZ		; ImVector<MyDocument>::ImVector<MyDocument>
PUBLIC	??1?$ImVector@UMyDocument@@@@QAE@XZ		; ImVector<MyDocument>::~ImVector<MyDocument>
PUBLIC	??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
PUBLIC	?_grow_capacity@?$ImVector@UMyDocument@@@@QBEHH@Z ; ImVector<MyDocument>::_grow_capacity
PUBLIC	?reserve@?$ImVector@UMyDocument@@@@QAEXH@Z	; ImVector<MyDocument>::reserve
PUBLIC	?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back
PUBLIC	??0ExampleAppDocuments@@QAE@XZ			; ExampleAppDocuments::ExampleAppDocuments
PUBLIC	??1ExampleAppDocuments@@QAE@XZ			; ExampleAppDocuments::~ExampleAppDocuments
PUBLIC	??0?$ImVector@PAUMyDocument@@@@QAE@XZ		; ImVector<MyDocument *>::ImVector<MyDocument *>
PUBLIC	??1?$ImVector@PAUMyDocument@@@@QAE@XZ		; ImVector<MyDocument *>::~ImVector<MyDocument *>
PUBLIC	?empty@?$ImVector@PAUMyDocument@@@@QBE_NXZ	; ImVector<MyDocument *>::empty
PUBLIC	??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
PUBLIC	?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ	; ImVector<MyDocument *>::clear
PUBLIC	?_grow_capacity@?$ImVector@PAUMyDocument@@@@QBEHH@Z ; ImVector<MyDocument *>::_grow_capacity
PUBLIC	?reserve@?$ImVector@PAUMyDocument@@@@QAEXH@Z	; ImVector<MyDocument *>::reserve
PUBLIC	?push_back@?$ImVector@PAUMyDocument@@@@QAEXABQAUMyDocument@@@Z ; ImVector<MyDocument *>::push_back
PUBLIC	__JustMyCode_Default
PUBLIC	??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_13COJANIEC@?$AA0@				; `string'
PUBLIC	??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ ; `string'
PUBLIC	??_C@_1CC@IHACEFEE@?$AAI?$AAt?$AAe?$AAm?$AAs?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9@ ; `string'
PUBLIC	??_C@_09EEKGDCPH@?$DMunknown?$DO@		; `string'
PUBLIC	?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage
PUBLIC	??_C@_03NAEMJKHE@?$CI?$DP?$CJ@			; `string'
PUBLIC	??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5co@ ; `string'
PUBLIC	??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5@ ; `string'
PUBLIC	??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5@ ; `string'
PUBLIC	??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5@ ; `string'
PUBLIC	??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window@ ; `string'
PUBLIC	??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6@	; `string'
PUBLIC	??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4@ ; `string'
PUBLIC	??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5selec@ ; `string'
PUBLIC	??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut@ ; `string'
PUBLIC	??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4@ ; `string'
PUBLIC	??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4@	; `string'
PUBLIC	??_C@_0FC@FJHKJEAF@You?5can?5apply?5arithmetic?5operat@ ; `string'
PUBLIC	??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enable@ ; `string'
PUBLIC	??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4@	; `string'
PUBLIC	??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4@ ; `string'
PUBLIC	??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5wid@ ; `string'
PUBLIC	??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5@ ; `string'
PUBLIC	??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5o@ ; `string'
PUBLIC	??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4@ ; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPA_N@Z@4JA ; `ImGui::ShowDemoWindow'::`1'::__LINE__Var
PUBLIC	??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Ref@ ; `string'
PUBLIC	??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe@ ; `string'
PUBLIC	??_C@_0N@GJBKNEHA@Style?5Editor@		; `string'
PUBLIC	??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo@		; `string'
PUBLIC	??_C@_04IFEHPILC@Menu@				; `string'
PUBLIC	??_C@_08KJMBPHGD@Examples@			; `string'
PUBLIC	??_C@_0O@ECNFCDDH@Main?5menu?5bar@		; `string'
PUBLIC	??_C@_07PGLPGHFC@Console@			; `string'
PUBLIC	??_C@_03GGEOLGBL@Log@				; `string'
PUBLIC	??_C@_0O@JBJOEMFC@Simple?5layout@		; `string'
PUBLIC	??_C@_0BA@DNAHAJCI@Property?5editor@		; `string'
PUBLIC	??_C@_0BC@INJCBODH@Long?5text?5display@		; `string'
PUBLIC	??_C@_0BF@OHKJAELB@Auto?9resizing?5window@	; `string'
PUBLIC	??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window@ ; `string'
PUBLIC	??_C@_0P@IMGHCBNF@Simple?5overlay@		; `string'
PUBLIC	??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles@ ; `string'
PUBLIC	??_C@_0BB@MLNDPKFI@Custom?5rendering@		; `string'
PUBLIC	??_C@_09IBGBKIMC@Documents@			; `string'
PUBLIC	??_C@_05OENKALAF@Tools@				; `string'
PUBLIC	??_C@_07OKMHIPFF@Metrics@			; `string'
PUBLIC	??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui@		; `string'
PUBLIC	??_C@_08KHNILBGC@1?475?5WIP@			; `string'
PUBLIC	??_C@_0BM@OGBJOAAJ@dear?5imgui?5says?5hello?4?5?$CI?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_04DDFEFHOJ@Help@				; `string'
PUBLIC	??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3@		; `string'
PUBLIC	??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstratin@ ; `string'
PUBLIC	??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads@ ; `string'
PUBLIC	??_C@_0HK@IHDIDEEM@The?5?$CCTools?$CC?5menu?5above?5gives?5ac@ ; `string'
PUBLIC	??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3@		; `string'
PUBLIC	??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5i@ ; `string'
PUBLIC	??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4@ ; `string'
PUBLIC	??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the@ ; `string'
PUBLIC	??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4dear@ ; `string'
PUBLIC	??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@ ; `string'
PUBLIC	??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@ ; `string'
PUBLIC	??_C@_0M@NDGNNOFI@USER?5GUIDE?3@		; `string'
PUBLIC	??_C@_0O@PIILMNHI@Configuration@		; `string'
PUBLIC	??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2@	; `string'
PUBLIC	??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboa@ ; `string'
PUBLIC	??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepa@ ; `string'
PUBLIC	??_C@_0KE@MBIKOFFP@Required?5back?9end?5to?5feed?5in?5ga@ ; `string'
PUBLIC	??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMou@ ; `string'
PUBLIC	??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the@ ; `string'
PUBLIC	??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse@	; `string'
PUBLIC	??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO@ ; `string'
PUBLIC	??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCh@ ; `string'
PUBLIC	??_C@_0EC@DCPLBGPI@Instruct?5back?9end?5to?5not?5alter?5@ ; `string'
PUBLIC	??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink@ ; `string'
PUBLIC	??_C@_0EP@GBIAPNGK@Set?5to?5false?5to?5disable?5blinkin@ ; `string'
PUBLIC	??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges@ ; `string'
PUBLIC	??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from@ ; `string'
PUBLIC	??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBa@ ; `string'
PUBLIC	??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor@		; `string'
PUBLIC	??_C@_0BFL@ILCCFGGP@Instruct?5Dear?5ImGui?5to?5render?5a@ ; `string'
PUBLIC	??_C@_0O@GGPAPCP@Backend?5Flags@		; `string'
PUBLIC	??_C@_0LG@OFNCJLC@Those?5flags?5are?5set?5by?5the?5back@ ; `string'
PUBLIC	??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad@ ; `string'
PUBLIC	??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursor@ ; `string'
PUBLIC	??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos@ ; `string'
PUBLIC	??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtx@ ; `string'
PUBLIC	??_C@_05IHAFCALK@Style@				; `string'
PUBLIC	??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5access@ ; `string'
PUBLIC	??_C@_0BA@BMMAIOLM@Capture?1Logging@		; `string'
PUBLIC	??_C@_0JC@LGKFGNAK@The?5logging?5API?5redirects?5all?5t@ ; `string'
PUBLIC	??_C@_0GA@GFOLBJBL@Try?5opening?5any?5of?5the?5contents@ ; `string'
PUBLIC	??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogTex@ ; `string'
PUBLIC	??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboa@ ; `string'
PUBLIC	??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB@		; `string'
PUBLIC	??_C@_0P@FBBKILOB@Window?5options@		; `string'
PUBLIC	??_C@_0M@EABCFDNG@No?5titlebar@			; `string'
PUBLIC	??_C@_0N@GGGGKBFF@No?5scrollbar@		; `string'
PUBLIC	??_C@_07KBMDBGCH@No?5menu@			; `string'
PUBLIC	??_C@_07JGIJBGNK@No?5move@			; `string'
PUBLIC	??_C@_09HMNEIDKA@No?5resize@			; `string'
PUBLIC	??_C@_0M@PFMGNBM@No?5collapse@			; `string'
PUBLIC	??_C@_08DGAKPBEJ@No?5close@			; `string'
PUBLIC	??_C@_06KFENEDHJ@No?5nav@			; `string'
PUBLIC	??_C@_0O@EHIGJHPL@No?5background@		; `string'
PUBLIC	??_C@_0BC@FKMLNKJL@No?5bring?5to?5front@	; `string'
PUBLIC	?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA ; `ShowDemoWindowWidgets'::`1'::__LINE__Var
PUBLIC	??_C@_05EAJAAGNN@imgui@				; `string'
PUBLIC	??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ@ ; `string'
PUBLIC	??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI@ ; `string'
PUBLIC	??_C@_07DIHFNIOG@Widgets@			; `string'
PUBLIC	??_C@_05NIKDGMHP@Basic@				; `string'
PUBLIC	??_C@_06LKBCGDFD@Button@			; `string'
PUBLIC	??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB@ ; `string'
PUBLIC	??_C@_08PDFIPFLP@checkbox@			; `string'
PUBLIC	??_C@_07HJMAFCAJ@radio?5a@			; `string'
PUBLIC	??_C@_07FCONABMK@radio?5b@			; `string'
PUBLIC	??_C@_07ELPGDAIL@radio?5c@			; `string'
PUBLIC	??_C@_05BBIFMDEO@Click@				; `string'
PUBLIC	??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3@		; `string'
PUBLIC	??_C@_06EKMNOCAF@?$CD?$CDleft@			; `string'
PUBLIC	??_C@_07GKNPDGAE@?$CD?$CDright@			; `string'
PUBLIC	??_C@_02DPKJAMEF@?$CFd@				; `string'
PUBLIC	??_C@_0O@EKHBLLBD@Hover?5over?5me@		; `string'
PUBLIC	??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip@		; `string'
PUBLIC	??_C@_07LFBEAIAC@?9?5or?5me@			; `string'
PUBLIC	??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip@	; `string'
PUBLIC	??_C@_05HPADKKDG@Curve@				; `string'
PUBLIC	??_C@_05LPIJGKJ@Value@				; `string'
PUBLIC	??_C@_05IDCCNNGI@label@				; `string'
PUBLIC	??_C@_04OHNMNPPA@AAAA@				; `string'
PUBLIC	??_C@_04JLKCOHFE@BBBB@				; `string'
PUBLIC	??_C@_04GKHPCPH@CCCC@				; `string'
PUBLIC	??_C@_04GDFOJGBM@DDDD@				; `string'
PUBLIC	??_C@_04POFLIDLP@EEEE@				; `string'
PUBLIC	??_C@_04ICCFLLBL@FFFF@				; `string'
PUBLIC	??_C@_04BPCAKOLI@GGGG@				; `string'
PUBLIC	??_C@_04EJNHHCMN@HHHH@				; `string'
PUBLIC	??_C@_04NENCGHGO@IIII@				; `string'
PUBLIC	??_C@_04KIKMFPMK@JJJJ@				; `string'
PUBLIC	??_C@_04DFKJEKGJ@KKKK@				; `string'
PUBLIC	??_C@_07HGFDAEEO@LLLLLLL@			; `string'
PUBLIC	??_C@_04MNFFDLCB@MMMM@				; `string'
PUBLIC	??_C@_07DDNOFDDK@OOOOOOO@			; `string'
PUBLIC	??_C@_05LLEFIEMM@combo@				; `string'
PUBLIC	??_C@_0IA@DADAGMOI@Refer?5to?5the?5?$CCCombo?$CC?5section?5be@ ; `string'
PUBLIC	??_C@_0L@GKEMLLGG@input?5text@			; `string'
PUBLIC	??_C@_0BJJ@FMHDKCMG@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5t@ ; `string'
PUBLIC	??_C@_0BA@DCMOPOEB@enter?5text?5here@		; `string'
PUBLIC	??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ@ ; `string'
PUBLIC	??_C@_09KJGAAOJL@input?5int@			; `string'
PUBLIC	??_C@_0IG@EBGMOFJG@You?5can?5apply?5arithmetic?5operat@ ; `string'
PUBLIC	??_C@_04GFJLOHHD@?$CF?43f@			; `string'
PUBLIC	??_C@_0M@HLMFPLHI@input?5float@			; `string'
PUBLIC	??_C@_04GJMOAIJC@?$CF?48f@			; `string'
PUBLIC	??_C@_0N@HNPEBCJF@input?5double@		; `string'
PUBLIC	??_C@_02CGLCDNAE@?$CFe@				; `string'
PUBLIC	??_C@_0BB@MKDEHDDF@input?5scientific@		; `string'
PUBLIC	??_C@_0FH@NIEHKNDF@You?5can?5input?5value?5using?5the?5s@ ; `string'
PUBLIC	??_C@_0N@KKMOFJMF@input?5float3@		; `string'
PUBLIC	??_C@_08EAMJBIPC@drag?5int@			; `string'
PUBLIC	??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6H@ ; `string'
PUBLIC	??_C@_04FCMNJMCO@?$CFd?$CF?$CF@			; `string'
PUBLIC	??_C@_0BA@MCINAHBB@drag?5int?50?4?4100@		; `string'
PUBLIC	??_C@_0L@DLCOHHGO@drag?5float@			; `string'
PUBLIC	??_C@_08LHDHPMPH@?$CF?406f?5ns@			; `string'
PUBLIC	??_C@_0BB@CIODINPI@drag?5small?5float@		; `string'
PUBLIC	??_C@_0L@INJDAFHM@slider?5int@			; `string'
PUBLIC	??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4@ ; `string'
PUBLIC	??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f@	; `string'
PUBLIC	??_C@_0N@PNCIGDCI@slider?5float@		; `string'
PUBLIC	??_C@_04GANEPBPG@?$CF?44f@			; `string'
PUBLIC	??_C@_0BF@EFFJNHKJ@slider?5float?5?$CIcurve?$CJ@ ; `string'
PUBLIC	??_C@_08FKIHKODH@?$CF?40f?5deg@			; `string'
PUBLIC	??_C@_0N@EFIJIFM@slider?5angle@			; `string'
PUBLIC	??_C@_04OHLPDOFO@Fire@				; `string'
PUBLIC	??_C@_05IKBANCEK@Earth@				; `string'
PUBLIC	??_C@_03KHBMPEGA@Air@				; `string'
PUBLIC	??_C@_05EMKMBNJK@Water@				; `string'
PUBLIC	??_C@_07NBCGADJA@Unknown@			; `string'
PUBLIC	??_C@_0M@ENFPDMMO@slider?5enum@			; `string'
PUBLIC	??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramet@ ; `string'
PUBLIC	??_C@_07OCDFLNDK@color?51@			; `string'
PUBLIC	??_C@_0MA@GFIMMJPK@Click?5on?5the?5colored?5square?5to?5@ ; `string'
PUBLIC	??_C@_07MJBIOOPJ@color?52@			; `string'
PUBLIC	??_C@_05EBJDGKGA@Apple@				; `string'
PUBLIC	??_C@_06OJJIHNKI@Banana@			; `string'
PUBLIC	??_C@_06MKLLCMPJ@Cherry@			; `string'
PUBLIC	??_C@_04LFFBHHAI@Kiwi@				; `string'
PUBLIC	??_C@_05CNKNDDOO@Mango@				; `string'
PUBLIC	??_C@_06LMIDBFFB@Orange@			; `string'
PUBLIC	??_C@_09EBEMMGPP@Pineapple@			; `string'
PUBLIC	??_C@_0L@BNANDFPN@Strawberry@			; `string'
PUBLIC	??_C@_0L@JJNGHCMI@Watermelon@			; `string'
PUBLIC	??_C@_0BI@JHEMJDIG@listbox?6?$CIsingle?5select?$CJ@ ; `string'
PUBLIC	??_C@_05BMMGIDNN@Trees@				; `string'
PUBLIC	??_C@_0M@OABIBGBA@Basic?5trees@			; `string'
PUBLIC	??_C@_08GPGIPNJB@Child?5?$CFd@			; `string'
PUBLIC	??_C@_09KGLHLKML@blah?5blah@			; `string'
PUBLIC	??_C@_06HFKPFKMP@button@			; `string'
PUBLIC	??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes@ ; `string'
PUBLIC	??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5@ ; `string'
PUBLIC	??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow@ ; `string'
PUBLIC	??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDouble@ ; `string'
PUBLIC	??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWid@ ; `string'
PUBLIC	??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidt@ ; `string'
PUBLIC	??_C@_0CF@BINADAGB@Align?5label?5with?5current?5X?5posi@ ; `string'
PUBLIC	??_C@_06KPGIMOHP@Hello?$CB@			; `string'
PUBLIC	??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd@	; `string'
PUBLIC	??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah@	; `string'
PUBLIC	??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd@	; `string'
PUBLIC	??_C@_0BD@GBPHDMGC@Collapsing?5Headers@		; `string'
PUBLIC	??_C@_0BA@JOCPBPDO@Show?52nd?5header@		; `string'
PUBLIC	??_C@_06OENKJGA@Header@				; `string'
PUBLIC	??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd@	; `string'
PUBLIC	??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button@ ; `string'
PUBLIC	??_C@_0BA@PEMOHED@More?5content?5?$CFd@		; `string'
PUBLIC	??_C@_07DHNDKCGP@Bullets@			; `string'
PUBLIC	??_C@_0P@DEGHIHA@Bullet?5point?51@		; `string'
PUBLIC	??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5line@ ; `string'
PUBLIC	??_C@_09CGOFEACE@Tree?5node@			; `string'
PUBLIC	??_C@_0BF@FBMIEPNI@Another?5bullet?5point@	; `string'
PUBLIC	??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ@ ; `string'
PUBLIC	??_C@_04OJAHODMC@Text@				; `string'
PUBLIC	??_C@_0N@DOPJCPAP@Colored?5Text@		; `string'
PUBLIC	??_C@_04IDKACLOG@Pink@				; `string'
PUBLIC	??_C@_06ICCAKDNH@Yellow@			; `string'
PUBLIC	??_C@_08JGILNPHN@Disabled@			; `string'
PUBLIC	??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5store@ ; `string'
PUBLIC	??_C@_0O@CLIMKCMB@Word?5Wrapping@		; `string'
PUBLIC	??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5@ ; `string'
PUBLIC	??_C@_04GHNNFJCK@?$CF?40f@			; `string'
PUBLIC	??_C@_0L@NHCJIHMI@Wrap?5width@			; `string'
PUBLIC	??_C@_0BC@FPEPJKFB@Test?5paragraph?51?3@	; `string'
PUBLIC	??_C@_0JH@KIIFCPNC@The?5lazy?5dog?5is?5a?5good?5dog?4?5Thi@ ; `string'
PUBLIC	??_C@_0BC@FNAJCEAI@Test?5paragraph?52?3@	; `string'
PUBLIC	??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0d@ ; `string'
PUBLIC	??_C@_0L@KOGPBBGO@UTF?98?5Text@			; `string'
PUBLIC	??_C@_0MK@EHHBBDNA@CJK?5text?5will?5only?5appears?5if?5t@ ; `string'
PUBLIC	??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkaki@ ; `string'
PUBLIC	??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ@ ; `string'
PUBLIC	??_C@_0M@OKLFPIAG@UTF?98?5input@		; `string'
PUBLIC	??_C@_06EPMHLOBG@Images@			; `string'
PUBLIC	??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5fon@ ; `string'
PUBLIC	??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f@		; `string'
PUBLIC	??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@ ; `string'
PUBLIC	??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@ ; `string'
PUBLIC	??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4@ ; `string'
PUBLIC	??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4@	; `string'
PUBLIC	??_C@_05LMOJIBPK@Combo@				; `string'
PUBLIC	??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft@ ; `string'
PUBLIC	??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5@ ; `string'
PUBLIC	??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton@ ; `string'
PUBLIC	??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview@	; `string'
PUBLIC	??_C@_07HDIKCFGM@combo?51@			; `string'
PUBLIC	??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA@ ; `string'
PUBLIC	??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ@ ; `string'
PUBLIC	??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ@	; `string'
PUBLIC	??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ@	; `string'
PUBLIC	??_C@_0M@GOIEGLPE@Selectables@			; `string'
PUBLIC	??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable@	; `string'
PUBLIC	??_C@_0BD@BDENONE@2?4?5I?5am?5selectable@	; `string'
PUBLIC	??_C@_0BH@JKAIDAJJ@3?4?5I?5am?5not?5selectable@	; `string'
PUBLIC	??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable@	; `string'
PUBLIC	??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable@ ; `string'
PUBLIC	??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selecti@ ; `string'
PUBLIC	??_C@_09IEODADNK@Object?5?$CFd@			; `string'
PUBLIC	??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Selec@ ; `string'
PUBLIC	??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5m@ ; `string'
PUBLIC	??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sa@ ; `string'
PUBLIC	??_C@_06HIICBHNJ@main?4c@			; `string'
PUBLIC	??_C@_0N@NKEFLDLJ@?52?0345?5bytes@		; `string'
PUBLIC	??_C@_09JJLAOCPC@Hello?4cpp@			; `string'
PUBLIC	??_C@_0N@LDNEMMOG@12?0345?5bytes@		; `string'
PUBLIC	??_C@_07GGGNKCPB@Hello?4h@			; `string'
PUBLIC	??_C@_0L@JGCLAHBC@In?5columns@			; `string'
PUBLIC	??_C@_07BCJGKFOL@Item?5?$CFd@			; `string'
PUBLIC	??_C@_04FEKPLKKA@Grid@				; `string'
PUBLIC	??_C@_06IFGMFLK@Sailor@				; `string'
PUBLIC	??_C@_09FBMAGD@Alignment@			; `string'
PUBLIC	??_C@_0LO@OMOMIFEB@Alignment?5applies?5when?5a?5select@ ; `string'
PUBLIC	??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ@	; `string'
PUBLIC	??_C@_0L@LLAOMMOH@Text?5Input@			; `string'
PUBLIC	??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input@	; `string'
PUBLIC	??_C@_0NI@PLBNAOOK@You?5can?5use?5the?5ImGuiInputTextF@ ; `string'
PUBLIC	??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly@ ; `string'
PUBLIC	??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInp@ ; `string'
PUBLIC	??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFo@ ; `string'
PUBLIC	??_C@_08FDEOKKII@?$CD?$CDsource@		; `string'
PUBLIC	??_C@_0BE@EABDFJK@Filtered?5Text?5Input@	; `string'
PUBLIC	??_C@_07DLHCIBDH@default@			; `string'
PUBLIC	??_C@_07EEKBCPDP@decimal@			; `string'
PUBLIC	??_C@_0M@PLANEGDO@hexadecimal@			; `string'
PUBLIC	??_C@_09NMLHJAII@uppercase@			; `string'
PUBLIC	??_C@_08BFAFMKNB@no?5blank@			; `string'
PUBLIC	??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters@	; `string'
PUBLIC	??_C@_0P@CKJOHAFD@Password?5input@		; `string'
PUBLIC	??_C@_08NLHBPEGP@password@			; `string'
PUBLIC	??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6@ ; `string'
PUBLIC	??_C@_0L@DGGOBGAB@?$DMpassword?$DO@		; `string'
PUBLIC	??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ@	; `string'
PUBLIC	??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ@	; `string'
PUBLIC	??_C@_0BA@PGEBLBNL@Resize?5Callback@		; `string'
PUBLIC	??_C@_0LE@JOHBHMHP@Demonstrate?5using?5ImGuiInputTex@ ; `string'
PUBLIC	??_C@_07MDDMIGJK@?$CD?$CDMyStr@			; `string'
PUBLIC	??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0O@LEBMLIEA@Plots?5Widgets@		; `string'
PUBLIC	??_C@_07CCNCPHDL@Animate@			; `string'
PUBLIC	??_C@_0M@LJPKANLB@Frame?5Times@			; `string'
PUBLIC	??_C@_06BECIMFEF@avg?5?$CFf@			; `string'
PUBLIC	??_C@_05DDHCCCLJ@Lines@				; `string'
PUBLIC	??_C@_09NBOAEPFB@Histogram@			; `string'
PUBLIC	??_C@_08OLJDEBGC@Sin?$AASaw?$AA@		; `string'
PUBLIC	??_C@_04HPNHAEOP@func@				; `string'
PUBLIC	??_C@_0N@LHCNOOOP@Sample?5count@		; `string'
PUBLIC	??_C@_0N@HDMPBJBE@Progress?5Bar@		; `string'
PUBLIC	??_C@_05LCKIIOJE@?$CFd?1?$CFd@			; `string'
PUBLIC	??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets@	; `string'
PUBLIC	??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview@	; `string'
PUBLIC	??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview@	; `string'
PUBLIC	??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop@	; `string'
PUBLIC	??_C@_0BC@EJIAMDNC@With?5Options?5Menu@		; `string'
PUBLIC	??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5c@ ; `string'
PUBLIC	??_C@_08FMJOEAGN@With?5HDR@			; `string'
PUBLIC	??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5l@ ; `string'
PUBLIC	??_C@_0O@NOEDKBGC@Color?5widget?3@		; `string'
PUBLIC	??_C@_0GI@PMPMCJLF@Click?5on?5the?5colored?5square?5to?5@ ; `string'
PUBLIC	??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1@		; `string'
PUBLIC	??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3@ ; `string'
PUBLIC	??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2@		; `string'
PUBLIC	??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display@ ; `string'
PUBLIC	??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f@		; `string'
PUBLIC	??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3@ ; `string'
PUBLIC	??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_No@ ; `string'
PUBLIC	??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3@		; `string'
PUBLIC	??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker@ ; `string'
PUBLIC	??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b@		; `string'
PUBLIC	??_C@_07GDPBMLLI@Palette@			; `string'
PUBLIC	??_C@_08KFPGOGIA@mypicker@			; `string'
PUBLIC	??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5@ ; `string'
PUBLIC	??_C@_08HHEANBBL@?$CD?$CDpicker@		; `string'
PUBLIC	??_C@_07EDIFFIJI@Current@			; `string'
PUBLIC	??_C@_09CDENILGE@?$CD?$CDcurrent@		; `string'
PUBLIC	??_C@_08CAGLMDLD@Previous@			; `string'
PUBLIC	??_C@_0L@JEAALFFH@?$CD?$CDprevious@		; `string'
PUBLIC	??_C@_09DDJBIEE@?$CD?$CDpalette@		; `string'
PUBLIC	??_C@_06LFKNFKEK@_COL3F@			; `string'
PUBLIC	??_C@_06LAOCEMMP@_COL4F@			; `string'
PUBLIC	??_C@_0BD@NCDFBPJC@Color?5button?5only?3@	; `string'
PUBLIC	??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c@		; `string'
PUBLIC	??_C@_0O@IPOAJHA@Color?5picker?3@		; `string'
PUBLIC	??_C@_0L@EACIJKCC@With?5Alpha@			; `string'
PUBLIC	??_C@_0P@HFPOLAHI@With?5Alpha?5Bar@		; `string'
PUBLIC	??_C@_0BC@IIIMIJGF@With?5Side?5Preview@		; `string'
PUBLIC	??_C@_0P@CEAKBNI@With?5Ref?5Color@		; `string'
PUBLIC	??_C@_0L@LOHJOGGK@?$CD?$CDRefColor@		; `string'
PUBLIC	??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5@ ; `string'
PUBLIC	??_C@_0N@OFPFGAFL@Display?5Mode@		; `string'
PUBLIC	??_C@_0BAP@CCFGMMGB@ColorEdit?5defaults?5to?5displayin@ ; `string'
PUBLIC	??_C@_0DI@OEJFDCPH@Auto?1Current?$AAHue?5bar?5?$CL?5SV?5rect?$AA@ ; `string'
PUBLIC	??_C@_0M@HAMIGHD@Picker?5Mode@			; `string'
PUBLIC	??_C@_0DA@NLCBNAAH@User?5can?5right?9click?5the?5picker@ ; `string'
PUBLIC	??_C@_0L@GICMBKFD@MyColor?$CD?$CD4@		; `string'
PUBLIC	??_C@_0BP@JHHHIHGA@Programmatically?5set?5defaults?3@ ; `string'
PUBLIC	??_C@_0BFE@MHBDKCN@SetColorEditOptions?$CI?$CJ?5is?5design@ ; `string'
PUBLIC	??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar@ ; `string'
PUBLIC	??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Whee@ ; `string'
PUBLIC	??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors@	; `string'
PUBLIC	??_C@_0BDF@MKEKOCPP@By?5default?0?5colors?5are?5given?5to@ ; `string'
PUBLIC	??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3@ ; `string'
PUBLIC	??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1@ ; `string'
PUBLIC	??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1@ ; `string'
PUBLIC	??_C@_0P@PMCJHJ@Raw?5HSV?5values@		; `string'
PUBLIC	??_C@_0O@JEFPADJJ@Range?5Widgets@		; `string'
PUBLIC	??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF@	; `string'
PUBLIC	??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF@	; `string'
PUBLIC	??_C@_05CCGOGOBM@range@				; `string'
PUBLIC	??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units@		; `string'
PUBLIC	??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units@		; `string'
PUBLIC	??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ@ ; `string'
PUBLIC	??_C@_0L@PAJDALGN@Data?5Types@			; `string'
PUBLIC	??_C@_06OFIAEEBG@Drags?3@			; `string'
PUBLIC	??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450@ ; `string'
PUBLIC	??_C@_0KL@BPNBHIKN@As?5with?5every?5widgets?5in?5dear?5i@ ; `string'
PUBLIC	??_C@_07LMCLPNLL@drag?5s8@			; `string'
PUBLIC	??_C@_05MMEBHIBO@?$CFu?5ms@			; `string'
PUBLIC	??_C@_07LIKGIBAJ@drag?5u8@			; `string'
PUBLIC	??_C@_08NKMCOLAD@drag?5s16@			; `string'
PUBLIC	??_C@_08PPKJLENP@drag?5u16@			; `string'
PUBLIC	??_C@_08LNCKPKGJ@drag?5s32@			; `string'
PUBLIC	??_C@_08JIEBKFLF@drag?5u32@			; `string'
PUBLIC	??_C@_08ONLLJPAE@drag?5s64@			; `string'
PUBLIC	??_C@_08MINAMANI@drag?5u64@			; `string'
PUBLIC	??_C@_02NJPGOMH@?$CFf@				; `string'
PUBLIC	??_C@_0O@NFIBPMBK@drag?5float?5?$FO2@		; `string'
PUBLIC	??_C@_0FL@DBMGDFGC@You?5can?5use?5the?5?8power?8?5paramet@ ; `string'
PUBLIC	??_C@_0M@PBAPOGLA@?$CF?410f?5grams@		; `string'
PUBLIC	??_C@_0M@IJGAEMEI@drag?5double@			; `string'
PUBLIC	??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51@	; `string'
PUBLIC	??_C@_0P@EEJHEFFF@drag?5double?5?$FO2@		; `string'
PUBLIC	??_C@_07BBLEOMAH@Sliders@			; `string'
PUBLIC	??_C@_0P@BGDAIEKI@slider?5s8?5full@		; `string'
PUBLIC	??_C@_02GMHACPFF@?$CFu@				; `string'
PUBLIC	??_C@_0P@NAFPINCP@slider?5u8?5full@		; `string'
PUBLIC	??_C@_0BA@NJECJBBM@slider?5s16?5full@		; `string'
PUBLIC	??_C@_0BA@KKFIOIJG@slider?5u16?5full@		; `string'
PUBLIC	??_C@_0P@LPLLDPN@slider?5s32?5low@		; `string'
PUBLIC	??_C@_0BA@KCOOMONB@slider?5s32?5high@		; `string'
PUBLIC	??_C@_0BA@GPCILCHC@slider?5s32?5full@		; `string'
PUBLIC	??_C@_0P@MNJELKHK@slider?5u32?5low@		; `string'
PUBLIC	??_C@_0BA@NBPELHFL@slider?5u32?5high@		; `string'
PUBLIC	??_C@_0BA@BMDCMLPI@slider?5u32?5full@		; `string'
PUBLIC	??_C@_05LLAMLEHD@?$CFI64d@			; `string'
PUBLIC	??_C@_0P@IPJKHPEH@slider?5s64?5low@		; `string'
PUBLIC	??_C@_0BA@IJNOPFIP@slider?5s64?5high@		; `string'
PUBLIC	??_C@_0BA@EEBIIJCM@slider?5s64?5full@		; `string'
PUBLIC	??_C@_08GGAHJCGP@?$CFI64u?5ms@			; `string'
PUBLIC	??_C@_0P@EJPFHGMA@slider?5u64?5low@		; `string'
PUBLIC	??_C@_0BA@PKMEIMAF@slider?5u64?5high@		; `string'
PUBLIC	??_C@_0BA@DHACPAKG@slider?5u64?5full@		; `string'
PUBLIC	??_C@_0BB@CCICNGDA@slider?5float?5low@		; `string'
PUBLIC	??_C@_05DIPGONMJ@?$CF?410f@			; `string'
PUBLIC	??_C@_0BD@DLKEDEFL@slider?5float?5low?$FO2@	; `string'
PUBLIC	??_C@_0BC@EHBCAJLJ@slider?5float?5high@		; `string'
PUBLIC	??_C@_0BC@NEJIDBJN@slider?5double?5low@		; `string'
PUBLIC	??_C@_0BE@BOGDHHDO@slider?5double?5low?$FO2@	; `string'
PUBLIC	??_C@_08NHECNFJD@?$CFe?5grams@			; `string'
PUBLIC	??_C@_0BD@OPIDMMAL@slider?5double?5high@	; `string'
PUBLIC	??_C@_06HDCHCENJ@Inputs@			; `string'
PUBLIC	??_C@_0BC@HEADHDLD@Show?5step?5buttons@		; `string'
PUBLIC	??_C@_08HGJIKBLN@input?5s8@			; `string'
PUBLIC	??_C@_08HCBFNNAP@input?5u8@			; `string'
PUBLIC	??_C@_09DDGLPNGK@input?5s16@			; `string'
PUBLIC	??_C@_09BGAAKCLG@input?5u16@			; `string'
PUBLIC	??_C@_09FEIDOMAA@input?5s32@			; `string'
PUBLIC	??_C@_04JIMNDDED@?$CF08X@			; `string'
PUBLIC	??_C@_0O@EKPJHNHM@input?5s32?5hex@		; `string'
PUBLIC	??_C@_09HBOILDNM@input?5u32@			; `string'
PUBLIC	??_C@_0O@IMJGHEPL@input?5u32?5hex@		; `string'
PUBLIC	??_C@_09EBCIJGN@input?5s64@			; `string'
PUBLIC	??_C@_09CBHJNGLB@input?5u64@			; `string'
PUBLIC	??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets@	; `string'
PUBLIC	??_C@_0N@LDNFGIIE@input?5float2@		; `string'
PUBLIC	??_C@_0M@EHEBDGFJ@drag?5float2@			; `string'
PUBLIC	??_C@_0O@NIDINEOI@slider?5float2@		; `string'
PUBLIC	??_C@_0L@IKAEHOLD@input?5int2@			; `string'
PUBLIC	??_C@_09LOIDAOFJ@drag?5int2@			; `string'
PUBLIC	??_C@_0M@LEEOPKGD@slider?5int2@			; `string'
PUBLIC	??_C@_0M@FOFKAHBI@drag?5float3@			; `string'
PUBLIC	??_C@_0O@MBCDOFKJ@slider?5float3@		; `string'
PUBLIC	??_C@_0L@JDBPEPPC@input?5int3@			; `string'
PUBLIC	??_C@_09KHJIDPBI@drag?5int3@			; `string'
PUBLIC	??_C@_0M@KNFFMLCC@slider?5int3@			; `string'
PUBLIC	??_C@_0N@OFIPMPAC@input?5float4@		; `string'
PUBLIC	??_C@_0M@BBBLJBNP@drag?5float4@			; `string'
PUBLIC	??_C@_0O@IOGCHDGO@slider?5float4@		; `string'
PUBLIC	??_C@_0L@NMFONJDF@input?5int4@			; `string'
PUBLIC	??_C@_09OINJKJNP@drag?5int4@			; `string'
PUBLIC	??_C@_0M@OCBEFNOF@slider?5int4@			; `string'
PUBLIC	??_C@_0BB@EAIBMPEL@Vertical?5Sliders@		; `string'
PUBLIC	??_C@_05GFAJOEB@?$CD?$CDint@			; `string'
PUBLIC	??_C@_04BOPCFCPC@set1@				; `string'
PUBLIC	??_C@_00CNPNBAHC@@				; `string'
PUBLIC	??_C@_03CPFCAGPK@?$CD?$CDv@			; `string'
PUBLIC	??_C@_04DFNPABDB@set2@				; `string'
PUBLIC	??_C@_04CMMEDAHA@set3@				; `string'
PUBLIC	??_C@_08OPMLCCJJ@?$CF?42f?6sec@			; `string'
PUBLIC	??_C@_0O@NPGBLOMK@Drag?5and?5Drop@		; `string'
PUBLIC	??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widge@ ; `string'
PUBLIC	??_C@_0CH@FOFLCNFN@You?5can?5drag?5from?5the?5colored?5s@ ; `string'
PUBLIC	??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5item@ ; `string'
PUBLIC	??_C@_04OPMHGHMB@Copy@				; `string'
PUBLIC	??_C@_04LCANPIEP@Move@				; `string'
PUBLIC	??_C@_04NGKMPNDN@Swap@				; `string'
PUBLIC	??_C@_0O@IBJLLBID@DND_DEMO_CELL@		; `string'
PUBLIC	??_C@_07CFHHFHOL@Copy?5?$CFs@			; `string'
PUBLIC	??_C@_07EDLENMEH@Move?5?$CFs@			; `string'
PUBLIC	??_C@_07MIGHAHCG@Swap?5?$CFs@			; `string'
PUBLIC	??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi@ ; `string'
PUBLIC	??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ@ ; `string'
PUBLIC	??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5@ ; `string'
PUBLIC	??_C@_0CO@NBHMOIFJ@Querying?5Status?5?$CIActive?1Focused@ ; `string'
PUBLIC	??_C@_0JG@MDBHHAIF@Text?$AAButton?$AAButton?5?$CIw?1?5repeat?$CJ?$AA@ ; `string'
PUBLIC	??_C@_09DBIMNOFJ@Item?5Type@			; `string'
PUBLIC	??_C@_0FB@PLFPNHBO@Testing?5how?5various?5types?5of?5it@ ; `string'
PUBLIC	??_C@_0L@HEHKMKDF@ITEM?3?5Text@			; `string'
PUBLIC	??_C@_0N@KDFNBBDI@ITEM?3?5Button@		; `string'
PUBLIC	??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox@		; `string'
PUBLIC	??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat@		; `string'
PUBLIC	??_C@_0BA@HPKEIJD@ITEM?3?5InputText@		; `string'
PUBLIC	??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat@		; `string'
PUBLIC	??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3@		; `string'
PUBLIC	??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4@		; `string'
PUBLIC	??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem@		; `string'
PUBLIC	??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode@		; `string'
PUBLIC	??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNode@ ; `string'
PUBLIC	??_C@_0O@DECMNPJF@ITEM?3?5ListBox@		; `string'
PUBLIC	??_C@_0CAA@CDNKPHBM@Return?5value?5?$DN?5?$CFd?6IsItemFocused@ ; `string'
PUBLIC	??_C@_0EA@FIPEGKJF@Embed?5everything?5inside?5a?5child@ ; `string'
PUBLIC	??_C@_0M@KCHHLPPE@outer_child@			; `string'
PUBLIC	??_C@_0KP@HKEFGHBG@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@ ; `string'
PUBLIC	??_C@_0BEP@BNECLKFC@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@ ; `string'
PUBLIC	??_C@_05GPGNDLEK@child@				; `string'
PUBLIC	??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5fo@ ; `string'
PUBLIC	??_C@_05JLNEMJLN@dummy@				; `string'
PUBLIC	??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begi@ ; `string'
PUBLIC	??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests@ ; `string'
PUBLIC	??_C@_05LGELBCGM@Close@				; `string'
PUBLIC	??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CF@ ; `string'
PUBLIC	??_C@_06KMHOJANB@Layout@			; `string'
PUBLIC	??_C@_0O@CCLKLEED@Child?5windows@		; `string'
PUBLIC	??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into@ ; `string'
PUBLIC	??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel@	; `string'
PUBLIC	??_C@_0N@PGMIMFJH@Disable?5Menu@		; `string'
PUBLIC	??_C@_04BNGNMAK@Goto@				; `string'
PUBLIC	??_C@_06JMBAAABB@?$CD?$CDLine@			; `string'
PUBLIC	??_C@_06JPIGPLJL@Child1@			; `string'
PUBLIC	??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region@ ; `string'
PUBLIC	??_C@_06LEKLKIFI@Child2@			; `string'
PUBLIC	??_C@_04OHGLKFFN@?$CF03d@			; `string'
PUBLIC	??_C@_04EPOOCEMM@blah@				; `string'
PUBLIC	??_C@_0N@NPCHMHMN@Some?5test?5?$CFd@		; `string'
PUBLIC	??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0@ ; `string'
PUBLIC	??_C@_0O@PINHNBJ@Widgets?5Width@		; `string'
PUBLIC	??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI@ ; `string'
PUBLIC	??_C@_0N@BANGKKCL@Fixed?5width?4@		; `string'
PUBLIC	??_C@_08ENBOPPKM@float?$CD?$CD1@		; `string'
PUBLIC	??_C@_0DI@PLEIEGIE@SetNextItemWidth?1PushItemWidth?$CI@ ; `string'
PUBLIC	??_C@_0BG@HBJEDPEN@Half?5of?5window?5width?4@	; `string'
PUBLIC	??_C@_08GGDDKMGP@float?$CD?$CD2@		; `string'
PUBLIC	??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CI@ ; `string'
PUBLIC	??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5rig@ ; `string'
PUBLIC	??_C@_08HPCIJNCO@float?$CD?$CD3@		; `string'
PUBLIC	??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI@ ; `string'
PUBLIC	??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100@ ; `string'
PUBLIC	??_C@_08DAGJALOJ@float?$CD?$CD4@		; `string'
PUBLIC	??_C@_0CD@JMHOPAFH@SetNextItemWidth?1PushItemWidth?$CI@ ; `string'
PUBLIC	??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge@	; `string'
PUBLIC	??_C@_09LOBKLHLF@?$CD?$CDfloat5a@		; `string'
PUBLIC	??_C@_09JFDHOEHG@?$CD?$CDfloat5b@		; `string'
PUBLIC	??_C@_09IMCMNFDH@?$CD?$CDfloat5c@		; `string'
PUBLIC	??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout@	; `string'
PUBLIC	??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5@ ; `string'
PUBLIC	??_C@_0BB@CPONELNL@Two?5items?3?5Hello@		; `string'
PUBLIC	??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello@	; `string'
PUBLIC	??_C@_0P@PEKJFFJL@Normal?5buttons@		; `string'
PUBLIC	??_C@_0M@IAINFGJF@Corniflower@			; `string'
PUBLIC	??_C@_0O@JIDOKED@Small?5buttons@		; `string'
PUBLIC	??_C@_0O@DOOOCPOJ@Like?5this?5one@		; `string'
PUBLIC	??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4@ ; `string'
PUBLIC	??_C@_07KDGBBGOD@Aligned@			; `string'
PUBLIC	??_C@_05EFIMCDIL@x?$DN150@			; `string'
PUBLIC	??_C@_05OJEOCJOL@x?$DN300@			; `string'
PUBLIC	??_C@_02IGABPKMB@My@				; `string'
PUBLIC	??_C@_06MNPBPLDE@Tailor@			; `string'
PUBLIC	??_C@_02HLOHLKJH@Is@				; `string'
PUBLIC	??_C@_04NKJFLIBG@Rich@				; `string'
PUBLIC	??_C@_01MMEEDKFM@X@				; `string'
PUBLIC	??_C@_01NFFPALBN@Y@				; `string'
PUBLIC	??_C@_01POHCFINO@Z@				; `string'
PUBLIC	??_C@_06OHPCMELK@Lists?3@			; `string'
PUBLIC	??_C@_01FHEEJDEE@A@				; `string'
PUBLIC	??_C@_01HMGJMAIH@B@				; `string'
PUBLIC	??_C@_0BD@CAEJLMBE@Manually?5wrapping?3@	; `string'
PUBLIC	??_C@_03ELMLMPLG@Box@				; `string'
PUBLIC	??_C@_04DIJFMEPE@Tabs@				; `string'
PUBLIC	??_C@_08BHPFJKBJ@MyTabBar@			; `string'
PUBLIC	??_C@_07PJEDDDBE@Avocado@			; `string'
PUBLIC	??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5b@ ; `string'
PUBLIC	??_C@_08LMFMBPKH@Broccoli@			; `string'
PUBLIC	??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5@ ; `string'
PUBLIC	??_C@_08FIHABPKG@Cucumber@			; `string'
PUBLIC	??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5@ ; `string'
PUBLIC	??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button@ ; `string'
PUBLIC	??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable@ ; `string'
PUBLIC	??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewT@ ; `string'
PUBLIC	??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBu@ ; `string'
PUBLIC	??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMid@ ; `string'
PUBLIC	??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyR@ ; `string'
PUBLIC	??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicyS@ ; `string'
PUBLIC	??_C@_09JNADJLBG@Artichoke@			; `string'
PUBLIC	??_C@_08NACLCGIP@Beetroot@			; `string'
PUBLIC	??_C@_06LGPLDCHA@Celery@			; `string'
PUBLIC	??_C@_06NBIPACBO@Daikon@			; `string'
PUBLIC	??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB@ ; `string'
PUBLIC	??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4@	; `string'
PUBLIC	??_C@_06LCLFDFOL@Groups@			; `string'
PUBLIC	??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5th@ ; `string'
PUBLIC	??_C@_03GFCJIGAI@AAA@				; `string'
PUBLIC	??_C@_03FOPHMEHM@BBB@				; `string'
PUBLIC	??_C@_03POJCPIGP@CCC@				; `string'
PUBLIC	??_C@_03CJELEAJE@DDD@				; `string'
PUBLIC	??_C@_03IJCOHMIH@EEE@				; `string'
PUBLIC	??_C@_0BE@GCGPENCF@First?5group?5hovered@	; `string'
PUBLIC	??_C@_08NDEOOAHA@?$CD?$CDvalues@		; `string'
PUBLIC	??_C@_06DHJAPAEE@ACTION@			; `string'
PUBLIC	??_C@_08HBCMJOON@REACTION@			; `string'
PUBLIC	??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD@		; `string'
PUBLIC	??_C@_04PPBEGPNI@List@				; `string'
PUBLIC	??_C@_08KLEPBNHL@Selected@			; `string'
PUBLIC	??_C@_0N@FODJADJE@Not?5Selected@		; `string'
PUBLIC	??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment@	; `string'
PUBLIC	??_C@_0P@FLJDDPLM@Text?5baseline?3@		; `string'
PUBLIC	??_C@_0MN@BCGLJGPG@This?5is?5testing?5the?5vertical?5al@ ; `string'
PUBLIC	??_C@_0M@HEDLMKK@KO?5Blahblah@			; `string'
PUBLIC	??_C@_0BB@GBEAAIAC@Some?5framed?5item@		; `string'
PUBLIC	??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mi@ ; `string'
PUBLIC	??_C@_0M@LEJMPEFH@OK?5Blahblah@			; `string'
PUBLIC	??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding@ ; `string'
PUBLIC	??_C@_07FENKGLPN@TEST?$CD?$CD1@			; `string'
PUBLIC	??_C@_04OIKJMBFP@TEST@				; `string'
PUBLIC	??_C@_07HPPHDIDO@TEST?$CD?$CD2@			; `string'
PUBLIC	??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item@ ; `string'
PUBLIC	??_C@_07MDGCNPKG@Item?$CD?$CD1@			; `string'
PUBLIC	??_C@_04BGCMBJDA@Item@				; `string'
PUBLIC	??_C@_07OIEPIMGF@Item?$CD?$CD2@			; `string'
PUBLIC	??_C@_07PBFELNCE@Item?$CD?$CD3@			; `string'
PUBLIC	??_C@_0BB@IKLHLLAO@Multi?9line?5text?3@		; `string'
PUBLIC	??_C@_0O@LPFJLNGJ@One?6Two?6Three@		; `string'
PUBLIC	??_C@_0M@MEHCJFNA@Hello?6World@			; `string'
PUBLIC	??_C@_06JNLLJDDG@HOP?$CD?$CD1@			; `string'
PUBLIC	??_C@_06LGJGMAPF@HOP?$CD?$CD2@			; `string'
PUBLIC	??_C@_0M@OFIEFPON@Misc?5items?3@		; `string'
PUBLIC	??_C@_05FMIAGJLC@80x80@				; `string'
PUBLIC	??_C@_05OIMGOJDP@50x50@				; `string'
PUBLIC	??_C@_08DHDFAMNE@Button?$CI?$CJ@		; `string'
PUBLIC	??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ@		; `string'
PUBLIC	??_C@_09JNECCGKE@Button?$CD?$CD1@		; `string'
PUBLIC	??_C@_07FHFCIGOP@Node?$CD?$CD1@			; `string'
PUBLIC	??_C@_09CCOCANBA@Item?5?$CFd?4?4@		; `string'
PUBLIC	??_C@_07HMHPNFCM@Node?$CD?$CD2@			; `string'
PUBLIC	??_C@_09LGGPHFGH@Button?$CD?$CD2@		; `string'
PUBLIC	??_C@_09KPHEEECG@Button?$CD?$CD3@		; `string'
PUBLIC	??_C@_0M@DABAODPF@Bullet?5text@			; `string'
PUBLIC	??_C@_04OKAPPFIB@Node@				; `string'
PUBLIC	??_C@_09OADFNCOB@Button?$CD?$CD4@		; `string'
PUBLIC	??_C@_09LFBMELOM@Scrolling@			; `string'
PUBLIC	??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScro@ ; `string'
PUBLIC	??_C@_0L@ODNEMNHD@Decoration@			; `string'
PUBLIC	??_C@_0GM@GBNFBEFB@We?5expose?5this?5for?5testing?5beca@ ; `string'
PUBLIC	??_C@_05BFDCPAGB@Track@				; `string'
PUBLIC	??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd@		; `string'
PUBLIC	??_C@_06PDMOEKMO@?$CD?$CDitem@			; `string'
PUBLIC	??_C@_0O@EDOJIGBC@Scroll?5Offset@		; `string'
PUBLIC	??_C@_08DGGLGIAM@?$CL?$CF?40f?5px@		; `string'
PUBLIC	??_C@_05FFNMOAPG@?$CD?$CDoff@			; `string'
PUBLIC	??_C@_0O@CGNNKBMG@Scroll?5To?5Pos@		; `string'
PUBLIC	??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px@	; `string'
PUBLIC	??_C@_05GFMCHKKE@?$CD?$CDpos@			; `string'
PUBLIC	??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling@	; `string'
PUBLIC	??_C@_03PGGAENPN@Top@				; `string'
PUBLIC	??_C@_03EOMKOHFF@25?$CF@			; `string'
PUBLIC	??_C@_06NOADDNNE@Center@			; `string'
PUBLIC	??_C@_03HJBEBHGH@75?$CF@			; `string'
PUBLIC	??_C@_06DDHCBBGN@Bottom@			; `string'
PUBLIC	??_C@_03FIKCJHKP@abc@				; `string'
PUBLIC	??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f@		; `string'
PUBLIC	??_C@_0CAK@JJECNJPI@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScro@ ; `string'
PUBLIC	??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling@	; `string'
PUBLIC	??_C@_04KPCPLBPL@Left@				; `string'
PUBLIC	??_C@_05DADPALEM@Right@				; `string'
PUBLIC	??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f@	; `string'
PUBLIC	??_C@_0NL@PPAIPOMM@Horizontal?5scrolling?5for?5a?5wind@ ; `string'
PUBLIC	??_C@_09PKEBEIDM@scrolling@			; `string'
PUBLIC	??_C@_08GLBPKMPD@FizzBuzz@			; `string'
PUBLIC	??_C@_04CEPGGBHI@Fizz@				; `string'
PUBLIC	??_C@_04MLLJCPJP@Buzz@				; `string'
PUBLIC	??_C@_02FODMEDOG@?$DM?$DM@			; `string'
PUBLIC	??_C@_0BB@HICDBOJF@Scroll?5from?5code@		; `string'
PUBLIC	??_C@_02GPIOPFAK@?$DO?$DO@			; `string'
PUBLIC	??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5d@ ; `string'
PUBLIC	??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5w@ ; `string'
PUBLIC	??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react@ ; `string'
PUBLIC	??_C@_0M@PCJBMDND@H?9scrollbar@			; `string'
PUBLIC	??_C@_0L@DIDHCLKE@Tree?5nodes@			; `string'
PUBLIC	??_C@_0N@HDFBIJDK@Text?5wrapped@		; `string'
PUBLIC	??_C@_07IBCCJKML@Columns@			; `string'
PUBLIC	??_C@_07CHLOJOEF@Tab?5bar@			; `string'
PUBLIC	??_C@_05GIMBDOHM@Child@				; `string'
PUBLIC	??_C@_0BG@GEDBKKBK@Explicit?5content?5size@	; `string'
PUBLIC	??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f@ ; `string'
PUBLIC	??_C@_05NBKGABAK@?$CD?$CDcsx@			; `string'
PUBLIC	??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button@ ; `string'
PUBLIC	??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node@	; `string'
PUBLIC	??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4@ ; `string'
PUBLIC	??_C@_0BD@GOEDKDLO@Some?5tree?5contents@	; `string'
PUBLIC	??_C@_0BB@LBMIMLJO@CollapsingHeader@		; `string'
PUBLIC	??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5@ ; `string'
PUBLIC	??_C@_0L@CDOLGENO@Width?5?$CF?42f@		; `string'
PUBLIC	??_C@_05COLMCDPH@Hello@				; `string'
PUBLIC	??_C@_09DHLFJNGJ@OneOneOne@			; `string'
PUBLIC	??_C@_09BMOICMLJ@TwoTwoTwo@			; `string'
PUBLIC	??_C@_0BA@BGMNPICP@ThreeThreeThree@		; `string'
PUBLIC	??_C@_0N@GNNAMPMJ@FourFourFour@			; `string'
PUBLIC	??_C@_08LLKICGJM@Clipping@			; `string'
PUBLIC	??_C@_0BAK@JJMCOOGK@On?5a?5per?9widget?5basis?5we?5are?5oc@ ; `string'
PUBLIC	??_C@_04IAGNFIBA@size@				; `string'
PUBLIC	??_C@_0BB@BLJLNCGP@?$CIClick?5and?5drag?$CJ@	; `string'
PUBLIC	??_C@_07MGJIPBMD@?$CD?$CDdummy@			; `string'
PUBLIC	??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB@ ; `string'
PUBLIC	??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows@ ; `string'
PUBLIC	??_C@_06ENDEIGLN@Popups@			; `string'
PUBLIC	??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhi@ ; `string'
PUBLIC	??_C@_05BKABPFFI@Bream@				; `string'
PUBLIC	??_C@_07BNGOACBO@Haddock@			; `string'
PUBLIC	??_C@_08OFLHLLIP@Mackerel@			; `string'
PUBLIC	??_C@_07DOCMJKHB@Pollock@			; `string'
PUBLIC	??_C@_08EGAMPFAB@Tilefish@			; `string'
PUBLIC	??_C@_08NNBGNINF@Select?4?4@			; `string'
PUBLIC	??_C@_0BA@GGCCCMJM@my_select_popup@		; `string'
PUBLIC	??_C@_06PHEAPGKB@?$DMNone?$DO@			; `string'
PUBLIC	??_C@_08IKEIPKBP@Aquarium@			; `string'
PUBLIC	??_C@_08NINPLAO@Toggle?4?4@			; `string'
PUBLIC	??_C@_0BA@LJBKGLLI@my_toggle_popup@		; `string'
PUBLIC	??_C@_08GMNJJNGG@Sub?9menu@			; `string'
PUBLIC	??_C@_08PPLGDLFG@Click?5me@			; `string'
PUBLIC	??_C@_0N@IODHFNG@Tooltip?5here@			; `string'
PUBLIC	??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup@ ; `string'
PUBLIC	??_C@_0O@NAJLJJDJ@Stacked?5Popup@		; `string'
PUBLIC	??_C@_0O@CMMIFNBD@another?5popup@		; `string'
PUBLIC	??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4@ ; `string'
PUBLIC	??_C@_0M@GKGGLAGK@File?5Menu?4?4@		; `string'
PUBLIC	??_C@_0O@CMFGCCH@my_file_popup@			; `string'
PUBLIC	??_C@_0O@EGPMCJBG@Context?5menus@		; `string'
PUBLIC	??_C@_0CE@FFAOKKJB@Value?5?$DN?5?$CF?43f?5?$CI?$DM?9?9?5right?9click?5h@ ; `string'
PUBLIC	??_C@_0BC@LPLCKLLE@item?5context?5menu@		; `string'
PUBLIC	??_C@_0M@MLNNLOAO@Set?5to?5zero@		; `string'
PUBLIC	??_C@_09NJOBBCFG@Set?5to?5PI@			; `string'
PUBLIC	??_C@_07FGLEKONH@?$CD?$CDValue@			; `string'
PUBLIC	??_C@_0DP@BJIBGGDI@?$CIYou?5can?5also?5right?9click?5me?5to@ ; `string'
PUBLIC	??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton@ ; `string'
PUBLIC	??_C@_0L@MIFJAGAG@Edit?5name?3@			; `string'
PUBLIC	??_C@_06PEDNKACM@?$CD?$CDedit@			; `string'
PUBLIC	??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ@ ; `string'
PUBLIC	??_C@_06BEBKNACN@Modals@			; `string'
PUBLIC	??_C@_0FN@LBGEHGKO@Modal?5windows?5are?5like?5popups?5b@ ; `string'
PUBLIC	??_C@_08CPNCIMAF@Delete?4?4@			; `string'
PUBLIC	??_C@_07DCPPKMOD@Delete?$DP@			; `string'
PUBLIC	??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5@ ; `string'
PUBLIC	??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time@	; `string'
PUBLIC	??_C@_02GIPFHKNO@OK@				; `string'
PUBLIC	??_C@_06FMBNCPDL@Cancel@			; `string'
PUBLIC	??_C@_0BB@NNACGNLC@Stacked?5modals?4?4@		; `string'
PUBLIC	??_C@_09DMLDOIOE@Stacked?51@			; `string'
PUBLIC	??_C@_04PBAHLACE@File@				; `string'
PUBLIC	??_C@_0BA@DBBHCGNO@Dummy?5menu?5item@		; `string'
PUBLIC	??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Us@ ; `string'
PUBLIC	??_C@_05PEENBMOG@color@				; `string'
PUBLIC	??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4@	; `string'
PUBLIC	??_C@_09BHJOLLCH@Stacked?52@			; `string'
PUBLIC	??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB@ ; `string'
PUBLIC	??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window@ ; `string'
PUBLIC	??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5men@ ; `string'
PUBLIC	??_C@_03GBBIHDEJ@foo@				; `string'
PUBLIC	??_C@_06GCLBOGOD@CTRL?$CLM@			; `string'
PUBLIC	??_C@_09PDGIKJJH@Menu?5item@			; `string'
PUBLIC	??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window@ ; `string'
PUBLIC	??_C@_0BJ@JLFJACII@Disable?5tree?5indentation@	; `string'
PUBLIC	??_C@_0FD@EHJEKNDN@Disable?5the?5indenting?5of?5tree?5n@ ; `string'
PUBLIC	??_C@_0BA@KGDHMKCI@Without?5border?3@		; `string'
PUBLIC	??_C@_0L@GGDPAOBO@mycolumns3@			; `string'
PUBLIC	??_C@_0N@IEPPLKGA@With?5border?3@		; `string'
PUBLIC	??_C@_09IGOFLFMM@mycolumns@			; `string'
PUBLIC	??_C@_02OLOABKKD@ID@				; `string'
PUBLIC	??_C@_04FABLJDN@Name@				; `string'
PUBLIC	??_C@_04HMIIHGGM@Path@				; `string'
PUBLIC	??_C@_07BPEJBMFM@Hovered@			; `string'
PUBLIC	??_C@_03EHAPBBEA@One@				; `string'
PUBLIC	??_C@_03CJAPLBKL@Two@				; `string'
PUBLIC	??_C@_05OHMANGAP@Three@				; `string'
PUBLIC	??_C@_09MIFGPDGD@?1path?1one@			; `string'
PUBLIC	??_C@_09KGFGFDII@?1path?1two@			; `string'
PUBLIC	??_C@_0M@BHGNKNGD@?1path?1three@		; `string'
PUBLIC	??_C@_04OCCELDNI@?$CF04d@			; `string'
PUBLIC	??_C@_07PJFMDFHH@Borders@			; `string'
PUBLIC	??_C@_0L@NLMHJDCE@?$CFd?5columns@		; `string'
PUBLIC	??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count@	; `string'
PUBLIC	??_C@_0L@LMMKHPOB@horizontal@			; `string'
PUBLIC	??_C@_08NEOMLJGJ@vertical@			; `string'
PUBLIC	??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc@		; `string'
PUBLIC	??_C@_0L@OKGLPFJF@Avail?5?$CF?42f@		; `string'
PUBLIC	??_C@_0M@LBGPBMDK@Offset?5?$CF?42f@		; `string'
PUBLIC	??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5cli@ ; `string'
PUBLIC	??_C@_0M@CEFNMID@Mixed?5items@			; `string'
PUBLIC	??_C@_05IPHDHIPP@mixed@				; `string'
PUBLIC	??_C@_05OHAOKMNF@ImGui@				; `string'
PUBLIC	??_C@_03FAAAOPJM@red@				; `string'
PUBLIC	??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4@	; `string'
PUBLIC	??_C@_04OBGPFBCN@blue@				; `string'
PUBLIC	??_C@_0L@CDAKMJEM@Category?5A@			; `string'
PUBLIC	??_C@_0P@CNBMJDEI@Blah?5blah?5blah@		; `string'
PUBLIC	??_C@_0L@ICHJKIP@Category?5B@			; `string'
PUBLIC	??_C@_0L@BBDMKLMO@Category?5C@			; `string'
PUBLIC	??_C@_0O@FMIDKLNC@Word?9wrapping@		; `string'
PUBLIC	??_C@_0O@JBOHNDAK@word?9wrapping@		; `string'
PUBLIC	??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5@ ; `string'
PUBLIC	??_C@_0L@BOIODOOK@Hello?5Left@			; `string'
PUBLIC	??_C@_0M@FKDOIKDB@Hello?5Right@			; `string'
PUBLIC	??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling@	; `string'
PUBLIC	??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion@	; `string'
PUBLIC	??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4@ ; `string'
PUBLIC	??_C@_04GDOOJPNH@Tree@				; `string'
PUBLIC	??_C@_04KCCPLAND@tree@				; `string'
PUBLIC	??_C@_06NAFIGPDO@Node?$CFd@			; `string'
PUBLIC	??_C@_0O@DCLBKAFC@Node?5contents@		; `string'
PUBLIC	??_C@_09NGNKJEEB@Node?$CFd?4?$CFd@		; `string'
PUBLIC	??_C@_0BD@MJPJLCIK@Even?5more?5contents@	; `string'
PUBLIC	??_C@_0P@LKPCNPLG@Tree?5in?5column@		; `string'
PUBLIC	??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5@ ; `string'
PUBLIC	??_C@_09BFICBINI@Filtering@			; `string'
PUBLIC	??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5disp@ ; `string'
PUBLIC	??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ@	; `string'
PUBLIC	??_C@_06BMDMCJJI@aaa1?4c@			; `string'
PUBLIC	??_C@_06OMOADLHL@bbb1?4c@			; `string'
PUBLIC	??_C@_06LMKLMKNK@ccc1?4c@			; `string'
PUBLIC	??_C@_08GHAOHEK@aaa2?4cpp@			; `string'
PUBLIC	??_C@_08IAJKMGPB@bbb2?4cpp@			; `string'
PUBLIC	??_C@_08PNDMNJJI@ccc2?4cpp@			; `string'
PUBLIC	??_C@_05NIADHECG@abc?4h@			; `string'
PUBLIC	??_C@_0N@OLAOGCLC@hello?0?5world@		; `string'
PUBLIC	??_C@_02DKCKIIND@?$CFs@				; `string'
PUBLIC	??_C@_0BL@IKGEMPPN@Inputs?0?5Navigation?5?$CG?5Focus@ ; `string'
PUBLIC	??_C@_0BF@MACLOFOD@WantCaptureMouse?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BI@FJJPGPBI@WantCaptureKeyboard?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0BC@MNILMHJG@WantTextInput?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BE@HMNMIAK@WantSetMousePos?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BO@PADIALFI@NavActive?3?5?$CFd?0?5NavVisible?3?5?$CFd@ ; `string'
PUBLIC	??_C@_0CD@IMLPMLDN@Keyboard?0?5Mouse?5?$CG?5Navigation?5St@ ; `string'
PUBLIC	??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ@ ; `string'
PUBLIC	??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO@ ; `string'
PUBLIC	??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ@ ; `string'
PUBLIC	??_C@_0M@HODNMGFJ@Mouse?5down?3@		; `string'
PUBLIC	??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ@ ; `string'
PUBLIC	??_C@_0P@KEMIOLDA@Mouse?5clicked?3@		; `string'
PUBLIC	??_C@_03HAIDDFMD@b?$CFd@			; `string'
PUBLIC	??_C@_0BD@IEMOMOGE@Mouse?5dbl?9clicked?3@	; `string'
PUBLIC	??_C@_0BA@NMIOGEHG@Mouse?5released?3@		; `string'
PUBLIC	??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f@	; `string'
PUBLIC	??_C@_0L@POLCMIEL@Keys?5down?3@			; `string'
PUBLIC	??_C@_0BH@EIGPEOBP@?$CFd?5?$CI0x?$CFX?$CJ?5?$CI?$CF?402f?5secs?$CJ@ ; `string'
PUBLIC	??_C@_0O@DAHEMGJA@Keys?5pressed?3@		; `string'
PUBLIC	??_C@_09MNHHIJFE@?$CFd?5?$CI0x?$CFX?$CJ@	; `string'
PUBLIC	??_C@_0O@EGHLNEOH@Keys?5release?3@		; `string'
PUBLIC	??_C@_06ECIIPDFH@SUPER?5@			; `string'
PUBLIC	??_C@_04HDLNDMFA@ALT?5@				; `string'
PUBLIC	??_C@_06IGAIMELN@SHIFT?5@			; `string'
PUBLIC	??_C@_05IHGCNILK@CTRL?5@			; `string'
PUBLIC	??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs@ ; `string'
PUBLIC	??_C@_0N@PKFKOHDJ@Chars?5queue?3@		; `string'
PUBLIC	??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ@	; `string'
PUBLIC	??_C@_0BA@LIMLNKOJ@NavInputs?5down?3@		; `string'
PUBLIC	??_C@_09NJGMILHM@?$FL?$CFd?$FN?5?$CF?42f@	; `string'
PUBLIC	??_C@_0BD@LLKFPGJD@NavInputs?5pressed?3@	; `string'
PUBLIC	??_C@_04KBDJOJNB@?$FL?$CFd?$FN@			; `string'
PUBLIC	??_C@_0BE@OEEOJMCL@NavInputs?5duration?3@	; `string'
PUBLIC	??_C@_0CL@NJDOKPGI@Hovering?5me?5sets?5the?6keyboard?5c@ ; `string'
PUBLIC	??_C@_0DA@JDENAPEM@Holding?5me?5clears?5the?6the?5keybo@ ; `string'
PUBLIC	??_C@_07OOGFLDEE@Tabbing@			; `string'
PUBLIC	??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5thro@ ; `string'
PUBLIC	??_C@_01HIHLOKLC@1@				; `string'
PUBLIC	??_C@_01FDFGLJHB@2@				; `string'
PUBLIC	??_C@_01EKENIIDA@3@				; `string'
PUBLIC	??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ@		; `string'
PUBLIC	??_C@_01BMBHCPLG@5@				; `string'
PUBLIC	??_C@_0BA@PGBLAHMK@Focus?5from?5code@		; `string'
PUBLIC	??_C@_0L@OPJAAOKJ@Focus?5on?51@			; `string'
PUBLIC	??_C@_0L@MELNFNGK@Focus?5on?52@			; `string'
PUBLIC	??_C@_0L@NNKGGMCL@Focus?5on?53@			; `string'
PUBLIC	??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ@		; `string'
PUBLIC	??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd@	; `string'
PUBLIC	??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO@ ; `string'
PUBLIC	??_C@_0L@FLKPNOEH@Focus?5on?5X@			; `string'
PUBLIC	??_C@_0L@ECLEOPAG@Focus?5on?5Y@			; `string'
PUBLIC	??_C@_0L@GJJJLMMF@Focus?5on?5Z@			; `string'
PUBLIC	??_C@_06FBFHKKF@Float3@				; `string'
PUBLIC	??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5pres@ ; `string'
PUBLIC	??_C@_08EJAEFPJK@Dragging@			; `string'
PUBLIC	??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDrag@ ; `string'
PUBLIC	??_C@_0GC@PPDGANOJ@IsMouseDragging?$CI?$CFd?$CJ?3?6?5?5w?1?5defau@ ; `string'
PUBLIC	??_C@_07GELNHEGO@Drag?5Me@			; `string'
PUBLIC	??_C@_0HH@LIOOGCHA@GetMouseDragDelta?$CI0?$CJ?3?6?5?5w?1?5defa@ ; `string'
PUBLIC	??_C@_0O@LHBMJOCH@Mouse?5cursors@		; `string'
PUBLIC	??_C@_05OLOIDPAB@Arrow@				; `string'
PUBLIC	??_C@_09KBOPCPBA@TextInput@			; `string'
PUBLIC	??_C@_09NLNHGFHP@ResizeAll@			; `string'
PUBLIC	??_C@_08HLCKOJFI@ResizeNS@			; `string'
PUBLIC	??_C@_08BDBDMDLN@ResizeEW@			; `string'
PUBLIC	??_C@_0L@EFMGKFJD@ResizeNESW@			; `string'
PUBLIC	??_C@_0L@MHCCEKFE@ResizeNWSE@			; `string'
PUBLIC	??_C@_04JBBMMDIF@Hand@				; `string'
PUBLIC	??_C@_0L@OJPFEFMM@NotAllowed@			; `string'
PUBLIC	??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3@ ; `string'
PUBLIC	??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5d@ ; `string'
PUBLIC	??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs@		; `string'
PUBLIC	??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImG@ ; `string'
PUBLIC	??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5th@ ; `string'
PUBLIC	??_C@_0BJ@CEAKAMCE@Config?1Build?5Information@	; `string'
PUBLIC	??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard@		; `string'
PUBLIC	??_C@_08HEKABECO@cfginfos@			; `string'
PUBLIC	??_C@_04CJPBKLAG@?$GA?$GA?$GA?6@		; `string'
PUBLIC	??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ@ ; `string'
PUBLIC	??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDr@ ; `string'
PUBLIC	??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd@ ; `string'
PUBLIC	??_C@_0P@KFJLIPEJ@define?3?5_WIN32@		; `string'
PUBLIC	??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd@	; `string'
PUBLIC	??_C@_04HIBGFPH@NULL@				; `string'
PUBLIC	??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs@ ; `string'
PUBLIC	??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X@ ; `string'
PUBLIC	??_C@_0BD@CKENCLMO@?5NavEnableKeyboard@		; `string'
PUBLIC	??_C@_0BC@PFLKKAGF@?5NavEnableGamepad@		; `string'
PUBLIC	??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos@	; `string'
PUBLIC	??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard@	; `string'
PUBLIC	??_C@_08GAJGGFEK@?5NoMouse@			; `string'
PUBLIC	??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange@	; `string'
PUBLIC	??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors@	; `string'
PUBLIC	??_C@_0CL@DGNIKDMB@io?4ConfigWindowsMemoryCompactTi@ ; `string'
PUBLIC	??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X@ ; `string'
PUBLIC	??_C@_0M@MPABENKI@?5HasGamepad@			; `string'
PUBLIC	??_C@_0BB@NNHFCGPM@?5HasMouseCursors@		; `string'
PUBLIC	??_C@_0BA@EKJHBGEP@?5HasSetMousePos@		; `string'
PUBLIC	??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset@	; `string'
PUBLIC	??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF0@ ; `string'
PUBLIC	??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f@ ; `string'
PUBLIC	??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42@ ; `string'
PUBLIC	??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f@ ; `string'
PUBLIC	??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f@ ; `string'
PUBLIC	??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f@ ; `string'
PUBLIC	??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f@ ; `string'
PUBLIC	??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f@ ; `string'
PUBLIC	??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f@ ; `string'
PUBLIC	??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?4@ ; `string'
PUBLIC	??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6@		; `string'
PUBLIC	??_C@_0BE@EIEKGNCP@Classic?$AADark?$AALight?$AA@ ; `string'
PUBLIC	??_C@_0BCM@MBDECECM@?9?5Load?5additional?5fonts?5with?5io@ ; `string'
PUBLIC	??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector@	; `string'
PUBLIC	??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector@	; `string'
PUBLIC	??_C@_0O@MJEGPPND@FrameRounding@		; `string'
PUBLIC	??_C@_0N@IABNAJJO@WindowBorder@			; `string'
PUBLIC	??_C@_0M@LIENHPEL@FrameBorder@			; `string'
PUBLIC	??_C@_0M@NFCFILGL@PopupBorder@			; `string'
PUBLIC	??_C@_08EEJHGAPI@Save?5Ref@			; `string'
PUBLIC	??_C@_0L@KOOMFCFA@Revert?5Ref@			; `string'
PUBLIC	??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persis@ ; `string'
PUBLIC	??_C@_06NNHHJHAK@?$CD?$CDtabs@			; `string'
PUBLIC	??_C@_05BOIJFCDP@Sizes@				; `string'
PUBLIC	??_C@_04KGFMLCPK@Main@				; `string'
PUBLIC	??_C@_0O@NJEPBHAL@WindowPadding@		; `string'
PUBLIC	??_C@_0N@CPMOGBCG@FramePadding@			; `string'
PUBLIC	??_C@_0M@PJNJGKOI@ItemSpacing@			; `string'
PUBLIC	??_C@_0BB@FPELPPEM@ItemInnerSpacing@		; `string'
PUBLIC	??_C@_0BC@CHKNMAIJ@TouchExtraPadding@		; `string'
PUBLIC	??_C@_0O@FJCIMFNP@IndentSpacing@		; `string'
PUBLIC	??_C@_0O@DNFCAGJO@ScrollbarSize@		; `string'
PUBLIC	??_C@_0M@MMBGIFGH@GrabMinSize@			; `string'
PUBLIC	??_C@_0BB@DIOLDNNC@WindowBorderSize@		; `string'
PUBLIC	??_C@_0BA@MHPKDBMC@ChildBorderSize@		; `string'
PUBLIC	??_C@_0BA@GHHMANCJ@PopupBorderSize@		; `string'
PUBLIC	??_C@_0BA@OLKEIFFB@FrameBorderSize@		; `string'
PUBLIC	??_C@_0O@MEMGDJEN@TabBorderSize@		; `string'
PUBLIC	??_C@_08ICFONDFO@Rounding@			; `string'
PUBLIC	??_C@_0P@IMGPCCNA@WindowRounding@		; `string'
PUBLIC	??_C@_0O@OLPNJDEC@ChildRounding@		; `string'
PUBLIC	??_C@_0O@OGBCIABM@PopupRounding@		; `string'
PUBLIC	??_C@_0BC@IGAFHGEC@ScrollbarRounding@		; `string'
PUBLIC	??_C@_0N@CHOEJEFP@GrabRounding@			; `string'
PUBLIC	??_C@_0M@GELHPNFJ@TabRounding@			; `string'
PUBLIC	??_C@_04GEFJINEE@?$CF?42f@			; `string'
PUBLIC	??_C@_0BB@IFNMJCJO@WindowTitleAlign@		; `string'
PUBLIC	??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA@	; `string'
PUBLIC	??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition@	; `string'
PUBLIC	??_C@_0M@PMLPANEE@Left?$AARight?$AA@		; `string'
PUBLIC	??_C@_0BE@HCCCHIDA@ColorButtonPosition@		; `string'
PUBLIC	??_C@_0BA@PHDMJLFL@ButtonTextAlign@		; `string'
PUBLIC	??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button@ ; `string'
PUBLIC	??_C@_0BE@OFFKFPJC@SelectableTextAlign@		; `string'
PUBLIC	??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5select@ ; `string'
PUBLIC	??_C@_0BC@FINEDBHB@Safe?5Area?5Padding@		; `string'
PUBLIC	??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5ed@ ; `string'
PUBLIC	??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding@	; `string'
PUBLIC	??_C@_06ICDCBJPI@Colors@			; `string'
PUBLIC	??_C@_06BFGAPCKF@Export@			; `string'
PUBLIC	??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyl@ ; `string'
PUBLIC	??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI@ ; `string'
PUBLIC	??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA@ ; `string'
PUBLIC	??_C@_0O@BMBGJILK@?$CD?$CDoutput_type@		; `string'
PUBLIC	??_C@_0BF@EKILLAGK@Only?5Modified?5Colors@	; `string'
PUBLIC	??_C@_0O@ECALKMOF@Filter?5colors@		; `string'
PUBLIC	??_C@_06OGJDIEIN@Opaque@			; `string'
PUBLIC	??_C@_05IHOGHNDL@Alpha@				; `string'
PUBLIC	??_C@_04IGHHMFLN@Both@				; `string'
PUBLIC	??_C@_0GN@IMCHBEFC@In?5the?5color?5list?3?6Left?9click?5o@ ; `string'
PUBLIC	??_C@_08PKGPDAGH@?$CD?$CDcolors@		; `string'
PUBLIC	??_C@_07KJABCEJI@?$CD?$CDcolor@			; `string'
PUBLIC	??_C@_04INACKGJP@Save@				; `string'
PUBLIC	??_C@_06OIKMFEGE@Revert@			; `string'
PUBLIC	??_C@_05ENDNDI@Fonts@				; `string'
PUBLIC	??_C@_0DJ@EDBFAJMO@Read?5FAQ?5and?5docs?1FONTS?4txt?5for@ ; `string'
PUBLIC	??_C@_0CN@DILJDNLP@Font?5?$CFd?3?5?$CC?$CFs?$CC?6?$CF?42f?5px?0?5?$CFd?5glyph@ ; `string'
PUBLIC	??_C@_0P@HCLAAKJM@Set?5as?5default@		; `string'
PUBLIC	??_C@_04GGBPDDBN@?$CF?41f@			; `string'
PUBLIC	??_C@_0L@HAJGHBLA@Font?5scale@			; `string'
PUBLIC	??_C@_0BKF@KOCFAEGF@Note?5than?5the?5default?5embedded?5@ ; `string'
PUBLIC	??_C@_0M@MKKLGFNP@Font?5offset@			; `string'
PUBLIC	??_C@_0CE@FJCMKHHK@Ascent?3?5?$CFf?0?5Descent?3?5?$CFf?0?5Height@ ; `string'
PUBLIC	??_C@_0CC@FPHDKLMA@Fallback?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@ ; `string'
PUBLIC	??_C@_0CC@FMIIOLLL@Ellipsis?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@ ; `string'
PUBLIC	??_C@_0CE@LLADJGCM@Texture?5Area?3?5about?5?$CFd?5px?5?$HO?$CFdx?$CF@ ; `string'
PUBLIC	??_C@_0DE@KFKIBEOD@Input?5?$CFd?3?5?8?$CFs?8?0?5Oversample?3?5?$CI?$CFd@ ; `string'
PUBLIC	??_C@_0M@NEAHLNMH@Glyphs?5?$CI?$CFd?$CJ@	; `string'
PUBLIC	??_C@_06EBCCDGNI@Glyphs@			; `string'
PUBLIC	??_C@_06IOJPAPEE@glyphs@			; `string'
PUBLIC	??_C@_05OIOMJNBL@glyph@				; `string'
PUBLIC	??_C@_0BH@KIECHKHD@U?$CL?$CF04X?4?4U?$CL?$CF04X?5?$CI?$CFd?5?$CFs?$CJ@ ; `string'
PUBLIC	??_C@_0BC@JMLDGIFC@Codepoint?3?5U?$CL?$CF04X@	; `string'
PUBLIC	??_C@_0P@JLIDDFIB@AdvanceX?3?5?$CF?41f@		; `string'
PUBLIC	??_C@_0BO@BCFBHCGJ@Pos?3?5?$CI?$CF?42f?0?$CF?42f?$CJ?9?$DO?$CI?$CF?42f?0?$CF?42f?$CJ@ ; `string'
PUBLIC	??_C@_0BN@EHEDNDHJ@UV?3?5?$CI?$CF?43f?0?$CF?43f?$CJ?9?$DO?$CI?$CF?43f?0?$CF?43f?$CJ@ ; `string'
PUBLIC	??_C@_0BN@JPEJHLJM@Atlas?5texture?5?$CI?$CFdx?$CFd?5pixels?$CJ@ ; `string'
PUBLIC	??_C@_0O@KCJLBEBN@Atlas?5texture@		; `string'
PUBLIC	??_C@_0PC@PJPPOHAC@Those?5are?5old?5settings?5provided@ ; `string'
PUBLIC	??_C@_0N@DLFCCMFO@window?5scale@		; `string'
PUBLIC	??_C@_0N@DCHFKEPM@global?5scale@		; `string'
PUBLIC	??_C@_09PIAIFBON@Rendering@			; `string'
PUBLIC	??_C@_0BD@INPJKAKL@Anti?9aliased?5lines@	; `string'
PUBLIC	??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5li@ ; `string'
PUBLIC	??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill@		; `string'
PUBLIC	??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance@ ; `string'
PUBLIC	??_C@_0N@MBCJIDFM@Global?5Alpha@		; `string'
PUBLIC	??_C@_04BBNPPDNC@Edit@				; `string'
PUBLIC	??_C@_06GHDCGCHF@CTRL?$CLZ@			; `string'
PUBLIC	??_C@_04LPGMNMPN@Undo@				; `string'
PUBLIC	??_C@_06EMBPDBLG@CTRL?$CLY@			; `string'
PUBLIC	??_C@_04NKENIHOM@Redo@				; `string'
PUBLIC	??_C@_06FFAEAAPH@CTRL?$CLX@			; `string'
PUBLIC	??_C@_03EOHDMBHJ@Cut@				; `string'
PUBLIC	??_C@_06PMDCMLGN@CTRL?$CLC@			; `string'
PUBLIC	??_C@_06MLIHCNHJ@CTRL?$CLV@			; `string'
PUBLIC	??_C@_05NEBJFIEK@Paste@				; `string'
PUBLIC	?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA	; `ShowExampleMenuFile'::`1'::__LINE__Var
PUBLIC	??_C@_0N@GAHNIDOO@?$CIdummy?5menu?$CJ@		; `string'
PUBLIC	??_C@_03ILBCOJBH@New@				; `string'
PUBLIC	??_C@_06DGNIABGN@Ctrl?$CLO@			; `string'
PUBLIC	??_C@_04DNCDCIAE@Open@				; `string'
PUBLIC	??_C@_0M@FFOFICLF@Open?5Recent@			; `string'
PUBLIC	??_C@_0L@MGPNFHBN@fish_hat?4c@			; `string'
PUBLIC	??_C@_0N@OONPEMFD@fish_hat?4inl@		; `string'
PUBLIC	??_C@_0L@CFAJIONG@fish_hat?4h@			; `string'
PUBLIC	??_C@_06INDFPOP@More?4?4@			; `string'
PUBLIC	??_C@_09JKOAAOOB@Recurse?4?4@			; `string'
PUBLIC	??_C@_06NAKPFMDA@Ctrl?$CLS@			; `string'
PUBLIC	??_C@_09JEJONNAL@Save?5As?4?4@			; `string'
PUBLIC	??_C@_07KHIHFBFN@Options@			; `string'
PUBLIC	??_C@_07DOAOMMKG@Enabled@			; `string'
PUBLIC	??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd@	; `string'
PUBLIC	??_C@_05DCDOHKAB@Input@				; `string'
PUBLIC	??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA@	; `string'
PUBLIC	??_C@_05KONDNKDG@Check@				; `string'
PUBLIC	??_C@_07KAJHKDAE@Checked@			; `string'
PUBLIC	??_C@_06ELIFPNNI@Alt?$CLF4@			; `string'
PUBLIC	??_C@_04GMBKPCGK@Quit@				; `string'
PUBLIC	??_C@_04DOKPJKJF@HELP@				; `string'
PUBLIC	??_C@_07DBIJIOJO@HISTORY@			; `string'
PUBLIC	??_C@_05PONODPI@CLEAR@				; `string'
PUBLIC	??_C@_08GOHMLCGG@CLASSIFY@			; `string'
PUBLIC	??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB@ ; `string'
PUBLIC	??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf@		; `string'
PUBLIC	??_C@_0O@GDIOPKGP@Close?5Console@		; `string'
PUBLIC	??_C@_0MA@ICGIOBFG@This?5example?5implements?5a?5conso@ ; `string'
PUBLIC	??_C@_0DJ@NBHLDCP@Enter?5?8HELP?8?5for?5help?0?5press?5TA@ ; `string'
PUBLIC	??_C@_0P@CGJDLLEJ@Add?5Dummy?5Text@		; `string'
PUBLIC	??_C@_0N@OJGBPOOP@?$CFd?5some?5text@		; `string'
PUBLIC	??_C@_0P@BMHJKMPF@some?5more?5text@		; `string'
PUBLIC	??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5@ ; `string'
PUBLIC	??_C@_0BA@HHKLEHKC@Add?5Dummy?5Error@		; `string'
PUBLIC	??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong@ ; `string'
PUBLIC	??_C@_05MDNHABIA@Clear@				; `string'
PUBLIC	??_C@_0M@IFKANFPJ@Auto?9scroll@			; `string'
PUBLIC	??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ@ ; `string'
PUBLIC	??_C@_0BA@KOEFNJOK@ScrollingRegion@		; `string'
PUBLIC	??_C@_07LFMCMLFD@?$FLerror?$FN@			; `string'
PUBLIC	??_C@_02KPDBPKPG@?$CD?5@			; `string'
PUBLIC	??_C@_05DFHAGHEP@?$CD?5?$CFs?6@			; `string'
PUBLIC	??_C@_09GJFNIAOH@Commands?3@			; `string'
PUBLIC	??_C@_04JKCKOCFH@?9?5?$CFs@			; `string'
PUBLIC	??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6@		; `string'
PUBLIC	??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6@ ; `string'
PUBLIC	??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6@ ; `string'
PUBLIC	??_C@_01CLKCMJKC@?5@				; `string'
PUBLIC	??_C@_0BD@LCPLNAHF@Possible?5matches?3?6@	; `string'
PUBLIC	??_C@_05PHKAGDP@?9?5?$CFs?6@			; `string'
PUBLIC	??_C@_0BB@NEACHKPE@Example?3?5Console@		; `string'
PUBLIC	??_C@_06IBDJIBGI@Filter@			; `string'
PUBLIC	??_C@_0N@LFJACCKD@Example?3?5Log@		; `string'
PUBLIC	??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries@ ; `string'
PUBLIC	??_C@_04NIDJFNBE@info@				; `string'
PUBLIC	??_C@_04FNLOFOEM@warn@				; `string'
PUBLIC	??_C@_05KKCIMGE@error@				; `string'
PUBLIC	??_C@_0L@CIGCKJLI@Bumfuzzled@			; `string'
PUBLIC	??_C@_0M@FKNIJFM@Cattywampus@			; `string'
PUBLIC	??_C@_0M@KEIJGBOK@Snickersnee@			; `string'
PUBLIC	??_C@_0O@KKKMMPJN@Abibliophobia@		; `string'
PUBLIC	??_C@_0N@FLCFMCCB@Absquatulate@			; `string'
PUBLIC	??_C@_0L@MIMGHMNH@Nincompoop@			; `string'
PUBLIC	??_C@_0N@BIHLNJM@Pauciloquent@			; `string'
PUBLIC	??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time@ ; `string'
PUBLIC	??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout@	; `string'
PUBLIC	??_C@_09OINOOGMP@left?5pane@			; `string'
PUBLIC	??_C@_0M@DHBPHHKL@MyObject?5?$CFd@		; `string'
PUBLIC	??_C@_09PHNAOHDK@item?5view@			; `string'
PUBLIC	??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd@		; `string'
PUBLIC	??_C@_06BMLGLIAO@?$CD?$CDTabs@			; `string'
PUBLIC	??_C@_0M@OHKMKKDH@Description@			; `string'
PUBLIC	??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@ ; `string'
PUBLIC	??_C@_07NJJEDOBB@Details@			; `string'
PUBLIC	??_C@_0P@CCIDAFDC@ID?3?50123456789@		; `string'
PUBLIC	?dummy_members@?4??ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z@4PAMA ; ``ShowExampleAppPropertyEditor'::`2'::funcs::ShowDummyObject'::`5'::dummy_members
PUBLIC	??_C@_05FIIOEGIK@?$CFs_?$CFu@			; `string'
PUBLIC	??_C@_06ELFECKBG@Object@			; `string'
PUBLIC	??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich@	; `string'
PUBLIC	??_C@_08BNKJGCPO@Field_?$CFd@			; `string'
PUBLIC	??_C@_05EPLKDJMH@Field@				; `string'
PUBLIC	??_C@_07FBBIKLOB@?$CD?$CDvalue@			; `string'
PUBLIC	??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor@	; `string'
PUBLIC	??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5@ ; `string'
PUBLIC	??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display@ ; `string'
PUBLIC	??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5@ ; `string'
PUBLIC	??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI@ ; `string'
PUBLIC	??_C@_09NBDEEMIG@Test?5type@			; `string'
PUBLIC	??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5b@ ; `string'
PUBLIC	??_C@_0P@IHJDPCIL@Add?51000?5lines@		; `string'
PUBLIC	??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@ ; `string'
PUBLIC	??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@ ; `string'
PUBLIC	??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window@ ; `string'
PUBLIC	??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5@ ; `string'
PUBLIC	??_C@_0BA@EAJBEEH@Number?5of?5lines@		; `string'
PUBLIC	??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd@ ; `string'
PUBLIC	??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize@ ; `string'
PUBLIC	??_C@_0BF@FPBGOCLL@Resize?5vertical?5only@	; `string'
PUBLIC	??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only@	; `string'
PUBLIC	??_C@_0BK@CNAJDBBL@Width?5?$DO?5100?0?5Height?5?$DO?5100@ ; `string'
PUBLIC	??_C@_0O@GIJNEIMP@Width?5400?9500@		; `string'
PUBLIC	??_C@_0P@MPNPOAJG@Height?5400?9500@		; `string'
PUBLIC	??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square@	; `string'
PUBLIC	??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ@ ; `string'
PUBLIC	??_C@_07JJIBJOCO@200x200@			; `string'
PUBLIC	??_C@_07OJDKPIO@500x500@			; `string'
PUBLIC	??_C@_07IEBICOG@800x200@			; `string'
PUBLIC	??_C@_0L@PIOLEGBL@Constraint@			; `string'
PUBLIC	??_C@_0M@CEOMCPLH@Auto?9resize@			; `string'
PUBLIC	??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5l@ ; `string'
PUBLIC	??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay@	; `string'
PUBLIC	??_C@_0EN@GGFBFCLD@Simple?5overlay?6in?5the?5corner?5of@ ; `string'
PUBLIC	??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ@ ; `string'
PUBLIC	??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO@ ; `string'
PUBLIC	??_C@_06IFGIOHDE@Custom@			; `string'
PUBLIC	??_C@_08DPOKBJOC@Top?9left@			; `string'
PUBLIC	??_C@_09FEMEGGCE@Top?9right@			; `string'
PUBLIC	??_C@_0M@MGBINKPN@Bottom?9left@			; `string'
PUBLIC	??_C@_0N@NJDFJJBC@Bottom?9right@		; `string'
PUBLIC	??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1@ ; `string'
PUBLIC	??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5t@ ; `string'
PUBLIC	??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2@ ; `string'
PUBLIC	??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5t@ ; `string'
PUBLIC	??_C@_04NLDFHNKP@?$HM?1?9?2@			; `string'
PUBLIC	??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimated@ ; `string'
PUBLIC	??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5titl@ ; `string'
PUBLIC	??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering@ ; `string'
PUBLIC	??_C@_08EHLCCPCB@?$CD?$CDTabBar@		; `string'
PUBLIC	??_C@_0L@LLLBMLGE@Primitives@			; `string'
PUBLIC	??_C@_04EBKMHHBE@Size@				; `string'
PUBLIC	??_C@_05IDMOFOMC@?$CF?402f@			; `string'
PUBLIC	??_C@_09CEKHLCFH@Thickness@			; `string'
PUBLIC	??_C@_0M@FFKCLHMG@n?9gon?5sides@		; `string'
PUBLIC	??_C@_05PDOBBJNA@Color@				; `string'
PUBLIC	??_C@_06PBIJCONE@Canvas@			; `string'
PUBLIC	??_C@_0DG@KLKDBFIL@Left?9click?5and?5drag?5to?5add?5line@ ; `string'
PUBLIC	??_C@_06DODEBHEI@canvas@			; `string'
PUBLIC	??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists@		; `string'
PUBLIC	??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list@ ; `string'
PUBLIC	??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5b@ ; `string'
PUBLIC	??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list@ ; `string'
PUBLIC	??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5b@ ; `string'
PUBLIC	??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC@	; `string'
PUBLIC	??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@ ; `string'
PUBLIC	??_C@_06CGNGJFJO@Modify@			; `string'
PUBLIC	??_C@_07HKLKIEAD@Save?5?$CFs@			; `string'
PUBLIC	??_C@_06LGPANJDM@CTRL?$CLS@			; `string'
PUBLIC	??_C@_06NCJMBMDI@CTRL?$CLW@			; `string'
PUBLIC	??_C@_07KPHKCHJL@Lettuce@			; `string'
PUBLIC	??_C@_08MEKMCLOD@Eggplant@			; `string'
PUBLIC	??_C@_06JOCEHIMN@Carrot@			; `string'
PUBLIC	??_C@_06BPAOMENE@Tomato@			; `string'
PUBLIC	??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title@	; `string'
PUBLIC	??_C@_0O@ILMKPHFK@Some?5Document@		; `string'
PUBLIC	??_C@_0BD@BKDKPNMJ@Example?3?5Documents@	; `string'
PUBLIC	??_C@_0BE@HCFGHAAC@Close?5All?5Documents@	; `string'
PUBLIC	??_C@_04LBABLPF@Exit@				; `string'
PUBLIC	??_C@_05DIODKGEP@Save?$DP@			; `string'
PUBLIC	??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5it@ ; `string'
PUBLIC	??_C@_02IEBMKJDF@?$CD?$CD@			; `string'
PUBLIC	??_C@_03CCLAEDDF@Yes@				; `string'
PUBLIC	??_C@_02JINPPBEP@No@				; `string'
PUBLIC	??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@ ; `string'
PUBLIC	??_C@_1DK@JJGEFOJO@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ ; `string'
PUBLIC	??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ ; `string'
PUBLIC	__real@00000000
PUBLIC	__real@0000000000000000
PUBLIC	__real@38d1b717
PUBLIC	__real@3a03126f
PUBLIC	__real@3ba3d70a
PUBLIC	__real@3c23d70a
PUBLIC	__real@3ca3d70a
PUBLIC	__real@3d4ccccd
PUBLIC	__real@3dcccccd
PUBLIC	__real@3e4ccccd
PUBLIC	__real@3e6b851f
PUBLIC	__real@3e800000
PUBLIC	__real@3e99999a
PUBLIC	__real@3eb33333
PUBLIC	__real@3ecccccd
PUBLIC	__real@3ee4e4e5
PUBLIC	__real@3f000000
PUBLIC	__real@3f109091
PUBLIC	__real@3f19999a
PUBLIC	__real@3f1a9a9b
PUBLIC	__real@3f333333
PUBLIC	__real@3f48c8c9
PUBLIC	__real@3f4ccccd
PUBLIC	__real@3f666666
PUBLIC	__real@3f800000
PUBLIC	__real@3f847ae140000000
PUBLIC	__real@3f8ccccd
PUBLIC	__real@3f91111120000000
PUBLIC	__real@3fa66666
PUBLIC	__real@3fd0000000000000
PUBLIC	__real@3ff0000000000000
PUBLIC	__real@40000000
PUBLIC	__real@40400000
PUBLIC	__real@40490e56
PUBLIC	__real@40800000
PUBLIC	__real@40a00000
PUBLIC	__real@40e00000
PUBLIC	__real@41000000
PUBLIC	__real@411ccccd
PUBLIC	__real@41200000
PUBLIC	__real@41400000
PUBLIC	__real@41600000
PUBLIC	__real@41800000
PUBLIC	__real@41900000
PUBLIC	__real@41a00000
PUBLIC	__real@41f00000
PUBLIC	__real@41f80000
PUBLIC	__real@42000000
PUBLIC	__real@420c0000
PUBLIC	__real@42200000
PUBLIC	__real@42480000
PUBLIC	__real@42700000
PUBLIC	__real@42900000
PUBLIC	__real@42a00000
PUBLIC	__real@42b40000
PUBLIC	__real@42c80000
PUBLIC	__real@42f00000
PUBLIC	__real@430c0000
PUBLIC	__real@430c6bf526340000
PUBLIC	__real@43160000
PUBLIC	__real@43200000
PUBLIC	__real@43340000
PUBLIC	__real@43480000
PUBLIC	__real@43820000
PUBLIC	__real@43960000
PUBLIC	__real@43b40000
PUBLIC	__real@43c80000
PUBLIC	__real@43d70000
PUBLIC	__real@43dc0000
PUBLIC	__real@43e10000
PUBLIC	__real@43fa0000
PUBLIC	__real@44020000
PUBLIC	__real@44098000
PUBLIC	__real@44160000
PUBLIC	__real@44228000
PUBLIC	__real@442a0000
PUBLIC	__real@44480000
PUBLIC	__real@447a0000
PUBLIC	__real@44bb8000
PUBLIC	__real@44db2000
PUBLIC	__real@501502f9
PUBLIC	__real@7f7fffff
PUBLIC	__real@80800000
PUBLIC	__real@bdcccccd
PUBLIC	__real@bf800000
PUBLIC	__real@c1200000
PUBLIC	__real@c1400000
PUBLIC	__real@c1a00000
PUBLIC	__real@c2c80000
PUBLIC	__real@c30c6bf526340000
PUBLIC	__real@c3200000
PUBLIC	__real@c3b40000
PUBLIC	__real@d01502f9
PUBLIC	__xmm@41f00000000000000000000000000000
PUBLIC	__xmm@80000000800000008000000080000000
EXTRN	_atexit:PROC
EXTRN	___report_rangecheckfailure:PROC
EXTRN	__Init_thread_header:PROC
EXTRN	__Init_thread_abort:PROC
EXTRN	__Init_thread_footer:PROC
EXTRN	_memcmp:PROC
EXTRN	_memcpy:PROC
EXTRN	_memmove:PROC
EXTRN	_memset:PROC
EXTRN	_strchr:PROC
EXTRN	_strstr:PROC
EXTRN	_strcpy:PROC
EXTRN	_strlen:PROC
EXTRN	__imp__strncmp:PROC
EXTRN	__imp___wassert:PROC
EXTRN	?GetCurrentContext@ImGui@@YAPAUImGuiContext@@XZ:PROC ; ImGui::GetCurrentContext
EXTRN	?GetIO@ImGui@@YAAAUImGuiIO@@XZ:PROC		; ImGui::GetIO
EXTRN	?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ:PROC	; ImGui::GetStyle
EXTRN	?ShowMetricsWindow@ImGui@@YAXPA_N@Z:PROC	; ImGui::ShowMetricsWindow
EXTRN	?GetVersion@ImGui@@YAPBDXZ:PROC			; ImGui::GetVersion
EXTRN	?StyleColorsDark@ImGui@@YAXPAUImGuiStyle@@@Z:PROC ; ImGui::StyleColorsDark
EXTRN	?StyleColorsClassic@ImGui@@YAXPAUImGuiStyle@@@Z:PROC ; ImGui::StyleColorsClassic
EXTRN	?StyleColorsLight@ImGui@@YAXPAUImGuiStyle@@@Z:PROC ; ImGui::StyleColorsLight
EXTRN	?Begin@ImGui@@YA_NPBDPA_NH@Z:PROC		; ImGui::Begin
EXTRN	?End@ImGui@@YAXXZ:PROC				; ImGui::End
EXTRN	?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z:PROC	; ImGui::BeginChild
EXTRN	?BeginChild@ImGui@@YA_NIABUImVec2@@_NH@Z:PROC	; ImGui::BeginChild
EXTRN	?EndChild@ImGui@@YAXXZ:PROC			; ImGui::EndChild
EXTRN	?IsWindowFocused@ImGui@@YA_NH@Z:PROC		; ImGui::IsWindowFocused
EXTRN	?IsWindowHovered@ImGui@@YA_NH@Z:PROC		; ImGui::IsWindowHovered
EXTRN	?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ:PROC ; ImGui::GetWindowDrawList
EXTRN	?GetWindowPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetWindowPos
EXTRN	?GetWindowSize@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetWindowSize
EXTRN	?GetWindowWidth@ImGui@@YAMXZ:PROC		; ImGui::GetWindowWidth
EXTRN	?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z:PROC ; ImGui::SetNextWindowPos
EXTRN	?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z:PROC ; ImGui::SetNextWindowSize
EXTRN	?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z:PROC ; ImGui::SetNextWindowSizeConstraints
EXTRN	?SetNextWindowContentSize@ImGui@@YAXABUImVec2@@@Z:PROC ; ImGui::SetNextWindowContentSize
EXTRN	?SetNextWindowBgAlpha@ImGui@@YAXM@Z:PROC	; ImGui::SetNextWindowBgAlpha
EXTRN	?SetWindowSize@ImGui@@YAXABUImVec2@@H@Z:PROC	; ImGui::SetWindowSize
EXTRN	?SetWindowFontScale@ImGui@@YAXM@Z:PROC		; ImGui::SetWindowFontScale
EXTRN	?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetContentRegionAvail
EXTRN	?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ:PROC ; ImGui::GetWindowContentRegionMax
EXTRN	?GetWindowContentRegionWidth@ImGui@@YAMXZ:PROC	; ImGui::GetWindowContentRegionWidth
EXTRN	?GetScrollX@ImGui@@YAMXZ:PROC			; ImGui::GetScrollX
EXTRN	?GetScrollY@ImGui@@YAMXZ:PROC			; ImGui::GetScrollY
EXTRN	?GetScrollMaxX@ImGui@@YAMXZ:PROC		; ImGui::GetScrollMaxX
EXTRN	?GetScrollMaxY@ImGui@@YAMXZ:PROC		; ImGui::GetScrollMaxY
EXTRN	?SetScrollX@ImGui@@YAXM@Z:PROC			; ImGui::SetScrollX
EXTRN	?SetScrollY@ImGui@@YAXM@Z:PROC			; ImGui::SetScrollY
EXTRN	?SetScrollHereX@ImGui@@YAXM@Z:PROC		; ImGui::SetScrollHereX
EXTRN	?SetScrollHereY@ImGui@@YAXM@Z:PROC		; ImGui::SetScrollHereY
EXTRN	?SetScrollFromPosX@ImGui@@YAXMM@Z:PROC		; ImGui::SetScrollFromPosX
EXTRN	?SetScrollFromPosY@ImGui@@YAXMM@Z:PROC		; ImGui::SetScrollFromPosY
EXTRN	?PushFont@ImGui@@YAXPAUImFont@@@Z:PROC		; ImGui::PushFont
EXTRN	?PopFont@ImGui@@YAXXZ:PROC			; ImGui::PopFont
EXTRN	?PushStyleColor@ImGui@@YAXHI@Z:PROC		; ImGui::PushStyleColor
EXTRN	?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z:PROC	; ImGui::PushStyleColor
EXTRN	?PopStyleColor@ImGui@@YAXH@Z:PROC		; ImGui::PopStyleColor
EXTRN	?PushStyleVar@ImGui@@YAXHM@Z:PROC		; ImGui::PushStyleVar
EXTRN	?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z:PROC	; ImGui::PushStyleVar
EXTRN	?PopStyleVar@ImGui@@YAXH@Z:PROC			; ImGui::PopStyleVar
EXTRN	?GetFont@ImGui@@YAPAUImFont@@XZ:PROC		; ImGui::GetFont
EXTRN	?GetFontSize@ImGui@@YAMXZ:PROC			; ImGui::GetFontSize
EXTRN	?GetColorU32@ImGui@@YAIHM@Z:PROC		; ImGui::GetColorU32
EXTRN	?PushItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::PushItemWidth
EXTRN	?PopItemWidth@ImGui@@YAXXZ:PROC			; ImGui::PopItemWidth
EXTRN	?SetNextItemWidth@ImGui@@YAXM@Z:PROC		; ImGui::SetNextItemWidth
EXTRN	?PushTextWrapPos@ImGui@@YAXM@Z:PROC		; ImGui::PushTextWrapPos
EXTRN	?PopTextWrapPos@ImGui@@YAXXZ:PROC		; ImGui::PopTextWrapPos
EXTRN	?PushAllowKeyboardFocus@ImGui@@YAX_N@Z:PROC	; ImGui::PushAllowKeyboardFocus
EXTRN	?PopAllowKeyboardFocus@ImGui@@YAXXZ:PROC	; ImGui::PopAllowKeyboardFocus
EXTRN	?PushButtonRepeat@ImGui@@YAX_N@Z:PROC		; ImGui::PushButtonRepeat
EXTRN	?PopButtonRepeat@ImGui@@YAXXZ:PROC		; ImGui::PopButtonRepeat
EXTRN	?Separator@ImGui@@YAXXZ:PROC			; ImGui::Separator
EXTRN	?SameLine@ImGui@@YAXMM@Z:PROC			; ImGui::SameLine
EXTRN	?NewLine@ImGui@@YAXXZ:PROC			; ImGui::NewLine
EXTRN	?Spacing@ImGui@@YAXXZ:PROC			; ImGui::Spacing
EXTRN	?Dummy@ImGui@@YAXABUImVec2@@@Z:PROC		; ImGui::Dummy
EXTRN	?Indent@ImGui@@YAXM@Z:PROC			; ImGui::Indent
EXTRN	?Unindent@ImGui@@YAXM@Z:PROC			; ImGui::Unindent
EXTRN	?BeginGroup@ImGui@@YAXXZ:PROC			; ImGui::BeginGroup
EXTRN	?EndGroup@ImGui@@YAXXZ:PROC			; ImGui::EndGroup
EXTRN	?GetCursorPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorPos
EXTRN	?GetCursorPosX@ImGui@@YAMXZ:PROC		; ImGui::GetCursorPosX
EXTRN	?SetCursorPosX@ImGui@@YAXM@Z:PROC		; ImGui::SetCursorPosX
EXTRN	?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorStartPos
EXTRN	?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetCursorScreenPos
EXTRN	?AlignTextToFramePadding@ImGui@@YAXXZ:PROC	; ImGui::AlignTextToFramePadding
EXTRN	?GetTextLineHeight@ImGui@@YAMXZ:PROC		; ImGui::GetTextLineHeight
EXTRN	?GetTextLineHeightWithSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetTextLineHeightWithSpacing
EXTRN	?GetFrameHeightWithSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetFrameHeightWithSpacing
EXTRN	?PushID@ImGui@@YAXPBD@Z:PROC			; ImGui::PushID
EXTRN	?PushID@ImGui@@YAXPBX@Z:PROC			; ImGui::PushID
EXTRN	?PushID@ImGui@@YAXH@Z:PROC			; ImGui::PushID
EXTRN	?PopID@ImGui@@YAXXZ:PROC			; ImGui::PopID
EXTRN	?GetID@ImGui@@YAIPBD@Z:PROC			; ImGui::GetID
EXTRN	?GetID@ImGui@@YAIPBX@Z:PROC			; ImGui::GetID
EXTRN	?TextUnformatted@ImGui@@YAXPBD0@Z:PROC		; ImGui::TextUnformatted
EXTRN	?Text@ImGui@@YAXPBDZZ:PROC			; ImGui::Text
EXTRN	?TextColored@ImGui@@YAXABUImVec4@@PBDZZ:PROC	; ImGui::TextColored
EXTRN	?TextDisabled@ImGui@@YAXPBDZZ:PROC		; ImGui::TextDisabled
EXTRN	?TextWrapped@ImGui@@YAXPBDZZ:PROC		; ImGui::TextWrapped
EXTRN	?LabelText@ImGui@@YAXPBD0ZZ:PROC		; ImGui::LabelText
EXTRN	?BulletText@ImGui@@YAXPBDZZ:PROC		; ImGui::BulletText
EXTRN	?Button@ImGui@@YA_NPBDABUImVec2@@@Z:PROC	; ImGui::Button
EXTRN	?SmallButton@ImGui@@YA_NPBD@Z:PROC		; ImGui::SmallButton
EXTRN	?InvisibleButton@ImGui@@YA_NPBDABUImVec2@@@Z:PROC ; ImGui::InvisibleButton
EXTRN	?ArrowButton@ImGui@@YA_NPBDH@Z:PROC		; ImGui::ArrowButton
EXTRN	?Image@ImGui@@YAXPAXABUImVec2@@11ABUImVec4@@2@Z:PROC ; ImGui::Image
EXTRN	?ImageButton@ImGui@@YA_NPAXABUImVec2@@11HABUImVec4@@2@Z:PROC ; ImGui::ImageButton
EXTRN	?Checkbox@ImGui@@YA_NPBDPA_N@Z:PROC		; ImGui::Checkbox
EXTRN	?CheckboxFlags@ImGui@@YA_NPBDPAII@Z:PROC	; ImGui::CheckboxFlags
EXTRN	?RadioButton@ImGui@@YA_NPBD_N@Z:PROC		; ImGui::RadioButton
EXTRN	?RadioButton@ImGui@@YA_NPBDPAHH@Z:PROC		; ImGui::RadioButton
EXTRN	?ProgressBar@ImGui@@YAXMABUImVec2@@PBD@Z:PROC	; ImGui::ProgressBar
EXTRN	?Bullet@ImGui@@YAXXZ:PROC			; ImGui::Bullet
EXTRN	?BeginCombo@ImGui@@YA_NPBD0H@Z:PROC		; ImGui::BeginCombo
EXTRN	?EndCombo@ImGui@@YAXXZ:PROC			; ImGui::EndCombo
EXTRN	?Combo@ImGui@@YA_NPBDPAHQBQBDHH@Z:PROC		; ImGui::Combo
EXTRN	?Combo@ImGui@@YA_NPBDPAH0H@Z:PROC		; ImGui::Combo
EXTRN	?Combo@ImGui@@YA_NPBDPAHP6A_NPAXHPAPBD@Z2HH@Z:PROC ; ImGui::Combo
EXTRN	?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z:PROC	; ImGui::DragFloat
EXTRN	?DragFloat2@ImGui@@YA_NPBDQAMMMM0M@Z:PROC	; ImGui::DragFloat2
EXTRN	?DragFloat3@ImGui@@YA_NPBDQAMMMM0M@Z:PROC	; ImGui::DragFloat3
EXTRN	?DragFloat4@ImGui@@YA_NPBDQAMMMM0M@Z:PROC	; ImGui::DragFloat4
EXTRN	?DragFloatRange2@ImGui@@YA_NPBDPAM1MMM00M@Z:PROC ; ImGui::DragFloatRange2
EXTRN	?DragInt@ImGui@@YA_NPBDPAHMHH0@Z:PROC		; ImGui::DragInt
EXTRN	?DragInt2@ImGui@@YA_NPBDQAHMHH0@Z:PROC		; ImGui::DragInt2
EXTRN	?DragInt3@ImGui@@YA_NPBDQAHMHH0@Z:PROC		; ImGui::DragInt3
EXTRN	?DragInt4@ImGui@@YA_NPBDQAHMHH0@Z:PROC		; ImGui::DragInt4
EXTRN	?DragIntRange2@ImGui@@YA_NPBDPAH1MHH00@Z:PROC	; ImGui::DragIntRange2
EXTRN	?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z:PROC	; ImGui::DragScalar
EXTRN	?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z:PROC	; ImGui::SliderFloat
EXTRN	?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z:PROC	; ImGui::SliderFloat2
EXTRN	?SliderFloat3@ImGui@@YA_NPBDQAMMM0M@Z:PROC	; ImGui::SliderFloat3
EXTRN	?SliderFloat4@ImGui@@YA_NPBDQAMMM0M@Z:PROC	; ImGui::SliderFloat4
EXTRN	?SliderAngle@ImGui@@YA_NPBDPAMMM0@Z:PROC	; ImGui::SliderAngle
EXTRN	?SliderInt@ImGui@@YA_NPBDPAHHH0@Z:PROC		; ImGui::SliderInt
EXTRN	?SliderInt2@ImGui@@YA_NPBDQAHHH0@Z:PROC		; ImGui::SliderInt2
EXTRN	?SliderInt3@ImGui@@YA_NPBDQAHHH0@Z:PROC		; ImGui::SliderInt3
EXTRN	?SliderInt4@ImGui@@YA_NPBDQAHHH0@Z:PROC		; ImGui::SliderInt4
EXTRN	?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z:PROC	; ImGui::SliderScalar
EXTRN	?VSliderFloat@ImGui@@YA_NPBDABUImVec2@@PAMMM0M@Z:PROC ; ImGui::VSliderFloat
EXTRN	?VSliderInt@ImGui@@YA_NPBDABUImVec2@@PAHHH0@Z:PROC ; ImGui::VSliderInt
EXTRN	?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z:PROC ; ImGui::InputText
EXTRN	?InputTextMultiline@ImGui@@YA_NPBDPADIABUImVec2@@HP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z:PROC ; ImGui::InputTextMultiline
EXTRN	?InputTextWithHint@ImGui@@YA_NPBD0PADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z:PROC ; ImGui::InputTextWithHint
EXTRN	?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z:PROC	; ImGui::InputFloat
EXTRN	?InputFloat2@ImGui@@YA_NPBDQAM0H@Z:PROC		; ImGui::InputFloat2
EXTRN	?InputFloat3@ImGui@@YA_NPBDQAM0H@Z:PROC		; ImGui::InputFloat3
EXTRN	?InputFloat4@ImGui@@YA_NPBDQAM0H@Z:PROC		; ImGui::InputFloat4
EXTRN	?InputInt@ImGui@@YA_NPBDPAHHHH@Z:PROC		; ImGui::InputInt
EXTRN	?InputInt2@ImGui@@YA_NPBDQAHH@Z:PROC		; ImGui::InputInt2
EXTRN	?InputInt3@ImGui@@YA_NPBDQAHH@Z:PROC		; ImGui::InputInt3
EXTRN	?InputInt4@ImGui@@YA_NPBDQAHH@Z:PROC		; ImGui::InputInt4
EXTRN	?InputDouble@ImGui@@YA_NPBDPANNN0H@Z:PROC	; ImGui::InputDouble
EXTRN	?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z:PROC	; ImGui::InputScalar
EXTRN	?ColorEdit3@ImGui@@YA_NPBDQAMH@Z:PROC		; ImGui::ColorEdit3
EXTRN	?ColorEdit4@ImGui@@YA_NPBDQAMH@Z:PROC		; ImGui::ColorEdit4
EXTRN	?ColorPicker4@ImGui@@YA_NPBDQAMHPBM@Z:PROC	; ImGui::ColorPicker4
EXTRN	?ColorButton@ImGui@@YA_NPBDABUImVec4@@HUImVec2@@@Z:PROC ; ImGui::ColorButton
EXTRN	?SetColorEditOptions@ImGui@@YAXH@Z:PROC		; ImGui::SetColorEditOptions
EXTRN	?TreeNode@ImGui@@YA_NPBD@Z:PROC			; ImGui::TreeNode
EXTRN	?TreeNode@ImGui@@YA_NPBD0ZZ:PROC		; ImGui::TreeNode
EXTRN	?TreeNode@ImGui@@YA_NPBXPBDZZ:PROC		; ImGui::TreeNode
EXTRN	?TreeNodeEx@ImGui@@YA_NPBDH@Z:PROC		; ImGui::TreeNodeEx
EXTRN	?TreeNodeEx@ImGui@@YA_NPBDH0ZZ:PROC		; ImGui::TreeNodeEx
EXTRN	?TreeNodeEx@ImGui@@YA_NPBXHPBDZZ:PROC		; ImGui::TreeNodeEx
EXTRN	?TreePop@ImGui@@YAXXZ:PROC			; ImGui::TreePop
EXTRN	?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ:PROC	; ImGui::GetTreeNodeToLabelSpacing
EXTRN	?CollapsingHeader@ImGui@@YA_NPBDH@Z:PROC	; ImGui::CollapsingHeader
EXTRN	?CollapsingHeader@ImGui@@YA_NPBDPA_NH@Z:PROC	; ImGui::CollapsingHeader
EXTRN	?SetNextItemOpen@ImGui@@YAX_NH@Z:PROC		; ImGui::SetNextItemOpen
EXTRN	?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z:PROC	; ImGui::Selectable
EXTRN	?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z:PROC ; ImGui::Selectable
EXTRN	?ListBox@ImGui@@YA_NPBDPAHQBQBDHH@Z:PROC	; ImGui::ListBox
EXTRN	?ListBoxHeader@ImGui@@YA_NPBDABUImVec2@@@Z:PROC	; ImGui::ListBoxHeader
EXTRN	?ListBoxHeader@ImGui@@YA_NPBDHH@Z:PROC		; ImGui::ListBoxHeader
EXTRN	?ListBoxFooter@ImGui@@YAXXZ:PROC		; ImGui::ListBoxFooter
EXTRN	?PlotLines@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z:PROC ; ImGui::PlotLines
EXTRN	?PlotLines@ImGui@@YAXPBDP6AMPAXH@Z1HH0MMUImVec2@@@Z:PROC ; ImGui::PlotLines
EXTRN	?PlotHistogram@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z:PROC ; ImGui::PlotHistogram
EXTRN	?PlotHistogram@ImGui@@YAXPBDP6AMPAXH@Z1HH0MMUImVec2@@@Z:PROC ; ImGui::PlotHistogram
EXTRN	?BeginMenuBar@ImGui@@YA_NXZ:PROC		; ImGui::BeginMenuBar
EXTRN	?EndMenuBar@ImGui@@YAXXZ:PROC			; ImGui::EndMenuBar
EXTRN	?BeginMainMenuBar@ImGui@@YA_NXZ:PROC		; ImGui::BeginMainMenuBar
EXTRN	?EndMainMenuBar@ImGui@@YAXXZ:PROC		; ImGui::EndMainMenuBar
EXTRN	?BeginMenu@ImGui@@YA_NPBD_N@Z:PROC		; ImGui::BeginMenu
EXTRN	?EndMenu@ImGui@@YAXXZ:PROC			; ImGui::EndMenu
EXTRN	?MenuItem@ImGui@@YA_NPBD0_N1@Z:PROC		; ImGui::MenuItem
EXTRN	?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z:PROC		; ImGui::MenuItem
EXTRN	?BeginTooltip@ImGui@@YAXXZ:PROC			; ImGui::BeginTooltip
EXTRN	?EndTooltip@ImGui@@YAXXZ:PROC			; ImGui::EndTooltip
EXTRN	?SetTooltip@ImGui@@YAXPBDZZ:PROC		; ImGui::SetTooltip
EXTRN	?OpenPopup@ImGui@@YAXPBD@Z:PROC			; ImGui::OpenPopup
EXTRN	?BeginPopup@ImGui@@YA_NPBDH@Z:PROC		; ImGui::BeginPopup
EXTRN	?BeginPopupContextItem@ImGui@@YA_NPBDH@Z:PROC	; ImGui::BeginPopupContextItem
EXTRN	?BeginPopupContextWindow@ImGui@@YA_NPBDH_N@Z:PROC ; ImGui::BeginPopupContextWindow
EXTRN	?BeginPopupModal@ImGui@@YA_NPBDPA_NH@Z:PROC	; ImGui::BeginPopupModal
EXTRN	?EndPopup@ImGui@@YAXXZ:PROC			; ImGui::EndPopup
EXTRN	?OpenPopupOnItemClick@ImGui@@YA_NPBDH@Z:PROC	; ImGui::OpenPopupOnItemClick
EXTRN	?IsPopupOpen@ImGui@@YA_NPBD@Z:PROC		; ImGui::IsPopupOpen
EXTRN	?CloseCurrentPopup@ImGui@@YAXXZ:PROC		; ImGui::CloseCurrentPopup
EXTRN	?Columns@ImGui@@YAXHPBD_N@Z:PROC		; ImGui::Columns
EXTRN	?NextColumn@ImGui@@YAXXZ:PROC			; ImGui::NextColumn
EXTRN	?GetColumnIndex@ImGui@@YAHXZ:PROC		; ImGui::GetColumnIndex
EXTRN	?GetColumnWidth@ImGui@@YAMH@Z:PROC		; ImGui::GetColumnWidth
EXTRN	?GetColumnOffset@ImGui@@YAMH@Z:PROC		; ImGui::GetColumnOffset
EXTRN	?BeginTabBar@ImGui@@YA_NPBDH@Z:PROC		; ImGui::BeginTabBar
EXTRN	?EndTabBar@ImGui@@YAXXZ:PROC			; ImGui::EndTabBar
EXTRN	?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z:PROC	; ImGui::BeginTabItem
EXTRN	?EndTabItem@ImGui@@YAXXZ:PROC			; ImGui::EndTabItem
EXTRN	?SetTabItemClosed@ImGui@@YAXPBD@Z:PROC		; ImGui::SetTabItemClosed
EXTRN	?LogToTTY@ImGui@@YAXH@Z:PROC			; ImGui::LogToTTY
EXTRN	?LogToClipboard@ImGui@@YAXH@Z:PROC		; ImGui::LogToClipboard
EXTRN	?LogFinish@ImGui@@YAXXZ:PROC			; ImGui::LogFinish
EXTRN	?LogButtons@ImGui@@YAXXZ:PROC			; ImGui::LogButtons
EXTRN	?LogText@ImGui@@YAXPBDZZ:PROC			; ImGui::LogText
EXTRN	?BeginDragDropSource@ImGui@@YA_NH@Z:PROC	; ImGui::BeginDragDropSource
EXTRN	?SetDragDropPayload@ImGui@@YA_NPBDPBXIH@Z:PROC	; ImGui::SetDragDropPayload
EXTRN	?EndDragDropSource@ImGui@@YAXXZ:PROC		; ImGui::EndDragDropSource
EXTRN	?BeginDragDropTarget@ImGui@@YA_NXZ:PROC		; ImGui::BeginDragDropTarget
EXTRN	?AcceptDragDropPayload@ImGui@@YAPBUImGuiPayload@@PBDH@Z:PROC ; ImGui::AcceptDragDropPayload
EXTRN	?EndDragDropTarget@ImGui@@YAXXZ:PROC		; ImGui::EndDragDropTarget
EXTRN	?SetItemDefaultFocus@ImGui@@YAXXZ:PROC		; ImGui::SetItemDefaultFocus
EXTRN	?SetKeyboardFocusHere@ImGui@@YAXH@Z:PROC	; ImGui::SetKeyboardFocusHere
EXTRN	?IsItemHovered@ImGui@@YA_NH@Z:PROC		; ImGui::IsItemHovered
EXTRN	?IsItemActive@ImGui@@YA_NXZ:PROC		; ImGui::IsItemActive
EXTRN	?IsItemFocused@ImGui@@YA_NXZ:PROC		; ImGui::IsItemFocused
EXTRN	?IsItemClicked@ImGui@@YA_NH@Z:PROC		; ImGui::IsItemClicked
EXTRN	?IsItemVisible@ImGui@@YA_NXZ:PROC		; ImGui::IsItemVisible
EXTRN	?IsItemEdited@ImGui@@YA_NXZ:PROC		; ImGui::IsItemEdited
EXTRN	?IsItemActivated@ImGui@@YA_NXZ:PROC		; ImGui::IsItemActivated
EXTRN	?IsItemDeactivated@ImGui@@YA_NXZ:PROC		; ImGui::IsItemDeactivated
EXTRN	?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ:PROC	; ImGui::IsItemDeactivatedAfterEdit
EXTRN	?IsItemToggledOpen@ImGui@@YA_NXZ:PROC		; ImGui::IsItemToggledOpen
EXTRN	?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectMin
EXTRN	?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectMax
EXTRN	?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ:PROC	; ImGui::GetItemRectSize
EXTRN	?GetTime@ImGui@@YANXZ:PROC			; ImGui::GetTime
EXTRN	?GetFrameCount@ImGui@@YAHXZ:PROC		; ImGui::GetFrameCount
EXTRN	?GetBackgroundDrawList@ImGui@@YAPAUImDrawList@@XZ:PROC ; ImGui::GetBackgroundDrawList
EXTRN	?GetForegroundDrawList@ImGui@@YAPAUImDrawList@@XZ:PROC ; ImGui::GetForegroundDrawList
EXTRN	?GetStyleColorName@ImGui@@YAPBDH@Z:PROC		; ImGui::GetStyleColorName
EXTRN	?BeginChildFrame@ImGui@@YA_NIABUImVec2@@H@Z:PROC ; ImGui::BeginChildFrame
EXTRN	?EndChildFrame@ImGui@@YAXXZ:PROC		; ImGui::EndChildFrame
EXTRN	?ColorConvertFloat4ToU32@ImGui@@YAIABUImVec4@@@Z:PROC ; ImGui::ColorConvertFloat4ToU32
EXTRN	?ColorConvertHSVtoRGB@ImGui@@YAXMMMAAM00@Z:PROC	; ImGui::ColorConvertHSVtoRGB
EXTRN	?GetKeyIndex@ImGui@@YAHH@Z:PROC			; ImGui::GetKeyIndex
EXTRN	?IsKeyPressed@ImGui@@YA_NH_N@Z:PROC		; ImGui::IsKeyPressed
EXTRN	?IsKeyReleased@ImGui@@YA_NH@Z:PROC		; ImGui::IsKeyReleased
EXTRN	?CaptureKeyboardFromApp@ImGui@@YAX_N@Z:PROC	; ImGui::CaptureKeyboardFromApp
EXTRN	?IsMouseDown@ImGui@@YA_NH@Z:PROC		; ImGui::IsMouseDown
EXTRN	?IsMouseClicked@ImGui@@YA_NH_N@Z:PROC		; ImGui::IsMouseClicked
EXTRN	?IsMouseReleased@ImGui@@YA_NH@Z:PROC		; ImGui::IsMouseReleased
EXTRN	?IsMouseDoubleClicked@ImGui@@YA_NH@Z:PROC	; ImGui::IsMouseDoubleClicked
EXTRN	?IsMouseHoveringRect@ImGui@@YA_NABUImVec2@@0_N@Z:PROC ; ImGui::IsMouseHoveringRect
EXTRN	?IsMousePosValid@ImGui@@YA_NPBUImVec2@@@Z:PROC	; ImGui::IsMousePosValid
EXTRN	?IsMouseDragging@ImGui@@YA_NHM@Z:PROC		; ImGui::IsMouseDragging
EXTRN	?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z:PROC ; ImGui::GetMouseDragDelta
EXTRN	?ResetMouseDragDelta@ImGui@@YAXH@Z:PROC		; ImGui::ResetMouseDragDelta
EXTRN	?GetMouseCursor@ImGui@@YAHXZ:PROC		; ImGui::GetMouseCursor
EXTRN	?SetMouseCursor@ImGui@@YAXH@Z:PROC		; ImGui::SetMouseCursor
EXTRN	?MemAlloc@ImGui@@YAPAXI@Z:PROC			; ImGui::MemAlloc
EXTRN	?MemFree@ImGui@@YAXPAX@Z:PROC			; ImGui::MemFree
EXTRN	??0ImGuiStyle@@QAE@XZ:PROC			; ImGuiStyle::ImGuiStyle
EXTRN	?DeleteChars@ImGuiInputTextCallbackData@@QAEXHH@Z:PROC ; ImGuiInputTextCallbackData::DeleteChars
EXTRN	?InsertChars@ImGuiInputTextCallbackData@@QAEXHPBD0@Z:PROC ; ImGuiInputTextCallbackData::InsertChars
EXTRN	??0ImGuiTextFilter@@QAE@PBD@Z:PROC		; ImGuiTextFilter::ImGuiTextFilter
EXTRN	?Draw@ImGuiTextFilter@@QAE_NPBDM@Z:PROC		; ImGuiTextFilter::Draw
EXTRN	?PassFilter@ImGuiTextFilter@@QBE_NPBD0@Z:PROC	; ImGuiTextFilter::PassFilter
EXTRN	?appendf@ImGuiTextBuffer@@QAAXPBDZZ:PROC	; ImGuiTextBuffer::appendf
EXTRN	?appendfv@ImGuiTextBuffer@@QAEXPBDPAD@Z:PROC	; ImGuiTextBuffer::appendfv
EXTRN	?Step@ImGuiListClipper@@QAE_NXZ:PROC		; ImGuiListClipper::Step
EXTRN	?Begin@ImGuiListClipper@@QAEXHM@Z:PROC		; ImGuiListClipper::Begin
EXTRN	?End@ImGuiListClipper@@QAEXXZ:PROC		; ImGuiListClipper::End
EXTRN	?PushClipRect@ImDrawList@@QAEXUImVec2@@0_N@Z:PROC ; ImDrawList::PushClipRect
EXTRN	?PopClipRect@ImDrawList@@QAEXXZ:PROC		; ImDrawList::PopClipRect
EXTRN	?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z:PROC	; ImDrawList::AddLine
EXTRN	?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z:PROC ; ImDrawList::AddRect
EXTRN	?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z:PROC ; ImDrawList::AddRectFilled
EXTRN	?AddRectFilledMultiColor@ImDrawList@@QAEXABUImVec2@@0IIII@Z:PROC ; ImDrawList::AddRectFilledMultiColor
EXTRN	?AddTriangle@ImDrawList@@QAEXABUImVec2@@00IM@Z:PROC ; ImDrawList::AddTriangle
EXTRN	?AddTriangleFilled@ImDrawList@@QAEXABUImVec2@@00I@Z:PROC ; ImDrawList::AddTriangleFilled
EXTRN	?AddCircle@ImDrawList@@QAEXABUImVec2@@MIHM@Z:PROC ; ImDrawList::AddCircle
EXTRN	?AddCircleFilled@ImDrawList@@QAEXABUImVec2@@MIH@Z:PROC ; ImDrawList::AddCircleFilled
EXTRN	?AddNgon@ImDrawList@@QAEXABUImVec2@@MIHM@Z:PROC	; ImDrawList::AddNgon
EXTRN	?AddNgonFilled@ImDrawList@@QAEXABUImVec2@@MIH@Z:PROC ; ImDrawList::AddNgonFilled
EXTRN	?AddText@ImDrawList@@QAEXPBUImFont@@MABUImVec2@@IPBD2MPBUImVec4@@@Z:PROC ; ImDrawList::AddText
EXTRN	?AddBezierCurve@ImDrawList@@QAEXABUImVec2@@000IMH@Z:PROC ; ImDrawList::AddBezierCurve
EXTRN	?FindGlyphNoFallback@ImFont@@QBEPBUImFontGlyph@@G@Z:PROC ; ImFont::FindGlyphNoFallback
EXTRN	?RenderChar@ImFont@@QBEXPAUImDrawList@@MUImVec2@@IG@Z:PROC ; ImFont::RenderChar
EXTRN	__imp__toupper:PROC
EXTRN	_cos:PROC
EXTRN	_fmod:PROC
EXTRN	_sin:PROC
EXTRN	_sqrt:PROC
EXTRN	__imp____stdio_common_vsprintf:PROC
EXTRN	__imp__free:PROC
EXTRN	__imp__malloc:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	@__CheckForDebuggerJustMyCode@4:PROC
EXTRN	@__security_check_cookie@4:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
EXTRN	___CxxFrameHandler3:PROC
EXTRN	__chkstk:PROC
EXTRN	__Init_thread_epoch:DWORD
EXTRN	?EmptyString@ImGuiTextBuffer@@2PADA:BYTE	; ImGuiTextBuffer::EmptyString
EXTRN	___security_cookie:DWORD
EXTRN	__fltused:DWORD
EXTRN	__tls_array:DWORD
EXTRN	__tls_index:DWORD
;	COMDAT ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA
_BSS	SEGMENT
?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA DQ 01H DUP (?) ; `__local_stdio_printf_options'::`2'::_OptionsStorage
_BSS	ENDS
_BSS	SEGMENT
?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_documents
	ALIGN	4

?show_app_main_menu_bar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_main_menu_bar
	ALIGN	4

?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_console
	ALIGN	4

?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_log
	ALIGN	4

?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_layout
	ALIGN	4

?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_property_editor
	ALIGN	4

?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_long_text
	ALIGN	4

?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_auto_resize
	ALIGN	4

?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_constrained_resize
	ALIGN	4

?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_simple_overlay
	ALIGN	4

?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_window_titles
	ALIGN	4

?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_custom_rendering
	ALIGN	4

?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_metrics
	ALIGN	4

?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_style_editor
	ALIGN	4

?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::show_app_about
	ALIGN	4

?no_titlebar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_titlebar
	ALIGN	4

?no_scrollbar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_scrollbar
	ALIGN	4

?no_menu@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_menu
	ALIGN	4

?no_move@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_move
	ALIGN	4

?no_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_resize
	ALIGN	4

?no_collapse@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_collapse
	ALIGN	4

?no_close@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_close
	ALIGN	4

?no_nav@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_nav
	ALIGN	4

?no_background@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_background
	ALIGN	4

?no_bring_to_front@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowDemoWindow'::`2'::no_bring_to_front
	ALIGN	4

?clicked@?6??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`7'::clicked
?e@?6??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?)	; `ShowDemoWindowWidgets'::`7'::e
?counter@?6??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`7'::counter
?item_current@?BM@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`28'::item_current
?str1@?BN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 080H DUP (?) ; `ShowDemoWindowWidgets'::`29'::str1
?i1@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`31'::i1
?f2@?BP@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`31'::f2
?angle@?BP@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`31'::angle
?current_element@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`31'::current_element
?align_label_with_current_x_position@?DE@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`52'::align_label_with_current_x_position
	ALIGN	4

?pressed_count@?GO@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`110'::pressed_count
?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'[::C]::flags
?item_current@?IC@??ShowDemoWindowWidgets@@YAXXZ@4PBDB DD 01H DUP (?) ; `ShowDemoWindowWidgets'[::C]::item_current
?$TSS0@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'[::C]::$TSS0
?item_current_2@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'[::C]::item_current_2
?item_current_4@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'[::C]::item_current_4
?selection@?KD@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 05H DUP (?) ; `ShowDemoWindowWidgets'::`163'::selection
	ALIGN	4

?selected@?KN@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 03H DUP (?) ; `ShowDemoWindowWidgets'::`173'::selected
	ALIGN	4

?selected@?LA@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`176'::selected
?buf1@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`221'::buf1
?buf2@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`221'::buf2
?buf3@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`221'::buf3
?buf4@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`221'::buf4
?buf5@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`221'::buf5
?buf6@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 040H DUP (?) ; `ShowDemoWindowWidgets'::`221'::buf6
?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A DB 0cH DUP (?) ; `ShowDemoWindowWidgets'::`224'::my_str
?$TSS1@?OA@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`224'::$TSS1
?values@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 05aH DUP (?) ; `ShowDemoWindowWidgets'::`229'::values
?values_offset@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`229'::values_offset
?refresh_time@?OF@??ShowDemoWindowWidgets@@YAXXZ@4NA DQ 01H DUP (?) ; `ShowDemoWindowWidgets'::`229'::refresh_time
?phase@?OJ@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`233'::phase
?func_type@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`229'::func_type
?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`229'::progress
?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`247'::color
?$TSS2@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::$TSS2
?alpha_half_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::alpha_half_preview
	ALIGN	4

?hdr@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::hdr
	ALIGN	4

?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A DB 0200H DUP (?) ; `ShowDemoWindowWidgets'::`247'::saved_palette
?$TSS3@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::$TSS3
?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`247'::backup_color
?$TSS4@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::$TSS4
?ref_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::ref_color
	ALIGN	4

?ref_color_v@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`247'::ref_color_v
?$TSS5@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::$TSS5
?display_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::display_mode
?picker_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::picker_mode
?color_stored_as_hsv@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`247'::color_stored_as_hsv
?$TSS6@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`247'::$TSS6
?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`307'::drag_clamp
	ALIGN	4

?int_value@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`313'::int_value
?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowWidgets'::`340'::mode
?b@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`394'::b
	ALIGN	4

?str@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 010H DUP (?) ; `ShowDemoWindowWidgets'::`394'::str
?embed_all_inside_a_child_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`394'::embed_all_inside_a_child_window
	ALIGN	4

?test_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowWidgets'::`394'::test_window
	ALIGN	4

?disable_mouse_wheel@?6??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`7'::disable_mouse_wheel
	ALIGN	4

?disable_menu@?6??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`7'::disable_menu
	ALIGN	4

?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA DD 01H DUP (?)	; `ShowDemoWindowLayout'::`28'::f
?c1@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`31'::c1
	ALIGN	4

?c2@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`31'::c2
	ALIGN	4

?c3@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`31'::c3
	ALIGN	4

?c4@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`31'::c4
	ALIGN	4

?enable_extra_decorations@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`106'::enable_extra_decorations
	ALIGN	4

?scroll_to_off_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA DD 01H DUP (?) ; `ShowDemoWindowLayout'::`106'::scroll_to_off_px
?show_horizontal_contents_size_demo_window@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`106'::show_horizontal_contents_size_demo_window
	ALIGN	4

?show_text_wrapped@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`165'::show_text_wrapped
	ALIGN	4

?show_child@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`165'::show_child
	ALIGN	4

?explicit_content_size@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowLayout'::`165'::explicit_content_size
	ALIGN	8

?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A DQ 01H DUP (?) ; `ShowDemoWindowLayout'::`211'::size
?$TSS0@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowLayout'::`211'::$TSS0
	ALIGN	8

?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A DQ 01H DUP (?) ; `ShowDemoWindowLayout'::`211'::offset
?$TSS1@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA DD 01H DUP (?) ; `ShowDemoWindowLayout'::`211'::$TSS1
?dont_ask_me_next_time@?EE@??ShowDemoWindowPopups@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowPopups'::`68'::dont_ask_me_next_time
	ALIGN	4

?disable_indent@?1??ShowDemoWindowColumns@@YAXXZ@4_NA DB 01H DUP (?) ; `ShowDemoWindowColumns'::`2'::disable_indent
	ALIGN	4

?filter@?4??ShowDemoWindowMisc@@YAXXZ@4UImGuiTextFilter@@A DB 0110H DUP (?) ; `ShowDemoWindowMisc'::`5'::filter
?$TSS0@?4??ShowDemoWindowMisc@@YAXXZ@4HA DD 01H DUP (?)	; `ShowDemoWindowMisc'::`5'::$TSS0
?f3@?EF@??ShowDemoWindowMisc@@YAXXZ@4PAMA DD 03H DUP (?) ; `ShowDemoWindowMisc'::`69'::f3
?show_config_info@?1??ShowAboutWindow@ImGui@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ImGui::ShowAboutWindow'::`2'::show_config_info
	ALIGN	4

?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A DB 03b0H DUP (?) ; `ImGui::ShowStyleEditor'::`2'::ref_saved_style
?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`2'::$TSS0
?output_dest@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`34'::output_dest
?filter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4UImGuiTextFilter@@A DB 0110H DUP (?) ; `ImGui::ShowStyleEditor'::`34'::filter
?$TSS1@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`34'::$TSS1
?alpha_flags@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA DD 01H DUP (?) ; `ImGui::ShowStyleEditor'::`34'::alpha_flags
?n@?BK@??ShowExampleMenuFile@@YAXXZ@4HA DD 01H DUP (?)	; `ShowExampleMenuFile'::`26'::n
?console@?1??ShowExampleAppConsole@@YAXPA_N@Z@4UExampleAppConsole@@A DB 023cH DUP (?) ; `ShowExampleAppConsole'::`2'::console
?$TSS0@?1??ShowExampleAppConsole@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppConsole'::`2'::$TSS0
?log@?1??ShowExampleAppLog@@YAXPA_N@Z@4UExampleAppLog@@A DB 012cH DUP (?) ; `ShowExampleAppLog'::`2'::log
?$TSS0@?1??ShowExampleAppLog@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLog'::`2'::$TSS0
?counter@?4??ShowExampleAppLog@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLog'::`5'::counter
?selected@?4??ShowExampleAppLayout@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLayout'::`5'::selected
?test_type@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLongText'::`2'::test_type
?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A DB 0cH DUP (?) ; `ShowExampleAppLongText'::`2'::log
?$TSS0@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLongText'::`2'::$TSS0
?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppLongText'::`2'::lines
?auto_resize@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ShowExampleAppConstrainedResize'::`2'::auto_resize
	ALIGN	4

?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppConstrainedResize'::`2'::type
?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppSimpleOverlay'::`2'::corner
?colf@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4UImVec4@@A DB 010H DUP (?) ; `ShowExampleAppCustomRendering'::`11'::colf
?$TSS0@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppCustomRendering'::`11'::$TSS0
?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A DB 0cH DUP (?) ; `ShowExampleAppCustomRendering'::`16'::points
?$TSS1@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppCustomRendering'::`16'::$TSS1
?adding_line@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA DB 01H DUP (?) ; `ShowExampleAppCustomRendering'::`16'::adding_line
	ALIGN	4

?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A DB 0cH DUP (?) ; `ShowExampleAppDocuments'::`2'::app
?$TSS0@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppDocuments'::`2'::$TSS0
?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A DB 0cH DUP (?) ; `ShowExampleAppDocuments'::`2'::close_queue
?$TSS1@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA DD 01H DUP (?) ; `ShowExampleAppDocuments'::`2'::$TSS1
_BSS	ENDS
;	COMDAT __xmm@80000000800000008000000080000000
CONST	SEGMENT
__xmm@80000000800000008000000080000000 DB 00H, 00H, 00H, 080H, 00H, 00H, 00H
	DB	080H, 00H, 00H, 00H, 080H, 00H, 00H, 00H, 080H
CONST	ENDS
;	COMDAT __xmm@41f00000000000000000000000000000
CONST	SEGMENT
__xmm@41f00000000000000000000000000000 DB 00H, 00H, 00H, 00H, 00H, 00H, 00H
	DB	00H, 00H, 00H, 00H, 00H, 00H, 00H, 0f0H, 'A'
CONST	ENDS
;	COMDAT __real@d01502f9
CONST	SEGMENT
__real@d01502f9 DD 0d01502f9r			; -1e+10
CONST	ENDS
;	COMDAT __real@c3b40000
CONST	SEGMENT
__real@c3b40000 DD 0c3b40000r			; -360
CONST	ENDS
;	COMDAT __real@c3200000
CONST	SEGMENT
__real@c3200000 DD 0c3200000r			; -160
CONST	ENDS
;	COMDAT __real@c30c6bf526340000
CONST	SEGMENT
__real@c30c6bf526340000 DQ 0c30c6bf526340000r	; -1e+15
CONST	ENDS
;	COMDAT __real@c2c80000
CONST	SEGMENT
__real@c2c80000 DD 0c2c80000r			; -100
CONST	ENDS
;	COMDAT __real@c1a00000
CONST	SEGMENT
__real@c1a00000 DD 0c1a00000r			; -20
CONST	ENDS
;	COMDAT __real@c1400000
CONST	SEGMENT
__real@c1400000 DD 0c1400000r			; -12
CONST	ENDS
;	COMDAT __real@c1200000
CONST	SEGMENT
__real@c1200000 DD 0c1200000r			; -10
CONST	ENDS
;	COMDAT __real@bf800000
CONST	SEGMENT
__real@bf800000 DD 0bf800000r			; -1
CONST	ENDS
;	COMDAT __real@bdcccccd
CONST	SEGMENT
__real@bdcccccd DD 0bdcccccdr			; -0.1
CONST	ENDS
;	COMDAT __real@80800000
CONST	SEGMENT
__real@80800000 DD 080800000r			; -1.17549e-38
CONST	ENDS
;	COMDAT __real@7f7fffff
CONST	SEGMENT
__real@7f7fffff DD 07f7fffffr			; 3.40282e+38
CONST	ENDS
;	COMDAT __real@501502f9
CONST	SEGMENT
__real@501502f9 DD 0501502f9r			; 1e+10
CONST	ENDS
;	COMDAT __real@44db2000
CONST	SEGMENT
__real@44db2000 DD 044db2000r			; 1753
CONST	ENDS
;	COMDAT __real@44bb8000
CONST	SEGMENT
__real@44bb8000 DD 044bb8000r			; 1500
CONST	ENDS
;	COMDAT __real@447a0000
CONST	SEGMENT
__real@447a0000 DD 0447a0000r			; 1000
CONST	ENDS
;	COMDAT __real@44480000
CONST	SEGMENT
__real@44480000 DD 044480000r			; 800
CONST	ENDS
;	COMDAT __real@442a0000
CONST	SEGMENT
__real@442a0000 DD 0442a0000r			; 680
CONST	ENDS
;	COMDAT __real@44228000
CONST	SEGMENT
__real@44228000 DD 044228000r			; 650
CONST	ENDS
;	COMDAT __real@44160000
CONST	SEGMENT
__real@44160000 DD 044160000r			; 600
CONST	ENDS
;	COMDAT __real@44098000
CONST	SEGMENT
__real@44098000 DD 044098000r			; 550
CONST	ENDS
;	COMDAT __real@44020000
CONST	SEGMENT
__real@44020000 DD 044020000r			; 520
CONST	ENDS
;	COMDAT __real@43fa0000
CONST	SEGMENT
__real@43fa0000 DD 043fa0000r			; 500
CONST	ENDS
;	COMDAT __real@43e10000
CONST	SEGMENT
__real@43e10000 DD 043e10000r			; 450
CONST	ENDS
;	COMDAT __real@43dc0000
CONST	SEGMENT
__real@43dc0000 DD 043dc0000r			; 440
CONST	ENDS
;	COMDAT __real@43d70000
CONST	SEGMENT
__real@43d70000 DD 043d70000r			; 430
CONST	ENDS
;	COMDAT __real@43c80000
CONST	SEGMENT
__real@43c80000 DD 043c80000r			; 400
CONST	ENDS
;	COMDAT __real@43b40000
CONST	SEGMENT
__real@43b40000 DD 043b40000r			; 360
CONST	ENDS
;	COMDAT __real@43960000
CONST	SEGMENT
__real@43960000 DD 043960000r			; 300
CONST	ENDS
;	COMDAT __real@43820000
CONST	SEGMENT
__real@43820000 DD 043820000r			; 260
CONST	ENDS
;	COMDAT __real@43480000
CONST	SEGMENT
__real@43480000 DD 043480000r			; 200
CONST	ENDS
;	COMDAT __real@43340000
CONST	SEGMENT
__real@43340000 DD 043340000r			; 180
CONST	ENDS
;	COMDAT __real@43200000
CONST	SEGMENT
__real@43200000 DD 043200000r			; 160
CONST	ENDS
;	COMDAT __real@43160000
CONST	SEGMENT
__real@43160000 DD 043160000r			; 150
CONST	ENDS
;	COMDAT __real@430c6bf526340000
CONST	SEGMENT
__real@430c6bf526340000 DQ 0430c6bf526340000r	; 1e+15
CONST	ENDS
;	COMDAT __real@430c0000
CONST	SEGMENT
__real@430c0000 DD 0430c0000r			; 140
CONST	ENDS
;	COMDAT __real@42f00000
CONST	SEGMENT
__real@42f00000 DD 042f00000r			; 120
CONST	ENDS
;	COMDAT __real@42c80000
CONST	SEGMENT
__real@42c80000 DD 042c80000r			; 100
CONST	ENDS
;	COMDAT __real@42b40000
CONST	SEGMENT
__real@42b40000 DD 042b40000r			; 90
CONST	ENDS
;	COMDAT __real@42a00000
CONST	SEGMENT
__real@42a00000 DD 042a00000r			; 80
CONST	ENDS
;	COMDAT __real@42900000
CONST	SEGMENT
__real@42900000 DD 042900000r			; 72
CONST	ENDS
;	COMDAT __real@42700000
CONST	SEGMENT
__real@42700000 DD 042700000r			; 60
CONST	ENDS
;	COMDAT __real@42480000
CONST	SEGMENT
__real@42480000 DD 042480000r			; 50
CONST	ENDS
;	COMDAT __real@42200000
CONST	SEGMENT
__real@42200000 DD 042200000r			; 40
CONST	ENDS
;	COMDAT __real@420c0000
CONST	SEGMENT
__real@420c0000 DD 0420c0000r			; 35
CONST	ENDS
;	COMDAT __real@42000000
CONST	SEGMENT
__real@42000000 DD 042000000r			; 32
CONST	ENDS
;	COMDAT __real@41f80000
CONST	SEGMENT
__real@41f80000 DD 041f80000r			; 31
CONST	ENDS
;	COMDAT __real@41f00000
CONST	SEGMENT
__real@41f00000 DD 041f00000r			; 30
CONST	ENDS
;	COMDAT __real@41a00000
CONST	SEGMENT
__real@41a00000 DD 041a00000r			; 20
CONST	ENDS
;	COMDAT __real@41900000
CONST	SEGMENT
__real@41900000 DD 041900000r			; 18
CONST	ENDS
;	COMDAT __real@41800000
CONST	SEGMENT
__real@41800000 DD 041800000r			; 16
CONST	ENDS
;	COMDAT __real@41600000
CONST	SEGMENT
__real@41600000 DD 041600000r			; 14
CONST	ENDS
;	COMDAT __real@41400000
CONST	SEGMENT
__real@41400000 DD 041400000r			; 12
CONST	ENDS
;	COMDAT __real@41200000
CONST	SEGMENT
__real@41200000 DD 041200000r			; 10
CONST	ENDS
;	COMDAT __real@411ccccd
CONST	SEGMENT
__real@411ccccd DD 0411ccccdr			; 9.8
CONST	ENDS
;	COMDAT __real@41000000
CONST	SEGMENT
__real@41000000 DD 041000000r			; 8
CONST	ENDS
;	COMDAT __real@40e00000
CONST	SEGMENT
__real@40e00000 DD 040e00000r			; 7
CONST	ENDS
;	COMDAT __real@40a00000
CONST	SEGMENT
__real@40a00000 DD 040a00000r			; 5
CONST	ENDS
;	COMDAT __real@40800000
CONST	SEGMENT
__real@40800000 DD 040800000r			; 4
CONST	ENDS
;	COMDAT __real@40490e56
CONST	SEGMENT
__real@40490e56 DD 040490e56r			; 3.1415
CONST	ENDS
;	COMDAT __real@40400000
CONST	SEGMENT
__real@40400000 DD 040400000r			; 3
CONST	ENDS
;	COMDAT __real@40000000
CONST	SEGMENT
__real@40000000 DD 040000000r			; 2
CONST	ENDS
;	COMDAT __real@3ff0000000000000
CONST	SEGMENT
__real@3ff0000000000000 DQ 03ff0000000000000r	; 1
CONST	ENDS
;	COMDAT __real@3fd0000000000000
CONST	SEGMENT
__real@3fd0000000000000 DQ 03fd0000000000000r	; 0.25
CONST	ENDS
;	COMDAT __real@3fa66666
CONST	SEGMENT
__real@3fa66666 DD 03fa66666r			; 1.3
CONST	ENDS
;	COMDAT __real@3f91111120000000
CONST	SEGMENT
__real@3f91111120000000 DQ 03f91111120000000r	; 0.0166667
CONST	ENDS
;	COMDAT __real@3f8ccccd
CONST	SEGMENT
__real@3f8ccccd DD 03f8ccccdr			; 1.1
CONST	ENDS
;	COMDAT __real@3f847ae140000000
CONST	SEGMENT
__real@3f847ae140000000 DQ 03f847ae140000000r	; 0.01
CONST	ENDS
;	COMDAT __real@3f800000
CONST	SEGMENT
__real@3f800000 DD 03f800000r			; 1
CONST	ENDS
;	COMDAT __real@3f666666
CONST	SEGMENT
__real@3f666666 DD 03f666666r			; 0.9
CONST	ENDS
;	COMDAT __real@3f4ccccd
CONST	SEGMENT
__real@3f4ccccd DD 03f4ccccdr			; 0.8
CONST	ENDS
;	COMDAT __real@3f48c8c9
CONST	SEGMENT
__real@3f48c8c9 DD 03f48c8c9r			; 0.784314
CONST	ENDS
;	COMDAT __real@3f333333
CONST	SEGMENT
__real@3f333333 DD 03f333333r			; 0.7
CONST	ENDS
;	COMDAT __real@3f1a9a9b
CONST	SEGMENT
__real@3f1a9a9b DD 03f1a9a9br			; 0.603922
CONST	ENDS
;	COMDAT __real@3f19999a
CONST	SEGMENT
__real@3f19999a DD 03f19999ar			; 0.6
CONST	ENDS
;	COMDAT __real@3f109091
CONST	SEGMENT
__real@3f109091 DD 03f109091r			; 0.564706
CONST	ENDS
;	COMDAT __real@3f000000
CONST	SEGMENT
__real@3f000000 DD 03f000000r			; 0.5
CONST	ENDS
;	COMDAT __real@3ee4e4e5
CONST	SEGMENT
__real@3ee4e4e5 DD 03ee4e4e5r			; 0.447059
CONST	ENDS
;	COMDAT __real@3ecccccd
CONST	SEGMENT
__real@3ecccccd DD 03ecccccdr			; 0.4
CONST	ENDS
;	COMDAT __real@3eb33333
CONST	SEGMENT
__real@3eb33333 DD 03eb33333r			; 0.35
CONST	ENDS
;	COMDAT __real@3e99999a
CONST	SEGMENT
__real@3e99999a DD 03e99999ar			; 0.3
CONST	ENDS
;	COMDAT __real@3e800000
CONST	SEGMENT
__real@3e800000 DD 03e800000r			; 0.25
CONST	ENDS
;	COMDAT __real@3e6b851f
CONST	SEGMENT
__real@3e6b851f DD 03e6b851fr			; 0.23
CONST	ENDS
;	COMDAT __real@3e4ccccd
CONST	SEGMENT
__real@3e4ccccd DD 03e4ccccdr			; 0.2
CONST	ENDS
;	COMDAT __real@3dcccccd
CONST	SEGMENT
__real@3dcccccd DD 03dcccccdr			; 0.1
CONST	ENDS
;	COMDAT __real@3d4ccccd
CONST	SEGMENT
__real@3d4ccccd DD 03d4ccccdr			; 0.05
CONST	ENDS
;	COMDAT __real@3ca3d70a
CONST	SEGMENT
__real@3ca3d70a DD 03ca3d70ar			; 0.02
CONST	ENDS
;	COMDAT __real@3c23d70a
CONST	SEGMENT
__real@3c23d70a DD 03c23d70ar			; 0.01
CONST	ENDS
;	COMDAT __real@3ba3d70a
CONST	SEGMENT
__real@3ba3d70a DD 03ba3d70ar			; 0.005
CONST	ENDS
;	COMDAT __real@3a03126f
CONST	SEGMENT
__real@3a03126f DD 03a03126fr			; 0.0005
CONST	ENDS
;	COMDAT __real@38d1b717
CONST	SEGMENT
__real@38d1b717 DD 038d1b717r			; 0.0001
CONST	ENDS
;	COMDAT __real@0000000000000000
CONST	SEGMENT
__real@0000000000000000 DQ 00000000000000000r	; 0
CONST	ENDS
;	COMDAT __real@00000000
CONST	SEGMENT
__real@00000000 DD 000000000r			; 0
CONST	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@ DB 'S', 00H
	DB	'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '>', 00H, ' ', 00H, '0'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@JJGEFOJO@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
CONST	SEGMENT
??_C@_1DK@JJGEFOJO@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@ DB 'i'
	DB	00H, 't', 00H, ' ', 00H, '>', 00H, '=', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, ' ', 00H, '&', 00H, '&', 00H, ' '
	DB	00H, 'i', 00H, 't', 00H, ' ', 00H, '<', 00H, ' ', 00H, 'D', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '+', 00H, 'S', 00H, 'i', 00H, 'z'
	DB	00H, 'e', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
CONST	SEGMENT
??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@ DB 'i', 00H
	DB	' ', 00H, '<', 00H, ' ', 00H, 'S', 00H, 'i', 00H, 'z', 00H, 'e'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02JINPPBEP@No@
CONST	SEGMENT
??_C@_02JINPPBEP@No@ DB 'No', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CCLAEDDF@Yes@
CONST	SEGMENT
??_C@_03CCLAEDDF@Yes@ DB 'Yes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02IEBMKJDF@?$CD?$CD@
CONST	SEGMENT
??_C@_02IEBMKJDF@?$CD?$CD@ DB '##', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5it@
CONST	SEGMENT
??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5it@ DB 'Save change '
	DB	'to the following items?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DIODKGEP@Save?$DP@
CONST	SEGMENT
??_C@_05DIODKGEP@Save?$DP@ DB 'Save?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LBABLPF@Exit@
CONST	SEGMENT
??_C@_04LBABLPF@Exit@ DB 'Exit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HCFGHAAC@Close?5All?5Documents@
CONST	SEGMENT
??_C@_0BE@HCFGHAAC@Close?5All?5Documents@ DB 'Close All Documents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BKDKPNMJ@Example?3?5Documents@
CONST	SEGMENT
??_C@_0BD@BKDKPNMJ@Example?3?5Documents@ DB 'Example: Documents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ILMKPHFK@Some?5Document@
CONST	SEGMENT
??_C@_0O@ILMKPHFK@Some?5Document@ DB 'Some Document', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title@
CONST	SEGMENT
??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title@ DB 'A Rather Long Title', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BPAOMENE@Tomato@
CONST	SEGMENT
??_C@_06BPAOMENE@Tomato@ DB 'Tomato', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JOCEHIMN@Carrot@
CONST	SEGMENT
??_C@_06JOCEHIMN@Carrot@ DB 'Carrot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08MEKMCLOD@Eggplant@
CONST	SEGMENT
??_C@_08MEKMCLOD@Eggplant@ DB 'Eggplant', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KPHKCHJL@Lettuce@
CONST	SEGMENT
??_C@_07KPHKCHJL@Lettuce@ DB 'Lettuce', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06NCJMBMDI@CTRL?$CLW@
CONST	SEGMENT
??_C@_06NCJMBMDI@CTRL?$CLW@ DB 'CTRL+W', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGPANJDM@CTRL?$CLS@
CONST	SEGMENT
??_C@_06LGPANJDM@CTRL?$CLS@ DB 'CTRL+S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HKLKIEAD@Save?5?$CFs@
CONST	SEGMENT
??_C@_07HKLKIEAD@Save?5?$CFs@ DB 'Save %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06CGNGJFJO@Modify@
CONST	SEGMENT
??_C@_06CGNGJFJO@Modify@ DB 'Modify', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@
CONST	SEGMENT
??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@ DB 'Lorem ipsum'
	DB	' dolor sit amet, consectetur adipiscing elit, sed do eiusmod '
	DB	'tempor incididunt ut labore et dolore magna aliqua.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC@
CONST	SEGMENT
??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC@ DB 'Document "%s"', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5b@
CONST	SEGMENT
??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5b@ DB 'The Foreground'
	DB	' draw list will be rendered over every Dear ImGui windows.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list@
CONST	SEGMENT
??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list@ DB 'Draw in Foregrou'
	DB	'nd draw list', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5b@
CONST	SEGMENT
??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5b@ DB 'The Backgrou'
	DB	'nd draw list will be rendered below every Dear ImGui windows.'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list@
CONST	SEGMENT
??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list@ DB 'Draw in Backgrou'
	DB	'nd draw list', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists@
CONST	SEGMENT
??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists@ DB 'BG/FG draw lists', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06DODEBHEI@canvas@
CONST	SEGMENT
??_C@_06DODEBHEI@canvas@ DB 'canvas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DG@KLKDBFIL@Left?9click?5and?5drag?5to?5add?5line@
CONST	SEGMENT
??_C@_0DG@KLKDBFIL@Left?9click?5and?5drag?5to?5add?5line@ DB 'Left-click '
	DB	'and drag to add lines,', 0aH, 'Right-click to undo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PBIJCONE@Canvas@
CONST	SEGMENT
??_C@_06PBIJCONE@Canvas@ DB 'Canvas', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PDOBBJNA@Color@
CONST	SEGMENT
??_C@_05PDOBBJNA@Color@ DB 'Color', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFKCLHMG@n?9gon?5sides@
CONST	SEGMENT
??_C@_0M@FFKCLHMG@n?9gon?5sides@ DB 'n-gon sides', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CEKHLCFH@Thickness@
CONST	SEGMENT
??_C@_09CEKHLCFH@Thickness@ DB 'Thickness', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDMOFOMC@?$CF?402f@
CONST	SEGMENT
??_C@_05IDMOFOMC@?$CF?402f@ DB '%.02f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EBKMHHBE@Size@
CONST	SEGMENT
??_C@_04EBKMHHBE@Size@ DB 'Size', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLLBMLGE@Primitives@
CONST	SEGMENT
??_C@_0L@LLLBMLGE@Primitives@ DB 'Primitives', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EHLCCPCB@?$CD?$CDTabBar@
CONST	SEGMENT
??_C@_08EHLCCPCB@?$CD?$CDTabBar@ DB '##TabBar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering@
CONST	SEGMENT
??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering@ DB 'Example: Custom rend'
	DB	'ering', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5titl@
CONST	SEGMENT
??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5titl@ DB 'This window '
	DB	'has a changing title.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimated@
CONST	SEGMENT
??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimated@ DB 'A'
	DB	'nimated title %c %d###AnimatedTitle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04NLDFHNKP@?$HM?1?9?2@
CONST	SEGMENT
??_C@_04NLDFHNKP@?$HM?1?9?2@ DB '|/-\', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5t@
CONST	SEGMENT
??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5t@ DB 'This is w'
	DB	'indow 2.', 0aH, 'My title is the same as window 1, but my ide'
	DB	'ntifier is unique.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2@
CONST	SEGMENT
??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2@ DB 'Same ti'
	DB	'tle as another window##2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5t@
CONST	SEGMENT
??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5t@ DB 'This is w'
	DB	'indow 1.', 0aH, 'My title is the same as window 2, but my ide'
	DB	'ntifier is unique.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1@
CONST	SEGMENT
??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1@ DB 'Same ti'
	DB	'tle as another window##1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NJDFJJBC@Bottom?9right@
CONST	SEGMENT
??_C@_0N@NJDFJJBC@Bottom?9right@ DB 'Bottom-right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MGBINKPN@Bottom?9left@
CONST	SEGMENT
??_C@_0M@MGBINKPN@Bottom?9left@ DB 'Bottom-left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEMEGGCE@Top?9right@
CONST	SEGMENT
??_C@_09FEMEGGCE@Top?9right@ DB 'Top-right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08DPOKBJOC@Top?9left@
CONST	SEGMENT
??_C@_08DPOKBJOC@Top?9left@ DB 'Top-left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFGIOHDE@Custom@
CONST	SEGMENT
??_C@_06IFGIOHDE@Custom@ DB 'Custom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO@
CONST	SEGMENT
??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO@ DB 'Mouse Position'
	DB	': <invalid>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ@
CONST	SEGMENT
??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ@ DB 'Mous'
	DB	'e Position: (%.1f,%.1f)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@GGFBFCLD@Simple?5overlay?6in?5the?5corner?5of@
CONST	SEGMENT
??_C@_0EN@GGFBFCLD@Simple?5overlay?6in?5the?5corner?5of@ DB 'Simple overl'
	DB	'ay', 0aH, 'in the corner of the screen.', 0aH, '(right-click '
	DB	'to change position)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay@
CONST	SEGMENT
??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay@ DB 'Example: Simple overla'
	DB	'y', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5l@
CONST	SEGMENT
??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5l@ DB '%*s'
	DB	'Hello, sailor! Making this line long enough for the example.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEOMCPLH@Auto?9resize@
CONST	SEGMENT
??_C@_0M@CEOMCPLH@Auto?9resize@ DB 'Auto-resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PIOLEGBL@Constraint@
CONST	SEGMENT
??_C@_0L@PIOLEGBL@Constraint@ DB 'Constraint', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07IEBICOG@800x200@
CONST	SEGMENT
??_C@_07IEBICOG@800x200@ DB '800x200', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OJDKPIO@500x500@
CONST	SEGMENT
??_C@_07OJDKPIO@500x500@ DB '500x500', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07JJIBJOCO@200x200@
CONST	SEGMENT
??_C@_07JJIBJOCO@200x200@ DB '200x200', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ@
CONST	SEGMENT
??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ@ DB 'Custom: Fixed'
	DB	' Steps (100)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square@
CONST	SEGMENT
??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square@ DB 'Custom: Always Square', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MPNPOAJG@Height?5400?9500@
CONST	SEGMENT
??_C@_0P@MPNPOAJG@Height?5400?9500@ DB 'Height 400-500', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GIJNEIMP@Width?5400?9500@
CONST	SEGMENT
??_C@_0O@GIJNEIMP@Width?5400?9500@ DB 'Width 400-500', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CNAJDBBL@Width?5?$DO?5100?0?5Height?5?$DO?5100@
CONST	SEGMENT
??_C@_0BK@CNAJDBBL@Width?5?$DO?5100?0?5Height?5?$DO?5100@ DB 'Width > 100'
	DB	', Height > 100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only@
CONST	SEGMENT
??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only@ DB 'Resize horizontal only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FPBGOCLL@Resize?5vertical?5only@
CONST	SEGMENT
??_C@_0BF@FPBGOCLL@Resize?5vertical?5only@ DB 'Resize vertical only', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize@
CONST	SEGMENT
??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize@ DB 'Example: Constrain'
	DB	'ed Resize', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd@
CONST	SEGMENT
??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd@ DB '%*sThis is line %d'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EAJBEEH@Number?5of?5lines@
CONST	SEGMENT
??_C@_0BA@EAJBEEH@Number?5of?5lines@ DB 'Number of lines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5@
CONST	SEGMENT
??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5@ DB 'Window will '
	DB	'resize every-frame to the size of its content.', 0aH, 'Note t'
	DB	'hat you probably don''t want to query the window size to', 0aH
	DB	'output your content because that would create a feedback loop'
	DB	'.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window@
CONST	SEGMENT
??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window@ DB 'Example: Auto-r'
	DB	'esizing window', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@
CONST	SEGMENT
??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@ DB '%i The q'
	DB	'uick brown fox jumps over the lazy dog', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@
CONST	SEGMENT
??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@ DB '%i The q'
	DB	'uick brown fox jumps over the lazy dog', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IHJDPCIL@Add?51000?5lines@
CONST	SEGMENT
??_C@_0P@IHJDPCIL@Add?51000?5lines@ DB 'Add 1000 lines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5b@
CONST	SEGMENT
??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5b@ DB 'Buff'
	DB	'er contents: %d lines, %d bytes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBDEEMIG@Test?5type@
CONST	SEGMENT
??_C@_09NBDEEMIG@Test?5type@ DB 'Test type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI@
CONST	SEGMENT
??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI@ DB 'Single call'
	DB	' to TextUnformatted()', 00H, 'Multiple calls to Text(), clipp'
	DB	'ed', 00H, 'Multiple calls to Text(), not clipped (slow)', 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5@
CONST	SEGMENT
??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5@ DB 'Printing unus'
	DB	'ually long amount of text.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display@
CONST	SEGMENT
??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display@ DB 'Example: Long text'
	DB	' display', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5@
CONST	SEGMENT
??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5@ DB 'This examp'
	DB	'le shows how you may implement a property editor using two co'
	DB	'lumns.', 0aH, 'All objects/fields data are dummies here.', 0aH
	DB	'Remember that in many simple cases, you can use ImGui::SameLi'
	DB	'ne(xxx) to position', 0aH, 'your cursor horizontally instead '
	DB	'of using the Columns() API.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor@
CONST	SEGMENT
??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor@ DB 'Example: Property edi'
	DB	'tor', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07FBBIKLOB@?$CD?$CDvalue@
CONST	SEGMENT
??_C@_07FBBIKLOB@?$CD?$CDvalue@ DB '##value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05EPLKDJMH@Field@
CONST	SEGMENT
??_C@_05EPLKDJMH@Field@ DB 'Field', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08BNKJGCPO@Field_?$CFd@
CONST	SEGMENT
??_C@_08BNKJGCPO@Field_?$CFd@ DB 'Field_%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich@
CONST	SEGMENT
??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich@ DB 'my sailor is rich', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELFECKBG@Object@
CONST	SEGMENT
??_C@_06ELFECKBG@Object@ DB 'Object', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FIIOEGIK@?$CFs_?$CFu@
CONST	SEGMENT
??_C@_05FIIOEGIK@?$CFs_?$CFu@ DB '%s_%u', 00H		; `string'
CONST	ENDS
;	COMDAT ?dummy_members@?4??ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z@4PAMA
_DATA	SEGMENT
?dummy_members@?4??ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z@4PAMA DD 000000000r ; 0 ; ``ShowExampleAppPropertyEditor'::`2'::funcs::ShowDummyObject'::`5'::dummy_members
	DD	000000000r			; 0
	DD	03f800000r			; 1
	DD	040490ff9r			; 3.1416
	DD	042c80000r			; 100
	DD	04479c000r			; 999
	ORG $+8
_DATA	ENDS
;	COMDAT ??_C@_0P@CCIDAFDC@ID?3?50123456789@
CONST	SEGMENT
??_C@_0P@CCIDAFDC@ID?3?50123456789@ DB 'ID: 0123456789', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07NJJEDOBB@Details@
CONST	SEGMENT
??_C@_07NJJEDOBB@Details@ DB 'Details', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@
CONST	SEGMENT
??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@ DB 'Lorem ipsum'
	DB	' dolor sit amet, consectetur adipiscing elit, sed do eiusmod '
	DB	'tempor incididunt ut labore et dolore magna aliqua. ', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OHKMKKDH@Description@
CONST	SEGMENT
??_C@_0M@OHKMKKDH@Description@ DB 'Description', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMLGLIAO@?$CD?$CDTabs@
CONST	SEGMENT
??_C@_06BMLGLIAO@?$CD?$CDTabs@ DB '##Tabs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd@
CONST	SEGMENT
??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd@ DB 'MyObject: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PHNAOHDK@item?5view@
CONST	SEGMENT
??_C@_09PHNAOHDK@item?5view@ DB 'item view', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DHBPHHKL@MyObject?5?$CFd@
CONST	SEGMENT
??_C@_0M@DHBPHHKL@MyObject?5?$CFd@ DB 'MyObject %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09OINOOGMP@left?5pane@
CONST	SEGMENT
??_C@_09OINOOGMP@left?5pane@ DB 'left pane', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout@
CONST	SEGMENT
??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout@ DB 'Example: Simple layout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time@
CONST	SEGMENT
??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time@ DB '['
	DB	'%05d] [%s] Hello, current time is %.1f, here''s a word: ''%s'''
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BIHLNJM@Pauciloquent@
CONST	SEGMENT
??_C@_0N@BIHLNJM@Pauciloquent@ DB 'Pauciloquent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIMGHMNH@Nincompoop@
CONST	SEGMENT
??_C@_0L@MIMGHMNH@Nincompoop@ DB 'Nincompoop', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FLCFMCCB@Absquatulate@
CONST	SEGMENT
??_C@_0N@FLCFMCCB@Absquatulate@ DB 'Absquatulate', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KKKMMPJN@Abibliophobia@
CONST	SEGMENT
??_C@_0O@KKKMMPJN@Abibliophobia@ DB 'Abibliophobia', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KEIJGBOK@Snickersnee@
CONST	SEGMENT
??_C@_0M@KEIJGBOK@Snickersnee@ DB 'Snickersnee', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKNIJFM@Cattywampus@
CONST	SEGMENT
??_C@_0M@FKNIJFM@Cattywampus@ DB 'Cattywampus', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CIGCKJLI@Bumfuzzled@
CONST	SEGMENT
??_C@_0L@CIGCKJLI@Bumfuzzled@ DB 'Bumfuzzled', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05KKCIMGE@error@
CONST	SEGMENT
??_C@_05KKCIMGE@error@ DB 'error', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FNLOFOEM@warn@
CONST	SEGMENT
??_C@_04FNLOFOEM@warn@ DB 'warn', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NIDJFNBE@info@
CONST	SEGMENT
??_C@_04NIDJFNBE@info@ DB 'info', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries@
CONST	SEGMENT
??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries@ DB '[Debug] Add 5 entr'
	DB	'ies', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LFJACCKD@Example?3?5Log@
CONST	SEGMENT
??_C@_0N@LFJACCKD@Example?3?5Log@ DB 'Example: Log', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06IBDJIBGI@Filter@
CONST	SEGMENT
??_C@_06IBDJIBGI@Filter@ DB 'Filter', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NEACHKPE@Example?3?5Console@
CONST	SEGMENT
??_C@_0BB@NEACHKPE@Example?3?5Console@ DB 'Example: Console', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PHKAGDP@?9?5?$CFs?6@
CONST	SEGMENT
??_C@_05PHKAGDP@?9?5?$CFs?6@ DB '- %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LCPLNAHF@Possible?5matches?3?6@
CONST	SEGMENT
??_C@_0BD@LCPLNAHF@Possible?5matches?3?6@ DB 'Possible matches:', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01CLKCMJKC@?5@
CONST	SEGMENT
??_C@_01CLKCMJKC@?5@ DB ' ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6@
CONST	SEGMENT
??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6@ DB 'No matc'
	DB	'h for "%.*s"!', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6@
CONST	SEGMENT
??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6@ DB 'Unknown command: '
	DB	'''%s''', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6@
CONST	SEGMENT
??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6@ DB '%3d: %s', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JKCKOCFH@?9?5?$CFs@
CONST	SEGMENT
??_C@_04JKCKOCFH@?9?5?$CFs@ DB '- %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GJFNIAOH@Commands?3@
CONST	SEGMENT
??_C@_09GJFNIAOH@Commands?3@ DB 'Commands:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05DFHAGHEP@?$CD?5?$CFs?6@
CONST	SEGMENT
??_C@_05DFHAGHEP@?$CD?5?$CFs?6@ DB '# %s', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_02KPDBPKPG@?$CD?5@
CONST	SEGMENT
??_C@_02KPDBPKPG@?$CD?5@ DB '# ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFMCMLFD@?$FLerror?$FN@
CONST	SEGMENT
??_C@_07LFMCMLFD@?$FLerror?$FN@ DB '[error]', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KOEFNJOK@ScrollingRegion@
CONST	SEGMENT
??_C@_0BA@KOEFNJOK@ScrollingRegion@ DB 'ScrollingRegion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ@
CONST	SEGMENT
??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ@ DB 'F'
	DB	'ilter ("incl,-excl") ("error")', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IFKANFPJ@Auto?9scroll@
CONST	SEGMENT
??_C@_0M@IFKANFPJ@Auto?9scroll@ DB 'Auto-scroll', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05MDNHABIA@Clear@
CONST	SEGMENT
??_C@_05MDNHABIA@Clear@ DB 'Clear', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong@
CONST	SEGMENT
??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong@ DB '[error] som'
	DB	'ething went wrong', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HHKLEHKC@Add?5Dummy?5Error@
CONST	SEGMENT
??_C@_0BA@HHKLEHKC@Add?5Dummy?5Error@ DB 'Add Dummy Error', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5@
CONST	SEGMENT
??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5@ DB 'display very '
	DB	'important message here!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BMHJKMPF@some?5more?5text@
CONST	SEGMENT
??_C@_0P@BMHJKMPF@some?5more?5text@ DB 'some more text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OJGBPOOP@?$CFd?5some?5text@
CONST	SEGMENT
??_C@_0N@OJGBPOOP@?$CFd?5some?5text@ DB '%d some text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CGJDLLEJ@Add?5Dummy?5Text@
CONST	SEGMENT
??_C@_0P@CGJDLLEJ@Add?5Dummy?5Text@ DB 'Add Dummy Text', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@NBHLDCP@Enter?5?8HELP?8?5for?5help?0?5press?5TA@
CONST	SEGMENT
??_C@_0DJ@NBHLDCP@Enter?5?8HELP?8?5for?5help?0?5press?5TA@ DB 'Enter ''HE'
	DB	'LP'' for help, press TAB to use text completion.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MA@ICGIOBFG@This?5example?5implements?5a?5conso@
CONST	SEGMENT
??_C@_0MA@ICGIOBFG@This?5example?5implements?5a?5conso@ DB 'This example '
	DB	'implements a console with basic coloring, completion and hist'
	DB	'ory. A more elaborate implementation may want to store entrie'
	DB	's along with extra data such as timestamp, emitter, etc.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GDIOPKGP@Close?5Console@
CONST	SEGMENT
??_C@_0O@GDIOPKGP@Close?5Console@ DB 'Close Console', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf@
CONST	SEGMENT
??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf@ DB 'b', 00H, 'u', 00H, 'f', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB@
CONST	SEGMENT
??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB@ DB 'Welcome to Dear ImGu'
	DB	'i!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_08GOHMLCGG@CLASSIFY@
CONST	SEGMENT
??_C@_08GOHMLCGG@CLASSIFY@ DB 'CLASSIFY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05PONODPI@CLEAR@
CONST	SEGMENT
??_C@_05PONODPI@CLEAR@ DB 'CLEAR', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DBIJIOJO@HISTORY@
CONST	SEGMENT
??_C@_07DBIJIOJO@HISTORY@ DB 'HISTORY', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DOKPJKJF@HELP@
CONST	SEGMENT
??_C@_04DOKPJKJF@HELP@ DB 'HELP', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GMBKPCGK@Quit@
CONST	SEGMENT
??_C@_04GMBKPCGK@Quit@ DB 'Quit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ELIFPNNI@Alt?$CLF4@
CONST	SEGMENT
??_C@_06ELIFPNNI@Alt?$CLF4@ DB 'Alt+F4', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KAJHKDAE@Checked@
CONST	SEGMENT
??_C@_07KAJHKDAE@Checked@ DB 'Checked', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05KONDNKDG@Check@
CONST	SEGMENT
??_C@_05KONDNKDG@Check@ DB 'Check', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA@
CONST	SEGMENT
??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA@ DB 'Yes', 00H, 'No', 00H, 'M'
	DB	'aybe', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05DCDOHKAB@Input@
CONST	SEGMENT
??_C@_05DCDOHKAB@Input@ DB 'Input', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd@
CONST	SEGMENT
??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd@ DB 'Scrolling Text %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOAOMMKG@Enabled@
CONST	SEGMENT
??_C@_07DOAOMMKG@Enabled@ DB 'Enabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KHIHFBFN@Options@
CONST	SEGMENT
??_C@_07KHIHFBFN@Options@ DB 'Options', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JEJONNAL@Save?5As?4?4@
CONST	SEGMENT
??_C@_09JEJONNAL@Save?5As?4?4@ DB 'Save As..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAKPFMDA@Ctrl?$CLS@
CONST	SEGMENT
??_C@_06NAKPFMDA@Ctrl?$CLS@ DB 'Ctrl+S', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JKOAAOOB@Recurse?4?4@
CONST	SEGMENT
??_C@_09JKOAAOOB@Recurse?4?4@ DB 'Recurse..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06INDFPOP@More?4?4@
CONST	SEGMENT
??_C@_06INDFPOP@More?4?4@ DB 'More..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CFAJIONG@fish_hat?4h@
CONST	SEGMENT
??_C@_0L@CFAJIONG@fish_hat?4h@ DB 'fish_hat.h', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OONPEMFD@fish_hat?4inl@
CONST	SEGMENT
??_C@_0N@OONPEMFD@fish_hat?4inl@ DB 'fish_hat.inl', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MGPNFHBN@fish_hat?4c@
CONST	SEGMENT
??_C@_0L@MGPNFHBN@fish_hat?4c@ DB 'fish_hat.c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FFOFICLF@Open?5Recent@
CONST	SEGMENT
??_C@_0M@FFOFICLF@Open?5Recent@ DB 'Open Recent', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open@ DB 'Open', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DGNIABGN@Ctrl?$CLO@
CONST	SEGMENT
??_C@_06DGNIABGN@Ctrl?$CLO@ DB 'Ctrl+O', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILBCOJBH@New@
CONST	SEGMENT
??_C@_03ILBCOJBH@New@ DB 'New', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GAHNIDOO@?$CIdummy?5menu?$CJ@
CONST	SEGMENT
??_C@_0N@GAHNIDOO@?$CIdummy?5menu?$CJ@ DB '(dummy menu)', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA DD 0dd4H ; `ShowExampleMenuFile'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_05NEBJFIEK@Paste@
CONST	SEGMENT
??_C@_05NEBJFIEK@Paste@ DB 'Paste', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MLIHCNHJ@CTRL?$CLV@
CONST	SEGMENT
??_C@_06MLIHCNHJ@CTRL?$CLV@ DB 'CTRL+V', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PMDCMLGN@CTRL?$CLC@
CONST	SEGMENT
??_C@_06PMDCMLGN@CTRL?$CLC@ DB 'CTRL+C', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOHDMBHJ@Cut@
CONST	SEGMENT
??_C@_03EOHDMBHJ@Cut@ DB 'Cut', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06FFAEAAPH@CTRL?$CLX@
CONST	SEGMENT
??_C@_06FFAEAAPH@CTRL?$CLX@ DB 'CTRL+X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKENIHOM@Redo@
CONST	SEGMENT
??_C@_04NKENIHOM@Redo@ DB 'Redo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06EMBPDBLG@CTRL?$CLY@
CONST	SEGMENT
??_C@_06EMBPDBLG@CTRL?$CLY@ DB 'CTRL+Y', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04LPGMNMPN@Undo@
CONST	SEGMENT
??_C@_04LPGMNMPN@Undo@ DB 'Undo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06GHDCGCHF@CTRL?$CLZ@
CONST	SEGMENT
??_C@_06GHDCGCHF@CTRL?$CLZ@ DB 'CTRL+Z', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBNPPDNC@Edit@
CONST	SEGMENT
??_C@_04BBNPPDNC@Edit@ DB 'Edit', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBCJIDFM@Global?5Alpha@
CONST	SEGMENT
??_C@_0N@MBCJIDFM@Global?5Alpha@ DB 'Global Alpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance@
CONST	SEGMENT
??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance@ DB 'Curve Tessellation'
	DB	' Tolerance', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill@
CONST	SEGMENT
??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill@ DB 'Anti-aliased fill', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5li@
CONST	SEGMENT
??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5li@ DB 'When disablin'
	DB	'g anti-aliasing lines, you''ll probably want to disable borde'
	DB	'rs in your style as well.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@INPJKAKL@Anti?9aliased?5lines@
CONST	SEGMENT
??_C@_0BD@INPJKAKL@Anti?9aliased?5lines@ DB 'Anti-aliased lines', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09PIAIFBON@Rendering@
CONST	SEGMENT
??_C@_09PIAIFBON@Rendering@ DB 'Rendering', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DCHFKEPM@global?5scale@
CONST	SEGMENT
??_C@_0N@DCHFKEPM@global?5scale@ DB 'global scale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DLFCCMFO@window?5scale@
CONST	SEGMENT
??_C@_0N@DLFCCMFO@window?5scale@ DB 'window scale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0PC@PJPPOHAC@Those?5are?5old?5settings?5provided@
CONST	SEGMENT
??_C@_0PC@PJPPOHAC@Those?5are?5old?5settings?5provided@ DB 'Those are old'
	DB	' settings provided for convenience.', 0aH, 'However, the _cor'
	DB	'rect_ way of scaling your UI is currently to reload your font'
	DB	' at the designed size, rebuild the font atlas, and call style'
	DB	'.ScaleAllSizes() on a reference ImGuiStyle structure.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@KCJLBEBN@Atlas?5texture@
CONST	SEGMENT
??_C@_0O@KCJLBEBN@Atlas?5texture@ DB 'Atlas texture', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@JPEJHLJM@Atlas?5texture?5?$CI?$CFdx?$CFd?5pixels?$CJ@
CONST	SEGMENT
??_C@_0BN@JPEJHLJM@Atlas?5texture?5?$CI?$CFdx?$CFd?5pixels?$CJ@ DB 'Atlas'
	DB	' texture (%dx%d pixels)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@EHEDNDHJ@UV?3?5?$CI?$CF?43f?0?$CF?43f?$CJ?9?$DO?$CI?$CF?43f?0?$CF?43f?$CJ@
CONST	SEGMENT
??_C@_0BN@EHEDNDHJ@UV?3?5?$CI?$CF?43f?0?$CF?43f?$CJ?9?$DO?$CI?$CF?43f?0?$CF?43f?$CJ@ DB 'U'
	DB	'V: (%.3f,%.3f)->(%.3f,%.3f)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@BCFBHCGJ@Pos?3?5?$CI?$CF?42f?0?$CF?42f?$CJ?9?$DO?$CI?$CF?42f?0?$CF?42f?$CJ@
CONST	SEGMENT
??_C@_0BO@BCFBHCGJ@Pos?3?5?$CI?$CF?42f?0?$CF?42f?$CJ?9?$DO?$CI?$CF?42f?0?$CF?42f?$CJ@ DB 'P'
	DB	'os: (%.2f,%.2f)->(%.2f,%.2f)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@JLIDDFIB@AdvanceX?3?5?$CF?41f@
CONST	SEGMENT
??_C@_0P@JLIDDFIB@AdvanceX?3?5?$CF?41f@ DB 'AdvanceX: %.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JMLDGIFC@Codepoint?3?5U?$CL?$CF04X@
CONST	SEGMENT
??_C@_0BC@JMLDGIFC@Codepoint?3?5U?$CL?$CF04X@ DB 'Codepoint: U+%04X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KIECHKHD@U?$CL?$CF04X?4?4U?$CL?$CF04X?5?$CI?$CFd?5?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BH@KIECHKHD@U?$CL?$CF04X?4?4U?$CL?$CF04X?5?$CI?$CFd?5?$CFs?$CJ@ DB 'U'
	DB	'+%04X..U+%04X (%d %s)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIOMJNBL@glyph@
CONST	SEGMENT
??_C@_05OIOMJNBL@glyph@ DB 'glyph', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IOJPAPEE@glyphs@
CONST	SEGMENT
??_C@_06IOJPAPEE@glyphs@ DB 'glyphs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06EBCCDGNI@Glyphs@
CONST	SEGMENT
??_C@_06EBCCDGNI@Glyphs@ DB 'Glyphs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NEAHLNMH@Glyphs?5?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0M@NEAHLNMH@Glyphs?5?$CI?$CFd?$CJ@ DB 'Glyphs (%d)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@KFKIBEOD@Input?5?$CFd?3?5?8?$CFs?8?0?5Oversample?3?5?$CI?$CFd@
CONST	SEGMENT
??_C@_0DE@KFKIBEOD@Input?5?$CFd?3?5?8?$CFs?8?0?5Oversample?3?5?$CI?$CFd@ DB 'I'
	DB	'nput %d: ''%s'', Oversample: (%d,%d), PixelSnapH: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LLADJGCM@Texture?5Area?3?5about?5?$CFd?5px?5?$HO?$CFdx?$CF@
CONST	SEGMENT
??_C@_0CE@LLADJGCM@Texture?5Area?3?5about?5?$CFd?5px?5?$HO?$CFdx?$CF@ DB 'T'
	DB	'exture Area: about %d px ~%dx%d px', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FMIIOLLL@Ellipsis?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@
CONST	SEGMENT
??_C@_0CC@FMIIOLLL@Ellipsis?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@ DB 'E'
	DB	'llipsis character: ''%c'' (U+%04X)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FPHDKLMA@Fallback?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@
CONST	SEGMENT
??_C@_0CC@FPHDKLMA@Fallback?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@ DB 'F'
	DB	'allback character: ''%c'' (U+%04X)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FJCMKHHK@Ascent?3?5?$CFf?0?5Descent?3?5?$CFf?0?5Height@
CONST	SEGMENT
??_C@_0CE@FJCMKHHK@Ascent?3?5?$CFf?0?5Descent?3?5?$CFf?0?5Height@ DB 'Asc'
	DB	'ent: %f, Descent: %f, Height: %f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MKKLGFNP@Font?5offset@
CONST	SEGMENT
??_C@_0M@MKKLGFNP@Font?5offset@ DB 'Font offset', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BKF@KOCFAEGF@Note?5than?5the?5default?5embedded?5@
CONST	SEGMENT
??_C@_0BKF@KOCFAEGF@Note?5than?5the?5default?5embedded?5@ DB 'Note than t'
	DB	'he default embedded font is NOT meant to be scaled.', 0aH, 0aH
	DB	'Font are currently rendered into bitmaps at a given size at t'
	DB	'he time of building the atlas. You may oversample them to get'
	DB	' some flexibility with scaling. You can also render at multip'
	DB	'le sizes and select which one to use at runtime.', 0aH, 0aH, '('
	DB	'Glimmer of hope: the atlas system should hopefully be rewritt'
	DB	'en in the future to make scaling more natural and automatic.)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HAJGHBLA@Font?5scale@
CONST	SEGMENT
??_C@_0L@HAJGHBLA@Font?5scale@ DB 'Font scale', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GGBPDDBN@?$CF?41f@
CONST	SEGMENT
??_C@_04GGBPDDBN@?$CF?41f@ DB '%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HCLAAKJM@Set?5as?5default@
CONST	SEGMENT
??_C@_0P@HCLAAKJM@Set?5as?5default@ DB 'Set as default', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@DILJDNLP@Font?5?$CFd?3?5?$CC?$CFs?$CC?6?$CF?42f?5px?0?5?$CFd?5glyph@
CONST	SEGMENT
??_C@_0CN@DILJDNLP@Font?5?$CFd?3?5?$CC?$CFs?$CC?6?$CF?42f?5px?0?5?$CFd?5glyph@ DB 'F'
	DB	'ont %d: "%s"', 0aH, '%.2f px, %d glyphs, %d file(s)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@EDBFAJMO@Read?5FAQ?5and?5docs?1FONTS?4txt?5for@
CONST	SEGMENT
??_C@_0DJ@EDBFAJMO@Read?5FAQ?5and?5docs?1FONTS?4txt?5for@ DB 'Read FAQ an'
	DB	'd docs/FONTS.txt for details on font loading.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05ENDNDI@Fonts@
CONST	SEGMENT
??_C@_05ENDNDI@Fonts@ DB 'Fonts', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OIKMFEGE@Revert@
CONST	SEGMENT
??_C@_06OIKMFEGE@Revert@ DB 'Revert', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACKGJP@Save@
CONST	SEGMENT
??_C@_04INACKGJP@Save@ DB 'Save', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07KJABCEJI@?$CD?$CDcolor@
CONST	SEGMENT
??_C@_07KJABCEJI@?$CD?$CDcolor@ DB '##color', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PKGPDAGH@?$CD?$CDcolors@
CONST	SEGMENT
??_C@_08PKGPDAGH@?$CD?$CDcolors@ DB '##colors', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0GN@IMCHBEFC@In?5the?5color?5list?3?6Left?9click?5o@
CONST	SEGMENT
??_C@_0GN@IMCHBEFC@In?5the?5color?5list?3?6Left?9click?5o@ DB 'In the col'
	DB	'or list:', 0aH, 'Left-click on colored square to open color p'
	DB	'icker,', 0aH, 'Right-click to open edit options menu.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IGHHMFLN@Both@
CONST	SEGMENT
??_C@_04IGHHMFLN@Both@ DB 'Both', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHOGHNDL@Alpha@
CONST	SEGMENT
??_C@_05IHOGHNDL@Alpha@ DB 'Alpha', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06OGJDIEIN@Opaque@
CONST	SEGMENT
??_C@_06OGJDIEIN@Opaque@ DB 'Opaque', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECALKMOF@Filter?5colors@
CONST	SEGMENT
??_C@_0O@ECALKMOF@Filter?5colors@ DB 'Filter colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EKILLAGK@Only?5Modified?5Colors@
CONST	SEGMENT
??_C@_0BF@EKILLAGK@Only?5Modified?5Colors@ DB 'Only Modified Colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BMBGJILK@?$CD?$CDoutput_type@
CONST	SEGMENT
??_C@_0O@BMBGJILK@?$CD?$CDoutput_type@ DB '##output_type', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA@
CONST	SEGMENT
??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA@ DB 'To Clipboard', 00H, 'T'
	DB	'o TTY', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI@
CONST	SEGMENT
??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI@ DB 'c'
	DB	'olors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);', 0dH
	DB	0aH, 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyl@
CONST	SEGMENT
??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyl@ DB 'ImVec4'
	DB	'* colors = ImGui::GetStyle().Colors;', 0dH, 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06BFGAPCKF@Export@
CONST	SEGMENT
??_C@_06BFGAPCKF@Export@ DB 'Export', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICDCBJPI@Colors@
CONST	SEGMENT
??_C@_06ICDCBJPI@Colors@ DB 'Colors', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding@
CONST	SEGMENT
??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding@ DB 'DisplaySafeAreaPadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5ed@
CONST	SEGMENT
??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5ed@ DB 'Adjust if y'
	DB	'ou cannot see the edges of your screen (e.g. on a TV where sc'
	DB	'aling has not been configured).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FINEDBHB@Safe?5Area?5Padding@
CONST	SEGMENT
??_C@_0BC@FINEDBHB@Safe?5Area?5Padding@ DB 'Safe Area Padding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5select@
CONST	SEGMENT
??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5select@ DB 'Alignment app'
	DB	'lies when a selectable is larger than its text content.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OFFKFPJC@SelectableTextAlign@
CONST	SEGMENT
??_C@_0BE@OFFKFPJC@SelectableTextAlign@ DB 'SelectableTextAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button@
CONST	SEGMENT
??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button@ DB 'Alignment app'
	DB	'lies when a button is larger than its text content.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PHDMJLFL@ButtonTextAlign@
CONST	SEGMENT
??_C@_0BA@PHDMJLFL@ButtonTextAlign@ DB 'ButtonTextAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HCCCHIDA@ColorButtonPosition@
CONST	SEGMENT
??_C@_0BE@HCCCHIDA@ColorButtonPosition@ DB 'ColorButtonPosition', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PMLPANEE@Left?$AARight?$AA@
CONST	SEGMENT
??_C@_0M@PMLPANEE@Left?$AARight?$AA@ DB 'Left', 00H, 'Right', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition@
CONST	SEGMENT
??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition@ DB 'WindowMenuButtonPosition'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA@
CONST	SEGMENT
??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA@ DB 'None', 00H, 'Left', 00H
	DB	'Right', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IFNMJCJO@WindowTitleAlign@
CONST	SEGMENT
??_C@_0BB@IFNMJCJO@WindowTitleAlign@ DB 'WindowTitleAlign', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04GEFJINEE@?$CF?42f@
CONST	SEGMENT
??_C@_04GEFJINEE@?$CF?42f@ DB '%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GELHPNFJ@TabRounding@
CONST	SEGMENT
??_C@_0M@GELHPNFJ@TabRounding@ DB 'TabRounding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CHOEJEFP@GrabRounding@
CONST	SEGMENT
??_C@_0N@CHOEJEFP@GrabRounding@ DB 'GrabRounding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IGAFHGEC@ScrollbarRounding@
CONST	SEGMENT
??_C@_0BC@IGAFHGEC@ScrollbarRounding@ DB 'ScrollbarRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OGBCIABM@PopupRounding@
CONST	SEGMENT
??_C@_0O@OGBCIABM@PopupRounding@ DB 'PopupRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@OLPNJDEC@ChildRounding@
CONST	SEGMENT
??_C@_0O@OLPNJDEC@ChildRounding@ DB 'ChildRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMGPCCNA@WindowRounding@
CONST	SEGMENT
??_C@_0P@IMGPCCNA@WindowRounding@ DB 'WindowRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ICFONDFO@Rounding@
CONST	SEGMENT
??_C@_08ICFONDFO@Rounding@ DB 'Rounding', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MEMGDJEN@TabBorderSize@
CONST	SEGMENT
??_C@_0O@MEMGDJEN@TabBorderSize@ DB 'TabBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OLKEIFFB@FrameBorderSize@
CONST	SEGMENT
??_C@_0BA@OLKEIFFB@FrameBorderSize@ DB 'FrameBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GHHMANCJ@PopupBorderSize@
CONST	SEGMENT
??_C@_0BA@GHHMANCJ@PopupBorderSize@ DB 'PopupBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MHPKDBMC@ChildBorderSize@
CONST	SEGMENT
??_C@_0BA@MHPKDBMC@ChildBorderSize@ DB 'ChildBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DIOLDNNC@WindowBorderSize@
CONST	SEGMENT
??_C@_0BB@DIOLDNNC@WindowBorderSize@ DB 'WindowBorderSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MMBGIFGH@GrabMinSize@
CONST	SEGMENT
??_C@_0M@MMBGIFGH@GrabMinSize@ DB 'GrabMinSize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DNFCAGJO@ScrollbarSize@
CONST	SEGMENT
??_C@_0O@DNFCAGJO@ScrollbarSize@ DB 'ScrollbarSize', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FJCIMFNP@IndentSpacing@
CONST	SEGMENT
??_C@_0O@FJCIMFNP@IndentSpacing@ DB 'IndentSpacing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CHKNMAIJ@TouchExtraPadding@
CONST	SEGMENT
??_C@_0BC@CHKNMAIJ@TouchExtraPadding@ DB 'TouchExtraPadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@FPELPPEM@ItemInnerSpacing@
CONST	SEGMENT
??_C@_0BB@FPELPPEM@ItemInnerSpacing@ DB 'ItemInnerSpacing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PJNJGKOI@ItemSpacing@
CONST	SEGMENT
??_C@_0M@PJNJGKOI@ItemSpacing@ DB 'ItemSpacing', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CPMOGBCG@FramePadding@
CONST	SEGMENT
??_C@_0N@CPMOGBCG@FramePadding@ DB 'FramePadding', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NJEPBHAL@WindowPadding@
CONST	SEGMENT
??_C@_0O@NJEPBHAL@WindowPadding@ DB 'WindowPadding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KGFMLCPK@Main@
CONST	SEGMENT
??_C@_04KGFMLCPK@Main@ DB 'Main', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05BOIJFCDP@Sizes@
CONST	SEGMENT
??_C@_05BOIJFCDP@Sizes@ DB 'Sizes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NNHHJHAK@?$CD?$CDtabs@
CONST	SEGMENT
??_C@_06NNHHJHAK@?$CD?$CDtabs@ DB '##tabs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persis@
CONST	SEGMENT
??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persis@ DB 'Save/Revert '
	DB	'in local non-persistent storage. Default Colors definition ar'
	DB	'e not affected. Use "Export" below to save them somewhere.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOOMFCFA@Revert?5Ref@
CONST	SEGMENT
??_C@_0L@KOOMFCFA@Revert?5Ref@ DB 'Revert Ref', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08EEJHGAPI@Save?5Ref@
CONST	SEGMENT
??_C@_08EEJHGAPI@Save?5Ref@ DB 'Save Ref', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NFCFILGL@PopupBorder@
CONST	SEGMENT
??_C@_0M@NFCFILGL@PopupBorder@ DB 'PopupBorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LIENHPEL@FrameBorder@
CONST	SEGMENT
??_C@_0M@LIENHPEL@FrameBorder@ DB 'FrameBorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IABNAJJO@WindowBorder@
CONST	SEGMENT
??_C@_0N@IABNAJJO@WindowBorder@ DB 'WindowBorder', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MJEGPPND@FrameRounding@
CONST	SEGMENT
??_C@_0O@MJEGPPND@FrameRounding@ DB 'FrameRounding', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector@
CONST	SEGMENT
??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector@ DB 'Fonts##Selector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector@
CONST	SEGMENT
??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector@ DB 'Colors##Selector', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BCM@MBDECECM@?9?5Load?5additional?5fonts?5with?5io@
CONST	SEGMENT
??_C@_0BCM@MBDECECM@?9?5Load?5additional?5fonts?5with?5io@ DB '- Load add'
	DB	'itional fonts with io.Fonts->AddFontFromFileTTF().', 0aH, '- '
	DB	'The font atlas is built when calling io.Fonts->GetTexDataAsXX'
	DB	'XX() or io.Fonts->Build().', 0aH, '- Read FAQ and docs/FONTS.'
	DB	'txt for more details.', 0aH, '- If you need to add/remove fon'
	DB	'ts at runtime (e.g. for DPI change), do it before calling New'
	DB	'Frame().', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EIEKGNCP@Classic?$AADark?$AALight?$AA@
CONST	SEGMENT
??_C@_0BE@EIEKGNCP@Classic?$AADark?$AALight?$AA@ DB 'Classic', 00H, 'Dark'
	DB	00H, 'Light', 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6@
CONST	SEGMENT
??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6@ DB 0aH, '```', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?4@
CONST	SEGMENT
??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?4@ DB 'style'
	DB	'.ItemInnerSpacing: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f@
CONST	SEGMENT
??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f@ DB 'style.It'
	DB	'emSpacing: %.2f,%.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f@
CONST	SEGMENT
??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f@ DB 'style.FrameBor'
	DB	'derSize: %.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f@
CONST	SEGMENT
??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f@ DB 'style.FrameRound'
	DB	'ing: %.2f', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f@
CONST	SEGMENT
??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f@ DB 'style.Fr'
	DB	'amePadding: %.2f,%.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f@
CONST	SEGMENT
??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f@ DB 'style.WindowB'
	DB	'orderSize: %.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f@
CONST	SEGMENT
??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f@ DB 'style.'
	DB	'WindowPadding: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42@
CONST	SEGMENT
??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42@ DB 'io.Display'
	DB	'FramebufferScale: %.2f,%.2f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f@
CONST	SEGMENT
??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f@ DB 'io.DisplayS'
	DB	'ize: %.2f,%.2f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF0@
CONST	SEGMENT
??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF0@ DB 'io.'
	DB	'Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset@
CONST	SEGMENT
??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset@ DB ' RendererHasVtxOffset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EKJHBGEP@?5HasSetMousePos@
CONST	SEGMENT
??_C@_0BA@EKJHBGEP@?5HasSetMousePos@ DB ' HasSetMousePos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NNHFCGPM@?5HasMouseCursors@
CONST	SEGMENT
??_C@_0BB@NNHFCGPM@?5HasMouseCursors@ DB ' HasMouseCursors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPABENKI@?5HasGamepad@
CONST	SEGMENT
??_C@_0M@MPABENKI@?5HasGamepad@ DB ' HasGamepad', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X@
CONST	SEGMENT
??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X@ DB 'io.BackendFlags: 0x'
	DB	'%08X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@DGNIKDMB@io?4ConfigWindowsMemoryCompactTi@
CONST	SEGMENT
??_C@_0CL@DGNIKDMB@io?4ConfigWindowsMemoryCompactTi@ DB 'io.ConfigWindows'
	DB	'MemoryCompactTimer = %.1ff', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors@
CONST	SEGMENT
??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors@ DB 'io.ConfigMacOSXBehavior'
	DB	's', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange@
CONST	SEGMENT
??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange@ DB ' NoMouseCursorChange', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GAJGGFEK@?5NoMouse@
CONST	SEGMENT
??_C@_08GAJGGFEK@?5NoMouse@ DB ' NoMouse', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard@
CONST	SEGMENT
??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard@ DB ' NavNoCaptureKeyboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos@
CONST	SEGMENT
??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos@ DB ' NavEnableSetMousePos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PFLKKAGF@?5NavEnableGamepad@
CONST	SEGMENT
??_C@_0BC@PFLKKAGF@?5NavEnableGamepad@ DB ' NavEnableGamepad', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CKENCLMO@?5NavEnableKeyboard@
CONST	SEGMENT
??_C@_0BD@CKENCLMO@?5NavEnableKeyboard@ DB ' NavEnableKeyboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X@
CONST	SEGMENT
??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X@ DB 'io.ConfigFlags: 0x%0'
	DB	'8X', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs@ DB 'io.BackendRender'
	DB	'erName: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs@
CONST	SEGMENT
??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs@ DB 'io.BackendPlatfo'
	DB	'rmName: %s', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04HIBGFPH@NULL@
CONST	SEGMENT
??_C@_04HIBGFPH@NULL@ DB 'NULL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd@
CONST	SEGMENT
??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd@ DB 'define: _MSC_VER=%d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KFJLIPEJ@define?3?5_WIN32@
CONST	SEGMENT
??_C@_0P@KFJLIPEJ@define?3?5_WIN32@ DB 'define: _WIN32', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd@
CONST	SEGMENT
??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd@ DB 'define: __cplusplu'
	DB	's=%d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDr@
CONST	SEGMENT
??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDr@ DB 's'
	DB	'izeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert):'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ@
CONST	SEGMENT
??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ@ DB 'Dear ImGui %s ('
	DB	'%d)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_04CJPBKLAG@?$GA?$GA?$GA?6@
CONST	SEGMENT
??_C@_04CJPBKLAG@?$GA?$GA?$GA?6@ DB '```', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HEKABECO@cfginfos@
CONST	SEGMENT
??_C@_08HEKABECO@cfginfos@ DB 'cfginfos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard@
CONST	SEGMENT
??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard@ DB 'Copy to clipboard', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@CEAKAMCE@Config?1Build?5Information@
CONST	SEGMENT
??_C@_0BJ@CEAKAMCE@Config?1Build?5Information@ DB 'Config/Build Informati'
	DB	'on', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5th@
CONST	SEGMENT
??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5th@ DB 'Dear ImGui i'
	DB	's licensed under the MIT License, see LICENSE for more inform'
	DB	'ation.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImG@
CONST	SEGMENT
??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImG@ DB 'By Omar Corn'
	DB	'ut and all Dear ImGui contributors.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs@
CONST	SEGMENT
??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs@ DB 'Dear ImGui %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs@
CONST	SEGMENT
??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs@ DB 'Mouse cursor %d: %s', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5d@
CONST	SEGMENT
??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5d@ DB 'Your applica'
	DB	'tion can render a different mouse cursor based on what ImGui:'
	DB	':GetMouseCursor() returns. If software cursor rendering (io.M'
	DB	'ouseDrawCursor) is set ImGui will draw the right cursor for y'
	DB	'ou, otherwise your backend needs to handle it.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3@
CONST	SEGMENT
??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3@ DB 'Hover to see mous'
	DB	'e cursors:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs@
CONST	SEGMENT
??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs@ DB 'Curr'
	DB	'ent mouse cursor = %d: %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OJPFEFMM@NotAllowed@
CONST	SEGMENT
??_C@_0L@OJPFEFMM@NotAllowed@ DB 'NotAllowed', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04JBBMMDIF@Hand@
CONST	SEGMENT
??_C@_04JBBMMDIF@Hand@ DB 'Hand', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MHCCEKFE@ResizeNWSE@
CONST	SEGMENT
??_C@_0L@MHCCEKFE@ResizeNWSE@ DB 'ResizeNWSE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EFMGKFJD@ResizeNESW@
CONST	SEGMENT
??_C@_0L@EFMGKFJD@ResizeNESW@ DB 'ResizeNESW', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08BDBDMDLN@ResizeEW@
CONST	SEGMENT
??_C@_08BDBDMDLN@ResizeEW@ DB 'ResizeEW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HLCKOJFI@ResizeNS@
CONST	SEGMENT
??_C@_08HLCKOJFI@ResizeNS@ DB 'ResizeNS', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NLNHGFHP@ResizeAll@
CONST	SEGMENT
??_C@_09NLNHGFHP@ResizeAll@ DB 'ResizeAll', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KBOPCPBA@TextInput@
CONST	SEGMENT
??_C@_09KBOPCPBA@TextInput@ DB 'TextInput', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OLOIDPAB@Arrow@
CONST	SEGMENT
??_C@_05OLOIDPAB@Arrow@ DB 'Arrow', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LHBMJOCH@Mouse?5cursors@
CONST	SEGMENT
??_C@_0O@LHBMJOCH@Mouse?5cursors@ DB 'Mouse cursors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HH@LIOOGCHA@GetMouseDragDelta?$CI0?$CJ?3?6?5?5w?1?5defa@
CONST	SEGMENT
??_C@_0HH@LIOOGCHA@GetMouseDragDelta?$CI0?$CJ?3?6?5?5w?1?5defa@ DB 'GetMo'
	DB	'useDragDelta(0):', 0aH, '  w/ default threshold: (%.1f, %.1f)'
	DB	',', 0aH, '  w/ zero threshold: (%.1f, %.1f)', 0aH, 'MouseDelt'
	DB	'a: (%.1f, %.1f)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GELNHEGO@Drag?5Me@
CONST	SEGMENT
??_C@_07GELNHEGO@Drag?5Me@ DB 'Drag Me', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0GC@PPDGANOJ@IsMouseDragging?$CI?$CFd?$CJ?3?6?5?5w?1?5defau@
CONST	SEGMENT
??_C@_0GC@PPDGANOJ@IsMouseDragging?$CI?$CFd?$CJ?3?6?5?5w?1?5defau@ DB 'Is'
	DB	'MouseDragging(%d):', 0aH, '  w/ default threshold: %d,', 0aH, ' '
	DB	' w/ zero threshold: %d', 0aH, '  w/ large threshold: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDrag@
CONST	SEGMENT
??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDrag@ DB 'You can use '
	DB	'ImGui::GetMouseDragDelta(0) to query for the dragged amount o'
	DB	'n any widget.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08EJAEFPJK@Dragging@
CONST	SEGMENT
??_C@_08EJAEFPJK@Dragging@ DB 'Dragging', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5pres@
CONST	SEGMENT
??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5pres@ DB 'NB: Curs'
	DB	'or & selection are preserved when refocusing last used item i'
	DB	'n code.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06FBFHKKF@Float3@
CONST	SEGMENT
??_C@_06FBFHKKF@Float3@ DB 'Float3', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GJJJLMMF@Focus?5on?5Z@
CONST	SEGMENT
??_C@_0L@GJJJLMMF@Focus?5on?5Z@ DB 'Focus on Z', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ECLEOPAG@Focus?5on?5Y@
CONST	SEGMENT
??_C@_0L@ECLEOPAG@Focus?5on?5Y@ DB 'Focus on Y', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@FLKPNOEH@Focus?5on?5X@
CONST	SEGMENT
??_C@_0L@FLKPNOEH@Focus?5on?5X@ DB 'Focus on X', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO@
CONST	SEGMENT
??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO@ DB 'Item with focus'
	DB	': <none>', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd@
CONST	SEGMENT
??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd@ DB 'Item with focus: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ@
CONST	SEGMENT
??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ@ DB '3 (tab skip)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NNKGGMCL@Focus?5on?53@
CONST	SEGMENT
??_C@_0L@NNKGGMCL@Focus?5on?53@ DB 'Focus on 3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MELNFNGK@Focus?5on?52@
CONST	SEGMENT
??_C@_0L@MELNFNGK@Focus?5on?52@ DB 'Focus on 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OPJAAOKJ@Focus?5on?51@
CONST	SEGMENT
??_C@_0L@OPJAAOKJ@Focus?5on?51@ DB 'Focus on 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PGBLAHMK@Focus?5from?5code@
CONST	SEGMENT
??_C@_0BA@PGBLAHMK@Focus?5from?5code@ DB 'Focus from code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01BMBHCPLG@5@
CONST	SEGMENT
??_C@_01BMBHCPLG@5@ DB '5', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ@
CONST	SEGMENT
??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ@ DB '4 (tab skip)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01EKENIIDA@3@
CONST	SEGMENT
??_C@_01EKENIIDA@3@ DB '3', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01FDFGLJHB@2@
CONST	SEGMENT
??_C@_01FDFGLJHB@2@ DB '2', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01HIHLOKLC@1@
CONST	SEGMENT
??_C@_01HIHLOKLC@1@ DB '1', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5thro@
CONST	SEGMENT
??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5thro@ DB 'Use TAB/SH'
	DB	'IFT+TAB to cycle through keyboard editable fields.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OOGFLDEE@Tabbing@
CONST	SEGMENT
??_C@_07OOGFLDEE@Tabbing@ DB 'Tabbing', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@JDENAPEM@Holding?5me?5clears?5the?6the?5keybo@
CONST	SEGMENT
??_C@_0DA@JDENAPEM@Holding?5me?5clears?5the?6the?5keybo@ DB 'Holding me c'
	DB	'lears the', 0aH, 'the keyboard capture flag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@NJDOKPGI@Hovering?5me?5sets?5the?6keyboard?5c@
CONST	SEGMENT
??_C@_0CL@NJDOKPGI@Hovering?5me?5sets?5the?6keyboard?5c@ DB 'Hovering me '
	DB	'sets the', 0aH, 'keyboard capture flag', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OEEOJMCL@NavInputs?5duration?3@
CONST	SEGMENT
??_C@_0BE@OEEOJMCL@NavInputs?5duration?3@ DB 'NavInputs duration:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04KBDJOJNB@?$FL?$CFd?$FN@
CONST	SEGMENT
??_C@_04KBDJOJNB@?$FL?$CFd?$FN@ DB '[%d]', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@LLKFPGJD@NavInputs?5pressed?3@
CONST	SEGMENT
??_C@_0BD@LLKFPGJD@NavInputs?5pressed?3@ DB 'NavInputs pressed:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NJGMILHM@?$FL?$CFd?$FN?5?$CF?42f@
CONST	SEGMENT
??_C@_09NJGMILHM@?$FL?$CFd?$FN?5?$CF?42f@ DB '[%d] %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LIMLNKOJ@NavInputs?5down?3@
CONST	SEGMENT
??_C@_0BA@LIMLNKOJ@NavInputs?5down?3@ DB 'NavInputs down:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ@
CONST	SEGMENT
??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ@ DB '''%c'' (0x%04X)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PKFKOHDJ@Chars?5queue?3@
CONST	SEGMENT
??_C@_0N@PKFKOHDJ@Chars?5queue?3@ DB 'Chars queue:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs@
CONST	SEGMENT
??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs@ DB 'Keys mods: %s%'
	DB	's%s%s', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHGCNILK@CTRL?5@
CONST	SEGMENT
??_C@_05IHGCNILK@CTRL?5@ DB 'CTRL ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IGAIMELN@SHIFT?5@
CONST	SEGMENT
??_C@_06IGAIMELN@SHIFT?5@ DB 'SHIFT ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HDLNDMFA@ALT?5@
CONST	SEGMENT
??_C@_04HDLNDMFA@ALT?5@ DB 'ALT ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06ECIIPDFH@SUPER?5@
CONST	SEGMENT
??_C@_06ECIIPDFH@SUPER?5@ DB 'SUPER ', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EGHLNEOH@Keys?5release?3@
CONST	SEGMENT
??_C@_0O@EGHLNEOH@Keys?5release?3@ DB 'Keys release:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09MNHHIJFE@?$CFd?5?$CI0x?$CFX?$CJ@
CONST	SEGMENT
??_C@_09MNHHIJFE@?$CFd?5?$CI0x?$CFX?$CJ@ DB '%d (0x%X)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DAHEMGJA@Keys?5pressed?3@
CONST	SEGMENT
??_C@_0O@DAHEMGJA@Keys?5pressed?3@ DB 'Keys pressed:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@EIGPEOBP@?$CFd?5?$CI0x?$CFX?$CJ?5?$CI?$CF?402f?5secs?$CJ@
CONST	SEGMENT
??_C@_0BH@EIGPEOBP@?$CFd?5?$CI0x?$CFX?$CJ?5?$CI?$CF?402f?5secs?$CJ@ DB '%'
	DB	'd (0x%X) (%.02f secs)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@POLCMIEL@Keys?5down?3@
CONST	SEGMENT
??_C@_0L@POLCMIEL@Keys?5down?3@ DB 'Keys down:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f@
CONST	SEGMENT
??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f@ DB 'Mouse wheel: %.1f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NMIOGEHG@Mouse?5released?3@
CONST	SEGMENT
??_C@_0BA@NMIOGEHG@Mouse?5released?3@ DB 'Mouse released:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@IEMOMOGE@Mouse?5dbl?9clicked?3@
CONST	SEGMENT
??_C@_0BD@IEMOMOGE@Mouse?5dbl?9clicked?3@ DB 'Mouse dbl-clicked:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03HAIDDFMD@b?$CFd@
CONST	SEGMENT
??_C@_03HAIDDFMD@b?$CFd@ DB 'b%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@KEMIOLDA@Mouse?5clicked?3@
CONST	SEGMENT
??_C@_0P@KEMIOLDA@Mouse?5clicked?3@ DB 'Mouse clicked:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ@
CONST	SEGMENT
??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ@ DB 'b%d (%.02f secs)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HODNMGFJ@Mouse?5down?3@
CONST	SEGMENT
??_C@_0M@HODNMGFJ@Mouse?5down?3@ DB 'Mouse down:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ@
CONST	SEGMENT
??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ@ DB 'Mouse delt'
	DB	'a: (%g, %g)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO@
CONST	SEGMENT
??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO@ DB 'Mouse pos: <INVALID'
	DB	'>', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ@
CONST	SEGMENT
??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ@ DB 'Mouse pos: ('
	DB	'%g, %g)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@IMLPMLDN@Keyboard?0?5Mouse?5?$CG?5Navigation?5St@
CONST	SEGMENT
??_C@_0CD@IMLPMLDN@Keyboard?0?5Mouse?5?$CG?5Navigation?5St@ DB 'Keyboard,'
	DB	' Mouse & Navigation State', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@PADIALFI@NavActive?3?5?$CFd?0?5NavVisible?3?5?$CFd@
CONST	SEGMENT
??_C@_0BO@PADIALFI@NavActive?3?5?$CFd?0?5NavVisible?3?5?$CFd@ DB 'NavActi'
	DB	've: %d, NavVisible: %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HMNMIAK@WantSetMousePos?3?5?$CFd@
CONST	SEGMENT
??_C@_0BE@HMNMIAK@WantSetMousePos?3?5?$CFd@ DB 'WantSetMousePos: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@MNILMHJG@WantTextInput?3?5?$CFd@
CONST	SEGMENT
??_C@_0BC@MNILMHJG@WantTextInput?3?5?$CFd@ DB 'WantTextInput: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJJPGPBI@WantCaptureKeyboard?3?5?$CFd@
CONST	SEGMENT
??_C@_0BI@FJJPGPBI@WantCaptureKeyboard?3?5?$CFd@ DB 'WantCaptureKeyboard:'
	DB	' %d', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@MACLOFOD@WantCaptureMouse?3?5?$CFd@
CONST	SEGMENT
??_C@_0BF@MACLOFOD@WantCaptureMouse?3?5?$CFd@ DB 'WantCaptureMouse: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IKGEMPPN@Inputs?0?5Navigation?5?$CG?5Focus@
CONST	SEGMENT
??_C@_0BL@IKGEMPPN@Inputs?0?5Navigation?5?$CG?5Focus@ DB 'Inputs, Navigat'
	DB	'ion & Focus', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_02DKCKIIND@?$CFs@
CONST	SEGMENT
??_C@_02DKCKIIND@?$CFs@ DB '%s', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OLAOGCLC@hello?0?5world@
CONST	SEGMENT
??_C@_0N@OLAOGCLC@hello?0?5world@ DB 'hello, world', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIADHECG@abc?4h@
CONST	SEGMENT
??_C@_05NIADHECG@abc?4h@ DB 'abc.h', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PNDMNJJI@ccc2?4cpp@
CONST	SEGMENT
??_C@_08PNDMNJJI@ccc2?4cpp@ DB 'ccc2.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IAJKMGPB@bbb2?4cpp@
CONST	SEGMENT
??_C@_08IAJKMGPB@bbb2?4cpp@ DB 'bbb2.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GHAOHEK@aaa2?4cpp@
CONST	SEGMENT
??_C@_08GHAOHEK@aaa2?4cpp@ DB 'aaa2.cpp', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMKLMKNK@ccc1?4c@
CONST	SEGMENT
??_C@_06LMKLMKNK@ccc1?4c@ DB 'ccc1.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OMOADLHL@bbb1?4c@
CONST	SEGMENT
??_C@_06OMOADLHL@bbb1?4c@ DB 'bbb1.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BMDMCJJI@aaa1?4c@
CONST	SEGMENT
??_C@_06BMDMCJJI@aaa1?4c@ DB 'aaa1.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ@
CONST	SEGMENT
??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ@ DB 'Filter (inc,-exc)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5disp@
CONST	SEGMENT
??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5disp@ DB 'F'
	DB	'ilter usage:', 0aH, '  ""         display all lines', 0aH, ' '
	DB	' "xxx"      display lines containing "xxx"', 0aH, '  "xxx,yyy'
	DB	'"  display lines containing "xxx" or "yyy"', 0aH, '  "-xxx"  '
	DB	'   hide lines containing "xxx"', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BFICBINI@Filtering@
CONST	SEGMENT
??_C@_09BFICBINI@Filtering@ DB 'Filtering', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5@
CONST	SEGMENT
??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5@ DB 'The quick b'
	DB	'rown fox jumps over the lazy dog', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LKPCNPLG@Tree?5in?5column@
CONST	SEGMENT
??_C@_0P@LKPCNPLG@Tree?5in?5column@ DB 'Tree in column', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MJPJLCIK@Even?5more?5contents@
CONST	SEGMENT
??_C@_0BD@MJPJLCIK@Even?5more?5contents@ DB 'Even more contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NGNKJEEB@Node?$CFd?4?$CFd@
CONST	SEGMENT
??_C@_09NGNKJEEB@Node?$CFd?4?$CFd@ DB 'Node%d.%d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DCLBKAFC@Node?5contents@
CONST	SEGMENT
??_C@_0O@DCLBKAFC@Node?5contents@ DB 'Node contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06NAFIGPDO@Node?$CFd@
CONST	SEGMENT
??_C@_06NAFIGPDO@Node?$CFd@ DB 'Node%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04KCCPLAND@tree@
CONST	SEGMENT
??_C@_04KCCPLAND@tree@ DB 'tree', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDOOJPNH@Tree@
CONST	SEGMENT
??_C@_04GDOOJPNH@Tree@ DB 'Tree', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4@
CONST	SEGMENT
??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4@ DB 'Line %d Column %'
	DB	'd...', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion@
CONST	SEGMENT
??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion@ DB '##ScrollingRegion', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling@
CONST	SEGMENT
??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling@ DB 'Horizontal Scrolling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FKDOIKDB@Hello?5Right@
CONST	SEGMENT
??_C@_0M@FKDOIKDB@Hello?5Right@ DB 'Hello Right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BOIODOOK@Hello?5Left@
CONST	SEGMENT
??_C@_0L@BOIODOOK@Hello?5Left@ DB 'Hello Left', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5@
CONST	SEGMENT
??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5@ DB 'The quick b'
	DB	'rown fox jumps over the lazy dog.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBOHNDAK@word?9wrapping@
CONST	SEGMENT
??_C@_0O@JBOHNDAK@word?9wrapping@ DB 'word-wrapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@FMIDKLNC@Word?9wrapping@
CONST	SEGMENT
??_C@_0O@FMIDKLNC@Word?9wrapping@ DB 'Word-wrapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BBDMKLMO@Category?5C@
CONST	SEGMENT
??_C@_0L@BBDMKLMO@Category?5C@ DB 'Category C', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ICHJKIP@Category?5B@
CONST	SEGMENT
??_C@_0L@ICHJKIP@Category?5B@ DB 'Category B', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CNBMJDEI@Blah?5blah?5blah@
CONST	SEGMENT
??_C@_0P@CNBMJDEI@Blah?5blah?5blah@ DB 'Blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDAKMJEM@Category?5A@
CONST	SEGMENT
??_C@_0L@CDAKMJEM@Category?5A@ DB 'Category A', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OBGPFBCN@blue@
CONST	SEGMENT
??_C@_04OBGPFBCN@blue@ DB 'blue', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4@
CONST	SEGMENT
??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4@ DB 'An extra line here.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FAAAOPJM@red@
CONST	SEGMENT
??_C@_03FAAAOPJM@red@ DB 'red', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHAOKMNF@ImGui@
CONST	SEGMENT
??_C@_05OHAOKMNF@ImGui@ DB 'ImGui', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IPHDHIPP@mixed@
CONST	SEGMENT
??_C@_05IPHDHIPP@mixed@ DB 'mixed', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@CEFNMID@Mixed?5items@
CONST	SEGMENT
??_C@_0M@CEFNMID@Mixed?5items@ DB 'Mixed items', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5cli@
CONST	SEGMENT
??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5cli@ DB 'Long text t'
	DB	'hat is likely to clip', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LBGPBMDK@Offset?5?$CF?42f@
CONST	SEGMENT
??_C@_0M@LBGPBMDK@Offset?5?$CF?42f@ DB 'Offset %.2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@OKGLPFJF@Avail?5?$CF?42f@
CONST	SEGMENT
??_C@_0L@OKGLPFJF@Avail?5?$CF?42f@ DB 'Avail %.2f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc@
CONST	SEGMENT
??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc@ DB '%c%c%c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NEOMLJGJ@vertical@
CONST	SEGMENT
??_C@_08NEOMLJGJ@vertical@ DB 'vertical', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LMMKHPOB@horizontal@
CONST	SEGMENT
??_C@_0L@LMMKHPOB@horizontal@ DB 'horizontal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count@
CONST	SEGMENT
??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count@ DB '##columns_count', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NLMHJDCE@?$CFd?5columns@
CONST	SEGMENT
??_C@_0L@NLMHJDCE@?$CFd?5columns@ DB '%d columns', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJFMDFHH@Borders@
CONST	SEGMENT
??_C@_07PJFMDFHH@Borders@ DB 'Borders', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04OCCELDNI@?$CF04d@
CONST	SEGMENT
??_C@_04OCCELDNI@?$CF04d@ DB '%04d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BHGNKNGD@?1path?1three@
CONST	SEGMENT
??_C@_0M@BHGNKNGD@?1path?1three@ DB '/path/three', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KGFGFDII@?1path?1two@
CONST	SEGMENT
??_C@_09KGFGFDII@?1path?1two@ DB '/path/two', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09MIFGPDGD@?1path?1one@
CONST	SEGMENT
??_C@_09MIFGPDGD@?1path?1one@ DB '/path/one', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OHMANGAP@Three@
CONST	SEGMENT
??_C@_05OHMANGAP@Three@ DB 'Three', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJAPLBKL@Two@
CONST	SEGMENT
??_C@_03CJAPLBKL@Two@ DB 'Two', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03EHAPBBEA@One@
CONST	SEGMENT
??_C@_03EHAPBBEA@One@ DB 'One', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BPEJBMFM@Hovered@
CONST	SEGMENT
??_C@_07BPEJBMFM@Hovered@ DB 'Hovered', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04HMIIHGGM@Path@
CONST	SEGMENT
??_C@_04HMIIHGGM@Path@ DB 'Path', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04FABLJDN@Name@
CONST	SEGMENT
??_C@_04FABLJDN@Name@ DB 'Name', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02OLOABKKD@ID@
CONST	SEGMENT
??_C@_02OLOABKKD@ID@ DB 'ID', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09IGOFLFMM@mycolumns@
CONST	SEGMENT
??_C@_09IGOFLFMM@mycolumns@ DB 'mycolumns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IEPPLKGA@With?5border?3@
CONST	SEGMENT
??_C@_0N@IEPPLKGA@With?5border?3@ DB 'With border:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GGDPAOBO@mycolumns3@
CONST	SEGMENT
??_C@_0L@GGDPAOBO@mycolumns3@ DB 'mycolumns3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KGDHMKCI@Without?5border?3@
CONST	SEGMENT
??_C@_0BA@KGDHMKCI@Without?5border?3@ DB 'Without border:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FD@EHJEKNDN@Disable?5the?5indenting?5of?5tree?5n@
CONST	SEGMENT
??_C@_0FD@EHJEKNDN@Disable?5the?5indenting?5of?5tree?5n@ DB 'Disable the '
	DB	'indenting of tree nodes so demo columns can use the full wind'
	DB	'ow width.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@JLFJACII@Disable?5tree?5indentation@
CONST	SEGMENT
??_C@_0BJ@JLFJACII@Disable?5tree?5indentation@ DB 'Disable tree indentati'
	DB	'on', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window@
CONST	SEGMENT
??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window@ DB 'Menu inside a re'
	DB	'gular window', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09PDGIKJJH@Menu?5item@
CONST	SEGMENT
??_C@_09PDGIKJJH@Menu?5item@ DB 'Menu item', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06GCLBOGOD@CTRL?$CLM@
CONST	SEGMENT
??_C@_06GCLBOGOD@CTRL?$CLM@ DB 'CTRL+M', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03GBBIHDEJ@foo@
CONST	SEGMENT
??_C@_03GBBIHDEJ@foo@ DB 'foo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5men@
CONST	SEGMENT
??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5men@ DB 'Below we are'
	DB	' testing adding menu items to a regular window. It''s rather '
	DB	'unusual but should work!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window@
CONST	SEGMENT
??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window@ DB 'Menus inside a '
	DB	'regular window', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB@
CONST	SEGMENT
??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB@ DB 'Hello from S'
	DB	'tacked The Second!', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09BHJOLLCH@Stacked?52@
CONST	SEGMENT
??_C@_09BHJOLLCH@Stacked?52@ DB 'Stacked 2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4@
CONST	SEGMENT
??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4@ DB 'Add another modal..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05PEENBMOG@color@
CONST	SEGMENT
??_C@_05PEENBMOG@color@ DB 'color', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Us@
CONST	SEGMENT
??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Us@ DB 'Hello from S'
	DB	'tacked The First', 0aH, 'Using style.Colors[ImGuiCol_ModalWin'
	DB	'dowDimBg] behind it.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DBBHCGNO@Dummy?5menu?5item@
CONST	SEGMENT
??_C@_0BA@DBBHCGNO@Dummy?5menu?5item@ DB 'Dummy menu item', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBAHLACE@File@
CONST	SEGMENT
??_C@_04PBAHLACE@File@ DB 'File', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09DMLDOIOE@Stacked?51@
CONST	SEGMENT
??_C@_09DMLDOIOE@Stacked?51@ DB 'Stacked 1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NNACGNLC@Stacked?5modals?4?4@
CONST	SEGMENT
??_C@_0BB@NNACGNLC@Stacked?5modals?4?4@ DB 'Stacked modals..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06FMBNCPDL@Cancel@
CONST	SEGMENT
??_C@_06FMBNCPDL@Cancel@ DB 'Cancel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GIPFHKNO@OK@
CONST	SEGMENT
??_C@_02GIPFHKNO@OK@ DB 'OK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time@
CONST	SEGMENT
??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time@ DB 'Don''t ask me next ti'
	DB	'me', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5@
CONST	SEGMENT
??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5@ DB 'All those be'
	DB	'autiful files will be deleted.', 0aH, 'This operation cannot '
	DB	'be undone!', 0aH, 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DCPPKMOD@Delete?$DP@
CONST	SEGMENT
??_C@_07DCPPKMOD@Delete?$DP@ DB 'Delete?', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CPNCIMAF@Delete?4?4@
CONST	SEGMENT
??_C@_08CPNCIMAF@Delete?4?4@ DB 'Delete..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FN@LBGEHGKO@Modal?5windows?5are?5like?5popups?5b@
CONST	SEGMENT
??_C@_0FN@LBGEHGKO@Modal?5windows?5are?5like?5popups?5b@ DB 'Modal window'
	DB	's are like popups but the user cannot close them by clicking '
	DB	'outside the window.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BEBKNACN@Modals@
CONST	SEGMENT
??_C@_06BEBKNACN@Modals@ DB 'Modals', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ@
CONST	SEGMENT
??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ@ DB '(<-- right-c'
	DB	'lick here)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06PEDNKACM@?$CD?$CDedit@
CONST	SEGMENT
??_C@_06PEDNKACM@?$CD?$CDedit@ DB '##edit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@MIFJAGAG@Edit?5name?3@
CONST	SEGMENT
??_C@_0L@MIFJAGAG@Edit?5name?3@ DB 'Edit name:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton@
CONST	SEGMENT
??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton@ DB 'Button: %s###Bu'
	DB	'tton', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@BJIBGGDI@?$CIYou?5can?5also?5right?9click?5me?5to@
CONST	SEGMENT
??_C@_0DP@BJIBGGDI@?$CIYou?5can?5also?5right?9click?5me?5to@ DB '(You can'
	DB	' also right-click me to open the same popup as above.)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07FGLEKONH@?$CD?$CDValue@
CONST	SEGMENT
??_C@_07FGLEKONH@?$CD?$CDValue@ DB '##Value', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09NJOBBCFG@Set?5to?5PI@
CONST	SEGMENT
??_C@_09NJOBBCFG@Set?5to?5PI@ DB 'Set to PI', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MLNNLOAO@Set?5to?5zero@
CONST	SEGMENT
??_C@_0M@MLNNLOAO@Set?5to?5zero@ DB 'Set to zero', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LPLCKLLE@item?5context?5menu@
CONST	SEGMENT
??_C@_0BC@LPLCKLLE@item?5context?5menu@ DB 'item context menu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@FFAOKKJB@Value?5?$DN?5?$CF?43f?5?$CI?$DM?9?9?5right?9click?5h@
CONST	SEGMENT
??_C@_0CE@FFAOKKJB@Value?5?$DN?5?$CF?43f?5?$CI?$DM?9?9?5right?9click?5h@ DB 'V'
	DB	'alue = %.3f (<-- right-click here)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EGPMCJBG@Context?5menus@
CONST	SEGMENT
??_C@_0O@EGPMCJBG@Context?5menus@ DB 'Context menus', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMFGCCH@my_file_popup@
CONST	SEGMENT
??_C@_0O@CMFGCCH@my_file_popup@ DB 'my_file_popup', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GKGGLAGK@File?5Menu?4?4@
CONST	SEGMENT
??_C@_0M@GKGGLAGK@File?5Menu?4?4@ DB 'File Menu..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4@
CONST	SEGMENT
??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4@ DB 'I am the last one h'
	DB	'ere.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CMMIFNBD@another?5popup@
CONST	SEGMENT
??_C@_0O@CMMIFNBD@another?5popup@ DB 'another popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NAJLJJDJ@Stacked?5Popup@
CONST	SEGMENT
??_C@_0O@NAJLJJDJ@Stacked?5Popup@ DB 'Stacked Popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup@
CONST	SEGMENT
??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup@ DB 'I am a tooltip '
	DB	'over a popup', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IODHFNG@Tooltip?5here@
CONST	SEGMENT
??_C@_0N@IODHFNG@Tooltip?5here@ DB 'Tooltip here', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPLGDLFG@Click?5me@
CONST	SEGMENT
??_C@_08PPLGDLFG@Click?5me@ DB 'Click me', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08GMNJJNGG@Sub?9menu@
CONST	SEGMENT
??_C@_08GMNJJNGG@Sub?9menu@ DB 'Sub-menu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@LJBKGLLI@my_toggle_popup@
CONST	SEGMENT
??_C@_0BA@LJBKGLLI@my_toggle_popup@ DB 'my_toggle_popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NINPLAO@Toggle?4?4@
CONST	SEGMENT
??_C@_08NINPLAO@Toggle?4?4@ DB 'Toggle..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08IKEIPKBP@Aquarium@
CONST	SEGMENT
??_C@_08IKEIPKBP@Aquarium@ DB 'Aquarium', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06PHEAPGKB@?$DMNone?$DO@
CONST	SEGMENT
??_C@_06PHEAPGKB@?$DMNone?$DO@ DB '<None>', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GGCCCMJM@my_select_popup@
CONST	SEGMENT
??_C@_0BA@GGCCCMJM@my_select_popup@ DB 'my_select_popup', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NNBGNINF@Select?4?4@
CONST	SEGMENT
??_C@_08NNBGNINF@Select?4?4@ DB 'Select..', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08EGAMPFAB@Tilefish@
CONST	SEGMENT
??_C@_08EGAMPFAB@Tilefish@ DB 'Tilefish', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DOCMJKHB@Pollock@
CONST	SEGMENT
??_C@_07DOCMJKHB@Pollock@ DB 'Pollock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08OFLHLLIP@Mackerel@
CONST	SEGMENT
??_C@_08OFLHLLIP@Mackerel@ DB 'Mackerel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07BNGOACBO@Haddock@
CONST	SEGMENT
??_C@_07BNGOACBO@Haddock@ DB 'Haddock', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05BKABPFFI@Bream@
CONST	SEGMENT
??_C@_05BKABPFFI@Bream@ DB 'Bream', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhi@
CONST	SEGMENT
??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhi@ DB 'When a popu'
	DB	'p is active, it inhibits interacting with windows that are be'
	DB	'hind the popup. Clicking outside the popup closes it.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06ENDEIGLN@Popups@
CONST	SEGMENT
??_C@_06ENDEIGLN@Popups@ DB 'Popups', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows@
CONST	SEGMENT
??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows@ DB 'Popups & Modal windo'
	DB	'ws', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB@
CONST	SEGMENT
??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB@ DB 'Line 1 hell'
	DB	'o', 0aH, 'Line 2 clip me!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07MGJIPBMD@?$CD?$CDdummy@
CONST	SEGMENT
??_C@_07MGJIPBMD@?$CD?$CDdummy@ DB '##dummy', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@BLJLNCGP@?$CIClick?5and?5drag?$CJ@
CONST	SEGMENT
??_C@_0BB@BLJLNCGP@?$CIClick?5and?5drag?$CJ@ DB '(Click and drag)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04IAGNFIBA@size@
CONST	SEGMENT
??_C@_04IAGNFIBA@size@ DB 'size', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAK@JJMCOOGK@On?5a?5per?9widget?5basis?5we?5are?5oc@
CONST	SEGMENT
??_C@_0BAK@JJMCOOGK@On?5a?5per?9widget?5basis?5we?5are?5oc@ DB 'On a per-'
	DB	'widget basis we are occasionally clipping text CPU-side if it'
	DB	' won''t fit in its frame. Otherwise we are doing coarser clip'
	DB	'ping + passing a scissor rectangle to the renderer. The syste'
	DB	'm is designed to try minimizing both execution and CPU/GPU re'
	DB	'ndering cost.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_08LLKICGJM@Clipping@
CONST	SEGMENT
??_C@_08LLKICGJM@Clipping@ DB 'Clipping', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GNNAMPMJ@FourFourFour@
CONST	SEGMENT
??_C@_0N@GNNAMPMJ@FourFourFour@ DB 'FourFourFour', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BGMNPICP@ThreeThreeThree@
CONST	SEGMENT
??_C@_0BA@BGMNPICP@ThreeThreeThree@ DB 'ThreeThreeThree', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09BMOICMLJ@TwoTwoTwo@
CONST	SEGMENT
??_C@_09BMOICMLJ@TwoTwoTwo@ DB 'TwoTwoTwo', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DHLFJNGJ@OneOneOne@
CONST	SEGMENT
??_C@_09DHLFJNGJ@OneOneOne@ DB 'OneOneOne', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05COLMCDPH@Hello@
CONST	SEGMENT
??_C@_05COLMCDPH@Hello@ DB 'Hello', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CDOLGENO@Width?5?$CF?42f@
CONST	SEGMENT
??_C@_0L@CDOLGENO@Width?5?$CF?42f@ DB 'Width %.2f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5@
CONST	SEGMENT
??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5@ DB 'This text sho'
	DB	'uld automatically wrap on the edge of the work rectangle.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LBMIMLJO@CollapsingHeader@
CONST	SEGMENT
??_C@_0BB@LBMIMLJO@CollapsingHeader@ DB 'CollapsingHeader', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GOEDKDLO@Some?5tree?5contents@
CONST	SEGMENT
??_C@_0BD@GOEDKDLO@Some?5tree?5contents@ DB 'Some tree contents', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4@
CONST	SEGMENT
??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4@ DB 'another one'
	DB	' of those tree node...', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node@
CONST	SEGMENT
??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node@ DB 'this is a tree node', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button@
CONST	SEGMENT
??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button@ DB 'this is a 300-wide'
	DB	' button', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05NBKGABAK@?$CD?$CDcsx@
CONST	SEGMENT
??_C@_05NBKGABAK@?$CD?$CDcsx@ DB '##csx', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f@
CONST	SEGMENT
??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f@ DB 'Sc'
	DB	'roll %.1f/%.1f %.1f/%.1f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@GEDBKKBK@Explicit?5content?5size@
CONST	SEGMENT
??_C@_0BG@GEDBKKBK@Explicit?5content?5size@ DB 'Explicit content size', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GIMBDOHM@Child@
CONST	SEGMENT
??_C@_05GIMBDOHM@Child@ DB 'Child', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07CHLOJOEF@Tab?5bar@
CONST	SEGMENT
??_C@_07CHLOJOEF@Tab?5bar@ DB 'Tab bar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07IBCCJKML@Columns@
CONST	SEGMENT
??_C@_07IBCCJKML@Columns@ DB 'Columns', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HDFBIJDK@Text?5wrapped@
CONST	SEGMENT
??_C@_0N@HDFBIJDK@Text?5wrapped@ DB 'Text wrapped', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DIDHCLKE@Tree?5nodes@
CONST	SEGMENT
??_C@_0L@DIDHCLKE@Tree?5nodes@ DB 'Tree nodes', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PCJBMDND@H?9scrollbar@
CONST	SEGMENT
??_C@_0M@PCJBMDND@H?9scrollbar@ DB 'H-scrollbar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react@
CONST	SEGMENT
??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react@ DB 'Test of diffe'
	DB	'rent widgets react and impact the work rectangle growing when'
	DB	' horizontal scrolling is enabled.', 0aH, 0aH, 'Use ''Metrics-'
	DB	'>Tools->Show windows rectangles'' to visualize rectangles.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5w@
CONST	SEGMENT
??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5w@ DB 'Horizontal co'
	DB	'ntents size demo window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5d@
CONST	SEGMENT
??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5d@ DB 'Show Horizont'
	DB	'al contents size demo window', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02GPIOPFAK@?$DO?$DO@
CONST	SEGMENT
??_C@_02GPIOPFAK@?$DO?$DO@ DB '>>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@HICDBOJF@Scroll?5from?5code@
CONST	SEGMENT
??_C@_0BB@HICDBOJF@Scroll?5from?5code@ DB 'Scroll from code', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02FODMEDOG@?$DM?$DM@
CONST	SEGMENT
??_C@_02FODMEDOG@?$DM?$DM@ DB '<<', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04MLLJCPJP@Buzz@
CONST	SEGMENT
??_C@_04MLLJCPJP@Buzz@ DB 'Buzz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04CEPGGBHI@Fizz@
CONST	SEGMENT
??_C@_04CEPGGBHI@Fizz@ DB 'Fizz', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08GLBPKMPD@FizzBuzz@
CONST	SEGMENT
??_C@_08GLBPKMPD@FizzBuzz@ DB 'FizzBuzz', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09PKEBEIDM@scrolling@
CONST	SEGMENT
??_C@_09PKEBEIDM@scrolling@ DB 'scrolling', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0NL@PPAIPOMM@Horizontal?5scrolling?5for?5a?5wind@
CONST	SEGMENT
??_C@_0NL@PPAIPOMM@Horizontal?5scrolling?5for?5a?5wind@ DB 'Horizontal sc'
	DB	'rolling for a window has to be enabled explicitly via the ImG'
	DB	'uiWindowFlags_HorizontalScrollbar flag.', 0aH, 0aH, 'You may '
	DB	'want to explicitly specify content width by calling SetNextWi'
	DB	'ndowContentWidth() before Begin().', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f@
CONST	SEGMENT
??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f@ DB '%s', 0aH, '%.0f/%.0f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DADPALEM@Right@
CONST	SEGMENT
??_C@_05DADPALEM@Right@ DB 'Right', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KPCPLBPL@Left@
CONST	SEGMENT
??_C@_04KPCPLBPL@Left@ DB 'Left', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling@
CONST	SEGMENT
??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling@ DB '##HorizontalScrolling'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CAK@JJECNJPI@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScro@
CONST	SEGMENT
??_C@_0CAK@JJECNJPI@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScro@ DB 'Use Set'
	DB	'ScrollHereX() or SetScrollFromPosX() to scroll to a given hor'
	DB	'izontal position.', 0aH, 0aH, 'Using the "Scroll To Pos" butt'
	DB	'on above will make the discontinuity at edges visible: scroll'
	DB	'ing to the top/bottom/left/right-most item will add an additi'
	DB	'onal WindowPadding to reflect on reaching the edge of the lis'
	DB	't.', 0aH, 0aH, 'Because the clipping rectangle of most window'
	DB	' hides half worth of WindowPadding on the left/right, using S'
	DB	'etScrollFromPosX(+1) will usually result in clipped text wher'
	DB	'eas the equivalent SetScrollFromPosY(+1) wouldn''t.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f@
CONST	SEGMENT
??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f@ DB '%.0f/%.0f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03FIKCJHKP@abc@
CONST	SEGMENT
??_C@_03FIKCJHKP@abc@ DB 'abc', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06DDHCBBGN@Bottom@
CONST	SEGMENT
??_C@_06DDHCBBGN@Bottom@ DB 'Bottom', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03HJBEBHGH@75?$CF@
CONST	SEGMENT
??_C@_03HJBEBHGH@75?$CF@ DB '75%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06NOADDNNE@Center@
CONST	SEGMENT
??_C@_06NOADDNNE@Center@ DB 'Center', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03EOMKOHFF@25?$CF@
CONST	SEGMENT
??_C@_03EOMKOHFF@25?$CF@ DB '25%', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03PGGAENPN@Top@
CONST	SEGMENT
??_C@_03PGGAENPN@Top@ DB 'Top', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling@
CONST	SEGMENT
??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling@ DB '##VerticalScrolling', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFMCHKKE@?$CD?$CDpos@
CONST	SEGMENT
??_C@_05GFMCHKKE@?$CD?$CDpos@ DB '##pos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px@
CONST	SEGMENT
??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px@ DB 'X/Y = %.0f px', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CGNNKBMG@Scroll?5To?5Pos@
CONST	SEGMENT
??_C@_0O@CGNNKBMG@Scroll?5To?5Pos@ DB 'Scroll To Pos', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05FFNMOAPG@?$CD?$CDoff@
CONST	SEGMENT
??_C@_05FFNMOAPG@?$CD?$CDoff@ DB '##off', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGGLGIAM@?$CL?$CF?40f?5px@
CONST	SEGMENT
??_C@_08DGGLGIAM@?$CL?$CF?40f?5px@ DB '+%.0f px', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EDOJIGBC@Scroll?5Offset@
CONST	SEGMENT
??_C@_0O@EDOJIGBC@Scroll?5Offset@ DB 'Scroll Offset', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06PDMOEKMO@?$CD?$CDitem@
CONST	SEGMENT
??_C@_06PDMOEKMO@?$CD?$CDitem@ DB '##item', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd@
CONST	SEGMENT
??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd@ DB 'Item = %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BFDCPAGB@Track@
CONST	SEGMENT
??_C@_05BFDCPAGB@Track@ DB 'Track', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GM@GBNFBEFB@We?5expose?5this?5for?5testing?5beca@
CONST	SEGMENT
??_C@_0GM@GBNFBEFB@We?5expose?5this?5for?5testing?5beca@ DB 'We expose th'
	DB	'is for testing because scrolling sometimes had issues with wi'
	DB	'ndow decoration such as menu-bars.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@ODNEMNHD@Decoration@
CONST	SEGMENT
??_C@_0L@ODNEMNHD@Decoration@ DB 'Decoration', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScro@
CONST	SEGMENT
??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScro@ DB 'Use SetS'
	DB	'crollHereY() or SetScrollFromPosY() to scroll to a given vert'
	DB	'ical position.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09LFBMELOM@Scrolling@
CONST	SEGMENT
??_C@_09LFBMELOM@Scrolling@ DB 'Scrolling', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09OADFNCOB@Button?$CD?$CD4@
CONST	SEGMENT
??_C@_09OADFNCOB@Button?$CD?$CD4@ DB 'Button##4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OKAPPFIB@Node@
CONST	SEGMENT
??_C@_04OKAPPFIB@Node@ DB 'Node', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@DABAODPF@Bullet?5text@
CONST	SEGMENT
??_C@_0M@DABAODPF@Bullet?5text@ DB 'Bullet text', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KPHEEECG@Button?$CD?$CD3@
CONST	SEGMENT
??_C@_09KPHEEECG@Button?$CD?$CD3@ DB 'Button##3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LGGPHFGH@Button?$CD?$CD2@
CONST	SEGMENT
??_C@_09LGGPHFGH@Button?$CD?$CD2@ DB 'Button##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07HMHPNFCM@Node?$CD?$CD2@
CONST	SEGMENT
??_C@_07HMHPNFCM@Node?$CD?$CD2@ DB 'Node##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09CCOCANBA@Item?5?$CFd?4?4@
CONST	SEGMENT
??_C@_09CCOCANBA@Item?5?$CFd?4?4@ DB 'Item %d..', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07FHFCIGOP@Node?$CD?$CD1@
CONST	SEGMENT
??_C@_07FHFCIGOP@Node?$CD?$CD1@ DB 'Node##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNECCGKE@Button?$CD?$CD1@
CONST	SEGMENT
??_C@_09JNECCGKE@Button?$CD?$CD1@ DB 'Button##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ@
CONST	SEGMENT
??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ@ DB 'SmallButton()', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08DHDFAMNE@Button?$CI?$CJ@
CONST	SEGMENT
??_C@_08DHDFAMNE@Button?$CI?$CJ@ DB 'Button()', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05OIMGOJDP@50x50@
CONST	SEGMENT
??_C@_05OIMGOJDP@50x50@ DB '50x50', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05FMIAGJLC@80x80@
CONST	SEGMENT
??_C@_05FMIAGJLC@80x80@ DB '80x80', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OFIEFPON@Misc?5items?3@
CONST	SEGMENT
??_C@_0M@OFIEFPON@Misc?5items?3@ DB 'Misc items:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGJGMAPF@HOP?$CD?$CD2@
CONST	SEGMENT
??_C@_06LGJGMAPF@HOP?$CD?$CD2@ DB 'HOP##2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JNLLJDDG@HOP?$CD?$CD1@
CONST	SEGMENT
??_C@_06JNLLJDDG@HOP?$CD?$CD1@ DB 'HOP##1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MEHCJFNA@Hello?6World@
CONST	SEGMENT
??_C@_0M@MEHCJFNA@Hello?6World@ DB 'Hello', 0aH, 'World', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LPFJLNGJ@One?6Two?6Three@
CONST	SEGMENT
??_C@_0O@LPFJLNGJ@One?6Two?6Three@ DB 'One', 0aH, 'Two', 0aH, 'Three', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@IKLHLLAO@Multi?9line?5text?3@
CONST	SEGMENT
??_C@_0BB@IKLHLLAO@Multi?9line?5text?3@ DB 'Multi-line text:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PBFELNCE@Item?$CD?$CD3@
CONST	SEGMENT
??_C@_07PBFELNCE@Item?$CD?$CD3@ DB 'Item##3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07OIEPIMGF@Item?$CD?$CD2@
CONST	SEGMENT
??_C@_07OIEPIMGF@Item?$CD?$CD2@ DB 'Item##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04BGCMBJDA@Item@
CONST	SEGMENT
??_C@_04BGCMBJDA@Item@ DB 'Item', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MDGCNPKG@Item?$CD?$CD1@
CONST	SEGMENT
??_C@_07MDGCNPKG@Item?$CD?$CD1@ DB 'Item##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item@
CONST	SEGMENT
??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item@ DB 'Text aligned to f'
	DB	'ramed item', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07HPPHDIDO@TEST?$CD?$CD2@
CONST	SEGMENT
??_C@_07HPPHDIDO@TEST?$CD?$CD2@ DB 'TEST##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OIKJMBFP@TEST@
CONST	SEGMENT
??_C@_04OIKJMBFP@TEST@ DB 'TEST', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07FENKGLPN@TEST?$CD?$CD1@
CONST	SEGMENT
??_C@_07FENKGLPN@TEST?$CD?$CD1@ DB 'TEST##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding@
CONST	SEGMENT
??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding@ DB 'We call AlignTe'
	DB	'xtToFramePadding() to vertically align the text baseline by +'
	DB	'FramePadding.y', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEJMPEFH@OK?5Blahblah@
CONST	SEGMENT
??_C@_0M@LEJMPEFH@OK?5Blahblah@ DB 'OK Blahblah', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mi@
CONST	SEGMENT
??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mi@ DB 'Baseline of '
	DB	'button will look misaligned with text..', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GBEAAIAC@Some?5framed?5item@
CONST	SEGMENT
??_C@_0BB@GBEAAIAC@Some?5framed?5item@ DB 'Some framed item', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HEDLMKK@KO?5Blahblah@
CONST	SEGMENT
??_C@_0M@HEDLMKK@KO?5Blahblah@ DB 'KO Blahblah', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0MN@BCGLJGPG@This?5is?5testing?5the?5vertical?5al@
CONST	SEGMENT
??_C@_0MN@BCGLJGPG@This?5is?5testing?5the?5vertical?5al@ DB 'This is test'
	DB	'ing the vertical alignment that gets applied on text to keep '
	DB	'it aligned with widgets. Lines only composed of text or "smal'
	DB	'l" widgets fit in less vertical spaces than lines with normal'
	DB	' widgets.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FLJDDPLM@Text?5baseline?3@
CONST	SEGMENT
??_C@_0P@FLJDDPLM@Text?5baseline?3@ DB 'Text baseline:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment@
CONST	SEGMENT
??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment@ DB 'Text Baseline Alignment'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@FODJADJE@Not?5Selected@
CONST	SEGMENT
??_C@_0N@FODJADJE@Not?5Selected@ DB 'Not Selected', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KLEPBNHL@Selected@
CONST	SEGMENT
??_C@_08KLEPBNHL@Selected@ DB 'Selected', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04PPBEGPNI@List@
CONST	SEGMENT
??_C@_04PPBEGPNI@List@ DB 'List', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD@
CONST	SEGMENT
??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD@ DB 'LEVERAGE', 0aH, 'BUZZWORD', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08HBCMJOON@REACTION@
CONST	SEGMENT
??_C@_08HBCMJOON@REACTION@ DB 'REACTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06DHJAPAEE@ACTION@
CONST	SEGMENT
??_C@_06DHJAPAEE@ACTION@ DB 'ACTION', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NDEOOAHA@?$CD?$CDvalues@
CONST	SEGMENT
??_C@_08NDEOOAHA@?$CD?$CDvalues@ DB '##values', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GCGPENCF@First?5group?5hovered@
CONST	SEGMENT
??_C@_0BE@GCGPENCF@First?5group?5hovered@ DB 'First group hovered', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03IJCOHMIH@EEE@
CONST	SEGMENT
??_C@_03IJCOHMIH@EEE@ DB 'EEE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CJELEAJE@DDD@
CONST	SEGMENT
??_C@_03CJELEAJE@DDD@ DB 'DDD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03POJCPIGP@CCC@
CONST	SEGMENT
??_C@_03POJCPIGP@CCC@ DB 'CCC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03FOPHMEHM@BBB@
CONST	SEGMENT
??_C@_03FOPHMEHM@BBB@ DB 'BBB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03GFCJIGAI@AAA@
CONST	SEGMENT
??_C@_03GFCJIGAI@AAA@ DB 'AAA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5th@
CONST	SEGMENT
??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5th@ DB 'BeginGro'
	DB	'up() basically locks the horizontal position for new line. En'
	DB	'dGroup() bundles the whole group so that you can use "item" f'
	DB	'unctions such as IsItemHovered()/IsItemActive() or SameLine()'
	DB	' etc. on the whole group.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LCLFDFOL@Groups@
CONST	SEGMENT
??_C@_06LCLFDFOL@Groups@ DB 'Groups', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4@
CONST	SEGMENT
??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4@ DB 'I am an odd tab.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB@
CONST	SEGMENT
??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB@ DB 'This is the %s tab!'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_06NBIPACBO@Daikon@
CONST	SEGMENT
??_C@_06NBIPACBO@Daikon@ DB 'Daikon', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LGPLDCHA@Celery@
CONST	SEGMENT
??_C@_06LGPLDCHA@Celery@ DB 'Celery', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NACLCGIP@Beetroot@
CONST	SEGMENT
??_C@_08NACLCGIP@Beetroot@ DB 'Beetroot', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09JNADJLBG@Artichoke@
CONST	SEGMENT
??_C@_09JNADJLBG@Artichoke@ DB 'Artichoke', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicyS@
CONST	SEGMENT
??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicyS@ DB 'ImGuiTabBarFlags_'
	DB	'FittingPolicyScroll', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyR@
CONST	SEGMENT
??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyR@ DB 'ImGuiTabBarFlags_'
	DB	'FittingPolicyResizeDown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMid@
CONST	SEGMENT
??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMid@ DB 'ImGuiTabBarFlags_'
	DB	'NoCloseWithMiddleMouseButton', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBu@
CONST	SEGMENT
??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBu@ DB 'ImGuiTabBarFlags_'
	DB	'TabListPopupButton', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewT@
CONST	SEGMENT
??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewT@ DB 'ImGuiTabBarFlags_'
	DB	'AutoSelectNewTabs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable@
CONST	SEGMENT
??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable@ DB 'ImGuiTabBarFlags_Reo'
	DB	'rderable', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button@
CONST	SEGMENT
??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button@ DB 'Advanced & Close Bu'
	DB	'tton', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5@
CONST	SEGMENT
??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5@ DB 'This is '
	DB	'the Cucumber tab!', 0aH, 'blah blah blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FIHABPKG@Cucumber@
CONST	SEGMENT
??_C@_08FIHABPKG@Cucumber@ DB 'Cucumber', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5@
CONST	SEGMENT
??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5@ DB 'This is '
	DB	'the Broccoli tab!', 0aH, 'blah blah blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LMFMBPKH@Broccoli@
CONST	SEGMENT
??_C@_08LMFMBPKH@Broccoli@ DB 'Broccoli', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5b@
CONST	SEGMENT
??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5b@ DB 'This is '
	DB	'the Avocado tab!', 0aH, 'blah blah blah blah blah', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07PJEDDDBE@Avocado@
CONST	SEGMENT
??_C@_07PJEDDDBE@Avocado@ DB 'Avocado', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08BHPFJKBJ@MyTabBar@
CONST	SEGMENT
??_C@_08BHPFJKBJ@MyTabBar@ DB 'MyTabBar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DIJFMEPE@Tabs@
CONST	SEGMENT
??_C@_04DIJFMEPE@Tabs@ DB 'Tabs', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03ELMLMPLG@Box@
CONST	SEGMENT
??_C@_03ELMLMPLG@Box@ DB 'Box', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CAEJLMBE@Manually?5wrapping?3@
CONST	SEGMENT
??_C@_0BD@CAEJLMBE@Manually?5wrapping?3@ DB 'Manually wrapping:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_01HMGJMAIH@B@
CONST	SEGMENT
??_C@_01HMGJMAIH@B@ DB 'B', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01FHEEJDEE@A@
CONST	SEGMENT
??_C@_01FHEEJDEE@A@ DB 'A', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_06OHPCMELK@Lists?3@
CONST	SEGMENT
??_C@_06OHPCMELK@Lists?3@ DB 'Lists:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_01POHCFINO@Z@
CONST	SEGMENT
??_C@_01POHCFINO@Z@ DB 'Z', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01NFFPALBN@Y@
CONST	SEGMENT
??_C@_01NFFPALBN@Y@ DB 'Y', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_01MMEEDKFM@X@
CONST	SEGMENT
??_C@_01MMEEDKFM@X@ DB 'X', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04NKJFLIBG@Rich@
CONST	SEGMENT
??_C@_04NKJFLIBG@Rich@ DB 'Rich', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_02HLOHLKJH@Is@
CONST	SEGMENT
??_C@_02HLOHLKJH@Is@ DB 'Is', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MNPBPLDE@Tailor@
CONST	SEGMENT
??_C@_06MNPBPLDE@Tailor@ DB 'Tailor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_02IGABPKMB@My@
CONST	SEGMENT
??_C@_02IGABPKMB@My@ DB 'My', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05OJEOCJOL@x?$DN300@
CONST	SEGMENT
??_C@_05OJEOCJOL@x?$DN300@ DB 'x=300', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EFIMCDIL@x?$DN150@
CONST	SEGMENT
??_C@_05EFIMCDIL@x?$DN150@ DB 'x=150', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KDGBBGOD@Aligned@
CONST	SEGMENT
??_C@_07KDGBBGOD@Aligned@ DB 'Aligned', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4@
CONST	SEGMENT
??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4@ DB 'can fit within'
	DB	' a text block.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DOOOCPOJ@Like?5this?5one@
CONST	SEGMENT
??_C@_0O@DOOOCPOJ@Like?5this?5one@ DB 'Like this one', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JIDOKED@Small?5buttons@
CONST	SEGMENT
??_C@_0O@JIDOKED@Small?5buttons@ DB 'Small buttons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IAINFGJF@Corniflower@
CONST	SEGMENT
??_C@_0M@IAINFGJF@Corniflower@ DB 'Corniflower', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PEKJFFJL@Normal?5buttons@
CONST	SEGMENT
??_C@_0P@PEKJFFJL@Normal?5buttons@ DB 'Normal buttons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello@
CONST	SEGMENT
??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello@ DB 'More spacing: Hello', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CPONELNL@Two?5items?3?5Hello@
CONST	SEGMENT
??_C@_0BB@CPONELNL@Two?5items?3?5Hello@ DB 'Two items: Hello', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5@
CONST	SEGMENT
??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5@ DB '(U'
	DB	'se ImGui::SameLine() to keep adding items to the right of the'
	DB	' preceding item)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout@
CONST	SEGMENT
??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout@ DB 'Basic Horizontal Layout'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09IMCMNFDH@?$CD?$CDfloat5c@
CONST	SEGMENT
??_C@_09IMCMNFDH@?$CD?$CDfloat5c@ DB '##float5c', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09JFDHOEHG@?$CD?$CDfloat5b@
CONST	SEGMENT
??_C@_09JFDHOEHG@?$CD?$CDfloat5b@ DB '##float5b', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOBKLHLF@?$CD?$CDfloat5a@
CONST	SEGMENT
??_C@_09LOBKLHLF@?$CD?$CDfloat5a@ DB '##float5a', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge@
CONST	SEGMENT
??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge@ DB 'Align to right edge', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JMHOPAFH@SetNextItemWidth?1PushItemWidth?$CI@
CONST	SEGMENT
??_C@_0CD@JMHOPAFH@SetNextItemWidth?1PushItemWidth?$CI@ DB 'SetNextItemWi'
	DB	'dth/PushItemWidth(-1)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08DAGJALOJ@float?$CD?$CD4@
CONST	SEGMENT
??_C@_08DAGJALOJ@float?$CD?$CD4@ DB 'float##4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100@
CONST	SEGMENT
??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100@ DB 'Align to right'
	DB	' edge minus 100', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI@
CONST	SEGMENT
??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI@ DB 'SetNextItemWid'
	DB	'th/PushItemWidth(-100)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HPCIJNCO@float?$CD?$CD3@
CONST	SEGMENT
??_C@_08HPCIJNCO@float?$CD?$CD3@ DB 'float##3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5rig@
CONST	SEGMENT
??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5rig@ DB 'Half '
	DB	'of available width.', 0aH, '(~ right-cursor_pos)', 0aH, '(wor'
	DB	'ks within a column set)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CI@
CONST	SEGMENT
??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CI@ DB 'SetNextItemWi'
	DB	'dth/PushItemWidth(GetContentRegionAvail().x * 0.5f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGDDKMGP@float?$CD?$CD2@
CONST	SEGMENT
??_C@_08GGDDKMGP@float?$CD?$CD2@ DB 'float##2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@HBJEDPEN@Half?5of?5window?5width?4@
CONST	SEGMENT
??_C@_0BG@HBJEDPEN@Half?5of?5window?5width?4@ DB 'Half of window width.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@PLEIEGIE@SetNextItemWidth?1PushItemWidth?$CI@
CONST	SEGMENT
??_C@_0DI@PLEIEGIE@SetNextItemWidth?1PushItemWidth?$CI@ DB 'SetNextItemWi'
	DB	'dth/PushItemWidth(GetWindowWidth() * 0.5f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08ENBOPPKM@float?$CD?$CD1@
CONST	SEGMENT
??_C@_08ENBOPPKM@float?$CD?$CD1@ DB 'float##1', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BANGKKCL@Fixed?5width?4@
CONST	SEGMENT
??_C@_0N@BANGKKCL@Fixed?5width?4@ DB 'Fixed width.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI@
CONST	SEGMENT
??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI@ DB 'SetNextItemWi'
	DB	'dth/PushItemWidth(100)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PINHNBJ@Widgets?5Width@
CONST	SEGMENT
??_C@_0O@PINHNBJ@Widgets?5Width@ DB 'Widgets Width', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0@
CONST	SEGMENT
??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0@ DB 'Rec'
	DB	't of child window is: (%.0f,%.0f) (%.0f,%.0f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NPCHMHMN@Some?5test?5?$CFd@
CONST	SEGMENT
??_C@_0N@NPCHMHMN@Some?5test?5?$CFd@ DB 'Some test %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04EPOOCEMM@blah@
CONST	SEGMENT
??_C@_04EPOOCEMM@blah@ DB 'blah', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHGLKFFN@?$CF03d@
CONST	SEGMENT
??_C@_04OHGLKFFN@?$CF03d@ DB '%03d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LEKLKIFI@Child2@
CONST	SEGMENT
??_C@_06LEKLKIFI@Child2@ DB 'Child2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region@
CONST	SEGMENT
??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region@ DB '%04d: scrollable re'
	DB	'gion', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06JPIGPLJL@Child1@
CONST	SEGMENT
??_C@_06JPIGPLJL@Child1@ DB 'Child1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06JMBAAABB@?$CD?$CDLine@
CONST	SEGMENT
??_C@_06JMBAAABB@?$CD?$CDLine@ DB '##Line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04BNGNMAK@Goto@
CONST	SEGMENT
??_C@_04BNGNMAK@Goto@ DB 'Goto', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PGMIMFJH@Disable?5Menu@
CONST	SEGMENT
??_C@_0N@PGMIMFJH@Disable?5Menu@ DB 'Disable Menu', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel@
CONST	SEGMENT
??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel@ DB 'Disable Mouse Wheel', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into@
CONST	SEGMENT
??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into@ DB 'Use child wi'
	DB	'ndows to begin into a self-contained independent scrolling/cl'
	DB	'ipping regions within a host window.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CCLKLEED@Child?5windows@
CONST	SEGMENT
??_C@_0O@CCLKLEED@Child?5windows@ DB 'Child windows', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KMHOJANB@Layout@
CONST	SEGMENT
??_C@_06KMHOJANB@Layout@ DB 'Layout', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CF@
CONST	SEGMENT
??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CF@ DB 'I'
	DB	'sItemHovered() after begin = %d (== is title bar hovered)', 0aH
	DB	'IsItemActive() after begin = %d (== is window being clicked/m'
	DB	'oved)', 0aH, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGELBCGM@Close@
CONST	SEGMENT
??_C@_05LGELBCGM@Close@ DB 'Close', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests@
CONST	SEGMENT
??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests@ DB 'Title bar Hover'
	DB	'ed/Active tests', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begi@
CONST	SEGMENT
??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begi@ DB 'Hovered/Activ'
	DB	'e tests after Begin() for title bar testing', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05JLNEMJLN@dummy@
CONST	SEGMENT
??_C@_05JLNEMJLN@dummy@ DB 'dummy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5fo@
CONST	SEGMENT
??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5fo@ DB 'This is anot'
	DB	'her child window for testing the _ChildWindows flag.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05GPGNDLEK@child@
CONST	SEGMENT
??_C@_05GPGNDLEK@child@ DB 'child', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BEP@BNECLKFC@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@
CONST	SEGMENT
??_C@_0BEP@BNECLKFC@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@ DB 'I'
	DB	'sWindowHovered() = %d', 0aH, 'IsWindowHovered(_AllowWhenBlock'
	DB	'edByPopup) = %d', 0aH, 'IsWindowHovered(_AllowWhenBlockedByAc'
	DB	'tiveItem) = %d', 0aH, 'IsWindowHovered(_ChildWindows) = %d', 0aH
	DB	'IsWindowHovered(_ChildWindows|_RootWindow) = %d', 0aH, 'IsWin'
	DB	'dowHovered(_ChildWindows|_AllowWhenBlockedByPopup) = %d', 0aH
	DB	'IsWindowHovered(_RootWindow) = %d', 0aH, 'IsWindowHovered(_An'
	DB	'yWindow) = %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0KP@HKEFGHBG@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@
CONST	SEGMENT
??_C@_0KP@HKEFGHBG@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@ DB 'Is'
	DB	'WindowFocused() = %d', 0aH, 'IsWindowFocused(_ChildWindows) ='
	DB	' %d', 0aH, 'IsWindowFocused(_ChildWindows|_RootWindow) = %d', 0aH
	DB	'IsWindowFocused(_RootWindow) = %d', 0aH, 'IsWindowFocused(_An'
	DB	'yWindow) = %d', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KCHHLPPE@outer_child@
CONST	SEGMENT
??_C@_0M@KCHHLPPE@outer_child@ DB 'outer_child', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0EA@FIPEGKJF@Embed?5everything?5inside?5a?5child@
CONST	SEGMENT
??_C@_0EA@FIPEGKJF@Embed?5everything?5inside?5a?5child@ DB 'Embed everyth'
	DB	'ing inside a child window (for additional testing)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CAA@CDNKPHBM@Return?5value?5?$DN?5?$CFd?6IsItemFocused@
CONST	SEGMENT
??_C@_0CAA@CDNKPHBM@Return?5value?5?$DN?5?$CFd?6IsItemFocused@ DB 'Return'
	DB	' value = %d', 0aH, 'IsItemFocused() = %d', 0aH, 'IsItemHovere'
	DB	'd() = %d', 0aH, 'IsItemHovered(_AllowWhenBlockedByPopup) = %d'
	DB	0aH, 'IsItemHovered(_AllowWhenBlockedByActiveItem) = %d', 0aH, 'I'
	DB	'sItemHovered(_AllowWhenOverlapped) = %d', 0aH, 'IsItemHovered'
	DB	'(_RectOnly) = %d', 0aH, 'IsItemActive() = %d', 0aH, 'IsItemEd'
	DB	'ited() = %d', 0aH, 'IsItemActivated() = %d', 0aH, 'IsItemDeac'
	DB	'tivated() = %d', 0aH, 'IsItemDeactivatedAfterEdit() = %d', 0aH
	DB	'IsItemVisible() = %d', 0aH, 'IsItemClicked() = %d', 0aH, 'IsI'
	DB	'temToggledOpen() = %d', 0aH, 'GetItemRectMin() = (%.1f, %.1f)'
	DB	0aH, 'GetItemRectMax() = (%.1f, %.1f)', 0aH, 'GetItemRectSize('
	DB	') = (%.1f, %.1f)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@DECMNPJF@ITEM?3?5ListBox@
CONST	SEGMENT
??_C@_0O@DECMNPJF@ITEM?3?5ListBox@ DB 'ITEM: ListBox', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNode@
CONST	SEGMENT
??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNode@ DB 'ITEM: TreeNo'
	DB	'de w/ ImGuiTreeNodeFlags_OpenOnDoubleClick', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode@
CONST	SEGMENT
??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode@ DB 'ITEM: TreeNode', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem@
CONST	SEGMENT
??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem@ DB 'ITEM: MenuItem', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4@
CONST	SEGMENT
??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4@ DB 'ITEM: ColorEdit4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3@
CONST	SEGMENT
??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3@ DB 'ITEM: InputFloat3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat@
CONST	SEGMENT
??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat@ DB 'ITEM: InputFloat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@HPKEIJD@ITEM?3?5InputText@
CONST	SEGMENT
??_C@_0BA@HPKEIJD@ITEM?3?5InputText@ DB 'ITEM: InputText', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat@
CONST	SEGMENT
??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat@ DB 'ITEM: SliderFloat', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox@
CONST	SEGMENT
??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox@ DB 'ITEM: Checkbox', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KDFNBBDI@ITEM?3?5Button@
CONST	SEGMENT
??_C@_0N@KDFNBBDI@ITEM?3?5Button@ DB 'ITEM: Button', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@HEHKMKDF@ITEM?3?5Text@
CONST	SEGMENT
??_C@_0L@HEHKMKDF@ITEM?3?5Text@ DB 'ITEM: Text', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@PLFPNHBO@Testing?5how?5various?5types?5of?5it@
CONST	SEGMENT
??_C@_0FB@PLFPNHBO@Testing?5how?5various?5types?5of?5it@ DB 'Testing how '
	DB	'various types of items are interacting with the IsItemXXX fun'
	DB	'ctions.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_09DBIMNOFJ@Item?5Type@
CONST	SEGMENT
??_C@_09DBIMNOFJ@Item?5Type@ DB 'Item Type', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0JG@MDBHHAIF@Text?$AAButton?$AAButton?5?$CIw?1?5repeat?$CJ?$AA@
CONST	SEGMENT
??_C@_0JG@MDBHHAIF@Text?$AAButton?$AAButton?5?$CIw?1?5repeat?$CJ?$AA@ DB 'T'
	DB	'ext', 00H, 'Button', 00H, 'Button (w/ repeat)', 00H, 'Checkbo'
	DB	'x', 00H, 'SliderFloat', 00H, 'InputText', 00H, 'InputFloat', 00H
	DB	'InputFloat3', 00H, 'ColorEdit4', 00H, 'MenuItem', 00H, 'TreeN'
	DB	'ode', 00H, 'TreeNode (w/ double-click)', 00H, 'ListBox', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@NBHMOIFJ@Querying?5Status?5?$CIActive?1Focused@
CONST	SEGMENT
??_C@_0CO@NBHMOIFJ@Querying?5Status?5?$CIActive?1Focused@ DB 'Querying St'
	DB	'atus (Active/Focused/Hovered etc.)', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5@
CONST	SEGMENT
??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5@ DB 'We don''t'
	DB	' use the drag and drop api at all here! Instead we query when'
	DB	' the item is held but not hovered, and order items accordingl'
	DB	'y.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ@
CONST	SEGMENT
??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ@ DB 'Drag to '
	DB	'reorder items (simple)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi@
CONST	SEGMENT
??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi@ DB 'p'
	DB	00H, 'a', 00H, 'y', 00H, 'l', 00H, 'o', 00H, 'a', 00H, 'd', 00H
	DB	'-', 00H, '>', 00H, 'D', 00H, 'a', 00H, 't', 00H, 'a', 00H, 'S'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ' ', 00H, '=', 00H, '=', 00H
	DB	' ', 00H, 's', 00H, 'i', 00H, 'z', 00H, 'e', 00H, 'o', 00H, 'f'
	DB	00H, '(', 00H, 'i', 00H, 'n', 00H, 't', 00H, ')', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MIGHAHCG@Swap?5?$CFs@
CONST	SEGMENT
??_C@_07MIGHAHCG@Swap?5?$CFs@ DB 'Swap %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDLENMEH@Move?5?$CFs@
CONST	SEGMENT
??_C@_07EDLENMEH@Move?5?$CFs@ DB 'Move %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07CFHHFHOL@Copy?5?$CFs@
CONST	SEGMENT
??_C@_07CFHHFHOL@Copy?5?$CFs@ DB 'Copy %s', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IBJLLBID@DND_DEMO_CELL@
CONST	SEGMENT
??_C@_0O@IBJLLBID@DND_DEMO_CELL@ DB 'DND_DEMO_CELL', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04NGKMPNDN@Swap@
CONST	SEGMENT
??_C@_04NGKMPNDN@Swap@ DB 'Swap', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LCANPIEP@Move@
CONST	SEGMENT
??_C@_04LCANPIEP@Move@ DB 'Move', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OPMHGHMB@Copy@
CONST	SEGMENT
??_C@_04OPMHGHMB@Copy@ DB 'Copy', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5item@
CONST	SEGMENT
??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5item@ DB 'Drag and dr'
	DB	'op to copy/swap items', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@FOFLCNFN@You?5can?5drag?5from?5the?5colored?5s@
CONST	SEGMENT
??_C@_0CH@FOFLCNFN@You?5can?5drag?5from?5the?5colored?5s@ DB 'You can dra'
	DB	'g from the colored squares.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widge@
CONST	SEGMENT
??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widge@ DB 'Drag and drop'
	DB	' in standard widgets', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NPGBLOMK@Drag?5and?5Drop@
CONST	SEGMENT
??_C@_0O@NPGBLOMK@Drag?5and?5Drop@ DB 'Drag and Drop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08OPMLCCJJ@?$CF?42f?6sec@
CONST	SEGMENT
??_C@_08OPMLCCJJ@?$CF?42f?6sec@ DB '%.2f', 0aH, 'sec', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04CMMEDAHA@set3@
CONST	SEGMENT
??_C@_04CMMEDAHA@set3@ DB 'set3', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFNPABDB@set2@
CONST	SEGMENT
??_C@_04DFNPABDB@set2@ DB 'set2', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03CPFCAGPK@?$CD?$CDv@
CONST	SEGMENT
??_C@_03CPFCAGPK@?$CD?$CDv@ DB '##v', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_00CNPNBAHC@@
CONST	SEGMENT
??_C@_00CNPNBAHC@@ DB 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_04BOPCFCPC@set1@
CONST	SEGMENT
??_C@_04BOPCFCPC@set1@ DB 'set1', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05GFAJOEB@?$CD?$CDint@
CONST	SEGMENT
??_C@_05GFAJOEB@?$CD?$CDint@ DB '##int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@EAIBMPEL@Vertical?5Sliders@
CONST	SEGMENT
??_C@_0BB@EAIBMPEL@Vertical?5Sliders@ DB 'Vertical Sliders', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OCBEFNOF@slider?5int4@
CONST	SEGMENT
??_C@_0M@OCBEFNOF@slider?5int4@ DB 'slider int4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09OINJKJNP@drag?5int4@
CONST	SEGMENT
??_C@_09OINJKJNP@drag?5int4@ DB 'drag int4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NMFONJDF@input?5int4@
CONST	SEGMENT
??_C@_0L@NMFONJDF@input?5int4@ DB 'input int4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IOGCHDGO@slider?5float4@
CONST	SEGMENT
??_C@_0O@IOGCHDGO@slider?5float4@ DB 'slider float4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@BBBLJBNP@drag?5float4@
CONST	SEGMENT
??_C@_0M@BBBLJBNP@drag?5float4@ DB 'drag float4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFIPMPAC@input?5float4@
CONST	SEGMENT
??_C@_0N@OFIPMPAC@input?5float4@ DB 'input float4', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KNFFMLCC@slider?5int3@
CONST	SEGMENT
??_C@_0M@KNFFMLCC@slider?5int3@ DB 'slider int3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09KHJIDPBI@drag?5int3@
CONST	SEGMENT
??_C@_09KHJIDPBI@drag?5int3@ DB 'drag int3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JDBPEPPC@input?5int3@
CONST	SEGMENT
??_C@_0L@JDBPEPPC@input?5int3@ DB 'input int3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@MBCDOFKJ@slider?5float3@
CONST	SEGMENT
??_C@_0O@MBCDOFKJ@slider?5float3@ DB 'slider float3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@FOFKAHBI@drag?5float3@
CONST	SEGMENT
??_C@_0M@FOFKAHBI@drag?5float3@ DB 'drag float3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LEEOPKGD@slider?5int2@
CONST	SEGMENT
??_C@_0M@LEEOPKGD@slider?5int2@ DB 'slider int2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09LOIDAOFJ@drag?5int2@
CONST	SEGMENT
??_C@_09LOIDAOFJ@drag?5int2@ DB 'drag int2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@IKAEHOLD@input?5int2@
CONST	SEGMENT
??_C@_0L@IKAEHOLD@input?5int2@ DB 'input int2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NIDINEOI@slider?5float2@
CONST	SEGMENT
??_C@_0O@NIDINEOI@slider?5float2@ DB 'slider float2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EHEBDGFJ@drag?5float2@
CONST	SEGMENT
??_C@_0M@EHEBDGFJ@drag?5float2@ DB 'drag float2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDNFGIIE@input?5float2@
CONST	SEGMENT
??_C@_0N@LDNFGIIE@input?5float2@ DB 'input float2', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets@
CONST	SEGMENT
??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets@ DB 'Multi-component Widgets'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_09CBHJNGLB@input?5u64@
CONST	SEGMENT
??_C@_09CBHJNGLB@input?5u64@ DB 'input u64', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBCIJGN@input?5s64@
CONST	SEGMENT
??_C@_09EBCIJGN@input?5s64@ DB 'input s64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IMJGHEPL@input?5u32?5hex@
CONST	SEGMENT
??_C@_0O@IMJGHEPL@input?5u32?5hex@ DB 'input u32 hex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09HBOILDNM@input?5u32@
CONST	SEGMENT
??_C@_09HBOILDNM@input?5u32@ DB 'input u32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EKPJHNHM@input?5s32?5hex@
CONST	SEGMENT
??_C@_0O@EKPJHNHM@input?5s32?5hex@ DB 'input s32 hex', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04JIMNDDED@?$CF08X@
CONST	SEGMENT
??_C@_04JIMNDDED@?$CF08X@ DB '%08X', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09FEIDOMAA@input?5s32@
CONST	SEGMENT
??_C@_09FEIDOMAA@input?5s32@ DB 'input s32', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09BGAAKCLG@input?5u16@
CONST	SEGMENT
??_C@_09BGAAKCLG@input?5u16@ DB 'input u16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDGLPNGK@input?5s16@
CONST	SEGMENT
??_C@_09DDGLPNGK@input?5s16@ DB 'input s16', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08HCBFNNAP@input?5u8@
CONST	SEGMENT
??_C@_08HCBFNNAP@input?5u8@ DB 'input u8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HGJIKBLN@input?5s8@
CONST	SEGMENT
??_C@_08HGJIKBLN@input?5s8@ DB 'input s8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@HEADHDLD@Show?5step?5buttons@
CONST	SEGMENT
??_C@_0BC@HEADHDLD@Show?5step?5buttons@ DB 'Show step buttons', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HDCHCENJ@Inputs@
CONST	SEGMENT
??_C@_06HDCHCENJ@Inputs@ DB 'Inputs', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@OPIDMMAL@slider?5double?5high@
CONST	SEGMENT
??_C@_0BD@OPIDMMAL@slider?5double?5high@ DB 'slider double high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08NHECNFJD@?$CFe?5grams@
CONST	SEGMENT
??_C@_08NHECNFJD@?$CFe?5grams@ DB '%e grams', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BOGDHHDO@slider?5double?5low?$FO2@
CONST	SEGMENT
??_C@_0BE@BOGDHHDO@slider?5double?5low?$FO2@ DB 'slider double low^2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@NEJIDBJN@slider?5double?5low@
CONST	SEGMENT
??_C@_0BC@NEJIDBJN@slider?5double?5low@ DB 'slider double low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EHBCAJLJ@slider?5float?5high@
CONST	SEGMENT
??_C@_0BC@EHBCAJLJ@slider?5float?5high@ DB 'slider float high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DLKEDEFL@slider?5float?5low?$FO2@
CONST	SEGMENT
??_C@_0BD@DLKEDEFL@slider?5float?5low?$FO2@ DB 'slider float low^2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05DIPGONMJ@?$CF?410f@
CONST	SEGMENT
??_C@_05DIPGONMJ@?$CF?410f@ DB '%.10f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CCICNGDA@slider?5float?5low@
CONST	SEGMENT
??_C@_0BB@CCICNGDA@slider?5float?5low@ DB 'slider float low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DHACPAKG@slider?5u64?5full@
CONST	SEGMENT
??_C@_0BA@DHACPAKG@slider?5u64?5full@ DB 'slider u64 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PKMEIMAF@slider?5u64?5high@
CONST	SEGMENT
??_C@_0BA@PKMEIMAF@slider?5u64?5high@ DB 'slider u64 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EJPFHGMA@slider?5u64?5low@
CONST	SEGMENT
??_C@_0P@EJPFHGMA@slider?5u64?5low@ DB 'slider u64 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08GGAHJCGP@?$CFI64u?5ms@
CONST	SEGMENT
??_C@_08GGAHJCGP@?$CFI64u?5ms@ DB '%I64u ms', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@EEBIIJCM@slider?5s64?5full@
CONST	SEGMENT
??_C@_0BA@EEBIIJCM@slider?5s64?5full@ DB 'slider s64 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IJNOPFIP@slider?5s64?5high@
CONST	SEGMENT
??_C@_0BA@IJNOPFIP@slider?5s64?5high@ DB 'slider s64 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IPJKHPEH@slider?5s64?5low@
CONST	SEGMENT
??_C@_0P@IPJKHPEH@slider?5s64?5low@ DB 'slider s64 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLAMLEHD@?$CFI64d@
CONST	SEGMENT
??_C@_05LLAMLEHD@?$CFI64d@ DB '%I64d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BMDCMLPI@slider?5u32?5full@
CONST	SEGMENT
??_C@_0BA@BMDCMLPI@slider?5u32?5full@ DB 'slider u32 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NBPELHFL@slider?5u32?5high@
CONST	SEGMENT
??_C@_0BA@NBPELHFL@slider?5u32?5high@ DB 'slider u32 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@MNJELKHK@slider?5u32?5low@
CONST	SEGMENT
??_C@_0P@MNJELKHK@slider?5u32?5low@ DB 'slider u32 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@GPCILCHC@slider?5s32?5full@
CONST	SEGMENT
??_C@_0BA@GPCILCHC@slider?5s32?5full@ DB 'slider s32 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCOOMONB@slider?5s32?5high@
CONST	SEGMENT
??_C@_0BA@KCOOMONB@slider?5s32?5high@ DB 'slider s32 high', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@LPLLDPN@slider?5s32?5low@
CONST	SEGMENT
??_C@_0P@LPLLDPN@slider?5s32?5low@ DB 'slider s32 low', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KKFIOIJG@slider?5u16?5full@
CONST	SEGMENT
??_C@_0BA@KKFIOIJG@slider?5u16?5full@ DB 'slider u16 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@NJECJBBM@slider?5s16?5full@
CONST	SEGMENT
??_C@_0BA@NJECJBBM@slider?5s16?5full@ DB 'slider s16 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@NAFPINCP@slider?5u8?5full@
CONST	SEGMENT
??_C@_0P@NAFPINCP@slider?5u8?5full@ DB 'slider u8 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02GMHACPFF@?$CFu@
CONST	SEGMENT
??_C@_02GMHACPFF@?$CFu@ DB '%u', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@BGDAIEKI@slider?5s8?5full@
CONST	SEGMENT
??_C@_0P@BGDAIEKI@slider?5s8?5full@ DB 'slider s8 full', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07BBLEOMAH@Sliders@
CONST	SEGMENT
??_C@_07BBLEOMAH@Sliders@ DB 'Sliders', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@EEJHEFFF@drag?5double?5?$FO2@
CONST	SEGMENT
??_C@_0P@EEJHEFFF@drag?5double?5?$FO2@ DB 'drag double ^2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51@
CONST	SEGMENT
??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51@ DB '0 < %.10f < 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@IJGAEMEI@drag?5double@
CONST	SEGMENT
??_C@_0M@IJGAEMEI@drag?5double@ DB 'drag double', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PBAPOGLA@?$CF?410f?5grams@
CONST	SEGMENT
??_C@_0M@PBAPOGLA@?$CF?410f?5grams@ DB '%.10f grams', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FL@DBMGDFGC@You?5can?5use?5the?5?8power?8?5paramet@
CONST	SEGMENT
??_C@_0FL@DBMGDFGC@You?5can?5use?5the?5?8power?8?5paramet@ DB 'You can us'
	DB	'e the ''power'' parameter to increase tweaking precision on o'
	DB	'ne side of the range.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NFIBPMBK@drag?5float?5?$FO2@
CONST	SEGMENT
??_C@_0O@NFIBPMBK@drag?5float?5?$FO2@ DB 'drag float ^2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02NJPGOMH@?$CFf@
CONST	SEGMENT
??_C@_02NJPGOMH@?$CFf@ DB '%f', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08MINAMANI@drag?5u64@
CONST	SEGMENT
??_C@_08MINAMANI@drag?5u64@ DB 'drag u64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08ONLLJPAE@drag?5s64@
CONST	SEGMENT
??_C@_08ONLLJPAE@drag?5s64@ DB 'drag s64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08JIEBKFLF@drag?5u32@
CONST	SEGMENT
??_C@_08JIEBKFLF@drag?5u32@ DB 'drag u32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08LNCKPKGJ@drag?5s32@
CONST	SEGMENT
??_C@_08LNCKPKGJ@drag?5s32@ DB 'drag s32', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PPKJLENP@drag?5u16@
CONST	SEGMENT
??_C@_08PPKJLENP@drag?5u16@ DB 'drag u16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08NKMCOLAD@drag?5s16@
CONST	SEGMENT
??_C@_08NKMCOLAD@drag?5s16@ DB 'drag s16', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LIKGIBAJ@drag?5u8@
CONST	SEGMENT
??_C@_07LIKGIBAJ@drag?5u8@ DB 'drag u8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05MMEBHIBO@?$CFu?5ms@
CONST	SEGMENT
??_C@_05MMEBHIBO@?$CFu?5ms@ DB '%u ms', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LMCLPNLL@drag?5s8@
CONST	SEGMENT
??_C@_07LMCLPNLL@drag?5s8@ DB 'drag s8', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0KL@BPNBHIKN@As?5with?5every?5widgets?5in?5dear?5i@
CONST	SEGMENT
??_C@_0KL@BPNBHIKN@As?5with?5every?5widgets?5in?5dear?5i@ DB 'As with eve'
	DB	'ry widgets in dear imgui, we never modify values unless there'
	DB	' is a user interaction.', 0aH, 'You can override the clamping'
	DB	' limits by using CTRL+Click to input a value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450@
CONST	SEGMENT
??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450@ DB 'Clamp integers to 0.'
	DB	'.50', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06OFIAEEBG@Drags?3@
CONST	SEGMENT
??_C@_06OFIAEEBG@Drags?3@ DB 'Drags:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@PAJDALGN@Data?5Types@
CONST	SEGMENT
??_C@_0L@PAJDALGN@Data?5Types@ DB 'Data Types', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ@
CONST	SEGMENT
??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ@ DB 'range int (no boun'
	DB	'ds)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units@
CONST	SEGMENT
??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units@ DB 'Min: %d units', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units@
CONST	SEGMENT
??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units@ DB 'Max: %d units', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05CCGOGOBM@range@
CONST	SEGMENT
??_C@_05CCGOGOBM@range@ DB 'range', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF@
CONST	SEGMENT
??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF@ DB 'Min: %.1f %%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF@
CONST	SEGMENT
??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF@ DB 'Max: %.1f %%', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JEFPADJJ@Range?5Widgets@
CONST	SEGMENT
??_C@_0O@JEFPADJJ@Range?5Widgets@ DB 'Range Widgets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@PMCJHJ@Raw?5HSV?5values@
CONST	SEGMENT
??_C@_0P@PMCJHJ@Raw?5HSV?5values@ DB 'Raw HSV values', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1@
CONST	SEGMENT
??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1@ DB 'HSV shown as HSV##1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1@
CONST	SEGMENT
??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1@ DB 'HSV shown as RGB##1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3@
CONST	SEGMENT
??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3@ DB 'Color widget with'
	DB	' InputHSV:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BDF@MKEKOCPP@By?5default?0?5colors?5are?5given?5to@
CONST	SEGMENT
??_C@_0BDF@MKEKOCPP@By?5default?0?5colors?5are?5given?5to@ DB 'By default'
	DB	', colors are given to ColorEdit and ColorPicker in RGB, but I'
	DB	'mGuiColorEditFlags_InputHSV allows you to store colors as HSV'
	DB	' and pass them to ColorEdit and ColorPicker as HSV. This come'
	DB	's with the added benefit that you can manipulate hue values w'
	DB	'ith the picker even when saturation or value are zero.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors@
CONST	SEGMENT
??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors@ DB 'HSV encoded colors', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Whee@
CONST	SEGMENT
??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Whee@ DB 'Defa'
	DB	'ult: Float + HDR + Hue Wheel', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar@
CONST	SEGMENT
??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar@ DB 'Defau'
	DB	'lt: Uint8 + HSV + Hue Bar', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFE@MHBDKCN@SetColorEditOptions?$CI?$CJ?5is?5design@
CONST	SEGMENT
??_C@_0BFE@MHBDKCN@SetColorEditOptions?$CI?$CJ?5is?5design@ DB 'SetColorE'
	DB	'ditOptions() is designed to allow you to set boot-time defaul'
	DB	't.', 0aH, 'We don''t have Push/Pop functions because you can '
	DB	'force options on a per-widget basis if needed, and the user c'
	DB	'an change non-forced ones with the options menu.', 0aH, 'We d'
	DB	'on''t have a getter to avoid encouraging you to persistently '
	DB	'save values that aren''t forward-compatible.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JHHHIHGA@Programmatically?5set?5defaults?3@
CONST	SEGMENT
??_C@_0BP@JHHHIHGA@Programmatically?5set?5defaults?3@ DB 'Programmaticall'
	DB	'y set defaults:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GICMBKFD@MyColor?$CD?$CD4@
CONST	SEGMENT
??_C@_0L@GICMBKFD@MyColor?$CD?$CD4@ DB 'MyColor##4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@NLCBNAAH@User?5can?5right?9click?5the?5picker@
CONST	SEGMENT
??_C@_0DA@NLCBNAAH@User?5can?5right?9click?5the?5picker@ DB 'User can rig'
	DB	'ht-click the picker to change mode.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HAMIGHD@Picker?5Mode@
CONST	SEGMENT
??_C@_0M@HAMIGHD@Picker?5Mode@ DB 'Picker Mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DI@OEJFDCPH@Auto?1Current?$AAHue?5bar?5?$CL?5SV?5rect?$AA@
CONST	SEGMENT
??_C@_0DI@OEJFDCPH@Auto?1Current?$AAHue?5bar?5?$CL?5SV?5rect?$AA@ DB 'Aut'
	DB	'o/Current', 00H, 'Hue bar + SV rect', 00H, 'Hue wheel + SV tr'
	DB	'iangle', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BAP@CCFGMMGB@ColorEdit?5defaults?5to?5displayin@
CONST	SEGMENT
??_C@_0BAP@CCFGMMGB@ColorEdit?5defaults?5to?5displayin@ DB 'ColorEdit def'
	DB	'aults to displaying RGB inputs if you don''t specify a displa'
	DB	'y mode, but the user can change it with a right-click.', 0aH, 0aH
	DB	'ColorPicker defaults to displaying RGB+HSV+Hex if you don''t '
	DB	'specify a display mode.', 0aH, 0aH, 'You can change the defau'
	DB	'lts using SetColorEditOptions().', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@OFPFGAFL@Display?5Mode@
CONST	SEGMENT
??_C@_0N@OFPFGAFL@Display?5Mode@ DB 'Display Mode', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5@
CONST	SEGMENT
??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5@ DB 'Auto/'
	DB	'Current', 00H, 'None', 00H, 'RGB Only', 00H, 'HSV Only', 00H, 'H'
	DB	'ex Only', 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LOHJOGGK@?$CD?$CDRefColor@
CONST	SEGMENT
??_C@_0L@LOHJOGGK@?$CD?$CDRefColor@ DB '##RefColor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CEAKBNI@With?5Ref?5Color@
CONST	SEGMENT
??_C@_0P@CEAKBNI@With?5Ref?5Color@ DB 'With Ref Color', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@IIIMIJGF@With?5Side?5Preview@
CONST	SEGMENT
??_C@_0BC@IIIMIJGF@With?5Side?5Preview@ DB 'With Side Preview', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HFPOLAHI@With?5Alpha?5Bar@
CONST	SEGMENT
??_C@_0P@HFPOLAHI@With?5Alpha?5Bar@ DB 'With Alpha Bar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@EACIJKCC@With?5Alpha@
CONST	SEGMENT
??_C@_0L@EACIJKCC@With?5Alpha@ DB 'With Alpha', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@IPOAJHA@Color?5picker?3@
CONST	SEGMENT
??_C@_0O@IPOAJHA@Color?5picker?3@ DB 'Color picker:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c@
CONST	SEGMENT
??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c@ DB 'MyColor##3c', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@NCDFBPJC@Color?5button?5only?3@
CONST	SEGMENT
??_C@_0BD@NCDFBPJC@Color?5button?5only?3@ DB 'Color button only:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06LAOCEMMP@_COL4F@
CONST	SEGMENT
??_C@_06LAOCEMMP@_COL4F@ DB '_COL4F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LFKNFKEK@_COL3F@
CONST	SEGMENT
??_C@_06LFKNFKEK@_COL3F@ DB '_COL3F', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09DDJBIEE@?$CD?$CDpalette@
CONST	SEGMENT
??_C@_09DDJBIEE@?$CD?$CDpalette@ DB '##palette', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JEAALFFH@?$CD?$CDprevious@
CONST	SEGMENT
??_C@_0L@JEAALFFH@?$CD?$CDprevious@ DB '##previous', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08CAGLMDLD@Previous@
CONST	SEGMENT
??_C@_08CAGLMDLD@Previous@ DB 'Previous', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09CDENILGE@?$CD?$CDcurrent@
CONST	SEGMENT
??_C@_09CDENILGE@?$CD?$CDcurrent@ DB '##current', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EDIFFIJI@Current@
CONST	SEGMENT
??_C@_07EDIFFIJI@Current@ DB 'Current', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08HHEANBBL@?$CD?$CDpicker@
CONST	SEGMENT
??_C@_08HHEANBBL@?$CD?$CDpicker@ DB '##picker', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5@
CONST	SEGMENT
??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5@ DB 'MY CUSTOM C'
	DB	'OLOR PICKER WITH AN AMAZING PALETTE!', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08KFPGOGIA@mypicker@
CONST	SEGMENT
??_C@_08KFPGOGIA@mypicker@ DB 'mypicker', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07GDPBMLLI@Palette@
CONST	SEGMENT
??_C@_07GDPBMLLI@Palette@ DB 'Palette', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b@
CONST	SEGMENT
??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b@ DB 'MyColor##3b', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker@
CONST	SEGMENT
??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker@ DB 'Color button '
	DB	'with Custom Picker Popup:', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3@
CONST	SEGMENT
??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3@ DB 'MyColor##3', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_No@
CONST	SEGMENT
??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_No@ DB 'With the ImGuiCo'
	DB	'lorEditFlags_NoInputs flag you can hide all the slider/text i'
	DB	'nputs.', 0aH, 'With the ImGuiColorEditFlags_NoLabel flag you '
	DB	'can pass a non-empty label which will only be used for the to'
	DB	'oltip and picker popup.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3@
CONST	SEGMENT
??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3@ DB 'Color button with P'
	DB	'icker:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f@
CONST	SEGMENT
??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f@ DB 'MyColor##2f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display@
CONST	SEGMENT
??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display@ DB 'Color widget w'
	DB	'ith Float Display:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2@
CONST	SEGMENT
??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2@ DB 'MyColor##2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3@
CONST	SEGMENT
??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3@ DB 'Color widget HS'
	DB	'V with Alpha:', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1@
CONST	SEGMENT
??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1@ DB 'MyColor##1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GI@PMPMCJLF@Click?5on?5the?5colored?5square?5to?5@
CONST	SEGMENT
??_C@_0GI@PMPMCJLF@Click?5on?5the?5colored?5square?5to?5@ DB 'Click on th'
	DB	'e colored square to open a color picker.', 0aH, 'CTRL+click o'
	DB	'n individual component to input value.', 0aH, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@NOEDKBGC@Color?5widget?3@
CONST	SEGMENT
??_C@_0O@NOEDKBGC@Color?5widget?3@ DB 'Color widget:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5l@
CONST	SEGMENT
??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5l@ DB 'Currently a'
	DB	'll this does is to lift the 0..1 limits on dragging widgets.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FMJOEAGN@With?5HDR@
CONST	SEGMENT
??_C@_08FMJOEAGN@With?5HDR@ DB 'With HDR', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5c@
CONST	SEGMENT
??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5c@ DB 'Right-click '
	DB	'on the individual color widget to show options.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@EJIAMDNC@With?5Options?5Menu@
CONST	SEGMENT
??_C@_0BC@EJIAMDNC@With?5Options?5Menu@ DB 'With Options Menu', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop@
CONST	SEGMENT
??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop@ DB 'With Drag and Drop', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview@
CONST	SEGMENT
??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview@ DB 'With Half Alpha Previe'
	DB	'w', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview@
CONST	SEGMENT
??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview@ DB 'With Alpha Preview', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets@
CONST	SEGMENT
??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets@ DB 'Color/Picker Widgets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05LCKIIOJE@?$CFd?1?$CFd@
CONST	SEGMENT
??_C@_05LCKIIOJE@?$CFd?1?$CFd@ DB '%d/%d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HDMPBJBE@Progress?5Bar@
CONST	SEGMENT
??_C@_0N@HDMPBJBE@Progress?5Bar@ DB 'Progress Bar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LHCNOOOP@Sample?5count@
CONST	SEGMENT
??_C@_0N@LHCNOOOP@Sample?5count@ DB 'Sample count', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04HPNHAEOP@func@
CONST	SEGMENT
??_C@_04HPNHAEOP@func@ DB 'func', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08OLJDEBGC@Sin?$AASaw?$AA@
CONST	SEGMENT
??_C@_08OLJDEBGC@Sin?$AASaw?$AA@ DB 'Sin', 00H, 'Saw', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09NBOAEPFB@Histogram@
CONST	SEGMENT
??_C@_09NBOAEPFB@Histogram@ DB 'Histogram', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05DDHCCCLJ@Lines@
CONST	SEGMENT
??_C@_05DDHCCCLJ@Lines@ DB 'Lines', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06BECIMFEF@avg?5?$CFf@
CONST	SEGMENT
??_C@_06BECIMFEF@avg?5?$CFf@ DB 'avg %f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@LJPKANLB@Frame?5Times@
CONST	SEGMENT
??_C@_0M@LJPKANLB@Frame?5Times@ DB 'Frame Times', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07CCNCPHDL@Animate@
CONST	SEGMENT
??_C@_07CCNCPHDL@Animate@ DB 'Animate', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@LEBMLIEA@Plots?5Widgets@
CONST	SEGMENT
??_C@_0O@LEBMLIEA@Plots?5Widgets@ DB 'Plots Widgets', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd@
CONST	SEGMENT
??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd@ DB 'D'
	DB	'ata: %p', 0aH, 'Size: %d', 0aH, 'Capacity: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07MDDMIGJK@?$CD?$CDMyStr@
CONST	SEGMENT
??_C@_07MDDMIGJK@?$CD?$CDMyStr@ DB '##MyStr', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0LE@JOHBHMHP@Demonstrate?5using?5ImGuiInputTex@
CONST	SEGMENT
??_C@_0LE@JOHBHMHP@Demonstrate?5using?5ImGuiInputTex@ DB 'Demonstrate usi'
	DB	'ng ImGuiInputTextFlags_CallbackResize to wire your resizable '
	DB	'string type to InputText().', 0aH, 0aH, 'See misc/cpp/imgui_s'
	DB	'tdlib.h for an implementation of this for std::string.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PGEBLBNL@Resize?5Callback@
CONST	SEGMENT
??_C@_0BA@PGEBLBNL@Resize?5Callback@ DB 'Resize Callback', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ@
CONST	SEGMENT
??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ@ DB 'password (clear)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ@
CONST	SEGMENT
??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ@ DB 'password (w/ hint)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DGGOBGAB@?$DMpassword?$DO@
CONST	SEGMENT
??_C@_0L@DGGOBGAB@?$DMpassword?$DO@ DB '<password>', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6@
CONST	SEGMENT
??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6@ DB 'Displa'
	DB	'y all characters as ''*''.', 0aH, 'Disable clipboard cut and '
	DB	'copy.', 0aH, 'Disable logging.', 0aH, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08NLHBPEGP@password@
CONST	SEGMENT
??_C@_08NLHBPEGP@password@ DB 'password', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@CKJOHAFD@Password?5input@
CONST	SEGMENT
??_C@_0P@CKJOHAFD@Password?5input@ DB 'Password input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters@
CONST	SEGMENT
??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters@ DB '"imgui" letters', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08BFAFMKNB@no?5blank@
CONST	SEGMENT
??_C@_08BFAFMKNB@no?5blank@ DB 'no blank', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09NMLHJAII@uppercase@
CONST	SEGMENT
??_C@_09NMLHJAII@uppercase@ DB 'uppercase', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PLANEGDO@hexadecimal@
CONST	SEGMENT
??_C@_0M@PLANEGDO@hexadecimal@ DB 'hexadecimal', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07EEKBCPDP@decimal@
CONST	SEGMENT
??_C@_07EEKBCPDP@decimal@ DB 'decimal', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07DLHCIBDH@default@
CONST	SEGMENT
??_C@_07DLHCIBDH@default@ DB 'default', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@EABDFJK@Filtered?5Text?5Input@
CONST	SEGMENT
??_C@_0BE@EABDFJK@Filtered?5Text?5Input@ DB 'Filtered Text Input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08FDEOKKII@?$CD?$CDsource@
CONST	SEGMENT
??_C@_08FDEOKKII@?$CD?$CDsource@ DB '##source', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFo@
CONST	SEGMENT
??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFo@ DB 'ImGuiInputTextFla'
	DB	'gs_CtrlEnterForNewLine', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInp@
CONST	SEGMENT
??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInp@ DB 'ImGuiInputTextFla'
	DB	'gs_AllowTabInput', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly@
CONST	SEGMENT
??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly@ DB 'ImGuiInputTextFlags_'
	DB	'ReadOnly', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0NI@PLBNAOOK@You?5can?5use?5the?5ImGuiInputTextF@
CONST	SEGMENT
??_C@_0NI@PLBNAOOK@You?5can?5use?5the?5ImGuiInputTextF@ DB 'You can use t'
	DB	'he ImGuiInputTextFlags_CallbackResize facility if you need to'
	DB	' wire InputTextMultiline() to a dynamic string type. See misc'
	DB	'/cpp/imgui_stdlib.h for an example. (This is not demonstrated'
	DB	' in imgui_demo.cpp)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input@
CONST	SEGMENT
??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input@ DB 'Multi-line Text Input', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@LLAOMMOH@Text?5Input@
CONST	SEGMENT
??_C@_0L@LLAOMMOH@Text?5Input@ DB 'Text Input', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ@
CONST	SEGMENT
??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ@ DB '(%.1f,%.1f)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0LO@OMOMIFEB@Alignment?5applies?5when?5a?5select@
CONST	SEGMENT
??_C@_0LO@OMOMIFEB@Alignment?5applies?5when?5a?5select@ DB 'Alignment app'
	DB	'lies when a selectable is larger than its text content.', 0aH
	DB	'By default, Selectables uses style.SelectableTextAlign but it'
	DB	' can be overriden on a per-item basis using PushStyleVar().', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09FBMAGD@Alignment@
CONST	SEGMENT
??_C@_09FBMAGD@Alignment@ DB 'Alignment', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06IFGMFLK@Sailor@
CONST	SEGMENT
??_C@_06IFGMFLK@Sailor@ DB 'Sailor', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04FEKPLKKA@Grid@
CONST	SEGMENT
??_C@_04FEKPLKKA@Grid@ DB 'Grid', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07BCJGKFOL@Item?5?$CFd@
CONST	SEGMENT
??_C@_07BCJGKFOL@Item?5?$CFd@ DB 'Item %d', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JGCLAHBC@In?5columns@
CONST	SEGMENT
??_C@_0L@JGCLAHBC@In?5columns@ DB 'In columns', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07GGGNKCPB@Hello?4h@
CONST	SEGMENT
??_C@_07GGGNKCPB@Hello?4h@ DB 'Hello.h', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LDNEMMOG@12?0345?5bytes@
CONST	SEGMENT
??_C@_0N@LDNEMMOG@12?0345?5bytes@ DB '12,345 bytes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09JJLAOCPC@Hello?4cpp@
CONST	SEGMENT
??_C@_09JJLAOCPC@Hello?4cpp@ DB 'Hello.cpp', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@NKEFLDLJ@?52?0345?5bytes@
CONST	SEGMENT
??_C@_0N@NKEFLDLJ@?52?0345?5bytes@ DB ' 2,345 bytes', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06HIICBHNJ@main?4c@
CONST	SEGMENT
??_C@_06HIICBHNJ@main?4c@ DB 'main.c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sa@
CONST	SEGMENT
??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sa@ DB 'Rendering mo'
	DB	're text into the same line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5m@
CONST	SEGMENT
??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5m@ DB 'Hold CTRL a'
	DB	'nd click to select multiple items.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Selec@
CONST	SEGMENT
??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Selec@ DB 'Selection Sta'
	DB	'te: Multiple Selection', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09IEODADNK@Object?5?$CFd@
CONST	SEGMENT
??_C@_09IEODADNK@Object?5?$CFd@ DB 'Object %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selecti@
CONST	SEGMENT
??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selecti@ DB 'Selection Sta'
	DB	'te: Single Selection', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable@
CONST	SEGMENT
??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable@ DB '5. I am double clic'
	DB	'kable', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable@
CONST	SEGMENT
??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable@ DB '4. I am selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@JKAIDAJJ@3?4?5I?5am?5not?5selectable@
CONST	SEGMENT
??_C@_0BH@JKAIDAJJ@3?4?5I?5am?5not?5selectable@ DB '3. I am not selectabl'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BDENONE@2?4?5I?5am?5selectable@
CONST	SEGMENT
??_C@_0BD@BDENONE@2?4?5I?5am?5selectable@ DB '2. I am selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable@
CONST	SEGMENT
??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable@ DB '1. I am selectable', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GOIEGLPE@Selectables@
CONST	SEGMENT
??_C@_0M@GOIEGLPE@Selectables@ DB 'Selectables', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ@
CONST	SEGMENT
??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ@ DB 'combo 4 (function)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ@
CONST	SEGMENT
??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ@ DB 'combo 3 (array)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ@
CONST	SEGMENT
??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ@ DB 'combo 2 (one-liner)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA@
CONST	SEGMENT
??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA@ DB 'aaaa'
	DB	00H, 'bbbb', 00H, 'cccc', 00H, 'dddd', 00H, 'eeee', 00H, 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07HDIKCFGM@combo?51@
CONST	SEGMENT
??_C@_07HDIKCFGM@combo?51@ DB 'combo 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview@
CONST	SEGMENT
??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview@ DB 'ImGuiComboFlags_NoPrevi'
	DB	'ew', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton@
CONST	SEGMENT
??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton@ DB 'ImGuiComboFlags_NoA'
	DB	'rrowButton', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5@
CONST	SEGMENT
??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5@ DB 'Only makes '
	DB	'a difference if the popup is larger than the combo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft@
CONST	SEGMENT
??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft@ DB 'ImGuiComboFlags_Po'
	DB	'pupAlignLeft', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05LMOJIBPK@Combo@
CONST	SEGMENT
??_C@_05LMOJIBPK@Combo@ DB 'Combo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4@
CONST	SEGMENT
??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4@ DB 'Pressed %d times.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4@
CONST	SEGMENT
??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4@ DB 'And now som'
	DB	'e textured buttons..', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@
CONST	SEGMENT
??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@ DB 'Max: (%.2f, %.'
	DB	'2f)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@
CONST	SEGMENT
??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@ DB 'Min: (%.2f, %'
	DB	'.2f)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f@
CONST	SEGMENT
??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f@ DB '%.0fx%.0f', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5fon@
CONST	SEGMENT
??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5fon@ DB 'Below we are'
	DB	' displaying the font texture (which is the only texture we ha'
	DB	've access to in this demo). Use the ''ImTextureID'' type as s'
	DB	'torage to pass pointers or identifier to your own texture dat'
	DB	'a. Hover the texture for a zoomed view!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06EPMHLOBG@Images@
CONST	SEGMENT
??_C@_06EPMHLOBG@Images@ DB 'Images', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OKLFPIAG@UTF?98?5input@
CONST	SEGMENT
??_C@_0M@OKLFPIAG@UTF?98?5input@ DB 'UTF-8 input', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ@
CONST	SEGMENT
??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ@ DB 'K'
	DB	'anjis: ', 0e6H, 097H, 0a5H, 0e6H, 09cH, 0acH, 0e8H, 0aaH, 09eH
	DB	' (nihongo)', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkaki@
CONST	SEGMENT
??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkaki@ DB 'H'
	DB	'iragana: ', 0e3H, 081H, 08bH, 0e3H, 081H, 08dH, 0e3H, 081H, 08fH
	DB	0e3H, 081H, 091H, 0e3H, 081H, 093H, ' (kakikukeko)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0MK@EHHBBDNA@CJK?5text?5will?5only?5appears?5if?5t@
CONST	SEGMENT
??_C@_0MK@EHHBBDNA@CJK?5text?5will?5only?5appears?5if?5t@ DB 'CJK text wi'
	DB	'll only appears if the font was loaded with the appropriate C'
	DB	'JK character ranges. Call io.Font->AddFontFromFileTTF() manua'
	DB	'lly to load extra character ranges. Read docs/FONTS.txt for d'
	DB	'etails.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@KOGPBBGO@UTF?98?5Text@
CONST	SEGMENT
??_C@_0L@KOGPBBGO@UTF?98?5Text@ DB 'UTF-8 Text', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0d@
CONST	SEGMENT
??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0d@ DB 'aaaaaaaa bbb'
	DB	'bbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!h'
	DB	'hhhhhhh', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FNAJCEAI@Test?5paragraph?52?3@
CONST	SEGMENT
??_C@_0BC@FNAJCEAI@Test?5paragraph?52?3@ DB 'Test paragraph 2:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0JH@KIIFCPNC@The?5lazy?5dog?5is?5a?5good?5dog?4?5Thi@
CONST	SEGMENT
??_C@_0JH@KIIFCPNC@The?5lazy?5dog?5is?5a?5good?5dog?4?5Thi@ DB 'The lazy '
	DB	'dog is a good dog. This paragraph is made to fit within %.0f '
	DB	'pixels. Testing a 1 character word. The quick brown fox jumps'
	DB	' over the lazy dog.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@FPEPJKFB@Test?5paragraph?51?3@
CONST	SEGMENT
??_C@_0BC@FPEPJKFB@Test?5paragraph?51?3@ DB 'Test paragraph 1:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@NHCJIHMI@Wrap?5width@
CONST	SEGMENT
??_C@_0L@NHCJIHMI@Wrap?5width@ DB 'Wrap width', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GHNNFJCK@?$CF?40f@
CONST	SEGMENT
??_C@_04GHNNFJCK@?$CF?40f@ DB '%.0f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5@
CONST	SEGMENT
??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5@ DB 'This text sho'
	DB	'uld automatically wrap on the edge of the window. The current'
	DB	' implementation for text wrapping follows simple rules suitab'
	DB	'le for English and possibly other languages.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@CLIMKCMB@Word?5Wrapping@
CONST	SEGMENT
??_C@_0O@CLIMKCMB@Word?5Wrapping@ DB 'Word Wrapping', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5store@
CONST	SEGMENT
??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5store@ DB 'The TextDisab'
	DB	'led color is stored in ImGuiStyle.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08JGILNPHN@Disabled@
CONST	SEGMENT
??_C@_08JGILNPHN@Disabled@ DB 'Disabled', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06ICCAKDNH@Yellow@
CONST	SEGMENT
??_C@_06ICCAKDNH@Yellow@ DB 'Yellow', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IDKACLOG@Pink@
CONST	SEGMENT
??_C@_04IDKACLOG@Pink@ DB 'Pink', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@DOPJCPAP@Colored?5Text@
CONST	SEGMENT
??_C@_0N@DOPJCPAP@Colored?5Text@ DB 'Colored Text', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04OJAHODMC@Text@
CONST	SEGMENT
??_C@_04OJAHODMC@Text@ DB 'Text', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ@
CONST	SEGMENT
??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ@ DB 'Bullet point'
	DB	' 3 (two calls)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FBMIEPNI@Another?5bullet?5point@
CONST	SEGMENT
??_C@_0BF@FBMIEPNI@Another?5bullet?5point@ DB 'Another bullet point', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_09CGOFEACE@Tree?5node@
CONST	SEGMENT
??_C@_09CGOFEACE@Tree?5node@ DB 'Tree node', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5line@
CONST	SEGMENT
??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5line@ DB 'Bullet point'
	DB	' 2', 0aH, 'On multiple lines', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@DEGHIHA@Bullet?5point?51@
CONST	SEGMENT
??_C@_0P@DEGHIHA@Bullet?5point?51@ DB 'Bullet point 1', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07DHNDKCGP@Bullets@
CONST	SEGMENT
??_C@_07DHNDKCGP@Bullets@ DB 'Bullets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PEMOHED@More?5content?5?$CFd@
CONST	SEGMENT
??_C@_0BA@PEMOHED@More?5content?5?$CFd@ DB 'More content %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button@
CONST	SEGMENT
??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button@ DB 'Header with a clos'
	DB	'e button', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd@
CONST	SEGMENT
??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd@ DB 'Some content %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd@
CONST	SEGMENT
??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd@ DB 'IsItemHovered: %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06OENKJGA@Header@
CONST	SEGMENT
??_C@_06OENKJGA@Header@ DB 'Header', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@JOCPBPDO@Show?52nd?5header@
CONST	SEGMENT
??_C@_0BA@JOCPBPDO@Show?52nd?5header@ DB 'Show 2nd header', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@GBPHDMGC@Collapsing?5Headers@
CONST	SEGMENT
??_C@_0BD@GBPHDMGC@Collapsing?5Headers@ DB 'Collapsing Headers', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd@
CONST	SEGMENT
??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd@ DB 'Selectable Leaf %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah@
CONST	SEGMENT
??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah@ DB 'Blah blah', 0aH, 'Blah Bla'
	DB	'h', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd@
CONST	SEGMENT
??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd@ DB 'Selectable Node %d', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KPGIMOHP@Hello?$CB@
CONST	SEGMENT
??_C@_06KPGIMOHP@Hello?$CB@ DB 'Hello!', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BINADAGB@Align?5label?5with?5current?5X?5posi@
CONST	SEGMENT
??_C@_0CF@BINADAGB@Align?5label?5with?5current?5X?5posi@ DB 'Align label '
	DB	'with current X position)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidt@
CONST	SEGMENT
??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidt@ DB 'ImGuiTreeNodeFlag'
	DB	's_SpanFullWidth', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWid@
CONST	SEGMENT
??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWid@ DB 'ImGuiTreeNodeFlag'
	DB	's_SpanAvailWidth', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDouble@
CONST	SEGMENT
??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDouble@ DB 'ImGuiTreeNodeFlag'
	DB	's_OpenOnDoubleClick', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow@
CONST	SEGMENT
??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow@ DB 'ImGuiTreeNodeFlags'
	DB	'_OpenOnArrow', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5@
CONST	SEGMENT
??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5@ DB 'This is a m'
	DB	'ore typical looking tree with selectable nodes.', 0aH, 'Click'
	DB	' to select, CTRL+Click to toggle, click on arrows or double-c'
	DB	'lick to open.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes@
CONST	SEGMENT
??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes@ DB 'Advanced, with'
	DB	' Selectable nodes', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06HFKPFKMP@button@
CONST	SEGMENT
??_C@_06HFKPFKMP@button@ DB 'button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09KGLHLKML@blah?5blah@
CONST	SEGMENT
??_C@_09KGLHLKML@blah?5blah@ DB 'blah blah', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08GPGIPNJB@Child?5?$CFd@
CONST	SEGMENT
??_C@_08GPGIPNJB@Child?5?$CFd@ DB 'Child %d', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@OABIBGBA@Basic?5trees@
CONST	SEGMENT
??_C@_0M@OABIBGBA@Basic?5trees@ DB 'Basic trees', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05BMMGIDNN@Trees@
CONST	SEGMENT
??_C@_05BMMGIDNN@Trees@ DB 'Trees', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@JHEMJDIG@listbox?6?$CIsingle?5select?$CJ@
CONST	SEGMENT
??_C@_0BI@JHEMJDIG@listbox?6?$CIsingle?5select?$CJ@ DB 'listbox', 0aH, '('
	DB	'single select)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@JJNGHCMI@Watermelon@
CONST	SEGMENT
??_C@_0L@JJNGHCMI@Watermelon@ DB 'Watermelon', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@BNANDFPN@Strawberry@
CONST	SEGMENT
??_C@_0L@BNANDFPN@Strawberry@ DB 'Strawberry', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09EBEMMGPP@Pineapple@
CONST	SEGMENT
??_C@_09EBEMMGPP@Pineapple@ DB 'Pineapple', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMIDBFFB@Orange@
CONST	SEGMENT
??_C@_06LMIDBFFB@Orange@ DB 'Orange', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05CNKNDDOO@Mango@
CONST	SEGMENT
??_C@_05CNKNDDOO@Mango@ DB 'Mango', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04LFFBHHAI@Kiwi@
CONST	SEGMENT
??_C@_04LFFBHHAI@Kiwi@ DB 'Kiwi', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06MKLLCMPJ@Cherry@
CONST	SEGMENT
??_C@_06MKLLCMPJ@Cherry@ DB 'Cherry', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06OJJIHNKI@Banana@
CONST	SEGMENT
??_C@_06OJJIHNKI@Banana@ DB 'Banana', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EBJDGKGA@Apple@
CONST	SEGMENT
??_C@_05EBJDGKGA@Apple@ DB 'Apple', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07MJBIOOPJ@color?52@
CONST	SEGMENT
??_C@_07MJBIOOPJ@color?52@ DB 'color 2', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0MA@GFIMMJPK@Click?5on?5the?5colored?5square?5to?5@
CONST	SEGMENT
??_C@_0MA@GFIMMJPK@Click?5on?5the?5colored?5square?5to?5@ DB 'Click on th'
	DB	'e colored square to open a color picker.', 0aH, 'Click and ho'
	DB	'ld to use drag and drop.', 0aH, 'Right-click on the colored s'
	DB	'quare to show options.', 0aH, 'CTRL+click on individual compo'
	DB	'nent to input value.', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07OCDFLNDK@color?51@
CONST	SEGMENT
??_C@_07OCDFLNDK@color?51@ DB 'color 1', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramet@
CONST	SEGMENT
??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramet@ DB 'Using the for'
	DB	'mat string parameter to display a name instead of the underly'
	DB	'ing integer.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@ENFPDMMO@slider?5enum@
CONST	SEGMENT
??_C@_0M@ENFPDMMO@slider?5enum@ DB 'slider enum', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07NBCGADJA@Unknown@
CONST	SEGMENT
??_C@_07NBCGADJA@Unknown@ DB 'Unknown', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05EMKMBNJK@Water@
CONST	SEGMENT
??_C@_05EMKMBNJK@Water@ DB 'Water', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_03KHBMPEGA@Air@
CONST	SEGMENT
??_C@_03KHBMPEGA@Air@ DB 'Air', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IKBANCEK@Earth@
CONST	SEGMENT
??_C@_05IKBANCEK@Earth@ DB 'Earth', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHLPDOFO@Fire@
CONST	SEGMENT
??_C@_04OHLPDOFO@Fire@ DB 'Fire', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EFIJIFM@slider?5angle@
CONST	SEGMENT
??_C@_0N@EFIJIFM@slider?5angle@ DB 'slider angle', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_08FKIHKODH@?$CF?40f?5deg@
CONST	SEGMENT
??_C@_08FKIHKODH@?$CF?40f?5deg@ DB '%.0f deg', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@EFFJNHKJ@slider?5float?5?$CIcurve?$CJ@
CONST	SEGMENT
??_C@_0BF@EFFJNHKJ@slider?5float?5?$CIcurve?$CJ@ DB 'slider float (curve)'
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_04GANEPBPG@?$CF?44f@
CONST	SEGMENT
??_C@_04GANEPBPG@?$CF?44f@ DB '%.4f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@PNCIGDCI@slider?5float@
CONST	SEGMENT
??_C@_0N@PNCIGDCI@slider?5float@ DB 'slider float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f@
CONST	SEGMENT
??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f@ DB 'ratio = %.3f', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4@
CONST	SEGMENT
??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4@ DB 'CTRL+click to in'
	DB	'put value.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@INJDAFHM@slider?5int@
CONST	SEGMENT
??_C@_0L@INJDAFHM@slider?5int@ DB 'slider int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@CIODINPI@drag?5small?5float@
CONST	SEGMENT
??_C@_0BB@CIODINPI@drag?5small?5float@ DB 'drag small float', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08LHDHPMPH@?$CF?406f?5ns@
CONST	SEGMENT
??_C@_08LHDHPMPH@?$CF?406f?5ns@ DB '%.06f ns', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@DLCOHHGO@drag?5float@
CONST	SEGMENT
??_C@_0L@DLCOHHGO@drag?5float@ DB 'drag float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@MCINAHBB@drag?5int?50?4?4100@
CONST	SEGMENT
??_C@_0BA@MCINAHBB@drag?5int?50?4?4100@ DB 'drag int 0..100', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
CONST	SEGMENT
??_C@_04FCMNJMCO@?$CFd?$CF?$CF@ DB '%d%%', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6H@
CONST	SEGMENT
??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6H@ DB 'Click and '
	DB	'drag to edit value.', 0aH, 'Hold SHIFT/ALT for faster/slower '
	DB	'edit.', 0aH, 'Double-click or CTRL+click to input value.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08EAMJBIPC@drag?5int@
CONST	SEGMENT
??_C@_08EAMJBIPC@drag?5int@ DB 'drag int', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@KKMOFJMF@input?5float3@
CONST	SEGMENT
??_C@_0N@KKMOFJMF@input?5float3@ DB 'input float3', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FH@NIEHKNDF@You?5can?5input?5value?5using?5the?5s@
CONST	SEGMENT
??_C@_0FH@NIEHKNDF@You?5can?5input?5value?5using?5the?5s@ DB 'You can inp'
	DB	'ut value using the scientific notation,', 0aH, '  e.g. "1e+8"'
	DB	' becomes "100000000".', 0aH, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MKDEHDDF@input?5scientific@
CONST	SEGMENT
??_C@_0BB@MKDEHDDF@input?5scientific@ DB 'input scientific', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02CGLCDNAE@?$CFe@
CONST	SEGMENT
??_C@_02CGLCDNAE@?$CFe@ DB '%e', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HNPEBCJF@input?5double@
CONST	SEGMENT
??_C@_0N@HNPEBCJF@input?5double@ DB 'input double', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GJMOAIJC@?$CF?48f@
CONST	SEGMENT
??_C@_04GJMOAIJC@?$CF?48f@ DB '%.8f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@HLMFPLHI@input?5float@
CONST	SEGMENT
??_C@_0M@HLMFPLHI@input?5float@ DB 'input float', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_04GFJLOHHD@?$CF?43f@
CONST	SEGMENT
??_C@_04GFJLOHHD@?$CF?43f@ DB '%.3f', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0IG@EBGMOFJG@You?5can?5apply?5arithmetic?5operat@
CONST	SEGMENT
??_C@_0IG@EBGMOFJG@You?5can?5apply?5arithmetic?5operat@ DB 'You can apply'
	DB	' arithmetic operators +,*,/ on numerical values.', 0aH, '  e.'
	DB	'g. [ 100 ], input ''*2'', result becomes [ 200 ]', 0aH, 'Use '
	DB	'+- to subtract.', 0aH, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09KJGAAOJL@input?5int@
CONST	SEGMENT
??_C@_09KJGAAOJL@input?5int@ DB 'input int', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ@
CONST	SEGMENT
??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ@ DB 'input text (w/ hin'
	DB	't)', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DCMOPOEB@enter?5text?5here@
CONST	SEGMENT
??_C@_0BA@DCMOPOEB@enter?5text?5here@ DB 'enter text here', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BJJ@FMHDKCMG@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5t@
CONST	SEGMENT
??_C@_0BJJ@FMHDKCMG@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5t@ DB 'USER:', 0aH
	DB	'Hold SHIFT or use mouse to select text.', 0aH, 'CTRL+Left/Rig'
	DB	'ht to word jump.', 0aH, 'CTRL+A or double-click to select all'
	DB	'.', 0aH, 'CTRL+X,CTRL+C,CTRL+V clipboard.', 0aH, 'CTRL+Z,CTRL'
	DB	'+Y undo/redo.', 0aH, 'ESCAPE to revert.', 0aH, 0aH, 'PROGRAMM'
	DB	'ER:', 0aH, 'You can use the ImGuiInputTextFlags_CallbackResiz'
	DB	'e facility if you need to wire InputText() to a dynamic strin'
	DB	'g type. See misc/cpp/imgui_stdlib.h for an example (this is n'
	DB	'ot demonstrated in imgui_demo.cpp).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@GKEMLLGG@input?5text@
CONST	SEGMENT
??_C@_0L@GKEMLLGG@input?5text@ DB 'input text', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0IA@DADAGMOI@Refer?5to?5the?5?$CCCombo?$CC?5section?5be@
CONST	SEGMENT
??_C@_0IA@DADAGMOI@Refer?5to?5the?5?$CCCombo?$CC?5section?5be@ DB 'Refer '
	DB	'to the "Combo" section below for an explanation of the full B'
	DB	'eginCombo/EndCombo API, and demonstration of various flags.', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_05LLEFIEMM@combo@
CONST	SEGMENT
??_C@_05LLEFIEMM@combo@ DB 'combo', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DDNOFDDK@OOOOOOO@
CONST	SEGMENT
??_C@_07DDNOFDDK@OOOOOOO@ DB 'OOOOOOO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04MNFFDLCB@MMMM@
CONST	SEGMENT
??_C@_04MNFFDLCB@MMMM@ DB 'MMMM', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07HGFDAEEO@LLLLLLL@
CONST	SEGMENT
??_C@_07HGFDAEEO@LLLLLLL@ DB 'LLLLLLL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DFKJEKGJ@KKKK@
CONST	SEGMENT
??_C@_04DFKJEKGJ@KKKK@ DB 'KKKK', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04KIKMFPMK@JJJJ@
CONST	SEGMENT
??_C@_04KIKMFPMK@JJJJ@ DB 'JJJJ', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04NENCGHGO@IIII@
CONST	SEGMENT
??_C@_04NENCGHGO@IIII@ DB 'IIII', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJNHHCMN@HHHH@
CONST	SEGMENT
??_C@_04EJNHHCMN@HHHH@ DB 'HHHH', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04BPCAKOLI@GGGG@
CONST	SEGMENT
??_C@_04BPCAKOLI@GGGG@ DB 'GGGG', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04ICCFLLBL@FFFF@
CONST	SEGMENT
??_C@_04ICCFLLBL@FFFF@ DB 'FFFF', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04POFLIDLP@EEEE@
CONST	SEGMENT
??_C@_04POFLIDLP@EEEE@ DB 'EEEE', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GDFOJGBM@DDDD@
CONST	SEGMENT
??_C@_04GDFOJGBM@DDDD@ DB 'DDDD', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04GKHPCPH@CCCC@
CONST	SEGMENT
??_C@_04GKHPCPH@CCCC@ DB 'CCCC', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04JLKCOHFE@BBBB@
CONST	SEGMENT
??_C@_04JLKCOHFE@BBBB@ DB 'BBBB', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_04OHNMNPPA@AAAA@
CONST	SEGMENT
??_C@_04OHNMNPPA@AAAA@ DB 'AAAA', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05IDCCNNGI@label@
CONST	SEGMENT
??_C@_05IDCCNNGI@label@ DB 'label', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05LPIJGKJ@Value@
CONST	SEGMENT
??_C@_05LPIJGKJ@Value@ DB 'Value', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05HPADKKDG@Curve@
CONST	SEGMENT
??_C@_05HPADKKDG@Curve@ DB 'Curve', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip@
CONST	SEGMENT
??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip@ DB 'I am a fancy tooltip', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07LFBEAIAC@?9?5or?5me@
CONST	SEGMENT
??_C@_07LFBEAIAC@?9?5or?5me@ DB '- or me', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip@
CONST	SEGMENT
??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip@ DB 'I am a tooltip', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EKHBLLBD@Hover?5over?5me@
CONST	SEGMENT
??_C@_0O@EKHBLLBD@Hover?5over?5me@ DB 'Hover over me', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_02DPKJAMEF@?$CFd@
CONST	SEGMENT
??_C@_02DPKJAMEF@?$CFd@ DB '%d', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07GKNPDGAE@?$CD?$CDright@
CONST	SEGMENT
??_C@_07GKNPDGAE@?$CD?$CDright@ DB '##right', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06EKMNOCAF@?$CD?$CDleft@
CONST	SEGMENT
??_C@_06EKMNOCAF@?$CD?$CDleft@ DB '##left', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3@
CONST	SEGMENT
??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3@ DB 'Hold to repeat:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_05BBIFMDEO@Click@
CONST	SEGMENT
??_C@_05BBIFMDEO@Click@ DB 'Click', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07ELPGDAIL@radio?5c@
CONST	SEGMENT
??_C@_07ELPGDAIL@radio?5c@ DB 'radio c', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07FCONABMK@radio?5b@
CONST	SEGMENT
??_C@_07FCONABMK@radio?5b@ DB 'radio b', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07HJMAFCAJ@radio?5a@
CONST	SEGMENT
??_C@_07HJMAFCAJ@radio?5a@ DB 'radio a', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08PDFIPFLP@checkbox@
CONST	SEGMENT
??_C@_08PDFIPFLP@checkbox@ DB 'checkbox', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB@
CONST	SEGMENT
??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB@ DB 'Thanks for clicking'
	DB	' me!', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_06LKBCGDFD@Button@
CONST	SEGMENT
??_C@_06LKBCGDFD@Button@ DB 'Button', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05NIKDGMHP@Basic@
CONST	SEGMENT
??_C@_05NIKDGMHP@Basic@ DB 'Basic', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07DIHFNIOG@Widgets@
CONST	SEGMENT
??_C@_07DIHFNIOG@Widgets@ DB 'Widgets', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI@
CONST	SEGMENT
??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI@ DB '('
	DB	00H, 'f', 00H, 'l', 00H, 'a', 00H, 'g', 00H, 's', 00H, ' ', 00H
	DB	'&', 00H, ' ', 00H, 'I', 00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i'
	DB	00H, 'I', 00H, 'n', 00H, 'p', 00H, 'u', 00H, 't', 00H, 'T', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, 'F', 00H, 'l', 00H, 'a', 00H, 'g'
	DB	00H, 's', 00H, '_', 00H, 'C', 00H, 'a', 00H, 'l', 00H, 'l', 00H
	DB	'b', 00H, 'a', 00H, 'c', 00H, 'k', 00H, 'R', 00H, 'e', 00H, 's'
	DB	00H, 'i', 00H, 'z', 00H, 'e', 00H, ')', 00H, ' ', 00H, '=', 00H
	DB	'=', 00H, ' ', 00H, '0', 00H, 00H, 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ@
CONST	SEGMENT
??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ@ DB 'm'
	DB	00H, 'y', 00H, '_', 00H, 's', 00H, 't', 00H, 'r', 00H, '-', 00H
	DB	'>', 00H, 'b', 00H, 'e', 00H, 'g', 00H, 'i', 00H, 'n', 00H, '('
	DB	00H, ')', 00H, ' ', 00H, '=', 00H, '=', 00H, ' ', 00H, 'd', 00H
	DB	'a', 00H, 't', 00H, 'a', 00H, '-', 00H, '>', 00H, 'B', 00H, 'u'
	DB	00H, 'f', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_05EAJAAGNN@imgui@
CONST	SEGMENT
??_C@_05EAJAAGNN@imgui@ DB 'imgui', 00H			; `string'
CONST	ENDS
_DATA	SEGMENT
?check@?6??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H	; `ShowDemoWindowWidgets'::`7'::check
?closable_group@?FB@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`81'::closable_group
?animate@?OF@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H	; `ShowDemoWindowWidgets'::`229'::animate
?alpha_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`247'::alpha_preview
?arr@?BL@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f19999ar ; 0.6 ; `ShowDemoWindowWidgets'::`27'::arr
	DD	03dcccccdr			; 0.1
	DD	03f800000r			; 1
	DD	03f000000r			; 0.5
	DD	03f6b851fr			; 0.92
	DD	03dcccccdr			; 0.1
	DD	03e4ccccdr			; 0.2
?str0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 'Hello, world!', 00H ; `ShowDemoWindowWidgets'::`29'::str0
	ORG $+114
?i0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 07bH	; `ShowDemoWindowWidgets'::`29'::i0
?f0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03a83126fr ; 0.001 ; `ShowDemoWindowWidgets'::`29'::f0
?d0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4NA DQ 0412e847e00000056r ; 999999 ; `ShowDemoWindowWidgets'::`29'::d0
?f1@?BN@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 0501502f9r ; 1e+10 ; `ShowDemoWindowWidgets'::`29'::f1
?vec4a@?BN@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03dcccccdr ; 0.1 ; `ShowDemoWindowWidgets'::`29'::vec4a
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03ee147aer			; 0.44
?i1@?BO@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 032H	; `ShowDemoWindowWidgets'::`30'::i1
?i2@?BO@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 02aH	; `ShowDemoWindowWidgets'::`30'::i2
?f1@?BO@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`30'::f1
?f2@?BO@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03bdb8bacr ; 0.0067 ; `ShowDemoWindowWidgets'::`30'::f2
?f1@?BP@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03dfbe76dr ; 0.123 ; `ShowDemoWindowWidgets'::`31'::f1
?col1@?CA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`32'::col1
	DD	000000000r			; 0
	DD	03e4ccccdr			; 0.2
?col2@?CA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03ecccccdr ; 0.4 ; `ShowDemoWindowWidgets'::`32'::col2
	DD	03f333333r			; 0.7
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
?listbox_item_current@?CB@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H ; `ShowDemoWindowWidgets'::`33'::listbox_item_current
?base_flags@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 08c0H ; `ShowDemoWindowWidgets'::`52'::base_flags
?selection_mask@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 04H ; `ShowDemoWindowWidgets'::`52'::selection_mask
?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 043480000r ; 200 ; `ShowDemoWindowWidgets'::`104'::wrap_width
?buf@?GL@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 0e6H, 097H, 0a5H, 0e6H, 09cH
	DB	0acH, 0e8H, 0aaH, 09eH, 00H			; `ShowDemoWindowWidgets'::`107'::buf
	ORG $+22
?item_current_3@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowWidgets'[::C]::item_current_3
?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 00H ; `ShowDemoWindowWidgets'::`149'::selection
	DB	01H
	DB	00H
	DB	00H
	DB	00H
?drag_and_drop@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`247'::drag_and_drop
?options_menu@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`247'::options_menu
?saved_palette_init@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`247'::saved_palette_init
?selected@?JM@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`156'::selected
?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 01H ; `ShowDemoWindowWidgets'::`184'::selected
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	00H
	DB	00H
	DB	01H
?selected@?MO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA DB 01H ; `ShowDemoWindowWidgets'::`206'::selected
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
	DB	00H
	DB	01H
?alpha@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H	; `ShowDemoWindowWidgets'::`247'::alpha
?alpha_bar@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`247'::alpha_bar
?side_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`247'::side_preview
?text@?NK@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB '/*', 0aH, ' The Pentiu'
	DB	'm F00F bug, shorthand for F0 0F C7 C8,', 0aH, ' the hexadecim'
	DB	'al encoding of one offending instruction,', 0aH, ' more forma'
	DB	'lly, the invalid operand with locked CMPXCHG8B', 0aH, ' instr'
	DB	'uction bug, is a design flaw in the majority of', 0aH, ' Inte'
	DB	'l Pentium, Pentium MMX, and Pentium OverDrive', 0aH, ' proces'
	DB	'sors (all in the P5 microarchitecture).', 0aH, '*/', 0aH, 0aH
	DB	'label:', 0aH, 09H, 'lock cmpxchg8b eax', 0aH, 00H ; `ShowDemoWindowWidgets'::`218'::text
	ORG $+16033
?flags@?NK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0400H	; `ShowDemoWindowWidgets'::`218'::flags
?arr@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f19999ar ; 0.6 ; `ShowDemoWindowWidgets'::`229'::arr
	DD	03dcccccdr			; 0.1
	DD	03f800000r			; 1
	DD	03f000000r			; 0.5
	DD	03f6b851fr			; 0.92
	DD	03dcccccdr			; 0.1
	DD	03e4ccccdr			; 0.2
?bufpass@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 'password123', 00H ; `ShowDemoWindowWidgets'::`221'::bufpass
	ORG $+52
?display_count@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 046H ; `ShowDemoWindowWidgets'::`229'::display_count
?progress_dir@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`229'::progress_dir
?begin@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 041200000r ; 10 ; `ShowDemoWindowWidgets'::`304'::begin
?end@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 042b40000r ; 90 ; `ShowDemoWindowWidgets'::`304'::end
?begin_i@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 064H ; `ShowDemoWindowWidgets'::`304'::begin_i
?end_i@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 03e8H	; `ShowDemoWindowWidgets'::`304'::end_i
?s8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4DA DB 07fH	; `ShowDemoWindowWidgets'::`307'::s8_v
?u8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4EA DB 0ffH	; `ShowDemoWindowWidgets'::`307'::u8_v
?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowWidgets'::`307'::inputs_step
?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`106'::enable_track
?s16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4FA DW 07fffH ; `ShowDemoWindowWidgets'::`307'::s16_v
?show_h_scrollbar@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`165'::show_h_scrollbar
?show_button@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`165'::show_button
?u16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4GA DW 0ffffH ; `ShowDemoWindowWidgets'::`307'::u16_v
?show_tree_nodes@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`165'::show_tree_nodes
?show_columns@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`165'::show_columns
?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`307'::s32_v
?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA DD 0ffffffffH ; `ShowDemoWindowWidgets'::`307'::u32_v
?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA DD 03dfbe76dr ; 0.123 ; `ShowDemoWindowWidgets'::`307'::f32_v
?s64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_JA DQ ffffffffffffffffH ; `ShowDemoWindowWidgets'::`307'::s64_v
?u64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_KA DQ ffffffffffffffffH ; `ShowDemoWindowWidgets'::`307'::u64_v
?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA DQ 040f5f900329161f2r ; 90000 ; `ShowDemoWindowWidgets'::`307'::f64_v
?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03dcccccdr ; 0.1 ; `ShowDemoWindowWidgets'::`310'::vec4f
	DD	03e4ccccdr			; 0.2
	DD	03e99999ar			; 0.3
	DD	03ee147aer			; 0.44
?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA DD 01H	; `ShowDemoWindowWidgets'::`310'::vec4i
	DD	05H
	DD	064H
	DD	0ffH
?values@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 000000000r ; 0 ; `ShowDemoWindowWidgets'::`313'::values
	DD	03f19999ar			; 0.6
	DD	03eb33333r			; 0.35
	DD	03f666666r			; 0.9
	DD	03f333333r			; 0.7
	DD	03e4ccccdr			; 0.2
	DD	000000000r			; 0
?values2@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03e4ccccdr ; 0.2 ; `ShowDemoWindowWidgets'::`313'::values2
	DD	03f4ccccdr			; 0.8
	DD	03ecccccdr			; 0.4
	DD	03e800000r			; 0.25
?col1@?BFB@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`337'::col1
	DD	000000000r			; 0
	DD	03e4ccccdr			; 0.2
?col2@?BFB@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03ecccccdr ; 0.4 ; `ShowDemoWindowWidgets'::`337'::col2
	DD	03f333333r			; 0.7
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA DD FLAT:??_C@_05DDEOPHNO@Bobby@ ; `ShowDemoWindowWidgets'::`340'::names
	DD	FLAT:??_C@_08FLMMIHDE@Beatrice@
	DD	FLAT:??_C@_05BECHDIPO@Betty@
	DD	FLAT:??_C@_07OEGNBIJH@Brianna@
	DD	FLAT:??_C@_05MAEBLNFA@Barry@
	DD	FLAT:??_C@_07JNHNGBFJ@Bernard@
	DD	FLAT:??_C@_04KCKMHEOC@Bibi@
	DD	FLAT:??_C@_06HGIOBEEM@Blaine@
	DD	FLAT:??_C@_04HKIGHOCK@Bryn@
?item_names@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA DD FLAT:??_C@_08HGEMKAAG@Item?5One@ ; `ShowDemoWindowWidgets'::`383'::item_names
	DD	FLAT:??_C@_08BIEMAAON@Item?5Two@
	DD	FLAT:??_C@_0L@PNIFIMNF@Item?5Three@
	DD	FLAT:??_C@_09FNJGFEIF@Item?5Four@
	DD	FLAT:??_C@_09HPDIDBJG@Item?5Five@
?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H ; `ShowDemoWindowWidgets'::`394'::item_type
?col4f@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PAMA DD 03f800000r ; 1 ; `ShowDemoWindowWidgets'::`394'::col4f
	DD	03f000000r			; 0.5
	DD	000000000r			; 0
	DD	03f800000r			; 1
?current@?BLD@??ShowDemoWindowWidgets@@YAXXZ@4HA DD 01H	; `ShowDemoWindowWidgets'::`435'::current
?dummy_str@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PADA DB 'This is a dummy '
	DB	'field to be able to tab-out of the widgets above.', 00H ; `ShowDemoWindowWidgets'::`394'::dummy_str
?show_tab_bar@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowLayout'::`165'::show_tab_bar
?h_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowColumns'::`21'::h_borders
?line@?6??ShowDemoWindowLayout@@YAXXZ@4HA DD 032H	; `ShowDemoWindowLayout'::`7'::line
?f0@?BP@??ShowDemoWindowLayout@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowLayout'::`31'::f0
?f1@?BP@??ShowDemoWindowLayout@@YAXXZ@4MA DD 040000000r ; 2 ; `ShowDemoWindowLayout'::`31'::f1
?f2@?BP@??ShowDemoWindowLayout@@YAXXZ@4MA DD 040400000r ; 3 ; `ShowDemoWindowLayout'::`31'::f2
?item@?BP@??ShowDemoWindowLayout@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowLayout'::`31'::item
?selection@?BP@??ShowDemoWindowLayout@@YAXXZ@4PAHA DD 00H ; `ShowDemoWindowLayout'::`31'::selection
	DD	01H
	DD	02H
	DD	03H
?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA DD 01H ; `ShowDemoWindowLayout'::`60'::tab_bar_flags
?opened@?DM@??ShowDemoWindowLayout@@YAXXZ@4PA_NA DB 01H	; `ShowDemoWindowLayout'::`60'::opened
	DB	01H
	DB	01H
	DB	01H
?track_item@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA DD 032H ; `ShowDemoWindowLayout'::`106'::track_item
?scroll_to_pos_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA DD 043480000r ; 200 ; `ShowDemoWindowLayout'::`106'::scroll_to_pos_px
?lines@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA DD 07H	; `ShowDemoWindowLayout'::`106'::lines
?contents_size_x@?KF@??ShowDemoWindowLayout@@YAXXZ@4MA DD 043960000r ; 300 ; `ShowDemoWindowLayout'::`165'::contents_size_x
?selected_fish@?6??ShowDemoWindowPopups@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowPopups'::`7'::selected_fish
?toggles@?6??ShowDemoWindowPopups@@YAXXZ@4PA_NA DB 01H	; `ShowDemoWindowPopups'::`7'::toggles
	DB	00H
	DB	00H
	DB	00H
	DB	00H
?v_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA DB 01H ; `ShowDemoWindowColumns'::`21'::v_borders
?init@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4_NA DB 01H ; `ImGui::ShowStyleEditor'::`2'::init
?output_only_modified@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4_NA DB 01H ; `ImGui::ShowStyleEditor'::`34'::output_only_modified
?value@?DA@??ShowDemoWindowPopups@@YAXXZ@4MA DD 03f000000r ; 0.5 ; `ShowDemoWindowPopups'::`48'::value
?name@?DA@??ShowDemoWindowPopups@@YAXXZ@4PADA DB 'Label1', 00H ; `ShowDemoWindowPopups'::`48'::name
	ORG $+25
?item@?EP@??ShowDemoWindowPopups@@YAXXZ@4HA DD 01H	; `ShowDemoWindowPopups'::`79'::item
?color@?EP@??ShowDemoWindowPopups@@YAXXZ@4PAMA DD 03ecccccdr ; 0.4 ; `ShowDemoWindowPopups'::`79'::color
	DD	03f333333r			; 0.7
	DD	000000000r			; 0
	DD	03f000000r			; 0.5
?selected@?8??ShowDemoWindowColumns@@YAXXZ@4HA DD 0ffffffffH ; `ShowDemoWindowColumns'::`9'::selected
?columns_count@?BF@??ShowDemoWindowColumns@@YAXXZ@4HA DD 04H ; `ShowDemoWindowColumns'::`21'::columns_count
?foo@?CA@??ShowDemoWindowColumns@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowColumns'::`32'::foo
?bar@?CA@??ShowDemoWindowColumns@@YAXXZ@4MA DD 03f800000r ; 1 ; `ShowDemoWindowColumns'::`32'::bar
?buf@?EC@??ShowDemoWindowMisc@@YAXXZ@4PADA DB 'dummy', 00H ; `ShowDemoWindowMisc'::`66'::buf
	ORG $+26
?style_idx@?1??ShowStyleSelector@ImGui@@YA_NPBD@Z@4HA DD 0ffffffffH ; `ImGui::ShowStyleSelector'::`2'::style_idx
?buf@?EF@??ShowDemoWindowMisc@@YAXXZ@4PADA DB 'click on a button to set f'
	DB	'ocus', 00H					; `ShowDemoWindowMisc'::`69'::buf
	ORG $+97
?window_scale@?DK@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4MA DD 03f800000r ; 1 ; `ImGui::ShowStyleEditor'::`58'::window_scale
?enabled@?BK@??ShowExampleMenuFile@@YAXXZ@4_NA DB 01H	; `ShowExampleMenuFile'::`26'::enabled
?b@?BK@??ShowExampleMenuFile@@YAXXZ@4_NA DB 01H		; `ShowExampleMenuFile'::`26'::b
?draw_bg@?DA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA DB 01H ; `ShowExampleAppCustomRendering'::`48'::draw_bg
?draw_fg@?DA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA DB 01H ; `ShowExampleAppCustomRendering'::`48'::draw_fg
?f@?BK@??ShowExampleMenuFile@@YAXXZ@4MA DD 03f000000r ; 0.5 ; `ShowExampleMenuFile'::`26'::f
?lines@?1??ShowExampleAppAutoResize@@YAXPA_N@Z@4HA DD 0aH ; `ShowExampleAppAutoResize'::`2'::lines
?display_lines@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA DD 0aH ; `ShowExampleAppConstrainedResize'::`2'::display_lines
?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA DD 042100000r ; 36 ; `ShowExampleAppCustomRendering'::`11'::sz
?thickness@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA DD 040400000r ; 3 ; `ShowExampleAppCustomRendering'::`11'::thickness
?ngon_sides@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA DD 06H ; `ShowExampleAppCustomRendering'::`11'::ngon_sides
?opt_reorderable@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4_NA DB 01H ; `ShowExampleAppDocuments'::`2'::opt_reorderable
	ORG $+3
?opt_fitting_flags@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA DD 040H ; `ShowExampleAppDocuments'::`2'::opt_fitting_flags
_DATA	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA DD 01b3H ; `ShowDemoWindowWidgets'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BC@FKMLNKJL@No?5bring?5to?5front@
CONST	SEGMENT
??_C@_0BC@FKMLNKJL@No?5bring?5to?5front@ DB 'No bring to front', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@EHIGJHPL@No?5background@
CONST	SEGMENT
??_C@_0O@EHIGJHPL@No?5background@ DB 'No background', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KFENEDHJ@No?5nav@
CONST	SEGMENT
??_C@_06KFENEDHJ@No?5nav@ DB 'No nav', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08DGAKPBEJ@No?5close@
CONST	SEGMENT
??_C@_08DGAKPBEJ@No?5close@ DB 'No close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@PFMGNBM@No?5collapse@
CONST	SEGMENT
??_C@_0M@PFMGNBM@No?5collapse@ DB 'No collapse', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_09HMNEIDKA@No?5resize@
CONST	SEGMENT
??_C@_09HMNEIDKA@No?5resize@ DB 'No resize', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_07JGIJBGNK@No?5move@
CONST	SEGMENT
??_C@_07JGIJBGNK@No?5move@ DB 'No move', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07KBMDBGCH@No?5menu@
CONST	SEGMENT
??_C@_07KBMDBGCH@No?5menu@ DB 'No menu', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GGGGKBFF@No?5scrollbar@
CONST	SEGMENT
??_C@_0N@GGGGKBFF@No?5scrollbar@ DB 'No scrollbar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@EABCFDNG@No?5titlebar@
CONST	SEGMENT
??_C@_0M@EABCFDNG@No?5titlebar@ DB 'No titlebar', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@FBBKILOB@Window?5options@
CONST	SEGMENT
??_C@_0P@FBBKILOB@Window?5options@ DB 'Window options', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB@
CONST	SEGMENT
??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB@ DB 'Hello, world!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboa@
CONST	SEGMENT
??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboa@ DB 'Cop'
	DB	'y "Hello, world!" to clipboard', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogTex@
CONST	SEGMENT
??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogTex@ DB 'You can als'
	DB	'o call ImGui::LogText() to output directly to the log without'
	DB	' a visual output.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0GA@GFOLBJBL@Try?5opening?5any?5of?5the?5contents@
CONST	SEGMENT
??_C@_0GA@GFOLBJBL@Try?5opening?5any?5of?5the?5contents@ DB 'Try opening '
	DB	'any of the contents below in this window and then click one o'
	DB	'f the "Log To" button.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0JC@LGKFGNAK@The?5logging?5API?5redirects?5all?5t@
CONST	SEGMENT
??_C@_0JC@LGKFGNAK@The?5logging?5API?5redirects?5all?5t@ DB 'The logging '
	DB	'API redirects all text output so you can easily capture the c'
	DB	'ontent of a window or a block. Tree nodes can be automaticall'
	DB	'y expanded.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@BMMAIOLM@Capture?1Logging@
CONST	SEGMENT
??_C@_0BA@BMMAIOLM@Capture?1Logging@ DB 'Capture/Logging', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5access@
CONST	SEGMENT
??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5access@ DB 'The same con'
	DB	'tents can be accessed in ''Tools->Style Editor'' or by callin'
	DB	'g the ShowStyleEditor() function.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05IHAFCALK@Style@
CONST	SEGMENT
??_C@_05IHAFCALK@Style@ DB 'Style', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtx@
CONST	SEGMENT
??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtx@ DB 'io.BackendFlag'
	DB	's: RendererHasVtxOffset', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos@
CONST	SEGMENT
??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos@ DB 'io.BackendFlags'
	DB	': HasSetMousePos', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursor@
CONST	SEGMENT
??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursor@ DB 'io.BackendFlag'
	DB	's: HasMouseCursors', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad@
CONST	SEGMENT
??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad@ DB 'io.BackendFlags: H'
	DB	'asGamepad', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0LG@OFNCJLC@Those?5flags?5are?5set?5by?5the?5back@
CONST	SEGMENT
??_C@_0LG@OFNCJLC@Those?5flags?5are?5set?5by?5the?5back@ DB 'Those flags '
	DB	'are set by the back-ends (imgui_impl_xxx files) to specify th'
	DB	'eir capabilities.', 0aH, 'Here we expose then as read-only fi'
	DB	'elds to avoid breaking interactions with your back-end.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@GGPAPCP@Backend?5Flags@
CONST	SEGMENT
??_C@_0O@GGPAPCP@Backend?5Flags@ DB 'Backend Flags', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BFL@ILCCFGGP@Instruct?5Dear?5ImGui?5to?5render?5a@
CONST	SEGMENT
??_C@_0BFL@ILCCFGGP@Instruct?5Dear?5ImGui?5to?5render?5a@ DB 'Instruct De'
	DB	'ar ImGui to render a mouse cursor for you. Note that a mouse '
	DB	'cursor rendered via your application GPU rendering path will '
	DB	'feel more laggy than hardware cursor, but will be more in syn'
	DB	'c with your other visuals.', 0aH, 0aH, 'Some desktop applicat'
	DB	'ions may use both kinds of cursors (e.g. enable software curs'
	DB	'or only when resizing/dragging something).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor@
CONST	SEGMENT
??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor@ DB 'io.MouseDrawCursor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBa@
CONST	SEGMENT
??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBa@ DB 'io.ConfigWindows'
	DB	'MoveFromTitleBarOnly', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from@
CONST	SEGMENT
??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from@ DB 'Enable resizi'
	DB	'ng of windows from their edges and from the lower-left corner'
	DB	'.', 0aH, 'This requires (io.BackendFlags & ImGuiBackendFlags_'
	DB	'HasMouseCursors) because it needs mouse cursor feedback.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges@
CONST	SEGMENT
??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges@ DB 'io.ConfigWindows'
	DB	'ResizeFromEdges', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0EP@GBIAPNGK@Set?5to?5false?5to?5disable?5blinkin@
CONST	SEGMENT
??_C@_0EP@GBIAPNGK@Set?5to?5false?5to?5disable?5blinkin@ DB 'Set to false'
	DB	' to disable blinking cursor, for users who consider it distra'
	DB	'cting', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink@
CONST	SEGMENT
??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink@ DB 'io.ConfigInputText'
	DB	'CursorBlink', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@DCPLBGPI@Instruct?5back?9end?5to?5not?5alter?5@
CONST	SEGMENT
??_C@_0EC@DCPLBGPI@Instruct?5back?9end?5to?5not?5alter?5@ DB 'Instruct ba'
	DB	'ck-end to not alter mouse cursor shape and visibility.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCh@
CONST	SEGMENT
??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCh@ DB 'io.ConfigFlags'
	DB	': NoMouseCursorChange', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO@
CONST	SEGMENT
??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO@ DB '<<PRESS'
	DB	' SPACE TO DISABLE>>', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse@
CONST	SEGMENT
??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse@ DB 'io.ConfigFlags: NoMous'
	DB	'e', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the@
CONST	SEGMENT
??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the@ DB 'Instruct navi'
	DB	'gation to move the mouse cursor. See comment for ImGuiConfigF'
	DB	'lags_NavEnableSetMousePos.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMou@
CONST	SEGMENT
??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMou@ DB 'io.ConfigFlags'
	DB	': NavEnableSetMousePos', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0KE@MBIKOFFP@Required?5back?9end?5to?5feed?5in?5ga@
CONST	SEGMENT
??_C@_0KE@MBIKOFFP@Required?5back?9end?5to?5feed?5in?5ga@ DB 'Required ba'
	DB	'ck-end to feed in gamepad inputs in io.NavInputs[] and set io'
	DB	'.BackendFlags |= ImGuiBackendFlags_HasGamepad.', 0aH, 0aH, 'R'
	DB	'ead instructions in imgui.cpp for details.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepa@
CONST	SEGMENT
??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepa@ DB 'io.ConfigFlags'
	DB	': NavEnableGamepad', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboa@
CONST	SEGMENT
??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboa@ DB 'io.ConfigFlags:'
	DB	' NavEnableKeyboard', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2@
CONST	SEGMENT
??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2@ DB 'Configuration##2', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PIILMNHI@Configuration@
CONST	SEGMENT
??_C@_0O@PIILMNHI@Configuration@ DB 'Configuration', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NDGNNOFI@USER?5GUIDE?3@
CONST	SEGMENT
??_C@_0M@NDGNNOFI@USER?5GUIDE?3@ DB 'USER GUIDE:', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@
CONST	SEGMENT
??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@ DB 'Set '''
	DB	'io.ConfigFlags |= NavEnableGamepad'' for gamepad controls.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@
CONST	SEGMENT
??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@ DB 'Set '''
	DB	'io.ConfigFlags |= NavEnableKeyboard'' for keyboard controls.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4dear@
CONST	SEGMENT
??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4dear@ DB 'Read the '
	DB	'FAQ at http://www.dearimgui.org/faq/', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the@
CONST	SEGMENT
??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the@ DB 'See example a'
	DB	'pplications in the examples/ folder.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4@
CONST	SEGMENT
??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4@ DB 'See comments in i'
	DB	'mgui.cpp.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5i@
CONST	SEGMENT
??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5i@ DB 'See the'
	DB	' ShowDemoWindow() code in imgui_demo.cpp. <- you are here!', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3@
CONST	SEGMENT
??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3@ DB 'PROGRAMMER GUIDE:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0HK@IHDIDEEM@The?5?$CCTools?$CC?5menu?5above?5gives?5ac@
CONST	SEGMENT
??_C@_0HK@IHDIDEEM@The?5?$CCTools?$CC?5menu?5above?5gives?5ac@ DB 'The "T'
	DB	'ools" menu above gives access to: About Box, Style Editor,', 0aH
	DB	'and Metrics (general purpose Dear ImGui debugging tool).', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads@
CONST	SEGMENT
??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads@ DB 'The "Ex'
	DB	'amples" menu above leads to more demo contents.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstratin@
CONST	SEGMENT
??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstratin@ DB 'Sections below'
	DB	' are demonstrating many aspects of the library.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3@
CONST	SEGMENT
??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3@ DB 'ABOUT THIS DEMO:', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFEFHOJ@Help@
CONST	SEGMENT
??_C@_04DDFEFHOJ@Help@ DB 'Help', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@OGBJOAAJ@dear?5imgui?5says?5hello?4?5?$CI?$CFs?$CJ@
CONST	SEGMENT
??_C@_0BM@OGBJOAAJ@dear?5imgui?5says?5hello?4?5?$CI?$CFs?$CJ@ DB 'dear im'
	DB	'gui says hello. (%s)', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_08KHNILBGC@1?475?5WIP@
CONST	SEGMENT
??_C@_08KHNILBGC@1?475?5WIP@ DB '1.75 WIP', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui@
CONST	SEGMENT
??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui@ DB 'About Dear ImGui', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_07OKMHIPFF@Metrics@
CONST	SEGMENT
??_C@_07OKMHIPFF@Metrics@ DB 'Metrics', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OENKALAF@Tools@
CONST	SEGMENT
??_C@_05OENKALAF@Tools@ DB 'Tools', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_09IBGBKIMC@Documents@
CONST	SEGMENT
??_C@_09IBGBKIMC@Documents@ DB 'Documents', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@MLNDPKFI@Custom?5rendering@
CONST	SEGMENT
??_C@_0BB@MLNDPKFI@Custom?5rendering@ DB 'Custom rendering', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles@
CONST	SEGMENT
??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles@ DB 'Manipulating window '
	DB	'titles', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0P@IMGHCBNF@Simple?5overlay@
CONST	SEGMENT
??_C@_0P@IMGHCBNF@Simple?5overlay@ DB 'Simple overlay', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window@
CONST	SEGMENT
??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window@ DB 'Constrained-resizin'
	DB	'g window', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BF@OHKJAELB@Auto?9resizing?5window@
CONST	SEGMENT
??_C@_0BF@OHKJAELB@Auto?9resizing?5window@ DB 'Auto-resizing window', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@INJCBODH@Long?5text?5display@
CONST	SEGMENT
??_C@_0BC@INJCBODH@Long?5text?5display@ DB 'Long text display', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@DNAHAJCI@Property?5editor@
CONST	SEGMENT
??_C@_0BA@DNAHAJCI@Property?5editor@ DB 'Property editor', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@JBJOEMFC@Simple?5layout@
CONST	SEGMENT
??_C@_0O@JBJOEMFC@Simple?5layout@ DB 'Simple layout', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03GGEOLGBL@Log@
CONST	SEGMENT
??_C@_03GGEOLGBL@Log@ DB 'Log', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_07PGLPGHFC@Console@
CONST	SEGMENT
??_C@_07PGLPGHFC@Console@ DB 'Console', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@ECNFCDDH@Main?5menu?5bar@
CONST	SEGMENT
??_C@_0O@ECNFCDDH@Main?5menu?5bar@ DB 'Main menu bar', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJMBPHGD@Examples@
CONST	SEGMENT
??_C@_08KJMBPHGD@Examples@ DB 'Examples', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04IFEHPILC@Menu@
CONST	SEGMENT
??_C@_04IFEHPILC@Menu@ DB 'Menu', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo@
CONST	SEGMENT
??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo@ DB 'Dear ImGui Demo', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GJBKNEHA@Style?5Editor@
CONST	SEGMENT
??_C@_0N@GJBKNEHA@Style?5Editor@ DB 'Style Editor', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe@
CONST	SEGMENT
??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe@ DB 'I'
	DB	00H, 'm', 00H, 'G', 00H, 'u', 00H, 'i', 00H, ':', 00H, ':', 00H
	DB	'G', 00H, 'e', 00H, 't', 00H, 'C', 00H, 'u', 00H, 'r', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, 't', 00H, 'C', 00H, 'o', 00H, 'n', 00H
	DB	't', 00H, 'e', 00H, 'x', 00H, 't', 00H, '(', 00H, ')', 00H, ' '
	DB	00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, ' ', 00H, '&', 00H
	DB	'&', 00H, ' ', 00H, '"', 00H, 'M', 00H, 'i', 00H, 's', 00H, 's'
	DB	00H, 'i', 00H, 'n', 00H, 'g', 00H, ' ', 00H, 'd', 00H, 'e', 00H
	DB	'a', 00H, 'r', 00H, ' ', 00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u'
	DB	00H, 'i', 00H, ' ', 00H, 'c', 00H, 'o', 00H, 'n', 00H, 't', 00H
	DB	'e', 00H, 'x', 00H, 't', 00H, '.', 00H, ' ', 00H, 'R', 00H, 'e'
	DB	00H, 'f', 00H, 'e', 00H, 'r', 00H, ' ', 00H, 't', 00H, 'o', 00H
	DB	' ', 00H, 'e', 00H, 'x', 00H, 'a', 00H, 'm', 00H, 'p', 00H, 'l'
	DB	00H, 'e', 00H, 's', 00H, ' ', 00H, 'a', 00H, 'p', 00H, 'p', 00H
	DB	'!', 00H, '"', 00H, 00H, 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'i', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, '\', 00H, 'c', 00H, 's', 00H, 'g', 00H
	DB	'o', 00H, 'H', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '\', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e', 00H, 'k', 00H, 't', 00H
	DB	'W', 00H, 'o', 00H, 'l', 00H, 'f', 00H, '\', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'j', 00H, 'e', 00H, 'k', 00H, 't', 00H, 'W', 00H
	DB	'o', 00H, 'l', 00H, 'f', 00H, '\', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, ' ', 00H, '9', 00H, ' '
	DB	00H, 'K', 00H, 'i', 00H, 'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H
	DB	'H', 00H, 'o', 00H, 'o', 00H, 'k', 00H, ' ', 00H, '2', 00H, '\'
	DB	00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H
	DB	'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '_', 00H, 'd'
	DB	00H, 'e', 00H, 'm', 00H, 'o', 00H, '.', 00H, 'c', 00H, 'p', 00H
	DB	'p', 00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Ref@
CONST	SEGMENT
??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Ref@ DB 'Missing dear'
	DB	' imgui context. Refer to examples app!', 00H ; `string'
CONST	ENDS
;	COMDAT ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPA_N@Z@4JA
_DATA	SEGMENT
?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPA_N@Z@4JA DD 0c8H ; `ImGui::ShowDemoWindow'::`1'::__LINE__Var
_DATA	ENDS
;	COMDAT ??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4@
CONST	SEGMENT
??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4@ DB 'CTRL+Tab to '
	DB	'select a window.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5o@
CONST	SEGMENT
??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5o@ DB 'Alt to jum'
	DB	'p to the menu layer of a window.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5@
CONST	SEGMENT
??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5@ DB 'Escape to d'
	DB	'eactivate a widget, close popup, exit child window.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5wid@
CONST	SEGMENT
??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5wid@ DB 'Return to i'
	DB	'nput text into a widget.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4@
CONST	SEGMENT
??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4@ DB 'Space to activat'
	DB	'e a widget.', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4@
CONST	SEGMENT
??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4@ DB 'Arrow keys to navigat'
	DB	'e.', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enable@
CONST	SEGMENT
??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enable@ DB 'With keyboard '
	DB	'navigation enabled:', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0FC@FJHKJEAF@You?5can?5apply?5arithmetic?5operat@
CONST	SEGMENT
??_C@_0FC@FJHKJEAF@You?5can?5apply?5arithmetic?5operat@ DB 'You can apply'
	DB	' arithmetic operators +,*,/ on numerical values.', 0aH, 'Use '
	DB	'+- to subtract.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4@
CONST	SEGMENT
??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4@ DB 'ESCAPE to revert.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4@
CONST	SEGMENT
??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4@ DB 'CTRL+Z,CTR'
	DB	'L+Y to undo/redo.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut@
CONST	SEGMENT
??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut@ DB 'CTRL+X/C'
	DB	'/V to use clipboard cut/copy/paste.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5selec@
CONST	SEGMENT
??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5selec@ DB 'CTRL+A or'
	DB	' double-click to select all.', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4@
CONST	SEGMENT
??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4@ DB 'CTRL+Left/R'
	DB	'ight to word jump.', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6@
CONST	SEGMENT
??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6@ DB 'While inputing text:', 0aH
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window@
CONST	SEGMENT
??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window@ DB 'CTRL+Mouse'
	DB	' Wheel to zoom window contents.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5@
CONST	SEGMENT
??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5@ DB 'TAB/SHIFT'
	DB	'+TAB to cycle through keyboard editable fields.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5@
CONST	SEGMENT
??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5@ DB 'CTRL+Cli'
	DB	'ck on a slider or drag box to input value as text.', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5@
CONST	SEGMENT
??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5@ DB 'Click and d'
	DB	'rag on lower corner to resize window', 0aH, '(double-click to'
	DB	' auto fit window to its contents).', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5co@
CONST	SEGMENT
??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5co@ DB 'Double-clic'
	DB	'k on title bar to collapse window.', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_03NAEMJKHE@?$CI?$DP?$CJ@
CONST	SEGMENT
??_C@_03NAEMJKHE@?$CI?$DP?$CJ@ DB '(?)', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09EEKGDCPH@?$DMunknown?$DO@
CONST	SEGMENT
??_C@_09EEKGDCPH@?$DMunknown?$DO@ DB '<unknown>', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_1CC@IHACEFEE@?$AAI?$AAt?$AAe?$AAm?$AAs?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9@
CONST	SEGMENT
??_C@_1CC@IHACEFEE@?$AAI?$AAt?$AAe?$AAm?$AAs?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9@ DB 'I'
	DB	00H, 't', 00H, 'e', 00H, 'm', 00H, 's', 00H, 'C', 00H, 'o', 00H
	DB	'u', 00H, 'n', 00H, 't', 00H, ' ', 00H, '=', 00H, '=', 00H, ' '
	DB	00H, '-', 00H, '1', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
CONST	SEGMENT
??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@ DB 'B'
	DB	00H, 'u', 00H, 'f', 00H, '.', 00H, 'D', 00H, 'a', 00H, 't', 00H
	DB	'a', 00H, ' ', 00H, '!', 00H, '=', 00H, ' ', 00H, '0', 00H, 00H
	DB	00H						; `string'
CONST	ENDS
;	COMDAT ??_C@_13COJANIEC@?$AA0@
CONST	SEGMENT
??_C@_13COJANIEC@?$AA0@ DB '0', 00H, 00H, 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
CONST	SEGMENT
??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@ DB 'D'
	DB	00H, ':', 00H, '\', 00H, 'P', 00H, 'r', 00H, 'o', 00H, 'g', 00H
	DB	'r', 00H, 'a', 00H, 'm', 00H, 'm', 00H, 'i', 00H, 'e', 00H, 'r'
	DB	00H, 'e', 00H, 'n', 00H, '\', 00H, 'c', 00H, 's', 00H, 'g', 00H
	DB	'o', 00H, 'H', 00H, 'a', 00H, 'c', 00H, 'k', 00H, '\', 00H, 'P'
	DB	00H, 'r', 00H, 'o', 00H, 'j', 00H, 'e', 00H, 'k', 00H, 't', 00H
	DB	'W', 00H, 'o', 00H, 'l', 00H, 'f', 00H, '\', 00H, 'P', 00H, 'r'
	DB	00H, 'o', 00H, 'j', 00H, 'e', 00H, 'k', 00H, 't', 00H, 'W', 00H
	DB	'o', 00H, 'l', 00H, 'f', 00H, '\', 00H, 'I', 00H, 'm', 00H, 'G'
	DB	00H, 'u', 00H, 'i', 00H, ' ', 00H, 'D', 00H, 'i', 00H, 'r', 00H
	DB	'e', 00H, 'c', 00H, 't', 00H, 'X', 00H, ' ', 00H, '9', 00H, ' '
	DB	00H, 'K', 00H, 'i', 00H, 'e', 00H, 'r', 00H, 'o', 00H, ' ', 00H
	DB	'H', 00H, 'o', 00H, 'o', 00H, 'k', 00H, ' ', 00H, '2', 00H, '\'
	DB	00H, 'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '\', 00H
	DB	'i', 00H, 'm', 00H, 'g', 00H, 'u', 00H, 'i', 00H, '.', 00H, 'h'
	DB	00H, 00H, 00H				; `string'
CONST	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@PAUMyDocument@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ExampleAppDocuments@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ExampleAppDocuments@@QAE@XZ$0
__ehfuncinfo$??0ExampleAppDocuments@@QAE@XZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$??0ExampleAppDocuments@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@UMyDocument@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z$0
__ehfuncinfo$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ExampleAppLog@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ExampleAppLog@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ExampleAppLog@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ExampleAppLog@@QAE@XZ$2
__ehfuncinfo$??0ExampleAppLog@@QAE@XZ DD 019930522H
	DD	03H
	DD	FLAT:__unwindtable$??0ExampleAppLog@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@H@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z$0
__ehfuncinfo$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ExampleAppConsole@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$??0ExampleAppConsole@@QAE@XZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$0
	DD	00H
	DD	FLAT:__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$1
	DD	01H
	DD	FLAT:__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$2
	DD	02H
	DD	FLAT:__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$3
__ehfuncinfo$??0ExampleAppConsole@@QAE@XZ DD 019930522H
	DD	04H
	DD	FLAT:__unwindtable$??0ExampleAppConsole@@QAE@XZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@PBD@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@PAD@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowDemoWindowMisc@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowMisc@@YAXXZ$0
__ehfuncinfo$?ShowDemoWindowMisc@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShowDemoWindowMisc@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowDemoWindowColumns@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowColumns@@YAXXZ$0
__ehfuncinfo$?ShowDemoWindowColumns@@YAXXZ DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShowDemoWindowColumns@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowDemoWindowLayout@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowLayout@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowLayout@@YAXXZ$1
__ehfuncinfo$?ShowDemoWindowLayout@@YAXXZ DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ShowDemoWindowLayout@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$?ShowDemoWindowWidgets@@YAXXZ DD 019930522H
	DD	05H
	DD	FLAT:__unwindtable$?ShowDemoWindowWidgets@@YAXXZ
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
__unwindtable$?ShowDemoWindowWidgets@@YAXXZ DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$1
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$2
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$3
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$4
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowExampleAppCustomRendering@@YAXPA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppCustomRendering@@YAXPA_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppCustomRendering@@YAXPA_N@Z$1
__ehfuncinfo$?ShowExampleAppCustomRendering@@YAXPA_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ShowExampleAppCustomRendering@@YAXPA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowExampleAppLongText@@YAXPA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppLongText@@YAXPA_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppLongText@@YAXPA_N@Z$1
__ehfuncinfo$?ShowExampleAppLongText@@YAXPA_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ShowExampleAppLongText@@YAXPA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowExampleAppLog@@YAXPA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppLog@@YAXPA_N@Z$0
__ehfuncinfo$?ShowExampleAppLog@@YAXPA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShowExampleAppLog@@YAXPA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowExampleAppConsole@@YAXPA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppConsole@@YAXPA_N@Z$0
__ehfuncinfo$?ShowExampleAppConsole@@YAXPA_N@Z DD 019930522H
	DD	01H
	DD	FLAT:__unwindtable$?ShowExampleAppConsole@@YAXPA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowExampleAppDocuments@@YAXPA_N@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppDocuments@@YAXPA_N@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowExampleAppDocuments@@YAXPA_N@Z$1
__ehfuncinfo$?ShowExampleAppDocuments@@YAXPA_N@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ShowExampleAppDocuments@@YAXPA_N@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@UImVec2@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1ImGuiListClipper@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@D@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__ehfuncinfo$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ DD 019930522H
	DD	00H
	DD	00H
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	05H
xdata$x	ENDS
;	COMDAT xdata$x
xdata$x	SEGMENT
__unwindtable$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z DD 0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z$0
	DD	0ffffffffH
	DD	FLAT:__unwindfunclet$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z$1
__ehfuncinfo$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z DD 019930522H
	DD	02H
	DD	FLAT:__unwindtable$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z
	DD	2 DUP(00H)
	DD	2 DUP(00H)
	DD	00H
	DD	01H
xdata$x	ENDS
; Function compile flags: /Odt
;	COMDAT __JustMyCode_Default
_TEXT	SEGMENT
__JustMyCode_Default PROC				; COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	5d		 pop	 ebp
  00004	c3		 ret	 0
__JustMyCode_Default ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ PROC ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'close_queue'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  00023	e8 00 00 00 00	 call	 ??1?$ImVector@PAUMyDocument@@@@QAE@XZ ; ImVector<MyDocument *>::~ImVector<MyDocument *>
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ ENDP ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'close_queue''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PAUMyDocument@@@@QAEXABQAUMyDocument@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@PAUMyDocument@@@@QAEXABQAUMyDocument@@@Z PROC ; ImVector<MyDocument *>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PAUMyDocument@@@@QBEHH@Z ; ImVector<MyDocument *>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PAUMyDocument@@@@QAEXH@Z ; ImVector<MyDocument *>::reserve
$LN2@push_back:
  00054	6a 04		 push	 4
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	83 c1 01	 add	 ecx, 1
  00079	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	89 0a		 mov	 DWORD PTR [edx], ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?push_back@?$ImVector@PAUMyDocument@@@@QAEXABQAUMyDocument@@@Z ENDP ; ImVector<MyDocument *>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PAUMyDocument@@@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@PAUMyDocument@@@@QAEXH@Z PROC	; ImVector<MyDocument *>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 58		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  0003d	c1 e0 02	 shl	 eax, 2
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 2b		 je	 SHORT $LN3@reserve
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	c1 e1 02	 shl	 ecx, 2
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  0007d	83 c4 04	 add	 esp, 4
$LN3@reserve:
  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00086	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0008f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?reserve@?$ImVector@PAUMyDocument@@@@QAEXH@Z ENDP	; ImVector<MyDocument *>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PAUMyDocument@@@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@PAUMyDocument@@@@QBEHH@Z PROC ; ImVector<MyDocument *>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@PAUMyDocument@@@@QBEHH@Z ENDP ; ImVector<MyDocument *>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ PROC		; ImVector<MyDocument *>::clear, COMDAT
; _this$ = ecx

; 1275 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 2c		 je	 SHORT $LN1@clear
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00055	83 c4 04	 add	 esp, 4
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@clear:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ ENDP		; ImVector<MyDocument *>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z PROC ; ImVector<MyDocument *>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ENDP ; ImVector<MyDocument *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@PAUMyDocument@@@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?empty@?$ImVector@PAUMyDocument@@@@QBE_NXZ PROC		; ImVector<MyDocument *>::empty, COMDAT
; _this$ = ecx

; 1268 :     inline bool         empty() const                       { return Size == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	75 0c		 jne	 SHORT $LN3@empty
  00035	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@empty:
  0004b	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?empty@?$ImVector@PAUMyDocument@@@@QBE_NXZ ENDP		; ImVector<MyDocument *>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@PAUMyDocument@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@PAUMyDocument@@@@QAE@XZ PROC		; ImVector<MyDocument *>::~ImVector<MyDocument *>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@PAUMyDocument@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@PAUMyDocument@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@PAUMyDocument@@@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@PAUMyDocument@@@@QAE@XZ ENDP		; ImVector<MyDocument *>::~ImVector<MyDocument *>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@PAUMyDocument@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@PAUMyDocument@@@@QAE@XZ PROC		; ImVector<MyDocument *>::ImVector<MyDocument *>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@PAUMyDocument@@@@QAE@XZ ENDP		; ImVector<MyDocument *>::ImVector<MyDocument *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fapp@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fapp@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ PROC ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'app'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00023	e8 00 00 00 00	 call	 ??1ExampleAppDocuments@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Fapp@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ ENDP ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'app''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?NotifyOfDocumentsClosedElsewhere@@YAXAAUExampleAppDocuments@@@Z
_TEXT	SEGMENT
_doc$1 = -20						; size = 4
_doc_n$2 = -8						; size = 4
_app$ = 8						; size = 4
?NotifyOfDocumentsClosedElsewhere@@YAXAAUExampleAppDocuments@@@Z PROC ; NotifyOfDocumentsClosedElsewhere, COMDAT

; 4647 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4648 :     for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _doc_n$2[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@NotifyOfDo
$LN2@NotifyOfDo:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _doc_n$2[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _doc_n$2[ebp], eax
$LN4@NotifyOfDo:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _app$[ebp]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _doc_n$2[ebp]
  00040	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00042	7d 41		 jge	 SHORT $LN1@NotifyOfDo

; 4649 :     {
; 4650 :         MyDocument* doc = &app.Documents[doc_n];

  00044	8b 45 f8	 mov	 eax, DWORD PTR _doc_n$2[ebp]
  00047	50		 push	 eax
  00048	8b 4d 08	 mov	 ecx, DWORD PTR _app$[ebp]
  0004b	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  00050	89 45 ec	 mov	 DWORD PTR _doc$1[ebp], eax

; 4651 :         if (!doc->Open && doc->OpenPrev)

  00053	8b 45 ec	 mov	 eax, DWORD PTR _doc$1[ebp]
  00056	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  0005a	85 c9		 test	 ecx, ecx
  0005c	75 19		 jne	 SHORT $LN5@NotifyOfDo
  0005e	8b 45 ec	 mov	 eax, DWORD PTR _doc$1[ebp]
  00061	0f b6 48 05	 movzx	 ecx, BYTE PTR [eax+5]
  00065	85 c9		 test	 ecx, ecx
  00067	74 0e		 je	 SHORT $LN5@NotifyOfDo

; 4652 :             ImGui::SetTabItemClosed(doc->Name);

  00069	8b 45 ec	 mov	 eax, DWORD PTR _doc$1[ebp]
  0006c	8b 08		 mov	 ecx, DWORD PTR [eax]
  0006e	51		 push	 ecx
  0006f	e8 00 00 00 00	 call	 ?SetTabItemClosed@ImGui@@YAXPBD@Z ; ImGui::SetTabItemClosed
  00074	83 c4 04	 add	 esp, 4
$LN5@NotifyOfDo:

; 4653 :         doc->OpenPrev = doc->Open;

  00077	8b 45 ec	 mov	 eax, DWORD PTR _doc$1[ebp]
  0007a	8b 4d ec	 mov	 ecx, DWORD PTR _doc$1[ebp]
  0007d	8a 51 04	 mov	 dl, BYTE PTR [ecx+4]
  00080	88 50 05	 mov	 BYTE PTR [eax+5], dl

; 4654 :     }

  00083	eb ac		 jmp	 SHORT $LN2@NotifyOfDo
$LN1@NotifyOfDo:

; 4655 : }

  00085	5f		 pop	 edi
  00086	5e		 pop	 esi
  00087	5b		 pop	 ebx
  00088	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008e	3b ec		 cmp	 ebp, esp
  00090	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00095	8b e5		 mov	 esp, ebp
  00097	5d		 pop	 ebp
  00098	c3		 ret	 0
?NotifyOfDocumentsClosedElsewhere@@YAXAAUExampleAppDocuments@@@Z ENDP ; NotifyOfDocumentsClosedElsewhere
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ExampleAppDocuments@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ExampleAppDocuments@@QAE@XZ PROC			; ExampleAppDocuments::~ExampleAppDocuments, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$ImVector@UMyDocument@@@@QAE@XZ ; ImVector<MyDocument>::~ImVector<MyDocument>
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1ExampleAppDocuments@@QAE@XZ ENDP			; ExampleAppDocuments::~ExampleAppDocuments
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ??0ExampleAppDocuments@@QAE@XZ
_TEXT	SEGMENT
$T2 = -548						; size = 16
$T3 = -524						; size = 24
$T4 = -492						; size = 16
$T5 = -468						; size = 24
$T6 = -436						; size = 16
$T7 = -412						; size = 24
$T8 = -380						; size = 16
$T9 = -356						; size = 24
$T10 = -324						; size = 16
$T11 = -300						; size = 24
$T12 = -268						; size = 16
$T13 = -244						; size = 24
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0ExampleAppDocuments@@QAE@XZ PROC			; ExampleAppDocuments::ExampleAppDocuments, COMDAT
; _this$ = ecx

; 4628 :     ExampleAppDocuments()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ExampleAppDocuments@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 1c 02 00
	00		 sub	 esp, 540		; 0000021cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd d8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-552]
  00021	b9 87 00 00 00	 mov	 ecx, 135		; 00000087H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ??0?$ImVector@UMyDocument@@@@QAE@XZ ; ImVector<MyDocument>::ImVector<MyDocument>
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 4629 :     {
; 4630 :         Documents.push_back(MyDocument("Lettuce",             true,  ImVec4(0.4f, 0.8f, 0.4f, 1.0f)));

  0005b	51		 push	 ecx
  0005c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00064	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00069	51		 push	 ecx
  0006a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00072	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00077	51		 push	 ecx
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00080	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00085	51		 push	 ecx
  00086	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00099	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0009e	50		 push	 eax
  0009f	6a 01		 push	 1
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_07KPHKCHJL@Lettuce@
  000a6	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  000ac	e8 00 00 00 00	 call	 ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ; MyDocument::MyDocument
  000b1	50		 push	 eax
  000b2	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 4631 :         Documents.push_back(MyDocument("Eggplant",            true,  ImVec4(0.8f, 0.5f, 1.0f, 1.0f)));

  000ba	51		 push	 ecx
  000bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d6	51		 push	 ecx
  000d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  000df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e4	51		 push	 ecx
  000e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  000ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f2	8d 8d bc fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  000f8	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  000fd	50		 push	 eax
  000fe	6a 01		 push	 1
  00100	68 00 00 00 00	 push	 OFFSET ??_C@_08MEKMCLOD@Eggplant@
  00105	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  0010b	e8 00 00 00 00	 call	 ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ; MyDocument::MyDocument
  00110	50		 push	 eax
  00111	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00114	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 4632 :         Documents.push_back(MyDocument("Carrot",              true,  ImVec4(1.0f, 0.8f, 0.5f, 1.0f)));

  00119	51		 push	 ecx
  0011a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00122	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00127	51		 push	 ecx
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	51		 push	 ecx
  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	51		 push	 ecx
  00144	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00157	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0015c	50		 push	 eax
  0015d	6a 01		 push	 1
  0015f	68 00 00 00 00	 push	 OFFSET ??_C@_06JOCEHIMN@Carrot@
  00164	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0016a	e8 00 00 00 00	 call	 ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ; MyDocument::MyDocument
  0016f	50		 push	 eax
  00170	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00173	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 4633 :         Documents.push_back(MyDocument("Tomato",              false, ImVec4(1.0f, 0.3f, 0.4f, 1.0f)));

  00178	51		 push	 ecx
  00179	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00181	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00186	51		 push	 ecx
  00187	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0018f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00194	51		 push	 ecx
  00195	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0019d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a2	51		 push	 ecx
  001a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b0	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  001b6	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  001bb	50		 push	 eax
  001bc	6a 00		 push	 0
  001be	68 00 00 00 00	 push	 OFFSET ??_C@_06BPAOMENE@Tomato@
  001c3	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  001c9	e8 00 00 00 00	 call	 ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ; MyDocument::MyDocument
  001ce	50		 push	 eax
  001cf	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  001d2	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 4634 :         Documents.push_back(MyDocument("A Rather Long Title", false));

  001d7	51		 push	 ecx
  001d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	51		 push	 ecx
  001e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f3	51		 push	 ecx
  001f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00201	51		 push	 ecx
  00202	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0020a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020f	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00215	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0021a	50		 push	 eax
  0021b	6a 00		 push	 0
  0021d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GMCEAMGE@A?5Rather?5Long?5Title@
  00222	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00228	e8 00 00 00 00	 call	 ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ; MyDocument::MyDocument
  0022d	50		 push	 eax
  0022e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00231	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 4635 :         Documents.push_back(MyDocument("Some Document",       false));

  00236	51		 push	 ecx
  00237	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0023f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00244	51		 push	 ecx
  00245	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0024d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00252	51		 push	 ecx
  00253	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0025b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00260	51		 push	 ecx
  00261	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00269	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026e	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00274	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  00279	50		 push	 eax
  0027a	6a 00		 push	 0
  0027c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ILMKPHFK@Some?5Document@
  00281	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00287	e8 00 00 00 00	 call	 ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ; MyDocument::MyDocument
  0028c	50		 push	 eax
  0028d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00290	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ; ImVector<MyDocument>::push_back

; 4636 :     }

  00295	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0029c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0029f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  002a2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  002a9	59		 pop	 ecx
  002aa	5f		 pop	 edi
  002ab	5e		 pop	 esi
  002ac	5b		 pop	 ebx
  002ad	81 c4 28 02 00
	00		 add	 esp, 552		; 00000228H
  002b3	3b ec		 cmp	 ebp, esp
  002b5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002ba	8b e5		 mov	 esp, ebp
  002bc	5d		 pop	 ebp
  002bd	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ExampleAppDocuments@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$ImVector@UMyDocument@@@@QAE@XZ ; ImVector<MyDocument>::~ImVector<MyDocument>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$??0ExampleAppDocuments@@QAE@XZ:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a d4 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-556]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ExampleAppDocuments@@QAE@XZ
  00028	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ExampleAppDocuments@@QAE@XZ ENDP			; ExampleAppDocuments::ExampleAppDocuments
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z PROC ; ImVector<MyDocument>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UMyDocument@@@@QBEHH@Z ; ImVector<MyDocument>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UMyDocument@@@@QAEXH@Z ; ImVector<MyDocument>::reserve
$LN2@push_back:
  00054	6a 18		 push	 24			; 00000018H
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	6b 11 18	 imul	 edx, DWORD PTR [ecx], 24
  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	03 50 08	 add	 edx, DWORD PTR [eax+8]
  00066	52		 push	 edx
  00067	e8 00 00 00 00	 call	 _memcpy
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00072	8b 08		 mov	 ecx, DWORD PTR [eax]
  00074	83 c1 01	 add	 ecx, 1
  00077	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007a	89 0a		 mov	 DWORD PTR [edx], ecx
  0007c	5f		 pop	 edi
  0007d	5e		 pop	 esi
  0007e	5b		 pop	 ebx
  0007f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00085	3b ec		 cmp	 ebp, esp
  00087	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008c	8b e5		 mov	 esp, ebp
  0008e	5d		 pop	 ebp
  0008f	c2 04 00	 ret	 4
?push_back@?$ImVector@UMyDocument@@@@QAEXABUMyDocument@@@Z ENDP ; ImVector<MyDocument>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UMyDocument@@@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@UMyDocument@@@@QAEXH@Z PROC		; ImVector<MyDocument>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 54		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	6b 45 08 18	 imul	 eax, DWORD PTR _new_capacity$[ebp], 24
  0003e	50		 push	 eax
  0003f	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00044	83 c4 04	 add	 esp, 4
  00047	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00051	74 29		 je	 SHORT $LN3@reserve
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	6b 08 18	 imul	 ecx, DWORD PTR [eax], 24
  00059	51		 push	 ecx
  0005a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005d	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00060	50		 push	 eax
  00061	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00064	51		 push	 ecx
  00065	e8 00 00 00 00	 call	 _memcpy
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00070	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00073	51		 push	 ecx
  00074	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00079	83 c4 04	 add	 esp, 4
$LN3@reserve:
  0007c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007f	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00082	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00085	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00088	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0008b	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c2 04 00	 ret	 4
?reserve@?$ImVector@UMyDocument@@@@QAEXH@Z ENDP		; ImVector<MyDocument>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UMyDocument@@@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@UMyDocument@@@@QBEHH@Z PROC	; ImVector<MyDocument>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@UMyDocument@@@@QBEHH@Z ENDP	; ImVector<MyDocument>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z PROC	; ImVector<MyDocument>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	6b 45 08 18	 imul	 eax, DWORD PTR _i$[ebp], 24
  0005c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005f	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c2 04 00	 ret	 4
??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ENDP	; ImVector<MyDocument>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@UMyDocument@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@UMyDocument@@@@QAE@XZ PROC		; ImVector<MyDocument>::~ImVector<MyDocument>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@UMyDocument@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@UMyDocument@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@UMyDocument@@@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@UMyDocument@@@@QAE@XZ ENDP		; ImVector<MyDocument>::~ImVector<MyDocument>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@UMyDocument@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@UMyDocument@@@@QAE@XZ PROC		; ImVector<MyDocument>::ImVector<MyDocument>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@UMyDocument@@@@QAE@XZ ENDP		; ImVector<MyDocument>::ImVector<MyDocument>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?DisplayContextMenu@MyDocument@@SAXPAU1@@Z
_TEXT	SEGMENT
_buf$ = -264						; size = 256
__$ArrayPad$ = -4					; size = 4
_doc$ = 8						; size = 4
?DisplayContextMenu@MyDocument@@SAXPAU1@@Z PROC		; MyDocument::DisplayContextMenu, COMDAT

; 4610 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 01 00
	00		 sub	 esp, 460		; 000001ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-460]
  00012	b9 73 00 00 00	 mov	 ecx, 115		; 00000073H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4611 :         if (!ImGui::BeginPopupContextItem())

  00032	6a 01		 push	 1
  00034	6a 00		 push	 0
  00036	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopupContextItem
  0003b	83 c4 08	 add	 esp, 8
  0003e	0f b6 c0	 movzx	 eax, al
  00041	85 c0		 test	 eax, eax
  00043	75 02		 jne	 SHORT $LN2@DisplayCon

; 4612 :             return;

  00045	eb 77		 jmp	 SHORT $LN1@DisplayCon
$LN2@DisplayCon:

; 4613 : 
; 4614 :         char buf[256];
; 4615 :         sprintf(buf, "Save %s", doc->Name);

  00047	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  0004a	8b 08		 mov	 ecx, DWORD PTR [eax]
  0004c	51		 push	 ecx
  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_07HKLKIEAD@Save?5?$CFs@
  00052	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00058	52		 push	 edx
  00059	e8 00 00 00 00	 call	 _sprintf
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4616 :         if (ImGui::MenuItem(buf, "CTRL+S", false, doc->Open))

  00061	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00064	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00068	51		 push	 ecx
  00069	6a 00		 push	 0
  0006b	68 00 00 00 00	 push	 OFFSET ??_C@_06LGPANJDM@CTRL?$CLS@
  00070	8d 95 f8 fe ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00076	52		 push	 edx
  00077	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0007c	83 c4 10	 add	 esp, 16			; 00000010H
  0007f	0f b6 c0	 movzx	 eax, al
  00082	85 c0		 test	 eax, eax
  00084	74 08		 je	 SHORT $LN3@DisplayCon

; 4617 :             doc->DoSave();

  00086	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00089	e8 00 00 00 00	 call	 ?DoSave@MyDocument@@QAEXXZ ; MyDocument::DoSave
$LN3@DisplayCon:

; 4618 :         if (ImGui::MenuItem("Close", "CTRL+W", false, doc->Open))

  0008e	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00091	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00095	51		 push	 ecx
  00096	6a 00		 push	 0
  00098	68 00 00 00 00	 push	 OFFSET ??_C@_06NCJMBMDI@CTRL?$CLW@
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  000a2	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000a7	83 c4 10	 add	 esp, 16			; 00000010H
  000aa	0f b6 d0	 movzx	 edx, al
  000ad	85 d2		 test	 edx, edx
  000af	74 08		 je	 SHORT $LN4@DisplayCon

; 4619 :             doc->DoQueueClose();

  000b1	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  000b4	e8 00 00 00 00	 call	 ?DoQueueClose@MyDocument@@QAEXXZ ; MyDocument::DoQueueClose
$LN4@DisplayCon:

; 4620 :         ImGui::EndPopup();

  000b9	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN1@DisplayCon:

; 4621 :     }

  000be	52		 push	 edx
  000bf	8b cd		 mov	 ecx, ebp
  000c1	50		 push	 eax
  000c2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN8@DisplayCon
  000c8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cd	58		 pop	 eax
  000ce	5a		 pop	 edx
  000cf	5f		 pop	 edi
  000d0	5e		 pop	 esi
  000d1	5b		 pop	 ebx
  000d2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d5	33 cd		 xor	 ecx, ebp
  000d7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000dc	81 c4 cc 01 00
	00		 add	 esp, 460		; 000001ccH
  000e2	3b ec		 cmp	 ebp, esp
  000e4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000e9	8b e5		 mov	 esp, ebp
  000eb	5d		 pop	 ebp
  000ec	c3		 ret	 0
  000ed	0f 1f 00	 npad	 3
$LN8@DisplayCon:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN7@DisplayCon
$LN7@DisplayCon:
  000f8	f8 fe ff ff	 DD	 -264			; fffffef8H
  000fc	00 01 00 00	 DD	 256			; 00000100H
  00100	00 00 00 00	 DD	 $LN6@DisplayCon
$LN6@DisplayCon:
  00104	62		 DB	 98			; 00000062H
  00105	75		 DB	 117			; 00000075H
  00106	66		 DB	 102			; 00000066H
  00107	00		 DB	 0
?DisplayContextMenu@MyDocument@@SAXPAU1@@Z ENDP		; MyDocument::DisplayContextMenu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?DisplayContents@MyDocument@@SAXPAU1@@Z
_TEXT	SEGMENT
$T1 = -220						; size = 8
$T2 = -204						; size = 8
_doc$ = 8						; size = 4
?DisplayContents@MyDocument@@SAXPAU1@@Z PROC		; MyDocument::DisplayContents, COMDAT

; 4593 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e0 00 00
	00		 sub	 esp, 224		; 000000e0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 20 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-224]
  00012	b9 38 00 00 00	 mov	 ecx, 56			; 00000038H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4594 :         ImGui::PushID(doc);

  00028	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBX@Z	; ImGui::PushID
  00031	83 c4 04	 add	 esp, 4

; 4595 :         ImGui::Text("Document \"%s\"", doc->Name);

  00034	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00037	8b 08		 mov	 ecx, DWORD PTR [eax]
  00039	51		 push	 ecx
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LKIEAKBN@Document?5?$CC?$CFs?$CC@
  0003f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00044	83 c4 08	 add	 esp, 8

; 4596 :         ImGui::PushStyleColor(ImGuiCol_Text, doc->Color);

  00047	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  0004a	83 c0 08	 add	 eax, 8
  0004d	50		 push	 eax
  0004e	6a 00		 push	 0
  00050	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  00055	83 c4 08	 add	 esp, 8

; 4597 :         ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.");

  00058	68 00 00 00 00	 push	 OFFSET ??_C@_0HM@PALHCHMO@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@
  0005d	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00062	83 c4 04	 add	 esp, 4

; 4598 :         ImGui::PopStyleColor();

  00065	6a 01		 push	 1
  00067	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
  0006c	83 c4 04	 add	 esp, 4

; 4599 :         if (ImGui::Button("Modify", ImVec2(100, 0)))

  0006f	51		 push	 ecx
  00070	0f 57 c0	 xorps	 xmm0, xmm0
  00073	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00078	51		 push	 ecx
  00079	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00081	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00086	8d 8d 34 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0008c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_06CGNGJFJO@Modify@
  00097	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0009c	83 c4 08	 add	 esp, 8
  0009f	0f b6 c0	 movzx	 eax, al
  000a2	85 c0		 test	 eax, eax
  000a4	74 07		 je	 SHORT $LN2@DisplayCon

; 4600 :             doc->Dirty = true;

  000a6	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  000a9	c6 40 06 01	 mov	 BYTE PTR [eax+6], 1
$LN2@DisplayCon:

; 4601 :         ImGui::SameLine();

  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	51		 push	 ecx
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  000c9	83 c4 08	 add	 esp, 8

; 4602 :         if (ImGui::Button("Save", ImVec2(100, 0)))

  000cc	51		 push	 ecx
  000cd	0f 57 c0	 xorps	 xmm0, xmm0
  000d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d5	51		 push	 ecx
  000d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	8d 8d 24 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000e9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000ee	50		 push	 eax
  000ef	68 00 00 00 00	 push	 OFFSET ??_C@_04INACKGJP@Save@
  000f4	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  000f9	83 c4 08	 add	 esp, 8
  000fc	0f b6 c0	 movzx	 eax, al
  000ff	85 c0		 test	 eax, eax
  00101	74 08		 je	 SHORT $LN3@DisplayCon

; 4603 :             doc->DoSave();

  00103	8b 4d 08	 mov	 ecx, DWORD PTR _doc$[ebp]
  00106	e8 00 00 00 00	 call	 ?DoSave@MyDocument@@QAEXXZ ; MyDocument::DoSave
$LN3@DisplayCon:

; 4604 :         ImGui::ColorEdit3("color", &doc->Color.x);  // Useful to test drag and drop and hold-dragged-to-open-tab behavior.

  0010b	6a 00		 push	 0
  0010d	8b 45 08	 mov	 eax, DWORD PTR _doc$[ebp]
  00110	83 c0 08	 add	 eax, 8
  00113	50		 push	 eax
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_05PEENBMOG@color@
  00119	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit3
  0011e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4605 :         ImGui::PopID();

  00121	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4606 :     }

  00126	5f		 pop	 edi
  00127	5e		 pop	 esi
  00128	5b		 pop	 ebx
  00129	81 c4 e0 00 00
	00		 add	 esp, 224		; 000000e0H
  0012f	3b ec		 cmp	 ebp, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	8b e5		 mov	 esp, ebp
  00138	5d		 pop	 ebp
  00139	c3		 ret	 0
?DisplayContents@MyDocument@@SAXPAU1@@Z ENDP		; MyDocument::DisplayContents
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?DoSave@MyDocument@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DoSave@MyDocument@@QAEXXZ PROC				; MyDocument::DoSave, COMDAT
; _this$ = ecx

; 4589 :     void DoSave()       { Dirty = false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c6 40 06 00	 mov	 BYTE PTR [eax+6], 0
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?DoSave@MyDocument@@QAEXXZ ENDP				; MyDocument::DoSave
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?DoForceClose@MyDocument@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DoForceClose@MyDocument@@QAEXXZ PROC			; MyDocument::DoForceClose, COMDAT
; _this$ = ecx

; 4588 :     void DoForceClose() { Open = false; Dirty = false; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c6 40 04 00	 mov	 BYTE PTR [eax+4], 0
  00034	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00037	c6 40 06 00	 mov	 BYTE PTR [eax+6], 0
  0003b	5f		 pop	 edi
  0003c	5e		 pop	 esi
  0003d	5b		 pop	 ebx
  0003e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00044	3b ec		 cmp	 ebp, esp
  00046	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004b	8b e5		 mov	 esp, ebp
  0004d	5d		 pop	 ebp
  0004e	c3		 ret	 0
?DoForceClose@MyDocument@@QAEXXZ ENDP			; MyDocument::DoForceClose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?DoQueueClose@MyDocument@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DoQueueClose@MyDocument@@QAEXXZ PROC			; MyDocument::DoQueueClose, COMDAT
; _this$ = ecx

; 4587 :     void DoQueueClose() { WantClose = true; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c6 40 07 01	 mov	 BYTE PTR [eax+7], 1
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?DoQueueClose@MyDocument@@QAEXXZ ENDP			; MyDocument::DoQueueClose
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?DoOpen@MyDocument@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?DoOpen@MyDocument@@QAEXXZ PROC				; MyDocument::DoOpen, COMDAT
; _this$ = ecx

; 4586 :     void DoOpen()       { Open = true; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1
  00034	5f		 pop	 edi
  00035	5e		 pop	 esi
  00036	5b		 pop	 ebx
  00037	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003d	3b ec		 cmp	 ebp, esp
  0003f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00044	8b e5		 mov	 esp, ebp
  00046	5d		 pop	 ebp
  00047	c3		 ret	 0
?DoOpen@MyDocument@@QAEXXZ ENDP				; MyDocument::DoOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ??0MyDocument@@QAE@PBD_NABUImVec4@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_name$ = 8						; size = 4
_open$ = 12						; size = 1
_color$ = 16						; size = 4
??0MyDocument@@QAE@PBD_NABUImVec4@@@Z PROC		; MyDocument::MyDocument, COMDAT
; _this$ = ecx

; 4578 :     MyDocument(const char* name, bool open = true, const ImVec4& color = ImVec4(1.0f,1.0f,1.0f,1.0f))

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	83 c1 08	 add	 ecx, 8
  00033	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@XZ	; ImVec4::ImVec4

; 4579 :     {
; 4580 :         Name = name;

  00038	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003b	8b 4d 08	 mov	 ecx, DWORD PTR _name$[ebp]
  0003e	89 08		 mov	 DWORD PTR [eax], ecx

; 4581 :         Open = OpenPrev = open;

  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	8a 4d 0c	 mov	 cl, BYTE PTR _open$[ebp]
  00046	88 48 05	 mov	 BYTE PTR [eax+5], cl
  00049	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0004c	8a 45 0c	 mov	 al, BYTE PTR _open$[ebp]
  0004f	88 42 04	 mov	 BYTE PTR [edx+4], al

; 4582 :         Dirty = false;

  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	c6 40 06 00	 mov	 BYTE PTR [eax+6], 0

; 4583 :         WantClose = false;

  00059	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005c	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0

; 4584 :         Color = color;

  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	83 c0 08	 add	 eax, 8
  00066	8b 4d 10	 mov	 ecx, DWORD PTR _color$[ebp]
  00069	8b 11		 mov	 edx, DWORD PTR [ecx]
  0006b	89 10		 mov	 DWORD PTR [eax], edx
  0006d	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  00070	89 50 04	 mov	 DWORD PTR [eax+4], edx
  00073	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00076	89 50 08	 mov	 DWORD PTR [eax+8], edx
  00079	8b 49 0c	 mov	 ecx, DWORD PTR [ecx+12]
  0007c	89 48 0c	 mov	 DWORD PTR [eax+12], ecx

; 4585 :     }

  0007f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00082	5f		 pop	 edi
  00083	5e		 pop	 esi
  00084	5b		 pop	 ebx
  00085	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008b	3b ec		 cmp	 ebp, esp
  0008d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00092	8b e5		 mov	 esp, ebp
  00094	5d		 pop	 ebp
  00095	c2 0c 00	 ret	 12			; 0000000cH
??0MyDocument@@QAE@PBD_NABUImVec4@@@Z ENDP		; MyDocument::MyDocument
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fpoints@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fpoints@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@YAXXZ PROC ; `ShowExampleAppCustomRendering'::`16'::`dynamic atexit destructor for 'points'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  00023	e8 00 00 00 00	 call	 ??1?$ImVector@UImVec2@@@@QAE@XZ ; ImVector<ImVec2>::~ImVector<ImVec2>
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Fpoints@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@YAXXZ ENDP ; `ShowExampleAppCustomRendering'::`16'::`dynamic atexit destructor for 'points''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z
_TEXT	SEGMENT
$T1 = -216						; size = 8
_step$ = -8						; size = 4
_data$ = 8						; size = 4
?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z PROC ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Step, COMDAT

; 4306 :         static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)data->UserData; data->DesiredSize = ImVec2((int)(data->DesiredSize.x / step + 0.5f) * step, (int)(data->DesiredSize.y / step + 0.5f) * step); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00012	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0002b	f3 0f 2a 00	 cvtsi2ss xmm0, DWORD PTR [eax]
  0002f	f3 0f 11 45 f8	 movss	 DWORD PTR _step$[ebp], xmm0
  00034	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00037	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  0003c	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _step$[ebp]
  00041	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00049	f3 0f 2c c8	 cvttss2si ecx, xmm0
  0004d	f3 0f 2a c1	 cvtsi2ss xmm0, ecx
  00051	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _step$[ebp]
  00056	51		 push	 ecx
  00057	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005c	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0005f	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  00064	f3 0f 5e 45 f8	 divss	 xmm0, DWORD PTR _step$[ebp]
  00069	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f000000
  00071	f3 0f 2c c0	 cvttss2si eax, xmm0
  00075	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  00079	f3 0f 59 45 f8	 mulss	 xmm0, DWORD PTR _step$[ebp]
  0007e	51		 push	 ecx
  0007f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00084	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0008a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0008f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00091	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00094	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00097	89 48 14	 mov	 DWORD PTR [eax+20], ecx
  0009a	89 50 18	 mov	 DWORD PTR [eax+24], edx
  0009d	5f		 pop	 edi
  0009e	5e		 pop	 esi
  0009f	5b		 pop	 ebx
  000a0	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  000a6	3b ec		 cmp	 ebp, esp
  000a8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ad	8b e5		 mov	 esp, ebp
  000af	5d		 pop	 ebp
  000b0	c3		 ret	 0
?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z ENDP ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Step
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z
_TEXT	SEGMENT
tv77 = -196						; size = 4
_data$ = 8						; size = 4
?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z PROC ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Square, COMDAT

; 4305 :         static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize.x = data->DesiredSize.y = (data->DesiredSize.x > data->DesiredSize.y ? data->DesiredSize.x : data->DesiredSize.y); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0002b	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  0002e	f3 0f 10 40 14	 movss	 xmm0, DWORD PTR [eax+20]
  00033	0f 2f 41 18	 comiss	 xmm0, DWORD PTR [ecx+24]
  00037	76 12		 jbe	 SHORT $LN3@Square
  00039	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0003c	f3 0f 10 42 14	 movss	 xmm0, DWORD PTR [edx+20]
  00041	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv77[ebp], xmm0
  00049	eb 10		 jmp	 SHORT $LN4@Square
$LN3@Square:
  0004b	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0004e	f3 0f 10 40 18	 movss	 xmm0, DWORD PTR [eax+24]
  00053	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv77[ebp], xmm0
$LN4@Square:
  0005b	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  0005e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv77[ebp]
  00066	f3 0f 11 41 18	 movss	 DWORD PTR [ecx+24], xmm0
  0006b	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  0006e	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv77[ebp]
  00076	f3 0f 11 42 14	 movss	 DWORD PTR [edx+20], xmm0
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c3		 ret	 0
?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z ENDP ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Square
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Flog@?1??ShowExampleAppLongText@@YAXPA_N@Z@YAXXZ
text$yd	SEGMENT
??__Flog@?1??ShowExampleAppLongText@@YAXPA_N@Z@YAXXZ PROC ; `ShowExampleAppLongText'::`2'::`dynamic atexit destructor for 'log'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  00023	e8 00 00 00 00	 call	 ??1ImGuiTextBuffer@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Flog@?1??ShowExampleAppLongText@@YAXPA_N@Z@YAXXZ ENDP ; `ShowExampleAppLongText'::`2'::`dynamic atexit destructor for 'log''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_node_open$ = -5					; size = 1
_prefix$ = 8						; size = 4
_uid$ = 12						; size = 4
?ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z PROC ; `ShowExampleAppPropertyEditor'::`2'::funcs::ShowDummyObject, COMDAT

; 4168 :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4169 :             ImGui::PushID(uid);                      // Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.

  00028	8b 45 0c	 mov	 eax, DWORD PTR _uid$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  00031	83 c4 04	 add	 esp, 4

; 4170 :             ImGui::AlignTextToFramePadding();  // Text and Tree nodes are less high than regular widgets, here we add vertical spacing to make the tree lines equal high.

  00034	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 4171 :             bool node_open = ImGui::TreeNode("Object", "%s_%u", prefix, uid);

  00039	8b 45 0c	 mov	 eax, DWORD PTR _uid$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 08	 mov	 ecx, DWORD PTR _prefix$[ebp]
  00040	51		 push	 ecx
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_05FIIOEGIK@?$CFs_?$CFu@
  00046	68 00 00 00 00	 push	 OFFSET ??_C@_06ELFECKBG@Object@
  0004b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD0ZZ ; ImGui::TreeNode
  00050	83 c4 10	 add	 esp, 16			; 00000010H
  00053	88 45 fb	 mov	 BYTE PTR _node_open$[ebp], al

; 4172 :             ImGui::NextColumn();

  00056	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 4173 :             ImGui::AlignTextToFramePadding();

  0005b	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 4174 :             ImGui::Text("my sailor is rich");

  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LIBEHHHH@my?5sailor?5is?5rich@
  00065	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0006a	83 c4 04	 add	 esp, 4

; 4175 :             ImGui::NextColumn();

  0006d	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 4176 :             if (node_open)

  00072	0f b6 45 fb	 movzx	 eax, BYTE PTR _node_open$[ebp]
  00076	85 c0		 test	 eax, eax
  00078	0f 84 1d 01 00
	00		 je	 $LN5@ShowDummyO

; 4177 :             {
; 4178 :                 static float dummy_members[8] = { 0.0f,0.0f,1.0f,3.1416f,100.0f,999.0f };
; 4179 :                 for (int i = 0; i < 8; i++)

  0007e	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00085	eb 09		 jmp	 SHORT $LN4@ShowDummyO
$LN2@ShowDummyO:
  00087	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0008a	83 c0 01	 add	 eax, 1
  0008d	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@ShowDummyO:
  00090	83 7d ec 08	 cmp	 DWORD PTR _i$1[ebp], 8
  00094	0f 8d fc 00 00
	00		 jge	 $LN3@ShowDummyO

; 4180 :                 {
; 4181 :                     ImGui::PushID(i); // Use field index as identifier.

  0009a	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  0009d	50		 push	 eax
  0009e	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  000a3	83 c4 04	 add	 esp, 4

; 4182 :                     if (i < 2)

  000a6	83 7d ec 02	 cmp	 DWORD PTR _i$1[ebp], 2
  000aa	7d 17		 jge	 SHORT $LN6@ShowDummyO

; 4183 :                     {
; 4184 :                         ShowDummyObject("Child", 424242);

  000ac	68 32 79 06 00	 push	 424242			; 00067932H
  000b1	68 00 00 00 00	 push	 OFFSET ??_C@_05GIMBDOHM@Child@
  000b6	e8 00 00 00 00	 call	 ?ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z ; `ShowExampleAppPropertyEditor'::`2'::funcs::ShowDummyObject
  000bb	83 c4 08	 add	 esp, 8

; 4185 :                     }

  000be	e9 c9 00 00 00	 jmp	 $LN7@ShowDummyO
$LN6@ShowDummyO:

; 4186 :                     else
; 4187 :                     {
; 4188 :                         // Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)
; 4189 :                         ImGui::AlignTextToFramePadding();

  000c3	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 4190 :                         ImGui::TreeNodeEx("Field", ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_Bullet, "Field_%d", i);

  000c8	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  000cb	50		 push	 eax
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_08BNKJGCPO@Field_?$CFd@
  000d1	68 08 03 00 00	 push	 776			; 00000308H
  000d6	68 00 00 00 00	 push	 OFFSET ??_C@_05EPLKDJMH@Field@
  000db	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPBDH0ZZ ; ImGui::TreeNodeEx
  000e0	83 c4 10	 add	 esp, 16			; 00000010H

; 4191 :                         ImGui::NextColumn();

  000e3	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 4192 :                         ImGui::SetNextItemWidth(-1);

  000e8	51		 push	 ecx
  000e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f6	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  000fb	83 c4 04	 add	 esp, 4

; 4193 :                         if (i >= 5)

  000fe	83 7d ec 05	 cmp	 DWORD PTR _i$1[ebp], 5
  00102	7c 38		 jl	 SHORT $LN8@ShowDummyO

; 4194 :                             ImGui::InputFloat("##value", &dummy_members[i], 1.0f);

  00104	6a 00		 push	 0
  00106	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  0010b	51		 push	 ecx
  0010c	0f 57 c0	 xorps	 xmm0, xmm0
  0010f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00114	51		 push	 ecx
  00115	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00122	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00125	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?dummy_members@?4??ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z@4PAMA[eax*4]
  0012c	51		 push	 ecx
  0012d	68 00 00 00 00	 push	 OFFSET ??_C@_07FBBIKLOB@?$CD?$CDvalue@
  00132	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  00137	83 c4 18	 add	 esp, 24			; 00000018H
  0013a	eb 4b		 jmp	 SHORT $LN9@ShowDummyO
$LN8@ShowDummyO:

; 4195 :                         else
; 4196 :                             ImGui::DragFloat("##value", &dummy_members[i], 0.01f);

  0013c	51		 push	 ecx
  0013d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00145	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014a	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  0014f	51		 push	 ecx
  00150	0f 57 c0	 xorps	 xmm0, xmm0
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	51		 push	 ecx
  00159	0f 57 c0	 xorps	 xmm0, xmm0
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	51		 push	 ecx
  00162	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0016a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016f	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00172	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?dummy_members@?4??ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z@4PAMA[eax*4]
  00179	51		 push	 ecx
  0017a	68 00 00 00 00	 push	 OFFSET ??_C@_07FBBIKLOB@?$CD?$CDvalue@
  0017f	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00184	83 c4 1c	 add	 esp, 28			; 0000001cH
$LN9@ShowDummyO:

; 4197 :                         ImGui::NextColumn();

  00187	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn
$LN7@ShowDummyO:

; 4198 :                     }
; 4199 :                     ImGui::PopID();

  0018c	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4200 :                 }

  00191	e9 f1 fe ff ff	 jmp	 $LN2@ShowDummyO
$LN3@ShowDummyO:

; 4201 :                 ImGui::TreePop();

  00196	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN5@ShowDummyO:

; 4202 :             }
; 4203 :             ImGui::PopID();

  0019b	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4204 :         }

  001a0	5f		 pop	 edi
  001a1	5e		 pop	 esi
  001a2	5b		 pop	 ebx
  001a3	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  001a9	3b ec		 cmp	 ebp, esp
  001ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001b0	8b e5		 mov	 esp, ebp
  001b2	5d		 pop	 ebp
  001b3	c3		 ret	 0
?ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z ENDP ; `ShowExampleAppPropertyEditor'::`2'::funcs::ShowDummyObject
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Flog@?1??ShowExampleAppLog@@YAXPA_N@Z@YAXXZ
text$yd	SEGMENT
??__Flog@?1??ShowExampleAppLog@@YAXPA_N@Z@YAXXZ PROC	; `ShowExampleAppLog'::`2'::`dynamic atexit destructor for 'log'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLog@@YAXPA_N@Z@4UExampleAppLog@@A
  00023	e8 00 00 00 00	 call	 ??1ExampleAppLog@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Flog@?1??ShowExampleAppLog@@YAXPA_N@Z@YAXXZ ENDP	; `ShowExampleAppLog'::`2'::`dynamic atexit destructor for 'log''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ExampleAppLog@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ExampleAppLog@@QAE@XZ PROC				; ExampleAppLog::~ExampleAppLog, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  0002c	e8 00 00 00 00	 call	 ??1?$ImVector@H@@QAE@XZ	; ImVector<int>::~ImVector<int>
  00031	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00034	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00037	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QAE@XZ
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ??1ImGuiTextBuffer@@QAE@XZ
  00044	5f		 pop	 edi
  00045	5e		 pop	 esi
  00046	5b		 pop	 ebx
  00047	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0004d	3b ec		 cmp	 ebp, esp
  0004f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00054	8b e5		 mov	 esp, ebp
  00056	5d		 pop	 ebp
  00057	c3		 ret	 0
??1ExampleAppLog@@QAE@XZ ENDP				; ExampleAppLog::~ExampleAppLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Draw@ExampleAppLog@@QAEXPBDPA_N@Z
_TEXT	SEGMENT
tv360 = -464						; size = 4
tv365 = -460						; size = 4
tv356 = -456						; size = 4
tv237 = -456						; size = 4
tv195 = -456						; size = 4
$T2 = -448						; size = 8
$T3 = -432						; size = 8
$T4 = -416						; size = 8
$T5 = -400						; size = 8
$T6 = -384						; size = 8
_line_end$7 = -176					; size = 4
_line_start$8 = -164					; size = 4
_line_no$9 = -152					; size = 4
_clipper$10 = -140					; size = 24
_line_end$11 = -108					; size = 4
_line_start$12 = -96					; size = 4
_line_no$13 = -84					; size = 4
_buf_end$ = -72						; size = 4
_buf$ = -60						; size = 4
_copy$ = -45						; size = 1
_clear$ = -33						; size = 1
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_title$ = 8						; size = 4
_p_open$ = 12						; size = 4
?Draw@ExampleAppLog@@QAEXPBDPA_N@Z PROC			; ExampleAppLog::Draw, COMDAT
; _this$ = ecx

; 3973 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c4 01 00
	00		 sub	 esp, 452		; 000001c4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 30 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-464]
  00021	b9 71 00 00 00	 mov	 ecx, 113		; 00000071H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3974 :         if (!ImGui::Begin(title, p_open))

  0004f	6a 00		 push	 0
  00051	8b 45 0c	 mov	 eax, DWORD PTR _p_open$[ebp]
  00054	50		 push	 eax
  00055	8b 4d 08	 mov	 ecx, DWORD PTR _title$[ebp]
  00058	51		 push	 ecx
  00059	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  0005e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00061	0f b6 d0	 movzx	 edx, al
  00064	85 d2		 test	 edx, edx
  00066	75 0a		 jne	 SHORT $LN10@Draw

; 3975 :         {
; 3976 :             ImGui::End();

  00068	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 3977 :             return;

  0006d	e9 51 04 00 00	 jmp	 $LN1@Draw
$LN10@Draw:

; 3978 :         }
; 3979 : 
; 3980 :         // Options menu
; 3981 :         if (ImGui::BeginPopup("Options"))

  00072	6a 00		 push	 0
  00074	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  00079	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  0007e	83 c4 08	 add	 esp, 8
  00081	0f b6 c0	 movzx	 eax, al
  00084	85 c0		 test	 eax, eax
  00086	74 1b		 je	 SHORT $LN11@Draw

; 3982 :         {
; 3983 :             ImGui::Checkbox("Auto-scroll", &AutoScroll);

  00088	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0008b	05 28 01 00 00	 add	 eax, 296		; 00000128H
  00090	50		 push	 eax
  00091	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IFKANFPJ@Auto?9scroll@
  00096	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0009b	83 c4 08	 add	 esp, 8

; 3984 :             ImGui::EndPopup();

  0009e	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN11@Draw:

; 3985 :         }
; 3986 : 
; 3987 :         // Main window
; 3988 :         if (ImGui::Button("Options"))

  000a3	51		 push	 ecx
  000a4	0f 57 c0	 xorps	 xmm0, xmm0
  000a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ac	51		 push	 ecx
  000ad	0f 57 c0	 xorps	 xmm0, xmm0
  000b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b5	8d 8d 80 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  000bb	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000c0	50		 push	 eax
  000c1	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  000c6	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  000cb	83 c4 08	 add	 esp, 8
  000ce	0f b6 c0	 movzx	 eax, al
  000d1	85 c0		 test	 eax, eax
  000d3	74 0d		 je	 SHORT $LN12@Draw

; 3989 :             ImGui::OpenPopup("Options");

  000d5	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  000da	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  000df	83 c4 04	 add	 esp, 4
$LN12@Draw:

; 3990 :         ImGui::SameLine();

  000e2	51		 push	 ecx
  000e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f0	51		 push	 ecx
  000f1	0f 57 c0	 xorps	 xmm0, xmm0
  000f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  000fe	83 c4 08	 add	 esp, 8

; 3991 :         bool clear = ImGui::Button("Clear");

  00101	51		 push	 ecx
  00102	0f 57 c0	 xorps	 xmm0, xmm0
  00105	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010a	51		 push	 ecx
  0010b	0f 57 c0	 xorps	 xmm0, xmm0
  0010e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00113	8d 8d 70 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00119	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0011e	50		 push	 eax
  0011f	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNHABIA@Clear@
  00124	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00129	83 c4 08	 add	 esp, 8
  0012c	88 45 df	 mov	 BYTE PTR _clear$[ebp], al

; 3992 :         ImGui::SameLine();

  0012f	51		 push	 ecx
  00130	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00138	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013d	51		 push	 ecx
  0013e	0f 57 c0	 xorps	 xmm0, xmm0
  00141	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00146	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0014b	83 c4 08	 add	 esp, 8

; 3993 :         bool copy = ImGui::Button("Copy");

  0014e	51		 push	 ecx
  0014f	0f 57 c0	 xorps	 xmm0, xmm0
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	0f 57 c0	 xorps	 xmm0, xmm0
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	8d 8d 60 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00166	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0016b	50		 push	 eax
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_04OPMHGHMB@Copy@
  00171	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00176	83 c4 08	 add	 esp, 8
  00179	88 45 d3	 mov	 BYTE PTR _copy$[ebp], al

; 3994 :         ImGui::SameLine();

  0017c	51		 push	 ecx
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	51		 push	 ecx
  0018b	0f 57 c0	 xorps	 xmm0, xmm0
  0018e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00193	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00198	83 c4 08	 add	 esp, 8

; 3995 :         Filter.Draw("Filter", -100.0f);

  0019b	51		 push	 ecx
  0019c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2c80000
  001a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a9	68 00 00 00 00	 push	 OFFSET ??_C@_06IBDJIBGI@Filter@
  001ae	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b1	83 c1 0c	 add	 ecx, 12			; 0000000cH
  001b4	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QAE_NPBDM@Z ; ImGuiTextFilter::Draw

; 3996 : 
; 3997 :         ImGui::Separator();

  001b9	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3998 :         ImGui::BeginChild("scrolling", ImVec2(0,0), false, ImGuiWindowFlags_HorizontalScrollbar);

  001be	68 00 08 00 00	 push	 2048			; 00000800H
  001c3	6a 00		 push	 0
  001c5	51		 push	 ecx
  001c6	0f 57 c0	 xorps	 xmm0, xmm0
  001c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ce	51		 push	 ecx
  001cf	0f 57 c0	 xorps	 xmm0, xmm0
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	8d 8d 50 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001dd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001e2	50		 push	 eax
  001e3	68 00 00 00 00	 push	 OFFSET ??_C@_09PKEBEIDM@scrolling@
  001e8	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  001ed	83 c4 10	 add	 esp, 16			; 00000010H

; 3999 : 
; 4000 :         if (clear)

  001f0	0f b6 45 df	 movzx	 eax, BYTE PTR _clear$[ebp]
  001f4	85 c0		 test	 eax, eax
  001f6	74 08		 je	 SHORT $LN13@Draw

; 4001 :             Clear();

  001f8	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  001fb	e8 00 00 00 00	 call	 ?Clear@ExampleAppLog@@QAEXXZ ; ExampleAppLog::Clear
$LN13@Draw:

; 4002 :         if (copy)

  00200	0f b6 45 d3	 movzx	 eax, BYTE PTR _copy$[ebp]
  00204	85 c0		 test	 eax, eax
  00206	74 0a		 je	 SHORT $LN14@Draw

; 4003 :             ImGui::LogToClipboard();

  00208	6a ff		 push	 -1
  0020a	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
  0020f	83 c4 04	 add	 esp, 4
$LN14@Draw:

; 4004 : 
; 4005 :         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0, 0));

  00212	51		 push	 ecx
  00213	0f 57 c0	 xorps	 xmm0, xmm0
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	51		 push	 ecx
  0021c	0f 57 c0	 xorps	 xmm0, xmm0
  0021f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00224	8d 8d 40 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0022a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0022f	50		 push	 eax
  00230	6a 0d		 push	 13			; 0000000dH
  00232	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  00237	83 c4 08	 add	 esp, 8

; 4006 :         const char* buf = Buf.begin();

  0023a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023d	e8 00 00 00 00	 call	 ?begin@ImGuiTextBuffer@@QBEPBDXZ ; ImGuiTextBuffer::begin
  00242	89 45 c4	 mov	 DWORD PTR _buf$[ebp], eax

; 4007 :         const char* buf_end = Buf.end();

  00245	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00248	e8 00 00 00 00	 call	 ?end@ImGuiTextBuffer@@QBEPBDXZ ; ImGuiTextBuffer::end
  0024d	89 45 b8	 mov	 DWORD PTR _buf_end$[ebp], eax

; 4008 :         if (Filter.IsActive())

  00250	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00253	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00256	e8 00 00 00 00	 call	 ?IsActive@ImGuiTextFilter@@QBE_NXZ ; ImGuiTextFilter::IsActive
  0025b	0f b6 c0	 movzx	 eax, al
  0025e	85 c0		 test	 eax, eax
  00260	0f 84 bb 00 00
	00		 je	 $LN15@Draw

; 4009 :         {
; 4010 :             // In this example we don't use the clipper when Filter is enabled.
; 4011 :             // This is because we don't have a random access on the result on our filter.
; 4012 :             // A real application processing logs with ten of thousands of entries may want to store the result of search/filter.
; 4013 :             // especially if the filtering function is not trivial (e.g. reg-exp).
; 4014 :             for (int line_no = 0; line_no < LineOffsets.Size; line_no++)

  00266	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _line_no$13[ebp], 0
  0026d	eb 09		 jmp	 SHORT $LN4@Draw
$LN2@Draw:
  0026f	8b 45 ac	 mov	 eax, DWORD PTR _line_no$13[ebp]
  00272	83 c0 01	 add	 eax, 1
  00275	89 45 ac	 mov	 DWORD PTR _line_no$13[ebp], eax
$LN4@Draw:
  00278	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0027b	8b 4d ac	 mov	 ecx, DWORD PTR _line_no$13[ebp]
  0027e	3b 88 1c 01 00
	00		 cmp	 ecx, DWORD PTR [eax+284]
  00284	0f 8d 92 00 00
	00		 jge	 $LN3@Draw

; 4015 :             {
; 4016 :                 const char* line_start = buf + LineOffsets[line_no];

  0028a	8b 45 ac	 mov	 eax, DWORD PTR _line_no$13[ebp]
  0028d	50		 push	 eax
  0028e	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00291	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  00297	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QAEAAHH@Z ; ImVector<int>::operator[]
  0029c	8b 4d c4	 mov	 ecx, DWORD PTR _buf$[ebp]
  0029f	03 08		 add	 ecx, DWORD PTR [eax]
  002a1	89 4d a0	 mov	 DWORD PTR _line_start$12[ebp], ecx

; 4017 :                 const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;

  002a4	8b 45 ac	 mov	 eax, DWORD PTR _line_no$13[ebp]
  002a7	83 c0 01	 add	 eax, 1
  002aa	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002ad	3b 81 1c 01 00
	00		 cmp	 eax, DWORD PTR [ecx+284]
  002b3	7d 26		 jge	 SHORT $LN20@Draw
  002b5	8b 55 ac	 mov	 edx, DWORD PTR _line_no$13[ebp]
  002b8	83 c2 01	 add	 edx, 1
  002bb	52		 push	 edx
  002bc	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002bf	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  002c5	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QAEAAHH@Z ; ImVector<int>::operator[]
  002ca	8b 00		 mov	 eax, DWORD PTR [eax]
  002cc	8b 4d c4	 mov	 ecx, DWORD PTR _buf$[ebp]
  002cf	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  002d3	89 95 38 fe ff
	ff		 mov	 DWORD PTR tv195[ebp], edx
  002d9	eb 09		 jmp	 SHORT $LN21@Draw
$LN20@Draw:
  002db	8b 45 b8	 mov	 eax, DWORD PTR _buf_end$[ebp]
  002de	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv195[ebp], eax
$LN21@Draw:
  002e4	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv195[ebp]
  002ea	89 4d 94	 mov	 DWORD PTR _line_end$11[ebp], ecx

; 4018 :                 if (Filter.PassFilter(line_start, line_end))

  002ed	8b 45 94	 mov	 eax, DWORD PTR _line_end$11[ebp]
  002f0	50		 push	 eax
  002f1	8b 4d a0	 mov	 ecx, DWORD PTR _line_start$12[ebp]
  002f4	51		 push	 ecx
  002f5	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  002f8	83 c1 0c	 add	 ecx, 12			; 0000000cH
  002fb	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QBE_NPBD0@Z ; ImGuiTextFilter::PassFilter
  00300	0f b6 d0	 movzx	 edx, al
  00303	85 d2		 test	 edx, edx
  00305	74 10		 je	 SHORT $LN17@Draw

; 4019 :                     ImGui::TextUnformatted(line_start, line_end);

  00307	8b 45 94	 mov	 eax, DWORD PTR _line_end$11[ebp]
  0030a	50		 push	 eax
  0030b	8b 4d a0	 mov	 ecx, DWORD PTR _line_start$12[ebp]
  0030e	51		 push	 ecx
  0030f	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  00314	83 c4 08	 add	 esp, 8
$LN17@Draw:

; 4020 :             }

  00317	e9 53 ff ff ff	 jmp	 $LN2@Draw
$LN3@Draw:

; 4021 :         }

  0031c	e9 33 01 00 00	 jmp	 $LN16@Draw
$LN15@Draw:

; 4022 :         else
; 4023 :         {
; 4024 :             // The simplest and easy way to display the entire buffer:
; 4025 :             //   ImGui::TextUnformatted(buf_begin, buf_end);
; 4026 :             // And it'll just work. TextUnformatted() has specialization for large blob of text and will fast-forward to skip non-visible lines.
; 4027 :             // Here we instead demonstrate using the clipper to only process lines that are within the visible area.
; 4028 :             // If you have tens of thousands of items and their processing cost is non-negligible, coarse clipping them on your side is recommended.
; 4029 :             // Using ImGuiListClipper requires A) random access into your data, and B) items all being the  same height,
; 4030 :             // both of which we can handle since we an array pointing to the beginning of each line of text.
; 4031 :             // When using the filter (in the block of code above) we don't have random access into the data to display anymore, which is why we don't use the clipper.
; 4032 :             // Storing or skimming through the search result would make it possible (and would be recommended if you want to search through tens of thousands of entries)
; 4033 :             ImGuiListClipper clipper;

  00321	51		 push	 ecx
  00322	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0032a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0032f	6a ff		 push	 -1
  00331	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$10[ebp]
  00337	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QAE@HM@Z ; ImGuiListClipper::ImGuiListClipper
  0033c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 4034 :             clipper.Begin(LineOffsets.Size);

  00343	51		 push	 ecx
  00344	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0034c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00351	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00354	8b 88 1c 01 00
	00		 mov	 ecx, DWORD PTR [eax+284]
  0035a	51		 push	 ecx
  0035b	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$10[ebp]
  00361	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QAEXHM@Z ; ImGuiListClipper::Begin
$LN5@Draw:

; 4035 :             while (clipper.Step())

  00366	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$10[ebp]
  0036c	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QAE_NXZ ; ImGuiListClipper::Step
  00371	0f b6 c0	 movzx	 eax, al
  00374	85 c0		 test	 eax, eax
  00376	0f 84 bb 00 00
	00		 je	 $LN6@Draw

; 4036 :             {
; 4037 :                 for (int line_no = clipper.DisplayStart; line_no < clipper.DisplayEnd; line_no++)

  0037c	8b 45 84	 mov	 eax, DWORD PTR _clipper$10[ebp+16]
  0037f	89 85 68 ff ff
	ff		 mov	 DWORD PTR _line_no$9[ebp], eax
  00385	eb 0f		 jmp	 SHORT $LN9@Draw
$LN7@Draw:
  00387	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _line_no$9[ebp]
  0038d	83 c0 01	 add	 eax, 1
  00390	89 85 68 ff ff
	ff		 mov	 DWORD PTR _line_no$9[ebp], eax
$LN9@Draw:
  00396	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _line_no$9[ebp]
  0039c	3b 45 88	 cmp	 eax, DWORD PTR _clipper$10[ebp+20]
  0039f	0f 8d 8d 00 00
	00		 jge	 $LN8@Draw

; 4038 :                 {
; 4039 :                     const char* line_start = buf + LineOffsets[line_no];

  003a5	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _line_no$9[ebp]
  003ab	50		 push	 eax
  003ac	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  003af	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  003b5	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QAEAAHH@Z ; ImVector<int>::operator[]
  003ba	8b 4d c4	 mov	 ecx, DWORD PTR _buf$[ebp]
  003bd	03 08		 add	 ecx, DWORD PTR [eax]
  003bf	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _line_start$8[ebp], ecx

; 4040 :                     const char* line_end = (line_no + 1 < LineOffsets.Size) ? (buf + LineOffsets[line_no + 1] - 1) : buf_end;

  003c5	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _line_no$9[ebp]
  003cb	83 c0 01	 add	 eax, 1
  003ce	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  003d1	3b 81 1c 01 00
	00		 cmp	 eax, DWORD PTR [ecx+284]
  003d7	7d 29		 jge	 SHORT $LN22@Draw
  003d9	8b 95 68 ff ff
	ff		 mov	 edx, DWORD PTR _line_no$9[ebp]
  003df	83 c2 01	 add	 edx, 1
  003e2	52		 push	 edx
  003e3	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  003e6	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  003ec	e8 00 00 00 00	 call	 ??A?$ImVector@H@@QAEAAHH@Z ; ImVector<int>::operator[]
  003f1	8b 00		 mov	 eax, DWORD PTR [eax]
  003f3	8b 4d c4	 mov	 ecx, DWORD PTR _buf$[ebp]
  003f6	8d 54 01 ff	 lea	 edx, DWORD PTR [ecx+eax-1]
  003fa	89 95 38 fe ff
	ff		 mov	 DWORD PTR tv237[ebp], edx
  00400	eb 09		 jmp	 SHORT $LN23@Draw
$LN22@Draw:
  00402	8b 45 b8	 mov	 eax, DWORD PTR _buf_end$[ebp]
  00405	89 85 38 fe ff
	ff		 mov	 DWORD PTR tv237[ebp], eax
$LN23@Draw:
  0040b	8b 8d 38 fe ff
	ff		 mov	 ecx, DWORD PTR tv237[ebp]
  00411	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _line_end$7[ebp], ecx

; 4041 :                     ImGui::TextUnformatted(line_start, line_end);

  00417	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _line_end$7[ebp]
  0041d	50		 push	 eax
  0041e	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _line_start$8[ebp]
  00424	51		 push	 ecx
  00425	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  0042a	83 c4 08	 add	 esp, 8

; 4042 :                 }

  0042d	e9 55 ff ff ff	 jmp	 $LN7@Draw
$LN8@Draw:

; 4043 :             }

  00432	e9 2f ff ff ff	 jmp	 $LN5@Draw
$LN6@Draw:

; 4044 :             clipper.End();

  00437	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$10[ebp]
  0043d	e8 00 00 00 00	 call	 ?End@ImGuiListClipper@@QAEXXZ ; ImGuiListClipper::End

; 4045 :         }

  00442	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00449	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$10[ebp]
  0044f	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN16@Draw:

; 4046 :         ImGui::PopStyleVar();

  00454	6a 01		 push	 1
  00456	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  0045b	83 c4 04	 add	 esp, 4

; 4047 : 
; 4048 :         if (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY())

  0045e	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00461	0f b6 88 28 01
	00 00		 movzx	 ecx, BYTE PTR [eax+296]
  00468	85 c9		 test	 ecx, ecx
  0046a	74 4d		 je	 SHORT $LN18@Draw
  0046c	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  00471	d9 9d 38 fe ff
	ff		 fstp	 DWORD PTR tv356[ebp]
  00477	f3 0f 10 85 38
	fe ff ff	 movss	 xmm0, DWORD PTR tv356[ebp]
  0047f	f3 0f 11 85 34
	fe ff ff	 movss	 DWORD PTR tv365[ebp], xmm0
  00487	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  0048c	d9 9d 30 fe ff
	ff		 fstp	 DWORD PTR tv360[ebp]
  00492	f3 0f 10 85 34
	fe ff ff	 movss	 xmm0, DWORD PTR tv365[ebp]
  0049a	0f 2f 85 30 fe
	ff ff		 comiss	 xmm0, DWORD PTR tv360[ebp]
  004a1	72 16		 jb	 SHORT $LN18@Draw

; 4049 :             ImGui::SetScrollHereY(1.0f);

  004a3	51		 push	 ecx
  004a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004b1	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
  004b6	83 c4 04	 add	 esp, 4
$LN18@Draw:

; 4050 : 
; 4051 :         ImGui::EndChild();

  004b9	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 4052 :         ImGui::End();

  004be	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@Draw:

; 4053 :     }

  004c3	52		 push	 edx
  004c4	8b cd		 mov	 ecx, ebp
  004c6	50		 push	 eax
  004c7	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@Draw
  004cd	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004d2	58		 pop	 eax
  004d3	5a		 pop	 edx
  004d4	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004d7	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004de	59		 pop	 ecx
  004df	5f		 pop	 edi
  004e0	5e		 pop	 esi
  004e1	5b		 pop	 ebx
  004e2	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004e5	33 cd		 xor	 ecx, ebp
  004e7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004ec	81 c4 d0 01 00
	00		 add	 esp, 464		; 000001d0H
  004f2	3b ec		 cmp	 ebp, esp
  004f4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004f9	8b e5		 mov	 esp, ebp
  004fb	5d		 pop	 ebp
  004fc	c2 08 00	 ret	 8
  004ff	90		 npad	 1
$LN28@Draw:
  00500	01 00 00 00	 DD	 1
  00504	00 00 00 00	 DD	 $LN27@Draw
$LN27@Draw:
  00508	74 ff ff ff	 DD	 -140			; ffffff74H
  0050c	18 00 00 00	 DD	 24			; 00000018H
  00510	00 00 00 00	 DD	 $LN25@Draw
$LN25@Draw:
  00514	63		 DB	 99			; 00000063H
  00515	6c		 DB	 108			; 0000006cH
  00516	69		 DB	 105			; 00000069H
  00517	70		 DB	 112			; 00000070H
  00518	70		 DB	 112			; 00000070H
  00519	65		 DB	 101			; 00000065H
  0051a	72		 DB	 114			; 00000072H
  0051b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z$0:
  00000	8d 8d 74 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$10[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 2c fe ff
	ff		 mov	 ecx, DWORD PTR [edx-468]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?Draw@ExampleAppLog@@QAEXPBDPA_N@Z
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?Draw@ExampleAppLog@@QAEXPBDPA_N@Z ENDP			; ExampleAppLog::Draw
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?AddLog@ExampleAppLog@@QAAXPBDZZ
_TEXT	SEGMENT
$T1 = -248						; size = 4
_new_size$2 = -32					; size = 4
_args$ = -20						; size = 4
_old_size$ = -8						; size = 4
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?AddLog@ExampleAppLog@@QAAXPBDZZ PROC			; ExampleAppLog::AddLog, COMDAT

; 3961 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 04 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-252]
  00012	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3962 :         int old_size = Buf.size();

  00028	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  0002b	e8 00 00 00 00	 call	 ?size@ImGuiTextBuffer@@QBEHXZ ; ImGuiTextBuffer::size
  00030	89 45 f8	 mov	 DWORD PTR _old_size$[ebp], eax

; 3963 :         va_list args;
; 3964 :         va_start(args, fmt);

  00033	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00036	89 45 ec	 mov	 DWORD PTR _args$[ebp], eax

; 3965 :         Buf.appendfv(fmt, args);

  00039	8b 45 ec	 mov	 eax, DWORD PTR _args$[ebp]
  0003c	50		 push	 eax
  0003d	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00040	51		 push	 ecx
  00041	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00044	e8 00 00 00 00	 call	 ?appendfv@ImGuiTextBuffer@@QAEXPBDPAD@Z ; ImGuiTextBuffer::appendfv

; 3966 :         va_end(args);

  00049	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _args$[ebp], 0

; 3967 :         for (int new_size = Buf.size(); old_size < new_size; old_size++)

  00050	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00053	e8 00 00 00 00	 call	 ?size@ImGuiTextBuffer@@QBEHXZ ; ImGuiTextBuffer::size
  00058	89 45 e0	 mov	 DWORD PTR _new_size$2[ebp], eax
  0005b	eb 09		 jmp	 SHORT $LN4@AddLog
$LN2@AddLog:
  0005d	8b 45 f8	 mov	 eax, DWORD PTR _old_size$[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 f8	 mov	 DWORD PTR _old_size$[ebp], eax
$LN4@AddLog:
  00066	8b 45 f8	 mov	 eax, DWORD PTR _old_size$[ebp]
  00069	3b 45 e0	 cmp	 eax, DWORD PTR _new_size$2[ebp]
  0006c	7d 37		 jge	 SHORT $LN1@AddLog

; 3968 :             if (Buf[old_size] == '\n')

  0006e	8b 45 f8	 mov	 eax, DWORD PTR _old_size$[ebp]
  00071	50		 push	 eax
  00072	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00075	e8 00 00 00 00	 call	 ??AImGuiTextBuffer@@QBEDH@Z ; ImGuiTextBuffer::operator[]
  0007a	0f be c8	 movsx	 ecx, al
  0007d	83 f9 0a	 cmp	 ecx, 10			; 0000000aH
  00080	75 21		 jne	 SHORT $LN5@AddLog

; 3969 :                 LineOffsets.push_back(old_size + 1);

  00082	8b 45 f8	 mov	 eax, DWORD PTR _old_size$[ebp]
  00085	83 c0 01	 add	 eax, 1
  00088	89 85 08 ff ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  0008e	8d 8d 08 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00094	51		 push	 ecx
  00095	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  00098	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  0009e	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QAEXABH@Z ; ImVector<int>::push_back
$LN5@AddLog:
  000a3	eb b8		 jmp	 SHORT $LN2@AddLog
$LN1@AddLog:

; 3970 :     }

  000a5	5f		 pop	 edi
  000a6	5e		 pop	 esi
  000a7	5b		 pop	 ebx
  000a8	81 c4 fc 00 00
	00		 add	 esp, 252		; 000000fcH
  000ae	3b ec		 cmp	 ebp, esp
  000b0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b5	8b e5		 mov	 esp, ebp
  000b7	5d		 pop	 ebp
  000b8	c3		 ret	 0
?AddLog@ExampleAppLog@@QAAXPBDZZ ENDP			; ExampleAppLog::AddLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Clear@ExampleAppLog@@QAEXXZ
_TEXT	SEGMENT
$T1 = -212						; size = 4
_this$ = -8						; size = 4
?Clear@ExampleAppLog@@QAEXXZ PROC			; ExampleAppLog::Clear, COMDAT
; _this$ = ecx

; 3954 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3955 :         Buf.clear();

  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?clear@ImGuiTextBuffer@@QAEXXZ ; ImGuiTextBuffer::clear

; 3956 :         LineOffsets.clear();

  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  0003e	e8 00 00 00 00	 call	 ?clear@?$ImVector@H@@QAEXXZ ; ImVector<int>::clear

; 3957 :         LineOffsets.push_back(0);

  00043	c7 85 2c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T1[ebp], 0
  0004d	8d 85 2c ff ff
	ff		 lea	 eax, DWORD PTR $T1[ebp]
  00053	50		 push	 eax
  00054	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00057	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  0005d	e8 00 00 00 00	 call	 ?push_back@?$ImVector@H@@QAEXABH@Z ; ImVector<int>::push_back

; 3958 :     }

  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?Clear@ExampleAppLog@@QAEXXZ ENDP			; ExampleAppLog::Clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ??0ExampleAppLog@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0ExampleAppLog@@QAE@XZ PROC				; ExampleAppLog::ExampleAppLog, COMDAT
; _this$ = ecx

; 3947 :     ExampleAppLog()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ExampleAppLog@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ??0ImGuiTextBuffer@@QAE@XZ ; ImGuiTextBuffer::ImGuiTextBuffer
  00054	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0005b	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00060	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00063	83 c1 0c	 add	 ecx, 12			; 0000000cH
  00066	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QAE@PBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  0006b	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  0006f	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00072	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  00078	e8 00 00 00 00	 call	 ??0?$ImVector@H@@QAE@XZ	; ImVector<int>::ImVector<int>
  0007d	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2

; 3948 :     {
; 3949 :         AutoScroll = true;

  00081	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00084	c6 80 28 01 00
	00 01		 mov	 BYTE PTR [eax+296], 1

; 3950 :         Clear();

  0008b	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008e	e8 00 00 00 00	 call	 ?Clear@ExampleAppLog@@QAEXXZ ; ExampleAppLog::Clear

; 3951 :     }

  00093	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0009d	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000a0	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000a7	59		 pop	 ecx
  000a8	5f		 pop	 edi
  000a9	5e		 pop	 esi
  000aa	5b		 pop	 ebx
  000ab	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000b1	3b ec		 cmp	 ebp, esp
  000b3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000b8	8b e5		 mov	 esp, ebp
  000ba	5d		 pop	 ebp
  000bb	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ExampleAppLog@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1ImGuiTextBuffer@@QAE@XZ
__unwindfunclet$??0ExampleAppLog@@QAE@XZ$1:
  00008	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0000b	83 c1 0c	 add	 ecx, 12			; 0000000cH
  0000e	e9 00 00 00 00	 jmp	 ??1ImGuiTextFilter@@QAE@XZ
__unwindfunclet$??0ExampleAppLog@@QAE@XZ$2:
  00013	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00016	81 c1 1c 01 00
	00		 add	 ecx, 284		; 0000011cH
  0001c	e9 00 00 00 00	 jmp	 ??1?$ImVector@H@@QAE@XZ	; ImVector<int>::~ImVector<int>
  00021	cc		 int	 3
  00022	cc		 int	 3
  00023	cc		 int	 3
  00024	cc		 int	 3
  00025	cc		 int	 3
__ehhandler$??0ExampleAppLog@@QAE@XZ:
  00026	90		 npad	 1
  00027	90		 npad	 1
  00028	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0002c	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0002f	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  00035	33 c8		 xor	 ecx, eax
  00037	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003c	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ExampleAppLog@@QAE@XZ
  00041	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ExampleAppLog@@QAE@XZ ENDP				; ExampleAppLog::ExampleAppLog
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@H@@QAEXABH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@H@@QAEXABH@Z PROC			; ImVector<int>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@H@@QBEHH@Z ; ImVector<int>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@H@@QAEXH@Z ; ImVector<int>::reserve
$LN2@push_back:
  00054	6a 04		 push	 4
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	83 c1 01	 add	 ecx, 1
  00079	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	89 0a		 mov	 DWORD PTR [edx], ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?push_back@?$ImVector@H@@QAEXABH@Z ENDP			; ImVector<int>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@H@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@H@@QAEXH@Z PROC			; ImVector<int>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 58		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  0003d	c1 e0 02	 shl	 eax, 2
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 2b		 je	 SHORT $LN3@reserve
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	c1 e1 02	 shl	 ecx, 2
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  0007d	83 c4 04	 add	 esp, 4
$LN3@reserve:
  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00086	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0008f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?reserve@?$ImVector@H@@QAEXH@Z ENDP			; ImVector<int>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@H@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@H@@QBEHH@Z PROC		; ImVector<int>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@H@@QBEHH@Z ENDP		; ImVector<int>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@H@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@?$ImVector@H@@QAEXXZ PROC			; ImVector<int>::clear, COMDAT
; _this$ = ecx

; 1275 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 2c		 je	 SHORT $LN1@clear
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00055	83 c4 04	 add	 esp, 4
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@clear:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?clear@?$ImVector@H@@QAEXXZ ENDP			; ImVector<int>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@H@@QAEAAHH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@H@@QAEAAHH@Z PROC				; ImVector<int>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@H@@QAEAAHH@Z ENDP				; ImVector<int>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@H@@QAE@XZ PROC				; ImVector<int>::~ImVector<int>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@H@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@H@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@H@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@H@@QAE@XZ ENDP				; ImVector<int>::~ImVector<int>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@H@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@H@@QAE@XZ PROC				; ImVector<int>::ImVector<int>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@H@@QAE@XZ ENDP				; ImVector<int>::ImVector<int>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fconsole@?1??ShowExampleAppConsole@@YAXPA_N@Z@YAXXZ
text$yd	SEGMENT
??__Fconsole@?1??ShowExampleAppConsole@@YAXPA_N@Z@YAXXZ PROC ; `ShowExampleAppConsole'::`2'::`dynamic atexit destructor for 'console'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?console@?1??ShowExampleAppConsole@@YAXPA_N@Z@4UExampleAppConsole@@A
  00023	e8 00 00 00 00	 call	 ??1ExampleAppConsole@@QAE@XZ ; ExampleAppConsole::~ExampleAppConsole
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Fconsole@?1??ShowExampleAppConsole@@YAXPA_N@Z@YAXXZ ENDP ; `ShowExampleAppConsole'::`2'::`dynamic atexit destructor for 'console''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
tv254 = -376						; size = 4
tv240 = -376						; size = 4
tv65 = -376						; size = 4
_history_str$2 = -176					; size = 4
_prev_history_pos$3 = -164				; size = 4
_i$4 = -152						; size = 4
_i$5 = -140						; size = 4
_all_candidates_matches$6 = -125			; size = 1
_c$7 = -116						; size = 4
_match_len$8 = -104					; size = 4
_i$9 = -92						; size = 4
_candidates$10 = -80					; size = 12
_c$11 = -57						; size = 1
_word_start$12 = -48					; size = 4
_word_end$13 = -36					; size = 4
_this$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_data$ = 8						; size = 4
?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z PROC ; ExampleAppConsole::TextEditCallback, COMDAT
; _this$ = ecx

; 3826 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 88 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-376]
  00021	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00038	50		 push	 eax
  00039	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003c	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00042	89 4d e8	 mov	 DWORD PTR _this$[ebp], ecx
  00045	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0004a	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3827 :         //AddLog("cursor: %d, selection: %d-%d", data->CursorPos, data->SelectionStart, data->SelectionEnd);
; 3828 :         switch (data->EventFlag)

  0004f	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00052	8b 08		 mov	 ecx, DWORD PTR [eax]
  00054	89 8d 88 fe ff
	ff		 mov	 DWORD PTR tv65[ebp], ecx
  0005a	83 bd 88 fe ff
	ff 40		 cmp	 DWORD PTR tv65[ebp], 64	; 00000040H
  00061	74 15		 je	 SHORT $LN18@TextEditCa
  00063	81 bd 88 fe ff
	ff 80 00 00 00	 cmp	 DWORD PTR tv65[ebp], 128 ; 00000080H
  0006d	0f 84 fe 02 00
	00		 je	 $LN32@TextEditCa
  00073	e9 24 04 00 00	 jmp	 $LN2@TextEditCa
$LN18@TextEditCa:

; 3829 :         {
; 3830 :         case ImGuiInputTextFlags_CallbackCompletion:
; 3831 :             {
; 3832 :                 // Example of TEXT COMPLETION
; 3833 : 
; 3834 :                 // Locate beginning of current word
; 3835 :                 const char* word_end = data->Buf + data->CursorPos;

  00078	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0007b	8b 48 14	 mov	 ecx, DWORD PTR [eax+20]
  0007e	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00081	03 4a 24	 add	 ecx, DWORD PTR [edx+36]
  00084	89 4d dc	 mov	 DWORD PTR _word_end$13[ebp], ecx

; 3836 :                 const char* word_start = word_end;

  00087	8b 45 dc	 mov	 eax, DWORD PTR _word_end$13[ebp]
  0008a	89 45 d0	 mov	 DWORD PTR _word_start$12[ebp], eax
$LN4@TextEditCa:

; 3837 :                 while (word_start > data->Buf)

  0008d	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00090	8b 4d d0	 mov	 ecx, DWORD PTR _word_start$12[ebp]
  00093	3b 48 14	 cmp	 ecx, DWORD PTR [eax+20]
  00096	76 42		 jbe	 SHORT $LN5@TextEditCa

; 3838 :                 {
; 3839 :                     const char c = word_start[-1];

  00098	b8 01 00 00 00	 mov	 eax, 1
  0009d	6b c8 ff	 imul	 ecx, eax, -1
  000a0	8b 55 d0	 mov	 edx, DWORD PTR _word_start$12[ebp]
  000a3	8a 04 0a	 mov	 al, BYTE PTR [edx+ecx]
  000a6	88 45 c7	 mov	 BYTE PTR _c$11[ebp], al

; 3840 :                     if (c == ' ' || c == '\t' || c == ',' || c == ';')

  000a9	0f be 45 c7	 movsx	 eax, BYTE PTR _c$11[ebp]
  000ad	83 f8 20	 cmp	 eax, 32			; 00000020H
  000b0	74 1b		 je	 SHORT $LN20@TextEditCa
  000b2	0f be 45 c7	 movsx	 eax, BYTE PTR _c$11[ebp]
  000b6	83 f8 09	 cmp	 eax, 9
  000b9	74 12		 je	 SHORT $LN20@TextEditCa
  000bb	0f be 45 c7	 movsx	 eax, BYTE PTR _c$11[ebp]
  000bf	83 f8 2c	 cmp	 eax, 44			; 0000002cH
  000c2	74 09		 je	 SHORT $LN20@TextEditCa
  000c4	0f be 45 c7	 movsx	 eax, BYTE PTR _c$11[ebp]
  000c8	83 f8 3b	 cmp	 eax, 59			; 0000003bH
  000cb	75 02		 jne	 SHORT $LN19@TextEditCa
$LN20@TextEditCa:

; 3841 :                         break;

  000cd	eb 0b		 jmp	 SHORT $LN5@TextEditCa
$LN19@TextEditCa:

; 3842 :                     word_start--;

  000cf	8b 45 d0	 mov	 eax, DWORD PTR _word_start$12[ebp]
  000d2	83 e8 01	 sub	 eax, 1
  000d5	89 45 d0	 mov	 DWORD PTR _word_start$12[ebp], eax

; 3843 :                 }

  000d8	eb b3		 jmp	 SHORT $LN4@TextEditCa
$LN5@TextEditCa:

; 3844 : 
; 3845 :                 // Build a list of candidates
; 3846 :                 ImVector<const char*> candidates;

  000da	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  000dd	e8 00 00 00 00	 call	 ??0?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::ImVector<char const *>
  000e2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0

; 3847 :                 for (int i = 0; i < Commands.Size; i++)

  000e9	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _i$9[ebp], 0
  000f0	eb 09		 jmp	 SHORT $LN8@TextEditCa
$LN6@TextEditCa:
  000f2	8b 45 a4	 mov	 eax, DWORD PTR _i$9[ebp]
  000f5	83 c0 01	 add	 eax, 1
  000f8	89 45 a4	 mov	 DWORD PTR _i$9[ebp], eax
$LN8@TextEditCa:
  000fb	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  000fe	8b 4d a4	 mov	 ecx, DWORD PTR _i$9[ebp]
  00101	3b 88 0c 01 00
	00		 cmp	 ecx, DWORD PTR [eax+268]
  00107	7d 49		 jge	 SHORT $LN7@TextEditCa

; 3848 :                     if (Strnicmp(Commands[i], word_start, (int)(word_end-word_start)) == 0)

  00109	8b 45 dc	 mov	 eax, DWORD PTR _word_end$13[ebp]
  0010c	2b 45 d0	 sub	 eax, DWORD PTR _word_start$12[ebp]
  0010f	50		 push	 eax
  00110	8b 4d d0	 mov	 ecx, DWORD PTR _word_start$12[ebp]
  00113	51		 push	 ecx
  00114	8b 55 a4	 mov	 edx, DWORD PTR _i$9[ebp]
  00117	52		 push	 edx
  00118	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0011b	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00121	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  00126	8b 00		 mov	 eax, DWORD PTR [eax]
  00128	50		 push	 eax
  00129	e8 00 00 00 00	 call	 ?Strnicmp@ExampleAppConsole@@SAHPBD0H@Z ; ExampleAppConsole::Strnicmp
  0012e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00131	85 c0		 test	 eax, eax
  00133	75 1b		 jne	 SHORT $LN21@TextEditCa

; 3849 :                         candidates.push_back(Commands[i]);

  00135	8b 45 a4	 mov	 eax, DWORD PTR _i$9[ebp]
  00138	50		 push	 eax
  00139	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0013c	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00142	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  00147	50		 push	 eax
  00148	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  0014b	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PBD@@QAEXABQBD@Z ; ImVector<char const *>::push_back
$LN21@TextEditCa:
  00150	eb a0		 jmp	 SHORT $LN6@TextEditCa
$LN7@TextEditCa:

; 3850 : 
; 3851 :                 if (candidates.Size == 0)

  00152	83 7d b0 00	 cmp	 DWORD PTR _candidates$10[ebp], 0
  00156	75 21		 jne	 SHORT $LN22@TextEditCa

; 3852 :                 {
; 3853 :                     // No match
; 3854 :                     AddLog("No match for \"%.*s\"!\n", (int)(word_end-word_start), word_start);

  00158	8b 45 d0	 mov	 eax, DWORD PTR _word_start$12[ebp]
  0015b	50		 push	 eax
  0015c	8b 4d dc	 mov	 ecx, DWORD PTR _word_end$13[ebp]
  0015f	2b 4d d0	 sub	 ecx, DWORD PTR _word_start$12[ebp]
  00162	51		 push	 ecx
  00163	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DOPMHGPK@No?5match?5for?5?$CC?$CF?4?$CKs?$CC?$CB?6@
  00168	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  0016b	52		 push	 edx
  0016c	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00171	83 c4 10	 add	 esp, 16			; 00000010H

; 3855 :                 }

  00174	e9 d5 01 00 00	 jmp	 $LN23@TextEditCa
$LN22@TextEditCa:

; 3856 :                 else if (candidates.Size == 1)

  00179	83 7d b0 01	 cmp	 DWORD PTR _candidates$10[ebp], 1
  0017d	75 52		 jne	 SHORT $LN24@TextEditCa

; 3857 :                 {
; 3858 :                     // Single match. Delete the beginning of the word and replace it entirely so we've got nice casing
; 3859 :                     data->DeleteChars((int)(word_start-data->Buf), (int)(word_end-word_start));

  0017f	8b 45 dc	 mov	 eax, DWORD PTR _word_end$13[ebp]
  00182	2b 45 d0	 sub	 eax, DWORD PTR _word_start$12[ebp]
  00185	50		 push	 eax
  00186	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00189	8b 55 d0	 mov	 edx, DWORD PTR _word_start$12[ebp]
  0018c	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  0018f	52		 push	 edx
  00190	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00193	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QAEXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 3860 :                     data->InsertChars(data->CursorPos, candidates[0]);

  00198	6a 00		 push	 0
  0019a	6a 00		 push	 0
  0019c	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  0019f	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  001a4	8b 00		 mov	 eax, DWORD PTR [eax]
  001a6	50		 push	 eax
  001a7	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  001aa	8b 51 24	 mov	 edx, DWORD PTR [ecx+36]
  001ad	52		 push	 edx
  001ae	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  001b1	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QAEXHPBD0@Z ; ImGuiInputTextCallbackData::InsertChars

; 3861 :                     data->InsertChars(data->CursorPos, " ");

  001b6	6a 00		 push	 0
  001b8	68 00 00 00 00	 push	 OFFSET ??_C@_01CLKCMJKC@?5@
  001bd	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  001c0	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  001c3	51		 push	 ecx
  001c4	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  001c7	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QAEXHPBD0@Z ; ImGuiInputTextCallbackData::InsertChars

; 3862 :                 }

  001cc	e9 7d 01 00 00	 jmp	 $LN23@TextEditCa
$LN24@TextEditCa:

; 3863 :                 else
; 3864 :                 {
; 3865 :                     // Multiple matches. Complete as much as we can, so inputing "C" will complete to "CL" and display "CLEAR" and "CLASSIFY"
; 3866 :                     int match_len = (int)(word_end - word_start);

  001d1	8b 45 dc	 mov	 eax, DWORD PTR _word_end$13[ebp]
  001d4	2b 45 d0	 sub	 eax, DWORD PTR _word_start$12[ebp]
  001d7	89 45 98	 mov	 DWORD PTR _match_len$8[ebp], eax
$LN11@TextEditCa:

; 3867 :                     for (;;)
; 3868 :                     {
; 3869 :                         int c = 0;

  001da	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _c$7[ebp], 0

; 3870 :                         bool all_candidates_matches = true;

  001e1	c6 45 83 01	 mov	 BYTE PTR _all_candidates_matches$6[ebp], 1

; 3871 :                         for (int i = 0; i < candidates.Size && all_candidates_matches; i++)

  001e5	c7 85 74 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$5[ebp], 0
  001ef	eb 0f		 jmp	 SHORT $LN14@TextEditCa
$LN12@TextEditCa:
  001f1	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  001f7	83 c0 01	 add	 eax, 1
  001fa	89 85 74 ff ff
	ff		 mov	 DWORD PTR _i$5[ebp], eax
$LN14@TextEditCa:
  00200	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  00206	3b 45 b0	 cmp	 eax, DWORD PTR _candidates$10[ebp]
  00209	0f 8d 80 00 00
	00		 jge	 $LN13@TextEditCa
  0020f	0f b6 45 83	 movzx	 eax, BYTE PTR _all_candidates_matches$6[ebp]
  00213	85 c0		 test	 eax, eax
  00215	74 78		 je	 SHORT $LN13@TextEditCa

; 3872 :                             if (i == 0)

  00217	83 bd 74 ff ff
	ff 00		 cmp	 DWORD PTR _i$5[ebp], 0
  0021e	75 30		 jne	 SHORT $LN26@TextEditCa

; 3873 :                                 c = toupper(candidates[i][match_len]);

  00220	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  00226	50		 push	 eax
  00227	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  0022a	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  0022f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00231	8b 55 98	 mov	 edx, DWORD PTR _match_len$8[ebp]
  00234	0f be 04 11	 movsx	 eax, BYTE PTR [ecx+edx]
  00238	8b f4		 mov	 esi, esp
  0023a	50		 push	 eax
  0023b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00241	83 c4 04	 add	 esp, 4
  00244	3b f4		 cmp	 esi, esp
  00246	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0024b	89 45 8c	 mov	 DWORD PTR _c$7[ebp], eax
  0024e	eb 3a		 jmp	 SHORT $LN27@TextEditCa
$LN26@TextEditCa:

; 3874 :                             else if (c == 0 || c != toupper(candidates[i][match_len]))

  00250	83 7d 8c 00	 cmp	 DWORD PTR _c$7[ebp], 0
  00254	74 30		 je	 SHORT $LN29@TextEditCa
  00256	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _i$5[ebp]
  0025c	50		 push	 eax
  0025d	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  00260	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  00265	8b 08		 mov	 ecx, DWORD PTR [eax]
  00267	8b 55 98	 mov	 edx, DWORD PTR _match_len$8[ebp]
  0026a	0f be 04 11	 movsx	 eax, BYTE PTR [ecx+edx]
  0026e	8b f4		 mov	 esi, esp
  00270	50		 push	 eax
  00271	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00277	83 c4 04	 add	 esp, 4
  0027a	3b f4		 cmp	 esi, esp
  0027c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00281	39 45 8c	 cmp	 DWORD PTR _c$7[ebp], eax
  00284	74 04		 je	 SHORT $LN27@TextEditCa
$LN29@TextEditCa:

; 3875 :                                 all_candidates_matches = false;

  00286	c6 45 83 00	 mov	 BYTE PTR _all_candidates_matches$6[ebp], 0
$LN27@TextEditCa:
  0028a	e9 62 ff ff ff	 jmp	 $LN12@TextEditCa
$LN13@TextEditCa:

; 3876 :                         if (!all_candidates_matches)

  0028f	0f b6 45 83	 movzx	 eax, BYTE PTR _all_candidates_matches$6[ebp]
  00293	85 c0		 test	 eax, eax
  00295	75 02		 jne	 SHORT $LN30@TextEditCa

; 3877 :                             break;

  00297	eb 0e		 jmp	 SHORT $LN10@TextEditCa
$LN30@TextEditCa:

; 3878 :                         match_len++;

  00299	8b 45 98	 mov	 eax, DWORD PTR _match_len$8[ebp]
  0029c	83 c0 01	 add	 eax, 1
  0029f	89 45 98	 mov	 DWORD PTR _match_len$8[ebp], eax

; 3879 :                     }

  002a2	e9 33 ff ff ff	 jmp	 $LN11@TextEditCa
$LN10@TextEditCa:

; 3880 : 
; 3881 :                     if (match_len > 0)

  002a7	83 7d 98 00	 cmp	 DWORD PTR _match_len$8[ebp], 0
  002ab	7e 45		 jle	 SHORT $LN31@TextEditCa

; 3882 :                     {
; 3883 :                         data->DeleteChars((int)(word_start - data->Buf), (int)(word_end-word_start));

  002ad	8b 45 dc	 mov	 eax, DWORD PTR _word_end$13[ebp]
  002b0	2b 45 d0	 sub	 eax, DWORD PTR _word_start$12[ebp]
  002b3	50		 push	 eax
  002b4	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  002b7	8b 55 d0	 mov	 edx, DWORD PTR _word_start$12[ebp]
  002ba	2b 51 14	 sub	 edx, DWORD PTR [ecx+20]
  002bd	52		 push	 edx
  002be	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  002c1	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QAEXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 3884 :                         data->InsertChars(data->CursorPos, candidates[0], candidates[0] + match_len);

  002c6	6a 00		 push	 0
  002c8	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  002cb	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  002d0	8b 00		 mov	 eax, DWORD PTR [eax]
  002d2	03 45 98	 add	 eax, DWORD PTR _match_len$8[ebp]
  002d5	50		 push	 eax
  002d6	6a 00		 push	 0
  002d8	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  002db	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  002e0	8b 08		 mov	 ecx, DWORD PTR [eax]
  002e2	51		 push	 ecx
  002e3	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  002e6	8b 42 24	 mov	 eax, DWORD PTR [edx+36]
  002e9	50		 push	 eax
  002ea	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  002ed	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QAEXHPBD0@Z ; ImGuiInputTextCallbackData::InsertChars
$LN31@TextEditCa:

; 3885 :                     }
; 3886 : 
; 3887 :                     // List matches
; 3888 :                     AddLog("Possible matches:\n");

  002f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LCPLNAHF@Possible?5matches?3?6@
  002f7	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  002fa	50		 push	 eax
  002fb	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00300	83 c4 08	 add	 esp, 8

; 3889 :                     for (int i = 0; i < candidates.Size; i++)

  00303	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$4[ebp], 0
  0030d	eb 0f		 jmp	 SHORT $LN17@TextEditCa
$LN15@TextEditCa:
  0030f	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00315	83 c0 01	 add	 eax, 1
  00318	89 85 68 ff ff
	ff		 mov	 DWORD PTR _i$4[ebp], eax
$LN17@TextEditCa:
  0031e	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  00324	3b 45 b0	 cmp	 eax, DWORD PTR _candidates$10[ebp]
  00327	7d 25		 jge	 SHORT $LN23@TextEditCa

; 3890 :                         AddLog("- %s\n", candidates[i]);

  00329	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _i$4[ebp]
  0032f	50		 push	 eax
  00330	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  00333	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  00338	8b 08		 mov	 ecx, DWORD PTR [eax]
  0033a	51		 push	 ecx
  0033b	68 00 00 00 00	 push	 OFFSET ??_C@_05PHKAGDP@?9?5?$CFs?6@
  00340	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  00343	52		 push	 edx
  00344	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00349	83 c4 0c	 add	 esp, 12			; 0000000cH
  0034c	eb c1		 jmp	 SHORT $LN15@TextEditCa
$LN23@TextEditCa:

; 3891 :                 }
; 3892 : 
; 3893 :                 break;

  0034e	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00355	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  00358	e8 00 00 00 00	 call	 ??1?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::~ImVector<char const *>
  0035d	e9 3a 01 00 00	 jmp	 $LN2@TextEditCa

; 3894 :             }

  00362	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00369	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  0036c	e8 00 00 00 00	 call	 ??1?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::~ImVector<char const *>
$LN32@TextEditCa:

; 3895 :         case ImGuiInputTextFlags_CallbackHistory:
; 3896 :             {
; 3897 :                 // Example of HISTORY
; 3898 :                 const int prev_history_pos = HistoryPos;

  00371	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00374	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  0037a	89 8d 5c ff ff
	ff		 mov	 DWORD PTR _prev_history_pos$3[ebp], ecx

; 3899 :                 if (data->EventKey == ImGuiKey_UpArrow)

  00380	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00383	83 78 10 03	 cmp	 DWORD PTR [eax+16], 3
  00387	75 46		 jne	 SHORT $LN33@TextEditCa

; 3900 :                 {
; 3901 :                     if (HistoryPos == -1)

  00389	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  0038c	83 b8 24 01 00
	00 ff		 cmp	 DWORD PTR [eax+292], -1
  00393	75 17		 jne	 SHORT $LN35@TextEditCa

; 3902 :                         HistoryPos = History.Size - 1;

  00395	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00398	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  0039e	83 e9 01	 sub	 ecx, 1
  003a1	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  003a4	89 8a 24 01 00
	00		 mov	 DWORD PTR [edx+292], ecx
  003aa	eb 21		 jmp	 SHORT $LN36@TextEditCa
$LN35@TextEditCa:

; 3903 :                     else if (HistoryPos > 0)

  003ac	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003af	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  003b6	7e 15		 jle	 SHORT $LN36@TextEditCa

; 3904 :                         HistoryPos--;

  003b8	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003bb	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  003c1	83 e9 01	 sub	 ecx, 1
  003c4	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  003c7	89 8a 24 01 00
	00		 mov	 DWORD PTR [edx+292], ecx
$LN36@TextEditCa:

; 3905 :                 }

  003cd	eb 54		 jmp	 SHORT $LN34@TextEditCa
$LN33@TextEditCa:

; 3906 :                 else if (data->EventKey == ImGuiKey_DownArrow)

  003cf	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  003d2	83 78 10 04	 cmp	 DWORD PTR [eax+16], 4
  003d6	75 4b		 jne	 SHORT $LN34@TextEditCa

; 3907 :                 {
; 3908 :                     if (HistoryPos != -1)

  003d8	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003db	83 b8 24 01 00
	00 ff		 cmp	 DWORD PTR [eax+292], -1
  003e2	74 3f		 je	 SHORT $LN34@TextEditCa

; 3909 :                         if (++HistoryPos >= History.Size)

  003e4	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  003e7	8b 88 24 01 00
	00		 mov	 ecx, DWORD PTR [eax+292]
  003ed	83 c1 01	 add	 ecx, 1
  003f0	89 8d 88 fe ff
	ff		 mov	 DWORD PTR tv240[ebp], ecx
  003f6	8b 55 e8	 mov	 edx, DWORD PTR _this$[ebp]
  003f9	8b 85 88 fe ff
	ff		 mov	 eax, DWORD PTR tv240[ebp]
  003ff	89 82 24 01 00
	00		 mov	 DWORD PTR [edx+292], eax
  00405	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00408	8b 95 88 fe ff
	ff		 mov	 edx, DWORD PTR tv240[ebp]
  0040e	3b 91 18 01 00
	00		 cmp	 edx, DWORD PTR [ecx+280]
  00414	7c 0d		 jl	 SHORT $LN34@TextEditCa

; 3910 :                             HistoryPos = -1;

  00416	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00419	c7 80 24 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+292], -1
$LN34@TextEditCa:

; 3911 :                 }
; 3912 : 
; 3913 :                 // A better implementation would preserve the data on the current input line along with cursor position.
; 3914 :                 if (prev_history_pos != HistoryPos)

  00423	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00426	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _prev_history_pos$3[ebp]
  0042c	3b 88 24 01 00
	00		 cmp	 ecx, DWORD PTR [eax+292]
  00432	74 68		 je	 SHORT $LN2@TextEditCa

; 3915 :                 {
; 3916 :                     const char* history_str = (HistoryPos >= 0) ? History[HistoryPos] : "";

  00434	8b 45 e8	 mov	 eax, DWORD PTR _this$[ebp]
  00437	83 b8 24 01 00
	00 00		 cmp	 DWORD PTR [eax+292], 0
  0043e	7c 22		 jl	 SHORT $LN43@TextEditCa
  00440	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  00443	8b 91 24 01 00
	00		 mov	 edx, DWORD PTR [ecx+292]
  00449	52		 push	 edx
  0044a	8b 4d e8	 mov	 ecx, DWORD PTR _this$[ebp]
  0044d	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00453	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  00458	8b 00		 mov	 eax, DWORD PTR [eax]
  0045a	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv254[ebp], eax
  00460	eb 0a		 jmp	 SHORT $LN44@TextEditCa
$LN43@TextEditCa:
  00462	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv254[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN44@TextEditCa:
  0046c	8b 8d 88 fe ff
	ff		 mov	 ecx, DWORD PTR tv254[ebp]
  00472	89 8d 50 ff ff
	ff		 mov	 DWORD PTR _history_str$2[ebp], ecx

; 3917 :                     data->DeleteChars(0, data->BufTextLen);

  00478	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0047b	8b 48 18	 mov	 ecx, DWORD PTR [eax+24]
  0047e	51		 push	 ecx
  0047f	6a 00		 push	 0
  00481	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00484	e8 00 00 00 00	 call	 ?DeleteChars@ImGuiInputTextCallbackData@@QAEXHH@Z ; ImGuiInputTextCallbackData::DeleteChars

; 3918 :                     data->InsertChars(0, history_str);

  00489	6a 00		 push	 0
  0048b	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _history_str$2[ebp]
  00491	50		 push	 eax
  00492	6a 00		 push	 0
  00494	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00497	e8 00 00 00 00	 call	 ?InsertChars@ImGuiInputTextCallbackData@@QAEXHPBD0@Z ; ImGuiInputTextCallbackData::InsertChars
$LN2@TextEditCa:

; 3919 :                 }
; 3920 :             }
; 3921 :         }
; 3922 :         return 0;

  0049c	33 c0		 xor	 eax, eax

; 3923 :     }

  0049e	52		 push	 edx
  0049f	8b cd		 mov	 ecx, ebp
  004a1	50		 push	 eax
  004a2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN49@TextEditCa
  004a8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  004ad	58		 pop	 eax
  004ae	5a		 pop	 edx
  004af	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  004b2	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  004b9	59		 pop	 ecx
  004ba	5f		 pop	 edi
  004bb	5e		 pop	 esi
  004bc	5b		 pop	 ebx
  004bd	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  004c0	33 cd		 xor	 ecx, ebp
  004c2	e8 00 00 00 00	 call	 @__security_check_cookie@4
  004c7	81 c4 78 01 00
	00		 add	 esp, 376		; 00000178H
  004cd	3b ec		 cmp	 ebp, esp
  004cf	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004d4	8b e5		 mov	 esp, ebp
  004d6	5d		 pop	 ebp
  004d7	c2 04 00	 ret	 4
  004da	66 90		 npad	 2
$LN49@TextEditCa:
  004dc	01 00 00 00	 DD	 1
  004e0	00 00 00 00	 DD	 $LN48@TextEditCa
$LN48@TextEditCa:
  004e4	b0 ff ff ff	 DD	 -80			; ffffffb0H
  004e8	0c 00 00 00	 DD	 12			; 0000000cH
  004ec	00 00 00 00	 DD	 $LN46@TextEditCa
$LN46@TextEditCa:
  004f0	63		 DB	 99			; 00000063H
  004f1	61		 DB	 97			; 00000061H
  004f2	6e		 DB	 110			; 0000006eH
  004f3	64		 DB	 100			; 00000064H
  004f4	69		 DB	 105			; 00000069H
  004f5	64		 DB	 100			; 00000064H
  004f6	61		 DB	 97			; 00000061H
  004f7	74		 DB	 116			; 00000074H
  004f8	65		 DB	 101			; 00000065H
  004f9	73		 DB	 115			; 00000073H
  004fa	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z$0:
  00000	8d 4d b0	 lea	 ecx, DWORD PTR _candidates$10[ebp]
  00003	e9 00 00 00 00	 jmp	 ??1?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::~ImVector<char const *>
  00008	cc		 int	 3
  00009	cc		 int	 3
  0000a	cc		 int	 3
  0000b	cc		 int	 3
  0000c	cc		 int	 3
__ehhandler$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z:
  0000d	90		 npad	 1
  0000e	90		 npad	 1
  0000f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00013	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00016	8b 8a 84 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-380]
  0001c	33 c8		 xor	 ecx, eax
  0001e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00023	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00026	33 c8		 xor	 ecx, eax
  00028	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z
  00032	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z ENDP ; ExampleAppConsole::TextEditCallback
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?TextEditCallbackStub@ExampleAppConsole@@SAHPAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
_console$ = -8						; size = 4
_data$ = 8						; size = 4
?TextEditCallbackStub@ExampleAppConsole@@SAHPAUImGuiInputTextCallbackData@@@Z PROC ; ExampleAppConsole::TextEditCallbackStub, COMDAT

; 3820 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3821 :         ExampleAppConsole* console = (ExampleAppConsole*)data->UserData;

  00028	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0002b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0002e	89 4d f8	 mov	 DWORD PTR _console$[ebp], ecx

; 3822 :         return console->TextEditCallback(data);

  00031	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00034	50		 push	 eax
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _console$[ebp]
  00038	e8 00 00 00 00	 call	 ?TextEditCallback@ExampleAppConsole@@QAEHPAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallback

; 3823 :     }

  0003d	5f		 pop	 edi
  0003e	5e		 pop	 esi
  0003f	5b		 pop	 ebx
  00040	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00046	3b ec		 cmp	 ebp, esp
  00048	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004d	8b e5		 mov	 esp, ebp
  0004f	5d		 pop	 ebp
  00050	c3		 ret	 0
?TextEditCallbackStub@ExampleAppConsole@@SAHPAUImGuiInputTextCallbackData@@@Z ENDP ; ExampleAppConsole::TextEditCallbackStub
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ExecCommand@ExampleAppConsole@@QAEXPBD@Z
_TEXT	SEGMENT
tv161 = -268						; size = 4
$T1 = -260						; size = 4
_i$2 = -56						; size = 4
_first$3 = -44						; size = 4
_i$4 = -32						; size = 4
_i$5 = -20						; size = 4
_this$ = -8						; size = 4
_command_line$ = 8					; size = 4
?ExecCommand@ExampleAppConsole@@QAEXPBD@Z PROC		; ExampleAppConsole::ExecCommand, COMDAT
; _this$ = ecx

; 3779 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 0c 01 00
	00		 sub	 esp, 268		; 0000010cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f4 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-268]
  00013	b9 43 00 00 00	 mov	 ecx, 67			; 00000043H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3780 :         AddLog("# %s\n", command_line);

  0002d	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  00030	50		 push	 eax
  00031	68 00 00 00 00	 push	 OFFSET ??_C@_05DFHAGHEP@?$CD?5?$CFs?6@
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	51		 push	 ecx
  0003a	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  0003f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3781 : 
; 3782 :         // Insert into history. First find match and delete it so it can be pushed to the back. This isn't trying to be smart or optimal.
; 3783 :         HistoryPos = -1;

  00042	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00045	c7 80 24 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+292], -1

; 3784 :         for (int i = History.Size-1; i >= 0; i--)

  0004f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00052	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  00058	83 e9 01	 sub	 ecx, 1
  0005b	89 4d ec	 mov	 DWORD PTR _i$5[ebp], ecx
  0005e	eb 09		 jmp	 SHORT $LN4@ExecComman
$LN2@ExecComman:
  00060	8b 45 ec	 mov	 eax, DWORD PTR _i$5[ebp]
  00063	83 e8 01	 sub	 eax, 1
  00066	89 45 ec	 mov	 DWORD PTR _i$5[ebp], eax
$LN4@ExecComman:
  00069	83 7d ec 00	 cmp	 DWORD PTR _i$5[ebp], 0
  0006d	7c 76		 jl	 SHORT $LN3@ExecComman

; 3785 :             if (Stricmp(History[i], command_line) == 0)

  0006f	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  00072	50		 push	 eax
  00073	8b 4d ec	 mov	 ecx, DWORD PTR _i$5[ebp]
  00076	51		 push	 ecx
  00077	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0007a	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00080	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  00085	8b 10		 mov	 edx, DWORD PTR [eax]
  00087	52		 push	 edx
  00088	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPBD0@Z ; ExampleAppConsole::Stricmp
  0008d	83 c4 08	 add	 esp, 8
  00090	85 c0		 test	 eax, eax
  00092	75 4c		 jne	 SHORT $LN11@ExecComman

; 3786 :             {
; 3787 :                 free(History[i]);

  00094	8b 45 ec	 mov	 eax, DWORD PTR _i$5[ebp]
  00097	50		 push	 eax
  00098	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009b	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  000a1	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  000a6	8b f4		 mov	 esi, esp
  000a8	8b 08		 mov	 ecx, DWORD PTR [eax]
  000aa	51		 push	 ecx
  000ab	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  000b1	83 c4 04	 add	 esp, 4
  000b4	3b f4		 cmp	 esi, esp
  000b6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 3788 :                 History.erase(History.begin() + i);

  000bb	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000be	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  000c4	e8 00 00 00 00	 call	 ?begin@?$ImVector@PAD@@QAEPAPADXZ ; ImVector<char *>::begin
  000c9	8b 4d ec	 mov	 ecx, DWORD PTR _i$5[ebp]
  000cc	8d 14 88	 lea	 edx, DWORD PTR [eax+ecx*4]
  000cf	52		 push	 edx
  000d0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  000d3	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  000d9	e8 00 00 00 00	 call	 ?erase@?$ImVector@PAD@@QAEPAPADPBQAD@Z ; ImVector<char *>::erase

; 3789 :                 break;

  000de	eb 05		 jmp	 SHORT $LN3@ExecComman
$LN11@ExecComman:

; 3790 :             }

  000e0	e9 7b ff ff ff	 jmp	 $LN2@ExecComman
$LN3@ExecComman:

; 3791 :         History.push_back(Strdup(command_line));

  000e5	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  000e8	50		 push	 eax
  000e9	e8 00 00 00 00	 call	 ?Strdup@ExampleAppConsole@@SAPADPBD@Z ; ExampleAppConsole::Strdup
  000ee	83 c4 04	 add	 esp, 4
  000f1	89 85 fc fe ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000f7	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000fd	51		 push	 ecx
  000fe	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00101	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00107	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PAD@@QAEXABQAD@Z ; ImVector<char *>::push_back

; 3792 : 
; 3793 :         // Process command
; 3794 :         if (Stricmp(command_line, "CLEAR") == 0)

  0010c	68 00 00 00 00	 push	 OFFSET ??_C@_05PONODPI@CLEAR@
  00111	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  00114	50		 push	 eax
  00115	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPBD0@Z ; ExampleAppConsole::Stricmp
  0011a	83 c4 08	 add	 esp, 8
  0011d	85 c0		 test	 eax, eax
  0011f	75 0d		 jne	 SHORT $LN12@ExecComman

; 3795 :         {
; 3796 :             ClearLog();

  00121	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00124	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QAEXXZ ; ExampleAppConsole::ClearLog

; 3797 :         }

  00129	e9 17 01 00 00	 jmp	 $LN13@ExecComman
$LN12@ExecComman:

; 3798 :         else if (Stricmp(command_line, "HELP") == 0)

  0012e	68 00 00 00 00	 push	 OFFSET ??_C@_04DOKPJKJF@HELP@
  00133	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  00136	50		 push	 eax
  00137	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPBD0@Z ; ExampleAppConsole::Stricmp
  0013c	83 c4 08	 add	 esp, 8
  0013f	85 c0		 test	 eax, eax
  00141	75 5e		 jne	 SHORT $LN14@ExecComman

; 3799 :         {
; 3800 :             AddLog("Commands:");

  00143	68 00 00 00 00	 push	 OFFSET ??_C@_09GJFNIAOH@Commands?3@
  00148	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0014b	50		 push	 eax
  0014c	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00151	83 c4 08	 add	 esp, 8

; 3801 :             for (int i = 0; i < Commands.Size; i++)

  00154	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$4[ebp], 0
  0015b	eb 09		 jmp	 SHORT $LN7@ExecComman
$LN5@ExecComman:
  0015d	8b 45 e0	 mov	 eax, DWORD PTR _i$4[ebp]
  00160	83 c0 01	 add	 eax, 1
  00163	89 45 e0	 mov	 DWORD PTR _i$4[ebp], eax
$LN7@ExecComman:
  00166	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00169	8b 4d e0	 mov	 ecx, DWORD PTR _i$4[ebp]
  0016c	3b 88 0c 01 00
	00		 cmp	 ecx, DWORD PTR [eax+268]
  00172	7d 28		 jge	 SHORT $LN6@ExecComman

; 3802 :                 AddLog("- %s", Commands[i]);

  00174	8b 45 e0	 mov	 eax, DWORD PTR _i$4[ebp]
  00177	50		 push	 eax
  00178	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0017b	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00181	e8 00 00 00 00	 call	 ??A?$ImVector@PBD@@QAEAAPBDH@Z ; ImVector<char const *>::operator[]
  00186	8b 08		 mov	 ecx, DWORD PTR [eax]
  00188	51		 push	 ecx
  00189	68 00 00 00 00	 push	 OFFSET ??_C@_04JKCKOCFH@?9?5?$CFs@
  0018e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00191	52		 push	 edx
  00192	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00197	83 c4 0c	 add	 esp, 12			; 0000000cH
  0019a	eb c1		 jmp	 SHORT $LN5@ExecComman
$LN6@ExecComman:

; 3803 :         }

  0019c	e9 a4 00 00 00	 jmp	 $LN13@ExecComman
$LN14@ExecComman:

; 3804 :         else if (Stricmp(command_line, "HISTORY") == 0)

  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_07DBIJIOJO@HISTORY@
  001a6	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  001a9	50		 push	 eax
  001aa	e8 00 00 00 00	 call	 ?Stricmp@ExampleAppConsole@@SAHPBD0@Z ; ExampleAppConsole::Stricmp
  001af	83 c4 08	 add	 esp, 8
  001b2	85 c0		 test	 eax, eax
  001b4	75 7a		 jne	 SHORT $LN16@ExecComman

; 3805 :         {
; 3806 :             int first = History.Size - 10;

  001b6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001b9	8b 88 18 01 00
	00		 mov	 ecx, DWORD PTR [eax+280]
  001bf	83 e9 0a	 sub	 ecx, 10			; 0000000aH
  001c2	89 4d d4	 mov	 DWORD PTR _first$3[ebp], ecx

; 3807 :             for (int i = first > 0 ? first : 0; i < History.Size; i++)

  001c5	83 7d d4 00	 cmp	 DWORD PTR _first$3[ebp], 0
  001c9	7e 0b		 jle	 SHORT $LN19@ExecComman
  001cb	8b 45 d4	 mov	 eax, DWORD PTR _first$3[ebp]
  001ce	89 85 f4 fe ff
	ff		 mov	 DWORD PTR tv161[ebp], eax
  001d4	eb 0a		 jmp	 SHORT $LN20@ExecComman
$LN19@ExecComman:
  001d6	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv161[ebp], 0
$LN20@ExecComman:
  001e0	8b 8d f4 fe ff
	ff		 mov	 ecx, DWORD PTR tv161[ebp]
  001e6	89 4d c8	 mov	 DWORD PTR _i$2[ebp], ecx
  001e9	eb 09		 jmp	 SHORT $LN10@ExecComman
$LN8@ExecComman:
  001eb	8b 45 c8	 mov	 eax, DWORD PTR _i$2[ebp]
  001ee	83 c0 01	 add	 eax, 1
  001f1	89 45 c8	 mov	 DWORD PTR _i$2[ebp], eax
$LN10@ExecComman:
  001f4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f7	8b 4d c8	 mov	 ecx, DWORD PTR _i$2[ebp]
  001fa	3b 88 18 01 00
	00		 cmp	 ecx, DWORD PTR [eax+280]
  00200	7d 2c		 jge	 SHORT $LN9@ExecComman

; 3808 :                 AddLog("%3d: %s\n", i, History[i]);

  00202	8b 45 c8	 mov	 eax, DWORD PTR _i$2[ebp]
  00205	50		 push	 eax
  00206	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00209	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0020f	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  00214	8b 08		 mov	 ecx, DWORD PTR [eax]
  00216	51		 push	 ecx
  00217	8b 55 c8	 mov	 edx, DWORD PTR _i$2[ebp]
  0021a	52		 push	 edx
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_08PKLPHKJF@?$CF3d?3?5?$CFs?6@
  00220	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00223	50		 push	 eax
  00224	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00229	83 c4 10	 add	 esp, 16			; 00000010H
  0022c	eb bd		 jmp	 SHORT $LN8@ExecComman
$LN9@ExecComman:

; 3809 :         }

  0022e	eb 15		 jmp	 SHORT $LN13@ExecComman
$LN16@ExecComman:

; 3810 :         else
; 3811 :         {
; 3812 :             AddLog("Unknown command: '%s'\n", command_line);

  00230	8b 45 08	 mov	 eax, DWORD PTR _command_line$[ebp]
  00233	50		 push	 eax
  00234	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@OKLFOGKH@Unknown?5command?3?5?8?$CFs?8?6@
  00239	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0023c	51		 push	 ecx
  0023d	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00242	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN13@ExecComman:

; 3813 :         }
; 3814 : 
; 3815 :         // On commad input, we scroll to bottom even if AutoScroll==false
; 3816 :         ScrollToBottom = true;

  00245	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00248	c6 80 39 02 00
	00 01		 mov	 BYTE PTR [eax+569], 1

; 3817 :     }

  0024f	5f		 pop	 edi
  00250	5e		 pop	 esi
  00251	5b		 pop	 ebx
  00252	81 c4 0c 01 00
	00		 add	 esp, 268		; 0000010cH
  00258	3b ec		 cmp	 ebp, esp
  0025a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0025f	8b e5		 mov	 esp, ebp
  00261	5d		 pop	 ebp
  00262	c2 04 00	 ret	 4
?ExecCommand@ExampleAppConsole@@QAEXPBD@Z ENDP		; ExampleAppConsole::ExecCommand
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Draw@ExampleAppConsole@@QAEXPBDPA_N@Z
_TEXT	SEGMENT
tv419 = -428						; size = 4
tv432 = -424						; size = 4
tv415 = -420						; size = 4
tv356 = -420						; size = 4
$T1 = -412						; size = 16
$T2 = -388						; size = 16
$T3 = -364						; size = 8
$T4 = -348						; size = 8
$T5 = -332						; size = 8
$T6 = -316						; size = 8
$T7 = -300						; size = 8
_s$8 = -92						; size = 4
_reclaim_focus$ = -77					; size = 1
_pop_color$9 = -65					; size = 1
_item$10 = -56						; size = 4
_i$11 = -44						; size = 4
_footer_height_to_reserve$ = -32			; size = 4
_copy_to_clipboard$ = -17				; size = 1
_this$ = -8						; size = 4
_title$ = 8						; size = 4
_p_open$ = 12						; size = 4
?Draw@ExampleAppConsole@@QAEXPBDPA_N@Z PROC		; ExampleAppConsole::Draw, COMDAT
; _this$ = ecx

; 3667 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ac 01 00
	00		 sub	 esp, 428		; 000001acH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 54 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-428]
  00013	b9 6b 00 00 00	 mov	 ecx, 107		; 0000006bH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3668 :         ImGui::SetNextWindowSize(ImVec2(520,600), ImGuiCond_FirstUseEver);

  0002d	6a 04		 push	 4
  0002f	51		 push	 ecx
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44160000
  00038	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003d	51		 push	 ecx
  0003e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44020000
  00046	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004b	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00051	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00056	50		 push	 eax
  00057	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetNextWindowSize
  0005c	83 c4 08	 add	 esp, 8

; 3669 :         if (!ImGui::Begin(title, p_open))

  0005f	6a 00		 push	 0
  00061	8b 45 0c	 mov	 eax, DWORD PTR _p_open$[ebp]
  00064	50		 push	 eax
  00065	8b 4d 08	 mov	 ecx, DWORD PTR _title$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	0f b6 d0	 movzx	 edx, al
  00074	85 d2		 test	 edx, edx
  00076	75 0a		 jne	 SHORT $LN5@Draw

; 3670 :         {
; 3671 :             ImGui::End();

  00078	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 3672 :             return;

  0007d	e9 88 05 00 00	 jmp	 $LN1@Draw
$LN5@Draw:

; 3673 :         }
; 3674 : 
; 3675 :         // As a specific feature guaranteed by the library, after calling Begin() the last Item represent the title bar. So e.g. IsItemHovered() will return true when hovering the title bar.
; 3676 :         // Here we create a context menu only available from the title bar.
; 3677 :         if (ImGui::BeginPopupContextItem())

  00082	6a 01		 push	 1
  00084	6a 00		 push	 0
  00086	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopupContextItem
  0008b	83 c4 08	 add	 esp, 8
  0008e	0f b6 c0	 movzx	 eax, al
  00091	85 c0		 test	 eax, eax
  00093	74 25		 je	 SHORT $LN6@Draw

; 3678 :         {
; 3679 :             if (ImGui::MenuItem("Close Console"))

  00095	6a 01		 push	 1
  00097	6a 00		 push	 0
  00099	6a 00		 push	 0
  0009b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GDIOPKGP@Close?5Console@
  000a0	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000a5	83 c4 10	 add	 esp, 16			; 00000010H
  000a8	0f b6 c0	 movzx	 eax, al
  000ab	85 c0		 test	 eax, eax
  000ad	74 06		 je	 SHORT $LN7@Draw

; 3680 :                 *p_open = false;

  000af	8b 45 0c	 mov	 eax, DWORD PTR _p_open$[ebp]
  000b2	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN7@Draw:

; 3681 :             ImGui::EndPopup();

  000b5	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN6@Draw:

; 3682 :         }
; 3683 : 
; 3684 :         ImGui::TextWrapped("This example implements a console with basic coloring, completion and history. A more elaborate implementation may want to store entries along with extra data such as timestamp, emitter, etc.");

  000ba	68 00 00 00 00	 push	 OFFSET ??_C@_0MA@ICGIOBFG@This?5example?5implements?5a?5conso@
  000bf	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  000c4	83 c4 04	 add	 esp, 4

; 3685 :         ImGui::TextWrapped("Enter 'HELP' for help, press TAB to use text completion.");

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@NBHLDCP@Enter?5?8HELP?8?5for?5help?0?5press?5TA@
  000cc	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  000d1	83 c4 04	 add	 esp, 4

; 3686 : 
; 3687 :         // TODO: display items starting from the bottom
; 3688 : 
; 3689 :         if (ImGui::SmallButton("Add Dummy Text"))  { AddLog("%d some text", Items.Size); AddLog("some more text"); AddLog("display very important message here!"); } ImGui::SameLine();

  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CGJDLLEJ@Add?5Dummy?5Text@
  000d9	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  000de	83 c4 04	 add	 esp, 4
  000e1	0f b6 c0	 movzx	 eax, al
  000e4	85 c0		 test	 eax, eax
  000e6	74 3d		 je	 SHORT $LN8@Draw
  000e8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000eb	8b 88 00 01 00
	00		 mov	 ecx, DWORD PTR [eax+256]
  000f1	51		 push	 ecx
  000f2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OJGBPOOP@?$CFd?5some?5text@
  000f7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000fa	52		 push	 edx
  000fb	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00100	83 c4 0c	 add	 esp, 12			; 0000000cH
  00103	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BMHJKMPF@some?5more?5text@
  00108	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010b	50		 push	 eax
  0010c	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00111	83 c4 08	 add	 esp, 8
  00114	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PEIDNPCH@display?5very?5important?5message?5@
  00119	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0011c	50		 push	 eax
  0011d	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00122	83 c4 08	 add	 esp, 8
$LN8@Draw:
  00125	51		 push	 ecx
  00126	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	51		 push	 ecx
  00134	0f 57 c0	 xorps	 xmm0, xmm0
  00137	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00141	83 c4 08	 add	 esp, 8

; 3690 :         if (ImGui::SmallButton("Add Dummy Error")) { AddLog("[error] something went wrong"); } ImGui::SameLine();

  00144	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HHKLEHKC@Add?5Dummy?5Error@
  00149	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  0014e	83 c4 04	 add	 esp, 4
  00151	0f b6 c0	 movzx	 eax, al
  00154	85 c0		 test	 eax, eax
  00156	74 11		 je	 SHORT $LN9@Draw
  00158	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KNPJMMPE@?$FLerror?$FN?5something?5went?5wrong@
  0015d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00160	50		 push	 eax
  00161	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00166	83 c4 08	 add	 esp, 8
$LN9@Draw:
  00169	51		 push	 ecx
  0016a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00177	51		 push	 ecx
  00178	0f 57 c0	 xorps	 xmm0, xmm0
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00185	83 c4 08	 add	 esp, 8

; 3691 :         if (ImGui::SmallButton("Clear")) { ClearLog(); } ImGui::SameLine();

  00188	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNHABIA@Clear@
  0018d	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  00192	83 c4 04	 add	 esp, 4
  00195	0f b6 c0	 movzx	 eax, al
  00198	85 c0		 test	 eax, eax
  0019a	74 08		 je	 SHORT $LN10@Draw
  0019c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0019f	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QAEXXZ ; ExampleAppConsole::ClearLog
$LN10@Draw:
  001a4	51		 push	 ecx
  001a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b2	51		 push	 ecx
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  001c0	83 c4 08	 add	 esp, 8

; 3692 :         bool copy_to_clipboard = ImGui::SmallButton("Copy");

  001c3	68 00 00 00 00	 push	 OFFSET ??_C@_04OPMHGHMB@Copy@
  001c8	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  001cd	83 c4 04	 add	 esp, 4
  001d0	88 45 ef	 mov	 BYTE PTR _copy_to_clipboard$[ebp], al

; 3693 :         //static float t = 0.0f; if (ImGui::GetTime() - t > 0.02f) { t = ImGui::GetTime(); AddLog("Spam %f", t); }
; 3694 : 
; 3695 :         ImGui::Separator();

  001d3	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3696 : 
; 3697 :         // Options menu
; 3698 :         if (ImGui::BeginPopup("Options"))

  001d8	6a 00		 push	 0
  001da	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  001df	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  001e4	83 c4 08	 add	 esp, 8
  001e7	0f b6 c0	 movzx	 eax, al
  001ea	85 c0		 test	 eax, eax
  001ec	74 1b		 je	 SHORT $LN11@Draw

; 3699 :         {
; 3700 :             ImGui::Checkbox("Auto-scroll", &AutoScroll);

  001ee	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f1	05 38 02 00 00	 add	 eax, 568		; 00000238H
  001f6	50		 push	 eax
  001f7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IFKANFPJ@Auto?9scroll@
  001fc	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00201	83 c4 08	 add	 esp, 8

; 3701 :             ImGui::EndPopup();

  00204	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN11@Draw:

; 3702 :         }
; 3703 : 
; 3704 :         // Options, Filter
; 3705 :         if (ImGui::Button("Options"))

  00209	51		 push	 ecx
  0020a	0f 57 c0	 xorps	 xmm0, xmm0
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	51		 push	 ecx
  00213	0f 57 c0	 xorps	 xmm0, xmm0
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00221	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00226	50		 push	 eax
  00227	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  0022c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00231	83 c4 08	 add	 esp, 8
  00234	0f b6 c0	 movzx	 eax, al
  00237	85 c0		 test	 eax, eax
  00239	74 0d		 je	 SHORT $LN12@Draw

; 3706 :             ImGui::OpenPopup("Options");

  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  00240	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  00245	83 c4 04	 add	 esp, 4
$LN12@Draw:

; 3707 :         ImGui::SameLine();

  00248	51		 push	 ecx
  00249	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00251	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00256	51		 push	 ecx
  00257	0f 57 c0	 xorps	 xmm0, xmm0
  0025a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0025f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00264	83 c4 08	 add	 esp, 8

; 3708 :         Filter.Draw("Filter (\"incl,-excl\") (\"error\")", 180);

  00267	51		 push	 ecx
  00268	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43340000
  00270	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00275	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@HIABFBKB@Filter?5?$CI?$CCincl?0?9excl?$CC?$CJ?5?$CI?$CCerror?$CC?$CJ@
  0027a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0027d	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00283	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QAE_NPBDM@Z ; ImGuiTextFilter::Draw

; 3709 :         ImGui::Separator();

  00288	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3710 : 
; 3711 :         const float footer_height_to_reserve = ImGui::GetStyle().ItemSpacing.y + ImGui::GetFrameHeightWithSpacing(); // 1 separator, 1 input text

  0028d	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  00292	8b f0		 mov	 esi, eax
  00294	e8 00 00 00 00	 call	 ?GetFrameHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetFrameHeightWithSpacing
  00299	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv356[ebp]
  0029f	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv356[ebp]
  002a7	f3 0f 58 46 4c	 addss	 xmm0, DWORD PTR [esi+76]
  002ac	f3 0f 11 45 e0	 movss	 DWORD PTR _footer_height_to_reserve$[ebp], xmm0

; 3712 :         ImGui::BeginChild("ScrollingRegion", ImVec2(0, -footer_height_to_reserve), false, ImGuiWindowFlags_HorizontalScrollbar); // Leave room for 1 separator + 1 InputText

  002b1	68 00 08 00 00	 push	 2048			; 00000800H
  002b6	6a 00		 push	 0
  002b8	f3 0f 10 45 e0	 movss	 xmm0, DWORD PTR _footer_height_to_reserve$[ebp]
  002bd	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  002c4	51		 push	 ecx
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	51		 push	 ecx
  002cb	0f 57 c0	 xorps	 xmm0, xmm0
  002ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d3	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  002d9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002de	50		 push	 eax
  002df	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KOEFNJOK@ScrollingRegion@
  002e4	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  002e9	83 c4 10	 add	 esp, 16			; 00000010H

; 3713 :         if (ImGui::BeginPopupContextWindow())

  002ec	6a 01		 push	 1
  002ee	6a 01		 push	 1
  002f0	6a 00		 push	 0
  002f2	e8 00 00 00 00	 call	 ?BeginPopupContextWindow@ImGui@@YA_NPBDH_N@Z ; ImGui::BeginPopupContextWindow
  002f7	83 c4 0c	 add	 esp, 12			; 0000000cH
  002fa	0f b6 c0	 movzx	 eax, al
  002fd	85 c0		 test	 eax, eax
  002ff	74 43		 je	 SHORT $LN13@Draw

; 3714 :         {
; 3715 :             if (ImGui::Selectable("Clear")) ClearLog();

  00301	51		 push	 ecx
  00302	0f 57 c0	 xorps	 xmm0, xmm0
  00305	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030a	51		 push	 ecx
  0030b	0f 57 c0	 xorps	 xmm0, xmm0
  0030e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00313	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00319	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0031e	50		 push	 eax
  0031f	6a 00		 push	 0
  00321	6a 00		 push	 0
  00323	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNHABIA@Clear@
  00328	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  0032d	83 c4 10	 add	 esp, 16			; 00000010H
  00330	0f b6 c0	 movzx	 eax, al
  00333	85 c0		 test	 eax, eax
  00335	74 08		 je	 SHORT $LN14@Draw
  00337	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0033a	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QAEXXZ ; ExampleAppConsole::ClearLog
$LN14@Draw:

; 3716 :             ImGui::EndPopup();

  0033f	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN13@Draw:

; 3717 :         }
; 3718 : 
; 3719 :         // Display every line as a separate entry so we can change their color or add custom widgets. If you only want raw text you can use ImGui::TextUnformatted(log.begin(), log.end());
; 3720 :         // NB- if you have thousands of entries this approach may be too inefficient and may require user-side clipping to only process visible items.
; 3721 :         // You can seek and display only the lines that are visible using the ImGuiListClipper helper, if your elements are evenly spaced and you have cheap random access to the elements.
; 3722 :         // To use the clipper we could replace the 'for (int i = 0; i < Items.Size; i++)' loop with:
; 3723 :         //     ImGuiListClipper clipper(Items.Size);
; 3724 :         //     while (clipper.Step())
; 3725 :         //         for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)
; 3726 :         // However, note that you can not use this code as is if a filter is active because it breaks the 'cheap random-access' property. We would need random-access on the post-filtered list.
; 3727 :         // A typical application wanting coarse clipping and filtering may want to pre-compute an array of indices that passed the filtering test, recomputing this array when user changes the filter,
; 3728 :         // and appending newly elements as they are inserted. This is left as a task to the user until we can manage to improve this example code!
; 3729 :         // If your items are of variable size you may want to implement code similar to what ImGuiListClipper does. Or split your data into fixed height items to allow random-seeking into your list.
; 3730 :         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(4,1)); // Tighten spacing

  00344	51		 push	 ecx
  00345	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0034d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00352	51		 push	 ecx
  00353	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  0035b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00360	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00366	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0036b	50		 push	 eax
  0036c	6a 0d		 push	 13			; 0000000dH
  0036e	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  00373	83 c4 08	 add	 esp, 8

; 3731 :         if (copy_to_clipboard)

  00376	0f b6 45 ef	 movzx	 eax, BYTE PTR _copy_to_clipboard$[ebp]
  0037a	85 c0		 test	 eax, eax
  0037c	74 0a		 je	 SHORT $LN15@Draw

; 3732 :             ImGui::LogToClipboard();

  0037e	6a ff		 push	 -1
  00380	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
  00385	83 c4 04	 add	 esp, 4
$LN15@Draw:

; 3733 :         for (int i = 0; i < Items.Size; i++)

  00388	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _i$11[ebp], 0
  0038f	eb 09		 jmp	 SHORT $LN4@Draw
$LN2@Draw:
  00391	8b 45 d4	 mov	 eax, DWORD PTR _i$11[ebp]
  00394	83 c0 01	 add	 eax, 1
  00397	89 45 d4	 mov	 DWORD PTR _i$11[ebp], eax
$LN4@Draw:
  0039a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0039d	8b 4d d4	 mov	 ecx, DWORD PTR _i$11[ebp]
  003a0	3b 88 00 01 00
	00		 cmp	 ecx, DWORD PTR [eax+256]
  003a6	0f 8d 39 01 00
	00		 jge	 $LN3@Draw

; 3734 :         {
; 3735 :             const char* item = Items[i];

  003ac	8b 45 d4	 mov	 eax, DWORD PTR _i$11[ebp]
  003af	50		 push	 eax
  003b0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003b3	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  003b9	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  003be	8b 08		 mov	 ecx, DWORD PTR [eax]
  003c0	89 4d c8	 mov	 DWORD PTR _item$10[ebp], ecx

; 3736 :             if (!Filter.PassFilter(item))

  003c3	6a 00		 push	 0
  003c5	8b 45 c8	 mov	 eax, DWORD PTR _item$10[ebp]
  003c8	50		 push	 eax
  003c9	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  003cc	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  003d2	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QBE_NPBD0@Z ; ImGuiTextFilter::PassFilter
  003d7	0f b6 c8	 movzx	 ecx, al
  003da	85 c9		 test	 ecx, ecx
  003dc	75 02		 jne	 SHORT $LN16@Draw

; 3737 :                 continue;

  003de	eb b1		 jmp	 SHORT $LN2@Draw
$LN16@Draw:

; 3738 : 
; 3739 :             // Normally you would store more information in your item (e.g. make Items[] an array of structure, store color/type etc.)
; 3740 :             bool pop_color = false;

  003e0	c6 45 bf 00	 mov	 BYTE PTR _pop_color$9[ebp], 0

; 3741 :             if (strstr(item, "[error]"))            { ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.4f, 0.4f, 1.0f)); pop_color = true; }

  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_07LFMCMLFD@?$FLerror?$FN@
  003e9	8b 45 c8	 mov	 eax, DWORD PTR _item$10[ebp]
  003ec	50		 push	 eax
  003ed	e8 00 00 00 00	 call	 _strstr
  003f2	83 c4 08	 add	 esp, 8
  003f5	85 c0		 test	 eax, eax
  003f7	74 54		 je	 SHORT $LN17@Draw
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	51		 push	 ecx
  00416	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  0041e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00423	51		 push	 ecx
  00424	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0042c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00431	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00437	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0043c	50		 push	 eax
  0043d	6a 00		 push	 0
  0043f	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  00444	83 c4 08	 add	 esp, 8
  00447	c6 45 bf 01	 mov	 BYTE PTR _pop_color$9[ebp], 1
  0044b	eb 73		 jmp	 SHORT $LN19@Draw
$LN17@Draw:

; 3742 :             else if (strncmp(item, "# ", 2) == 0)   { ImGui::PushStyleColor(ImGuiCol_Text, ImVec4(1.0f, 0.8f, 0.6f, 1.0f)); pop_color = true; }

  0044d	8b f4		 mov	 esi, esp
  0044f	6a 02		 push	 2
  00451	68 00 00 00 00	 push	 OFFSET ??_C@_02KPDBPKPG@?$CD?5@
  00456	8b 45 c8	 mov	 eax, DWORD PTR _item$10[ebp]
  00459	50		 push	 eax
  0045a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__strncmp
  00460	83 c4 0c	 add	 esp, 12			; 0000000cH
  00463	3b f4		 cmp	 esi, esp
  00465	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0046a	85 c0		 test	 eax, eax
  0046c	75 52		 jne	 SHORT $LN19@Draw
  0046e	51		 push	 ecx
  0046f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00477	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047c	51		 push	 ecx
  0047d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  00485	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048a	51		 push	 ecx
  0048b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	51		 push	 ecx
  00499	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a6	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  004ac	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  004b1	50		 push	 eax
  004b2	6a 00		 push	 0
  004b4	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  004b9	83 c4 08	 add	 esp, 8
  004bc	c6 45 bf 01	 mov	 BYTE PTR _pop_color$9[ebp], 1
$LN19@Draw:

; 3743 :             ImGui::TextUnformatted(item);

  004c0	6a 00		 push	 0
  004c2	8b 45 c8	 mov	 eax, DWORD PTR _item$10[ebp]
  004c5	50		 push	 eax
  004c6	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  004cb	83 c4 08	 add	 esp, 8

; 3744 :             if (pop_color)

  004ce	0f b6 45 bf	 movzx	 eax, BYTE PTR _pop_color$9[ebp]
  004d2	85 c0		 test	 eax, eax
  004d4	74 0a		 je	 SHORT $LN20@Draw

; 3745 :                 ImGui::PopStyleColor();

  004d6	6a 01		 push	 1
  004d8	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
  004dd	83 c4 04	 add	 esp, 4
$LN20@Draw:

; 3746 :         }

  004e0	e9 ac fe ff ff	 jmp	 $LN2@Draw
$LN3@Draw:

; 3747 :         if (copy_to_clipboard)

  004e5	0f b6 45 ef	 movzx	 eax, BYTE PTR _copy_to_clipboard$[ebp]
  004e9	85 c0		 test	 eax, eax
  004eb	74 05		 je	 SHORT $LN21@Draw

; 3748 :             ImGui::LogFinish();

  004ed	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN21@Draw:

; 3749 : 
; 3750 :         if (ScrollToBottom || (AutoScroll && ImGui::GetScrollY() >= ImGui::GetScrollMaxY()))

  004f2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004f5	0f b6 88 39 02
	00 00		 movzx	 ecx, BYTE PTR [eax+569]
  004fc	85 c9		 test	 ecx, ecx
  004fe	75 45		 jne	 SHORT $LN23@Draw
  00500	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00503	0f b6 88 38 02
	00 00		 movzx	 ecx, BYTE PTR [eax+568]
  0050a	85 c9		 test	 ecx, ecx
  0050c	74 4d		 je	 SHORT $LN22@Draw
  0050e	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  00513	d9 9d 5c fe ff
	ff		 fstp	 DWORD PTR tv415[ebp]
  00519	f3 0f 10 85 5c
	fe ff ff	 movss	 xmm0, DWORD PTR tv415[ebp]
  00521	f3 0f 11 85 58
	fe ff ff	 movss	 DWORD PTR tv432[ebp], xmm0
  00529	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  0052e	d9 9d 54 fe ff
	ff		 fstp	 DWORD PTR tv419[ebp]
  00534	f3 0f 10 85 58
	fe ff ff	 movss	 xmm0, DWORD PTR tv432[ebp]
  0053c	0f 2f 85 54 fe
	ff ff		 comiss	 xmm0, DWORD PTR tv419[ebp]
  00543	72 16		 jb	 SHORT $LN22@Draw
$LN23@Draw:

; 3751 :             ImGui::SetScrollHereY(1.0f);

  00545	51		 push	 ecx
  00546	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0054e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00553	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
  00558	83 c4 04	 add	 esp, 4
$LN22@Draw:

; 3752 :         ScrollToBottom = false;

  0055b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0055e	c6 80 39 02 00
	00 00		 mov	 BYTE PTR [eax+569], 0

; 3753 : 
; 3754 :         ImGui::PopStyleVar();

  00565	6a 01		 push	 1
  00567	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  0056c	83 c4 04	 add	 esp, 4

; 3755 :         ImGui::EndChild();

  0056f	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 3756 :         ImGui::Separator();

  00574	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3757 : 
; 3758 :         // Command-line
; 3759 :         bool reclaim_focus = false;

  00579	c6 45 b3 00	 mov	 BYTE PTR _reclaim_focus$[ebp], 0

; 3760 :         if (ImGui::InputText("Input", InputBuf, IM_ARRAYSIZE(InputBuf), ImGuiInputTextFlags_EnterReturnsTrue|ImGuiInputTextFlags_CallbackCompletion|ImGuiInputTextFlags_CallbackHistory, &TextEditCallbackStub, (void*)this))

  0057d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00580	50		 push	 eax
  00581	68 00 00 00 00	 push	 OFFSET ?TextEditCallbackStub@ExampleAppConsole@@SAHPAUImGuiInputTextCallbackData@@@Z ; ExampleAppConsole::TextEditCallbackStub
  00586	68 e0 00 00 00	 push	 224			; 000000e0H
  0058b	68 00 01 00 00	 push	 256			; 00000100H
  00590	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00593	51		 push	 ecx
  00594	68 00 00 00 00	 push	 OFFSET ??_C@_05DCDOHKAB@Input@
  00599	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  0059e	83 c4 18	 add	 esp, 24			; 00000018H
  005a1	0f b6 d0	 movzx	 edx, al
  005a4	85 d2		 test	 edx, edx
  005a6	74 46		 je	 SHORT $LN24@Draw

; 3761 :         {
; 3762 :             char* s = InputBuf;

  005a8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  005ab	89 45 a4	 mov	 DWORD PTR _s$8[ebp], eax

; 3763 :             Strtrim(s);

  005ae	8b 45 a4	 mov	 eax, DWORD PTR _s$8[ebp]
  005b1	50		 push	 eax
  005b2	e8 00 00 00 00	 call	 ?Strtrim@ExampleAppConsole@@SAXPAD@Z ; ExampleAppConsole::Strtrim
  005b7	83 c4 04	 add	 esp, 4

; 3764 :             if (s[0])

  005ba	b8 01 00 00 00	 mov	 eax, 1
  005bf	6b c8 00	 imul	 ecx, eax, 0
  005c2	8b 55 a4	 mov	 edx, DWORD PTR _s$8[ebp]
  005c5	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  005c9	85 c0		 test	 eax, eax
  005cb	74 0c		 je	 SHORT $LN25@Draw

; 3765 :                 ExecCommand(s);

  005cd	8b 45 a4	 mov	 eax, DWORD PTR _s$8[ebp]
  005d0	50		 push	 eax
  005d1	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  005d4	e8 00 00 00 00	 call	 ?ExecCommand@ExampleAppConsole@@QAEXPBD@Z ; ExampleAppConsole::ExecCommand
$LN25@Draw:

; 3766 :             strcpy(s, "");

  005d9	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  005de	8b 45 a4	 mov	 eax, DWORD PTR _s$8[ebp]
  005e1	50		 push	 eax
  005e2	e8 00 00 00 00	 call	 _strcpy
  005e7	83 c4 08	 add	 esp, 8

; 3767 :             reclaim_focus = true;

  005ea	c6 45 b3 01	 mov	 BYTE PTR _reclaim_focus$[ebp], 1
$LN24@Draw:

; 3768 :         }
; 3769 : 
; 3770 :         // Auto-focus on window apparition
; 3771 :         ImGui::SetItemDefaultFocus();

  005ee	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus

; 3772 :         if (reclaim_focus)

  005f3	0f b6 45 b3	 movzx	 eax, BYTE PTR _reclaim_focus$[ebp]
  005f7	85 c0		 test	 eax, eax
  005f9	74 0a		 je	 SHORT $LN26@Draw

; 3773 :             ImGui::SetKeyboardFocusHere(-1); // Auto focus previous widget

  005fb	6a ff		 push	 -1
  005fd	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
  00602	83 c4 04	 add	 esp, 4
$LN26@Draw:

; 3774 : 
; 3775 :         ImGui::End();

  00605	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@Draw:

; 3776 :     }

  0060a	5f		 pop	 edi
  0060b	5e		 pop	 esi
  0060c	5b		 pop	 ebx
  0060d	81 c4 ac 01 00
	00		 add	 esp, 428		; 000001acH
  00613	3b ec		 cmp	 ebp, esp
  00615	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0061a	8b e5		 mov	 esp, ebp
  0061c	5d		 pop	 ebp
  0061d	c2 08 00	 ret	 8
?Draw@ExampleAppConsole@@QAEXPBDPA_N@Z ENDP		; ExampleAppConsole::Draw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?AddLog@ExampleAppConsole@@QAAXPBDZZ
_TEXT	SEGMENT
$T1 = -1656						; size = 4
$T2 = -1644						; size = 4
_args$ = -1044						; size = 4
_buf$ = -1032						; size = 1024
__$ArrayPad$ = -4					; size = 4
_this$ = 8						; size = 4
_fmt$ = 12						; size = 4
?AddLog@ExampleAppConsole@@QAAXPBDZZ PROC		; ExampleAppConsole::AddLog, COMDAT

; 3655 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 06 00
	00		 sub	 esp, 1660		; 0000067cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 84 f9 ff
	ff		 lea	 edi, DWORD PTR [ebp-1660]
  00012	b9 9f 01 00 00	 mov	 ecx, 415		; 0000019fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3656 :         // FIXME-OPT
; 3657 :         char buf[1024];
; 3658 :         va_list args;
; 3659 :         va_start(args, fmt);

  00032	8d 45 10	 lea	 eax, DWORD PTR _fmt$[ebp+4]
  00035	89 85 ec fb ff
	ff		 mov	 DWORD PTR _args$[ebp], eax

; 3660 :         vsnprintf(buf, IM_ARRAYSIZE(buf), fmt, args);

  0003b	8b 85 ec fb ff
	ff		 mov	 eax, DWORD PTR _args$[ebp]
  00041	50		 push	 eax
  00042	8b 4d 0c	 mov	 ecx, DWORD PTR _fmt$[ebp]
  00045	51		 push	 ecx
  00046	68 00 04 00 00	 push	 1024			; 00000400H
  0004b	8d 95 f8 fb ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00051	52		 push	 edx
  00052	e8 00 00 00 00	 call	 __vsnprintf
  00057	83 c4 10	 add	 esp, 16			; 00000010H

; 3661 :         buf[IM_ARRAYSIZE(buf)-1] = 0;

  0005a	b8 01 00 00 00	 mov	 eax, 1
  0005f	69 c8 ff 03 00
	00		 imul	 ecx, eax, 1023
  00065	89 8d 94 f9 ff
	ff		 mov	 DWORD PTR $T2[ebp], ecx
  0006b	81 bd 94 f9 ff
	ff 00 04 00 00	 cmp	 DWORD PTR $T2[ebp], 1024 ; 00000400H
  00075	73 02		 jae	 SHORT $LN3@AddLog
  00077	eb 05		 jmp	 SHORT $LN4@AddLog
$LN3@AddLog:
  00079	e8 00 00 00 00	 call	 ___report_rangecheckfailure
$LN4@AddLog:
  0007e	8b 95 94 f9 ff
	ff		 mov	 edx, DWORD PTR $T2[ebp]
  00084	c6 84 15 f8 fb
	ff ff 00	 mov	 BYTE PTR _buf$[ebp+edx], 0

; 3662 :         va_end(args);

  0008c	c7 85 ec fb ff
	ff 00 00 00 00	 mov	 DWORD PTR _args$[ebp], 0

; 3663 :         Items.push_back(Strdup(buf));

  00096	8d 85 f8 fb ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  0009c	50		 push	 eax
  0009d	e8 00 00 00 00	 call	 ?Strdup@ExampleAppConsole@@SAPADPBD@Z ; ExampleAppConsole::Strdup
  000a2	83 c4 04	 add	 esp, 4
  000a5	89 85 88 f9 ff
	ff		 mov	 DWORD PTR $T1[ebp], eax
  000ab	8d 8d 88 f9 ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000b1	51		 push	 ecx
  000b2	8b 4d 08	 mov	 ecx, DWORD PTR _this$[ebp]
  000b5	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  000bb	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PAD@@QAEXABQAD@Z ; ImVector<char *>::push_back
$LN2@AddLog:

; 3664 :     }

  000c0	52		 push	 edx
  000c1	8b cd		 mov	 ecx, ebp
  000c3	50		 push	 eax
  000c4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@AddLog
  000ca	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000cf	58		 pop	 eax
  000d0	5a		 pop	 edx
  000d1	5f		 pop	 edi
  000d2	5e		 pop	 esi
  000d3	5b		 pop	 ebx
  000d4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000d7	33 cd		 xor	 ecx, ebp
  000d9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000de	81 c4 7c 06 00
	00		 add	 esp, 1660		; 0000067cH
  000e4	3b ec		 cmp	 ebp, esp
  000e6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000eb	8b e5		 mov	 esp, ebp
  000ed	5d		 pop	 ebp
  000ee	c3		 ret	 0
  000ef	90		 npad	 1
$LN7@AddLog:
  000f0	01 00 00 00	 DD	 1
  000f4	00 00 00 00	 DD	 $LN6@AddLog
$LN6@AddLog:
  000f8	f8 fb ff ff	 DD	 -1032			; fffffbf8H
  000fc	00 04 00 00	 DD	 1024			; 00000400H
  00100	00 00 00 00	 DD	 $LN5@AddLog
$LN5@AddLog:
  00104	62		 DB	 98			; 00000062H
  00105	75		 DB	 117			; 00000075H
  00106	66		 DB	 102			; 00000066H
  00107	00		 DB	 0
?AddLog@ExampleAppConsole@@QAAXPBDZZ ENDP		; ExampleAppConsole::AddLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ClearLog@ExampleAppConsole@@QAEXXZ
_TEXT	SEGMENT
_i$1 = -20						; size = 4
_this$ = -8						; size = 4
?ClearLog@ExampleAppConsole@@QAEXXZ PROC		; ExampleAppConsole::ClearLog, COMDAT
; _this$ = ecx

; 3648 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3649 :         for (int i = 0; i < Items.Size; i++)

  0002d	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00034	eb 09		 jmp	 SHORT $LN4@ClearLog
$LN2@ClearLog:
  00036	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00039	83 c0 01	 add	 eax, 1
  0003c	89 45 ec	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@ClearLog:
  0003f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00042	8b 4d ec	 mov	 ecx, DWORD PTR _i$1[ebp]
  00045	3b 88 00 01 00
	00		 cmp	 ecx, DWORD PTR [eax+256]
  0004b	7d 29		 jge	 SHORT $LN3@ClearLog

; 3650 :             free(Items[i]);

  0004d	8b 45 ec	 mov	 eax, DWORD PTR _i$1[ebp]
  00050	50		 push	 eax
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  0005a	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  0005f	8b f4		 mov	 esi, esp
  00061	8b 08		 mov	 ecx, DWORD PTR [eax]
  00063	51		 push	 ecx
  00064	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  0006a	83 c4 04	 add	 esp, 4
  0006d	3b f4		 cmp	 esi, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	eb c0		 jmp	 SHORT $LN2@ClearLog
$LN3@ClearLog:

; 3651 :         Items.clear();

  00076	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00079	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  0007f	e8 00 00 00 00	 call	 ?clear@?$ImVector@PAD@@QAEXXZ ; ImVector<char *>::clear

; 3652 :     }

  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?ClearLog@ExampleAppConsole@@QAEXXZ ENDP		; ExampleAppConsole::ClearLog
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Strtrim@ExampleAppConsole@@SAXPAD@Z
_TEXT	SEGMENT
_str_end$ = -8						; size = 4
_str$ = 8						; size = 4
?Strtrim@ExampleAppConsole@@SAXPAD@Z PROC		; ExampleAppConsole::Strtrim, COMDAT

; 3645 :     static void  Strtrim(char* str)                                  { char* str_end = str + strlen(str); while (str_end > str && str_end[-1] == ' ') str_end--; *str_end = 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _strlen
  00031	83 c4 04	 add	 esp, 4
  00034	03 45 08	 add	 eax, DWORD PTR _str$[ebp]
  00037	89 45 f8	 mov	 DWORD PTR _str_end$[ebp], eax
$LN2@Strtrim:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _str_end$[ebp]
  0003d	3b 45 08	 cmp	 eax, DWORD PTR _str$[ebp]
  00040	76 1f		 jbe	 SHORT $LN3@Strtrim
  00042	b8 01 00 00 00	 mov	 eax, 1
  00047	6b c8 ff	 imul	 ecx, eax, -1
  0004a	8b 55 f8	 mov	 edx, DWORD PTR _str_end$[ebp]
  0004d	0f be 04 0a	 movsx	 eax, BYTE PTR [edx+ecx]
  00051	83 f8 20	 cmp	 eax, 32			; 00000020H
  00054	75 0b		 jne	 SHORT $LN3@Strtrim
  00056	8b 45 f8	 mov	 eax, DWORD PTR _str_end$[ebp]
  00059	83 e8 01	 sub	 eax, 1
  0005c	89 45 f8	 mov	 DWORD PTR _str_end$[ebp], eax
  0005f	eb d9		 jmp	 SHORT $LN2@Strtrim
$LN3@Strtrim:
  00061	8b 45 f8	 mov	 eax, DWORD PTR _str_end$[ebp]
  00064	c6 00 00	 mov	 BYTE PTR [eax], 0
  00067	5f		 pop	 edi
  00068	5e		 pop	 esi
  00069	5b		 pop	 ebx
  0006a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00070	3b ec		 cmp	 ebp, esp
  00072	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00077	8b e5		 mov	 esp, ebp
  00079	5d		 pop	 ebp
  0007a	c3		 ret	 0
?Strtrim@ExampleAppConsole@@SAXPAD@Z ENDP		; ExampleAppConsole::Strtrim
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Strdup@ExampleAppConsole@@SAPADPBD@Z
_TEXT	SEGMENT
_buf$ = -20						; size = 4
_len$ = -8						; size = 4
_str$ = 8						; size = 4
?Strdup@ExampleAppConsole@@SAPADPBD@Z PROC		; ExampleAppConsole::Strdup, COMDAT

; 3644 :     static char* Strdup(const char *str)                             { size_t len = strlen(str) + 1; void* buf = malloc(len); IM_ASSERT(buf); return (char*)memcpy(buf, (const void*)str, len); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00012	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 08	 mov	 eax, DWORD PTR _str$[ebp]
  0002b	50		 push	 eax
  0002c	e8 00 00 00 00	 call	 _strlen
  00031	83 c4 04	 add	 esp, 4
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _len$[ebp], eax
  0003a	8b f4		 mov	 esi, esp
  0003c	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0003f	50		 push	 eax
  00040	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__malloc
  00046	83 c4 04	 add	 esp, 4
  00049	3b f4		 cmp	 esi, esp
  0004b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00050	89 45 ec	 mov	 DWORD PTR _buf$[ebp], eax
  00053	83 7d ec 00	 cmp	 DWORD PTR _buf$[ebp], 0
  00057	75 21		 jne	 SHORT $LN3@Strdup
  00059	8b f4		 mov	 esi, esp
  0005b	68 3c 0e 00 00	 push	 3644			; 00000e3cH
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00065	68 00 00 00 00	 push	 OFFSET ??_C@_17ENLBLDPN@?$AAb?$AAu?$AAf@
  0006a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00070	83 c4 0c	 add	 esp, 12			; 0000000cH
  00073	3b f4		 cmp	 esi, esp
  00075	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@Strdup:
  0007a	8b 45 f8	 mov	 eax, DWORD PTR _len$[ebp]
  0007d	50		 push	 eax
  0007e	8b 4d 08	 mov	 ecx, DWORD PTR _str$[ebp]
  00081	51		 push	 ecx
  00082	8b 55 ec	 mov	 edx, DWORD PTR _buf$[ebp]
  00085	52		 push	 edx
  00086	e8 00 00 00 00	 call	 _memcpy
  0008b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008e	5f		 pop	 edi
  0008f	5e		 pop	 esi
  00090	5b		 pop	 ebx
  00091	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00097	3b ec		 cmp	 ebp, esp
  00099	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009e	8b e5		 mov	 esp, ebp
  000a0	5d		 pop	 ebp
  000a1	c3		 ret	 0
?Strdup@ExampleAppConsole@@SAPADPBD@Z ENDP		; ExampleAppConsole::Strdup
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Strnicmp@ExampleAppConsole@@SAHPBD0H@Z
_TEXT	SEGMENT
_d$ = -8						; size = 4
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
_n$ = 16						; size = 4
?Strnicmp@ExampleAppConsole@@SAHPBD0H@Z PROC		; ExampleAppConsole::Strnicmp, COMDAT

; 3643 :     static int   Strnicmp(const char* str1, const char* str2, int n) { int d = 0; while (n > 0 && (d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; n--; } return d; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _d$[ebp], 0
$LN2@Strnicmp:
  0002f	83 7d 10 00	 cmp	 DWORD PTR _n$[ebp], 0
  00033	7e 62		 jle	 SHORT $LN3@Strnicmp
  00035	8b 45 0c	 mov	 eax, DWORD PTR _str2$[ebp]
  00038	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0003b	8b f4		 mov	 esi, esp
  0003d	51		 push	 ecx
  0003e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00044	83 c4 04	 add	 esp, 4
  00047	3b f4		 cmp	 esi, esp
  00049	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004e	8b f0		 mov	 esi, eax
  00050	8b 55 08	 mov	 edx, DWORD PTR _str1$[ebp]
  00053	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00056	8b fc		 mov	 edi, esp
  00058	50		 push	 eax
  00059	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  0005f	83 c4 04	 add	 esp, 4
  00062	3b fc		 cmp	 edi, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	2b f0		 sub	 esi, eax
  0006b	89 75 f8	 mov	 DWORD PTR _d$[ebp], esi
  0006e	75 27		 jne	 SHORT $LN3@Strnicmp
  00070	8b 45 08	 mov	 eax, DWORD PTR _str1$[ebp]
  00073	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00076	85 c9		 test	 ecx, ecx
  00078	74 1d		 je	 SHORT $LN3@Strnicmp
  0007a	8b 45 08	 mov	 eax, DWORD PTR _str1$[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 08	 mov	 DWORD PTR _str1$[ebp], eax
  00083	8b 45 0c	 mov	 eax, DWORD PTR _str2$[ebp]
  00086	83 c0 01	 add	 eax, 1
  00089	89 45 0c	 mov	 DWORD PTR _str2$[ebp], eax
  0008c	8b 45 10	 mov	 eax, DWORD PTR _n$[ebp]
  0008f	83 e8 01	 sub	 eax, 1
  00092	89 45 10	 mov	 DWORD PTR _n$[ebp], eax
  00095	eb 98		 jmp	 SHORT $LN2@Strnicmp
$LN3@Strnicmp:
  00097	8b 45 f8	 mov	 eax, DWORD PTR _d$[ebp]
  0009a	5f		 pop	 edi
  0009b	5e		 pop	 esi
  0009c	5b		 pop	 ebx
  0009d	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000a3	3b ec		 cmp	 ebp, esp
  000a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000aa	8b e5		 mov	 esp, ebp
  000ac	5d		 pop	 ebp
  000ad	c3		 ret	 0
?Strnicmp@ExampleAppConsole@@SAHPBD0H@Z ENDP		; ExampleAppConsole::Strnicmp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Stricmp@ExampleAppConsole@@SAHPBD0@Z
_TEXT	SEGMENT
_d$ = -8						; size = 4
_str1$ = 8						; size = 4
_str2$ = 12						; size = 4
?Stricmp@ExampleAppConsole@@SAHPBD0@Z PROC		; ExampleAppConsole::Stricmp, COMDAT

; 3642 :     static int   Stricmp(const char* str1, const char* str2)         { int d; while ((d = toupper(*str2) - toupper(*str1)) == 0 && *str1) { str1++; str2++; } return d; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
$LN2@Stricmp:
  00028	8b 45 0c	 mov	 eax, DWORD PTR _str2$[ebp]
  0002b	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  0002e	8b f4		 mov	 esi, esp
  00030	51		 push	 ecx
  00031	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00037	83 c4 04	 add	 esp, 4
  0003a	3b f4		 cmp	 esi, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b f0		 mov	 esi, eax
  00043	8b 55 08	 mov	 edx, DWORD PTR _str1$[ebp]
  00046	0f be 02	 movsx	 eax, BYTE PTR [edx]
  00049	8b fc		 mov	 edi, esp
  0004b	50		 push	 eax
  0004c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__toupper
  00052	83 c4 04	 add	 esp, 4
  00055	3b fc		 cmp	 edi, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	2b f0		 sub	 esi, eax
  0005e	89 75 f8	 mov	 DWORD PTR _d$[ebp], esi
  00061	75 1e		 jne	 SHORT $LN3@Stricmp
  00063	8b 45 08	 mov	 eax, DWORD PTR _str1$[ebp]
  00066	0f be 08	 movsx	 ecx, BYTE PTR [eax]
  00069	85 c9		 test	 ecx, ecx
  0006b	74 14		 je	 SHORT $LN3@Stricmp
  0006d	8b 45 08	 mov	 eax, DWORD PTR _str1$[ebp]
  00070	83 c0 01	 add	 eax, 1
  00073	89 45 08	 mov	 DWORD PTR _str1$[ebp], eax
  00076	8b 45 0c	 mov	 eax, DWORD PTR _str2$[ebp]
  00079	83 c0 01	 add	 eax, 1
  0007c	89 45 0c	 mov	 DWORD PTR _str2$[ebp], eax
  0007f	eb a7		 jmp	 SHORT $LN2@Stricmp
$LN3@Stricmp:
  00081	8b 45 f8	 mov	 eax, DWORD PTR _d$[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c3		 ret	 0
?Stricmp@ExampleAppConsole@@SAHPBD0@Z ENDP		; ExampleAppConsole::Stricmp
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ??1ExampleAppConsole@@QAE@XZ
_TEXT	SEGMENT
_i$2 = -32						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1ExampleAppConsole@@QAE@XZ PROC			; ExampleAppConsole::~ExampleAppConsole, COMDAT
; _this$ = ecx

; 3635 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ExampleAppConsole@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00021	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3636 :         ClearLog();

  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QAEXXZ ; ExampleAppConsole::ClearLog

; 3637 :         for (int i = 0; i < History.Size; i++)

  00054	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _i$2[ebp], 0
  0005b	eb 09		 jmp	 SHORT $LN4@ExampleApp
$LN2@ExampleApp:
  0005d	8b 45 e0	 mov	 eax, DWORD PTR _i$2[ebp]
  00060	83 c0 01	 add	 eax, 1
  00063	89 45 e0	 mov	 DWORD PTR _i$2[ebp], eax
$LN4@ExampleApp:
  00066	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00069	8b 4d e0	 mov	 ecx, DWORD PTR _i$2[ebp]
  0006c	3b 88 18 01 00
	00		 cmp	 ecx, DWORD PTR [eax+280]
  00072	7d 29		 jge	 SHORT $LN1@ExampleApp

; 3638 :             free(History[i]);

  00074	8b 45 e0	 mov	 eax, DWORD PTR _i$2[ebp]
  00077	50		 push	 eax
  00078	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0007b	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00081	e8 00 00 00 00	 call	 ??A?$ImVector@PAD@@QAEAAPADH@Z ; ImVector<char *>::operator[]
  00086	8b f4		 mov	 esi, esp
  00088	8b 08		 mov	 ecx, DWORD PTR [eax]
  0008a	51		 push	 ecx
  0008b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__free
  00091	83 c4 04	 add	 esp, 4
  00094	3b f4		 cmp	 esi, esp
  00096	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009b	eb c0		 jmp	 SHORT $LN2@ExampleApp
$LN1@ExampleApp:

; 3639 :     }

  0009d	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000a0	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  000a6	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QAE@XZ
  000ab	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ae	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  000b4	e8 00 00 00 00	 call	 ??1?$ImVector@PAD@@QAE@XZ ; ImVector<char *>::~ImVector<char *>
  000b9	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000bc	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  000c2	e8 00 00 00 00	 call	 ??1?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::~ImVector<char const *>
  000c7	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000ca	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  000d0	e8 00 00 00 00	 call	 ??1?$ImVector@PAD@@QAE@XZ ; ImVector<char *>::~ImVector<char *>
  000d5	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000d8	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000df	59		 pop	 ecx
  000e0	5f		 pop	 edi
  000e1	5e		 pop	 esi
  000e2	5b		 pop	 ebx
  000e3	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  000e9	3b ec		 cmp	 ebp, esp
  000eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000f0	8b e5		 mov	 esp, ebp
  000f2	5d		 pop	 ebp
  000f3	c3		 ret	 0
  000f4	cc		 int	 3
  000f5	cc		 int	 3
  000f6	cc		 int	 3
  000f7	cc		 int	 3
  000f8	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ExampleAppConsole@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 18 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-232]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ExampleAppConsole@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ExampleAppConsole@@QAE@XZ ENDP			; ExampleAppConsole::~ExampleAppConsole
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ??0ExampleAppConsole@@QAE@XZ
_TEXT	SEGMENT
$T2 = -260						; size = 4
$T3 = -248						; size = 4
$T4 = -236						; size = 4
$T5 = -224						; size = 4
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??0ExampleAppConsole@@QAE@XZ PROC			; ExampleAppConsole::ExampleAppConsole, COMDAT
; _this$ = ecx

; 3621 :     ExampleAppConsole()

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??0ExampleAppConsole@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec fc 00 00
	00		 sub	 esp, 252		; 000000fcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00021	b9 3f 00 00 00	 mov	 ecx, 63			; 0000003fH
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00055	e8 00 00 00 00	 call	 ??0?$ImVector@PAD@@QAE@XZ ; ImVector<char *>::ImVector<char *>
  0005a	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00061	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00064	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  0006a	e8 00 00 00 00	 call	 ??0?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::ImVector<char const *>
  0006f	c6 45 fc 01	 mov	 BYTE PTR __$EHRec$[ebp+8], 1
  00073	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00076	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  0007c	e8 00 00 00 00	 call	 ??0?$ImVector@PAD@@QAE@XZ ; ImVector<char *>::ImVector<char *>
  00081	c6 45 fc 02	 mov	 BYTE PTR __$EHRec$[ebp+8], 2
  00085	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0008a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0008d	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00093	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QAE@PBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  00098	c6 45 fc 03	 mov	 BYTE PTR __$EHRec$[ebp+8], 3

; 3622 :     {
; 3623 :         ClearLog();

  0009c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0009f	e8 00 00 00 00	 call	 ?ClearLog@ExampleAppConsole@@QAEXXZ ; ExampleAppConsole::ClearLog

; 3624 :         memset(InputBuf, 0, sizeof(InputBuf));

  000a4	68 00 01 00 00	 push	 256			; 00000100H
  000a9	6a 00		 push	 0
  000ab	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ae	50		 push	 eax
  000af	e8 00 00 00 00	 call	 _memset
  000b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3625 :         HistoryPos = -1;

  000b7	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  000ba	c7 80 24 01 00
	00 ff ff ff ff	 mov	 DWORD PTR [eax+292], -1

; 3626 :         Commands.push_back("HELP");

  000c4	c7 85 20 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T5[ebp], OFFSET ??_C@_04DOKPJKJF@HELP@
  000ce	8d 85 20 ff ff
	ff		 lea	 eax, DWORD PTR $T5[ebp]
  000d4	50		 push	 eax
  000d5	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000d8	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  000de	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PBD@@QAEXABQBD@Z ; ImVector<char const *>::push_back

; 3627 :         Commands.push_back("HISTORY");

  000e3	c7 85 14 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T4[ebp], OFFSET ??_C@_07DBIJIOJO@HISTORY@
  000ed	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR $T4[ebp]
  000f3	50		 push	 eax
  000f4	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  000f7	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  000fd	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PBD@@QAEXABQBD@Z ; ImVector<char const *>::push_back

; 3628 :         Commands.push_back("CLEAR");

  00102	c7 85 08 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR $T3[ebp], OFFSET ??_C@_05PONODPI@CLEAR@
  0010c	8d 85 08 ff ff
	ff		 lea	 eax, DWORD PTR $T3[ebp]
  00112	50		 push	 eax
  00113	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00116	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  0011c	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PBD@@QAEXABQBD@Z ; ImVector<char const *>::push_back

; 3629 :         Commands.push_back("CLASSIFY");  // "classify" is only here to provide an example of "C"+[tab] completing to "CL" and displaying matches.

  00121	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR $T2[ebp], OFFSET ??_C@_08GOHMLCGG@CLASSIFY@
  0012b	8d 85 fc fe ff
	ff		 lea	 eax, DWORD PTR $T2[ebp]
  00131	50		 push	 eax
  00132	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00135	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  0013b	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PBD@@QAEXABQBD@Z ; ImVector<char const *>::push_back

; 3630 :         AutoScroll = true;

  00140	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00143	c6 80 38 02 00
	00 01		 mov	 BYTE PTR [eax+568], 1

; 3631 :         ScrollToBottom = false;

  0014a	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0014d	c6 80 39 02 00
	00 00		 mov	 BYTE PTR [eax+569], 0

; 3632 :         AddLog("Welcome to Dear ImGui!");

  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@HICLALOG@Welcome?5to?5Dear?5ImGui?$CB@
  00159	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0015c	50		 push	 eax
  0015d	e8 00 00 00 00	 call	 ?AddLog@ExampleAppConsole@@QAAXPBDZZ ; ExampleAppConsole::AddLog
  00162	83 c4 08	 add	 esp, 8

; 3633 :     }

  00165	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0016c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00172	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00179	59		 pop	 ecx
  0017a	5f		 pop	 edi
  0017b	5e		 pop	 esi
  0017c	5b		 pop	 ebx
  0017d	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  00183	3b ec		 cmp	 ebp, esp
  00185	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0018a	8b e5		 mov	 esp, ebp
  0018c	5d		 pop	 ebp
  0018d	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$0:
  00000	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00003	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00009	e9 00 00 00 00	 jmp	 ??1?$ImVector@PAD@@QAE@XZ ; ImVector<char *>::~ImVector<char *>
__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$1:
  0000e	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  00011	81 c1 0c 01 00
	00		 add	 ecx, 268		; 0000010cH
  00017	e9 00 00 00 00	 jmp	 ??1?$ImVector@PBD@@QAE@XZ ; ImVector<char const *>::~ImVector<char const *>
__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$2:
  0001c	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0001f	81 c1 18 01 00
	00		 add	 ecx, 280		; 00000118H
  00025	e9 00 00 00 00	 jmp	 ??1?$ImVector@PAD@@QAE@XZ ; ImVector<char *>::~ImVector<char *>
__unwindfunclet$??0ExampleAppConsole@@QAE@XZ$3:
  0002a	8b 4d ec	 mov	 ecx, DWORD PTR _this$[ebp]
  0002d	81 c1 28 01 00
	00		 add	 ecx, 296		; 00000128H
  00033	e9 00 00 00 00	 jmp	 ??1ImGuiTextFilter@@QAE@XZ
  00038	cc		 int	 3
  00039	cc		 int	 3
  0003a	cc		 int	 3
  0003b	cc		 int	 3
  0003c	cc		 int	 3
__ehhandler$??0ExampleAppConsole@@QAE@XZ:
  0003d	90		 npad	 1
  0003e	90		 npad	 1
  0003f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00043	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00046	8b 8a f4 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-268]
  0004c	33 c8		 xor	 ecx, eax
  0004e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00053	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??0ExampleAppConsole@@QAE@XZ
  00058	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??0ExampleAppConsole@@QAE@XZ ENDP			; ExampleAppConsole::ExampleAppConsole
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PBD@@QAEXABQBD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@PBD@@QAEXABQBD@Z PROC		; ImVector<char const *>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PBD@@QBEHH@Z ; ImVector<char const *>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PBD@@QAEXH@Z ; ImVector<char const *>::reserve
$LN2@push_back:
  00054	6a 04		 push	 4
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	83 c1 01	 add	 ecx, 1
  00079	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	89 0a		 mov	 DWORD PTR [edx], ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?push_back@?$ImVector@PBD@@QAEXABQBD@Z ENDP		; ImVector<char const *>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PBD@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@PBD@@QAEXH@Z PROC			; ImVector<char const *>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 58		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  0003d	c1 e0 02	 shl	 eax, 2
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 2b		 je	 SHORT $LN3@reserve
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	c1 e1 02	 shl	 ecx, 2
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  0007d	83 c4 04	 add	 esp, 4
$LN3@reserve:
  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00086	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0008f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?reserve@?$ImVector@PBD@@QAEXH@Z ENDP			; ImVector<char const *>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PBD@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@PBD@@QBEHH@Z PROC		; ImVector<char const *>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@PBD@@QBEHH@Z ENDP		; ImVector<char const *>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@PBD@@QAEAAPBDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@PBD@@QAEAAPBDH@Z PROC			; ImVector<char const *>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@PBD@@QAEAAPBDH@Z ENDP			; ImVector<char const *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@PBD@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@PBD@@QAE@XZ PROC				; ImVector<char const *>::~ImVector<char const *>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@PBD@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@PBD@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@PBD@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@PBD@@QAE@XZ ENDP				; ImVector<char const *>::~ImVector<char const *>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@PBD@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@PBD@@QAE@XZ PROC				; ImVector<char const *>::ImVector<char const *>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@PBD@@QAE@XZ ENDP				; ImVector<char const *>::ImVector<char const *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?erase@?$ImVector@PAD@@QAEPAPADPBQAD@Z
_TEXT	SEGMENT
_off$ = -20						; size = 4
_this$ = -8						; size = 4
_it$ = 8						; size = 4
?erase@?$ImVector@PAD@@QAEPAPADPBQAD@Z PROC		; ImVector<char *>::erase, COMDAT
; _this$ = ecx

; 1296 :     inline T*           erase(const T* it)                  { IM_ASSERT(it >= Data && it < Data+Size); const ptrdiff_t off = it - Data; memmove(Data + off, Data + off + 1, ((size_t)Size - (size_t)off - 1) * sizeof(T)); Size--; return Data + off; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  00033	3b 48 08	 cmp	 ecx, DWORD PTR [eax+8]
  00036	72 13		 jb	 SHORT $LN3@erase
  00038	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0003b	8b 02		 mov	 eax, DWORD PTR [edx]
  0003d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00040	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00043	8d 04 82	 lea	 eax, DWORD PTR [edx+eax*4]
  00046	39 45 08	 cmp	 DWORD PTR _it$[ebp], eax
  00049	72 21		 jb	 SHORT $LN4@erase
$LN3@erase:
  0004b	8b f4		 mov	 esi, esp
  0004d	68 10 05 00 00	 push	 1296			; 00000510H
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00057	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@JJGEFOJO@?$AAi?$AAt?$AA?5?$AA?$DO?$AA?$DN?$AA?5?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CG?$AA?$CG?$AA?5?$AAi@
  0005c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00062	83 c4 0c	 add	 esp, 12			; 0000000cH
  00065	3b f4		 cmp	 esi, esp
  00067	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@erase:
  0006c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006f	8b 4d 08	 mov	 ecx, DWORD PTR _it$[ebp]
  00072	2b 48 08	 sub	 ecx, DWORD PTR [eax+8]
  00075	c1 f9 02	 sar	 ecx, 2
  00078	89 4d ec	 mov	 DWORD PTR _off$[ebp], ecx
  0007b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007e	8b 08		 mov	 ecx, DWORD PTR [eax]
  00080	2b 4d ec	 sub	 ecx, DWORD PTR _off$[ebp]
  00083	8d 14 8d fc ff
	ff ff		 lea	 edx, DWORD PTR [ecx*4-4]
  0008a	52		 push	 edx
  0008b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00091	8b 55 ec	 mov	 edx, DWORD PTR _off$[ebp]
  00094	8d 44 91 04	 lea	 eax, DWORD PTR [ecx+edx*4+4]
  00098	50		 push	 eax
  00099	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0009c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0009f	8b 45 ec	 mov	 eax, DWORD PTR _off$[ebp]
  000a2	8d 0c 82	 lea	 ecx, DWORD PTR [edx+eax*4]
  000a5	51		 push	 ecx
  000a6	e8 00 00 00 00	 call	 _memmove
  000ab	83 c4 0c	 add	 esp, 12			; 0000000cH
  000ae	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000b1	8b 08		 mov	 ecx, DWORD PTR [eax]
  000b3	83 e9 01	 sub	 ecx, 1
  000b6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000b9	89 0a		 mov	 DWORD PTR [edx], ecx
  000bb	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000be	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  000c1	8b 55 ec	 mov	 edx, DWORD PTR _off$[ebp]
  000c4	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  000c7	5f		 pop	 edi
  000c8	5e		 pop	 esi
  000c9	5b		 pop	 ebx
  000ca	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  000d0	3b ec		 cmp	 ebp, esp
  000d2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d7	8b e5		 mov	 esp, ebp
  000d9	5d		 pop	 ebp
  000da	c2 04 00	 ret	 4
?erase@?$ImVector@PAD@@QAEPAPADPBQAD@Z ENDP		; ImVector<char *>::erase
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@PAD@@QAEXABQAD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@PAD@@QAEXABQAD@Z PROC		; ImVector<char *>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@PAD@@QBEHH@Z ; ImVector<char *>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@PAD@@QAEXH@Z ; ImVector<char *>::reserve
$LN2@push_back:
  00054	6a 04		 push	 4
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	8d 14 91	 lea	 edx, DWORD PTR [ecx+edx*4]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	83 c1 01	 add	 ecx, 1
  00079	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	89 0a		 mov	 DWORD PTR [edx], ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?push_back@?$ImVector@PAD@@QAEXABQAD@Z ENDP		; ImVector<char *>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@PAD@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@PAD@@QAEXH@Z PROC			; ImVector<char *>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 58		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  0003d	c1 e0 02	 shl	 eax, 2
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 2b		 je	 SHORT $LN3@reserve
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	c1 e1 02	 shl	 ecx, 2
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  0007d	83 c4 04	 add	 esp, 4
$LN3@reserve:
  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00086	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0008f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?reserve@?$ImVector@PAD@@QAEXH@Z ENDP			; ImVector<char *>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@PAD@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@PAD@@QBEHH@Z PROC		; ImVector<char *>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@PAD@@QBEHH@Z ENDP		; ImVector<char *>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?begin@?$ImVector@PAD@@QAEPAPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?begin@?$ImVector@PAD@@QAEPAPADXZ PROC			; ImVector<char *>::begin, COMDAT
; _this$ = ecx

; 1276 :     inline T*           begin()                             { return Data; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?begin@?$ImVector@PAD@@QAEPAPADXZ ENDP			; ImVector<char *>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@PAD@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@?$ImVector@PAD@@QAEXXZ PROC			; ImVector<char *>::clear, COMDAT
; _this$ = ecx

; 1275 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 2c		 je	 SHORT $LN1@clear
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00055	83 c4 04	 add	 esp, 4
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@clear:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?clear@?$ImVector@PAD@@QAEXXZ ENDP			; ImVector<char *>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@PAD@@QAEAAPADH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@PAD@@QAEAAPADH@Z PROC			; ImVector<char *>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@PAD@@QAEAAPADH@Z ENDP			; ImVector<char *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@PAD@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@PAD@@QAE@XZ PROC				; ImVector<char *>::~ImVector<char *>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@PAD@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@PAD@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@PAD@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@PAD@@QAE@XZ ENDP				; ImVector<char *>::~ImVector<char *>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@PAD@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@PAD@@QAE@XZ PROC				; ImVector<char *>::ImVector<char *>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@PAD@@QAE@XZ ENDP				; ImVector<char *>::ImVector<char *>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Ffilter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@YAXXZ
text$yd	SEGMENT
??__Ffilter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@YAXXZ PROC ; `ImGui::ShowStyleEditor'::`34'::`dynamic atexit destructor for 'filter'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00023	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Ffilter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@YAXXZ ENDP ; `ImGui::ShowStyleEditor'::`34'::`dynamic atexit destructor for 'filter''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Ffilter@?4??ShowDemoWindowMisc@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Ffilter@?4??ShowDemoWindowMisc@@YAXXZ@YAXXZ PROC	; `ShowDemoWindowMisc'::`5'::`dynamic atexit destructor for 'filter'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?4??ShowDemoWindowMisc@@YAXXZ@4UImGuiTextFilter@@A
  00023	e8 00 00 00 00	 call	 ??1ImGuiTextFilter@@QAE@XZ
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Ffilter@?4??ShowDemoWindowMisc@@YAXXZ@YAXXZ ENDP	; `ShowDemoWindowMisc'::`5'::`dynamic atexit destructor for 'filter''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\predefined C++ types (compiler internal)
;	COMDAT ??$__builtin_array_init_helper@UImVec4@@@@YAXPAUImVec4@@I@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_target$ = 8						; size = 4
_N$ = 12						; size = 4
??$__builtin_array_init_helper@UImVec4@@@@YAXPAUImVec4@@I@Z PROC ; __builtin_array_init_helper<ImVec4>, COMDAT

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __6D9F1981_predefined C++ types (compiler internal)
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

  00028	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  0002f	eb 09		 jmp	 SHORT $LN4@builtin_ar
$LN2@builtin_ar:
  00031	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00034	83 c0 01	 add	 eax, 1
  00037	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@builtin_ar:
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0003d	3b 45 0c	 cmp	 eax, DWORD PTR _N$[ebp]
  00040	73 10		 jae	 SHORT $LN1@builtin_ar

  00042	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  00045	c1 e1 04	 shl	 ecx, 4
  00048	03 4d 08	 add	 ecx, DWORD PTR _target$[ebp]
  0004b	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@XZ	; ImVec4::ImVec4

  00050	eb df		 jmp	 SHORT $LN2@builtin_ar
$LN1@builtin_ar:

  00052	5f		 pop	 edi
  00053	5e		 pop	 esi
  00054	5b		 pop	 ebx
  00055	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005b	3b ec		 cmp	 ebp, esp
  0005d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00062	8b e5		 mov	 esp, ebp
  00064	5d		 pop	 ebp
  00065	c3		 ret	 0
??$__builtin_array_init_helper@UImVec4@@@@YAXPAUImVec4@@I@Z ENDP ; __builtin_array_init_helper<ImVec4>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Saw@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z
_TEXT	SEGMENT
tv66 = -196						; size = 4
___formal$ = 8						; size = 4
_i$ = 12						; size = 4
?Saw@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z PROC ; `ShowDemoWindowWidgets'::`229'::Funcs::Saw, COMDAT

; 1123 :             static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 0c	 mov	 eax, DWORD PTR _i$[ebp]
  0002b	83 e0 01	 and	 eax, 1
  0002e	74 12		 je	 SHORT $LN3@Saw
  00030	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00038	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv66[ebp], xmm0
  00040	eb 10		 jmp	 SHORT $LN4@Saw
$LN3@Saw:
  00042	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0004a	f3 0f 11 85 3c
	ff ff ff	 movss	 DWORD PTR tv66[ebp], xmm0
$LN4@Saw:
  00052	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv66[ebp]
  00058	5f		 pop	 edi
  00059	5e		 pop	 esi
  0005a	5b		 pop	 ebx
  0005b	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00061	3b ec		 cmp	 ebp, esp
  00063	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00068	8b e5		 mov	 esp, ebp
  0006a	5d		 pop	 ebp
  0006b	c3		 ret	 0
?Saw@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z ENDP ; `ShowDemoWindowWidgets'::`229'::Funcs::Saw
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?Sin@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z
_TEXT	SEGMENT
___formal$ = 8						; size = 4
_i$ = 12						; size = 4
?Sin@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z PROC ; `ShowDemoWindowWidgets'::`229'::Funcs::Sin, COMDAT

; 1122 :             static float Sin(void*, int i) { return sinf(i * 0.1f); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	f3 0f 2a 45 0c	 cvtsi2ss xmm0, DWORD PTR _i$[ebp]
  0002d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3dcccccd
  00035	51		 push	 ecx
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	e8 00 00 00 00	 call	 _sinf
  00040	83 c4 04	 add	 esp, 4
  00043	5f		 pop	 edi
  00044	5e		 pop	 esi
  00045	5b		 pop	 ebx
  00046	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004c	3b ec		 cmp	 ebp, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00053	8b e5		 mov	 esp, ebp
  00055	5d		 pop	 ebp
  00056	c3		 ret	 0
?Sin@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z ENDP ; `ShowDemoWindowWidgets'::`229'::Funcs::Sin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??__Fmy_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ
text$yd	SEGMENT
??__Fmy_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ PROC ; `ShowDemoWindowWidgets'::`224'::`dynamic atexit destructor for 'my_str'', COMDAT
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  00023	e8 00 00 00 00	 call	 ??1?$ImVector@D@@QAE@XZ	; ImVector<char>::~ImVector<char>
  00028	5f		 pop	 edi
  00029	5e		 pop	 esi
  0002a	5b		 pop	 ebx
  0002b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00031	3b ec		 cmp	 ebp, esp
  00033	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00038	8b e5		 mov	 esp, ebp
  0003a	5d		 pop	 ebp
  0003b	c3		 ret	 0
??__Fmy_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ENDP ; `ShowDemoWindowWidgets'::`224'::`dynamic atexit destructor for 'my_str''
text$yd	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?MyInputTextMultiline@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SA_NPBDPAU?$ImVector@D@@ABUImVec2@@H@Z
_TEXT	SEGMENT
_label$ = 8						; size = 4
_my_str$ = 12						; size = 4
_size$ = 16						; size = 4
_flags$ = 20						; size = 4
?MyInputTextMultiline@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SA_NPBDPAU?$ImVector@D@@ABUImVec2@@H@Z PROC ; `ShowDemoWindowWidgets'::`224'::Funcs::MyInputTextMultiline, COMDAT

; 1060 :                 {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1061 :                     IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);

  00028	8b 45 14	 mov	 eax, DWORD PTR _flags$[ebp]
  0002b	25 00 00 04 00	 and	 eax, 262144		; 00040000H
  00030	74 21		 je	 SHORT $LN3@MyInputTex
  00032	8b f4		 mov	 esi, esp
  00034	68 25 04 00 00	 push	 1061			; 00000425H
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1GE@PBHHHBJD@?$AA?$CI?$AAf?$AAl?$AAa?$AAg?$AAs?$AA?5?$AA?$CG?$AA?5?$AAI?$AAm?$AAG?$AAu?$AAi?$AAI@
  00043	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00049	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004c	3b f4		 cmp	 esi, esp
  0004e	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@MyInputTex:

; 1062 :                     return ImGui::InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);

  00053	8b 45 0c	 mov	 eax, DWORD PTR _my_str$[ebp]
  00056	50		 push	 eax
  00057	68 00 00 00 00	 push	 OFFSET ?MyResizeCallback@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`224'::Funcs::MyResizeCallback
  0005c	8b 4d 14	 mov	 ecx, DWORD PTR _flags$[ebp]
  0005f	81 c9 00 00 04
	00		 or	 ecx, 262144		; 00040000H
  00065	51		 push	 ecx
  00066	8b 55 10	 mov	 edx, DWORD PTR _size$[ebp]
  00069	52		 push	 edx
  0006a	8b 4d 0c	 mov	 ecx, DWORD PTR _my_str$[ebp]
  0006d	e8 00 00 00 00	 call	 ?size@?$ImVector@D@@QBEHXZ ; ImVector<char>::size
  00072	50		 push	 eax
  00073	8b 4d 0c	 mov	 ecx, DWORD PTR _my_str$[ebp]
  00076	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QAEPADXZ ; ImVector<char>::begin
  0007b	50		 push	 eax
  0007c	8b 45 08	 mov	 eax, DWORD PTR _label$[ebp]
  0007f	50		 push	 eax
  00080	e8 00 00 00 00	 call	 ?InputTextMultiline@ImGui@@YA_NPBDPADIABUImVec2@@HP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputTextMultiline
  00085	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1063 :                 }

  00088	5f		 pop	 edi
  00089	5e		 pop	 esi
  0008a	5b		 pop	 ebx
  0008b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00091	3b ec		 cmp	 ebp, esp
  00093	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00098	8b e5		 mov	 esp, ebp
  0009a	5d		 pop	 ebp
  0009b	c3		 ret	 0
?MyInputTextMultiline@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SA_NPBDPAU?$ImVector@D@@ABUImVec2@@H@Z ENDP ; `ShowDemoWindowWidgets'::`224'::Funcs::MyInputTextMultiline
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?MyResizeCallback@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
_my_str$1 = -8						; size = 4
_data$ = 8						; size = 4
?MyResizeCallback@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z PROC ; `ShowDemoWindowWidgets'::`224'::Funcs::MyResizeCallback, COMDAT

; 1046 :                 {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1047 :                     if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)

  00028	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0002b	81 38 00 00 04
	00		 cmp	 DWORD PTR [eax], 262144	; 00040000H
  00031	75 57		 jne	 SHORT $LN2@MyResizeCa

; 1048 :                     {
; 1049 :                         ImVector<char>* my_str = (ImVector<char>*)data->UserData;

  00033	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00036	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00039	89 4d f8	 mov	 DWORD PTR _my_str$1[ebp], ecx

; 1050 :                         IM_ASSERT(my_str->begin() == data->Buf);

  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _my_str$1[ebp]
  0003f	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QAEPADXZ ; ImVector<char>::begin
  00044	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00047	3b 41 14	 cmp	 eax, DWORD PTR [ecx+20]
  0004a	74 21		 je	 SHORT $LN4@MyResizeCa
  0004c	8b f4		 mov	 esi, esp
  0004e	68 1a 04 00 00	 push	 1050			; 0000041aH
  00053	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00058	68 00 00 00 00	 push	 OFFSET ??_C@_1DK@GBCOMGGK@?$AAm?$AAy?$AA_?$AAs?$AAt?$AAr?$AA?9?$AA?$DO?$AAb?$AAe?$AAg?$AAi?$AAn?$AA?$CI?$AA?$CJ@
  0005d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00063	83 c4 0c	 add	 esp, 12			; 0000000cH
  00066	3b f4		 cmp	 esi, esp
  00068	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN4@MyResizeCa:

; 1051 :                         my_str->resize(data->BufSize);  // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1

  0006d	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  00070	8b 48 1c	 mov	 ecx, DWORD PTR [eax+28]
  00073	51		 push	 ecx
  00074	8b 4d f8	 mov	 ecx, DWORD PTR _my_str$1[ebp]
  00077	e8 00 00 00 00	 call	 ?resize@?$ImVector@D@@QAEXH@Z ; ImVector<char>::resize

; 1052 :                         data->Buf = my_str->begin();

  0007c	8b 4d f8	 mov	 ecx, DWORD PTR _my_str$1[ebp]
  0007f	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QAEPADXZ ; ImVector<char>::begin
  00084	8b 4d 08	 mov	 ecx, DWORD PTR _data$[ebp]
  00087	89 41 14	 mov	 DWORD PTR [ecx+20], eax
$LN2@MyResizeCa:

; 1053 :                     }
; 1054 :                     return 0;

  0008a	33 c0		 xor	 eax, eax

; 1055 :                 }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?MyResizeCallback@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z ENDP ; `ShowDemoWindowWidgets'::`224'::Funcs::MyResizeCallback
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?FilterImGuiLetters@TextFilters@?NN@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
?FilterImGuiLetters@TextFilters@?NN@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z PROC ; `ShowDemoWindowWidgets'::`221'::TextFilters::FilterImGuiLetters, COMDAT

; 1026 :             struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data) { if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar)) return 0; return 1; } };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0002b	0f b7 48 0c	 movzx	 ecx, WORD PTR [eax+12]
  0002f	81 f9 00 01 00
	00		 cmp	 ecx, 256		; 00000100H
  00035	7d 1d		 jge	 SHORT $LN2@FilterImGu
  00037	8b 45 08	 mov	 eax, DWORD PTR _data$[ebp]
  0003a	0f be 48 0c	 movsx	 ecx, BYTE PTR [eax+12]
  0003e	51		 push	 ecx
  0003f	68 00 00 00 00	 push	 OFFSET ??_C@_05EAJAAGNN@imgui@
  00044	e8 00 00 00 00	 call	 _strchr
  00049	83 c4 08	 add	 esp, 8
  0004c	85 c0		 test	 eax, eax
  0004e	74 04		 je	 SHORT $LN2@FilterImGu
  00050	33 c0		 xor	 eax, eax
  00052	eb 05		 jmp	 SHORT $LN1@FilterImGu
$LN2@FilterImGu:
  00054	b8 01 00 00 00	 mov	 eax, 1
$LN1@FilterImGu:
  00059	5f		 pop	 edi
  0005a	5e		 pop	 esi
  0005b	5b		 pop	 ebx
  0005c	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00062	3b ec		 cmp	 ebp, esp
  00064	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00069	8b e5		 mov	 esp, ebp
  0006b	5d		 pop	 ebp
  0006c	c3		 ret	 0
?FilterImGuiLetters@TextFilters@?NN@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z ENDP ; `ShowDemoWindowWidgets'::`221'::TextFilters::FilterImGuiLetters
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ItemGetter@FuncHolder@?IC@??ShowDemoWindowWidgets@@YAXXZ@SA_NPAXHPAPBD@Z
_TEXT	SEGMENT
_data$ = 8						; size = 4
_idx$ = 12						; size = 4
_out_str$ = 16						; size = 4
?ItemGetter@FuncHolder@?IC@??ShowDemoWindowWidgets@@YAXXZ@SA_NPAXHPAPBD@Z PROC ; `ShowDemoWindowWidgets'[::C]::FuncHolder::ItemGetter, COMDAT

; 873  :         struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { *out_str = ((const char**)data)[idx]; return true; } };

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00028	8b 45 10	 mov	 eax, DWORD PTR _out_str$[ebp]
  0002b	8b 4d 0c	 mov	 ecx, DWORD PTR _idx$[ebp]
  0002e	8b 55 08	 mov	 edx, DWORD PTR _data$[ebp]
  00031	8b 0c 8a	 mov	 ecx, DWORD PTR [edx+ecx*4]
  00034	89 08		 mov	 DWORD PTR [eax], ecx
  00036	b0 01		 mov	 al, 1
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
?ItemGetter@FuncHolder@?IC@??ShowDemoWindowWidgets@@YAXXZ@SA_NPAXHPAPBD@Z ENDP ; `ShowDemoWindowWidgets'[::C]::FuncHolder::ItemGetter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowMisc@@YAXXZ
_TEXT	SEGMENT
tv332 = -1000						; size = 4
tv327 = -996						; size = 4
tv322 = -992						; size = 4
tv317 = -988						; size = 4
tv352 = -985						; size = 1
$T2 = -980						; size = 8
$T3 = -964						; size = 8
$T4 = -948						; size = 8
$T5 = -932						; size = 8
$T6 = -916						; size = 8
$T7 = -900						; size = 8
$T8 = -884						; size = 8
$T9 = -868						; size = 8
$T10 = -852						; size = 8
$T11 = -836						; size = 8
_label$12 = -436					; size = 32
_i$13 = -396						; size = 4
_mouse_cursors_names$14 = -384				; size = 36
_mouse_delta$15 = -340					; size = 8
_value_with_lock_threshold$16 = -324			; size = 8
_value_raw$17 = -308					; size = 8
_button$18 = -292					; size = 4
_focus_ahead$19 = -280					; size = 4
_has_focus$20 = -268					; size = 4
_focus_3$21 = -253					; size = 1
_focus_2$22 = -241					; size = 1
_focus_1$23 = -229					; size = 1
_i$24 = -220						; size = 4
_i$25 = -208						; size = 4
_i$26 = -196						; size = 4
_c$27 = -184						; size = 2
_i$28 = -172						; size = 4
_i$29 = -160						; size = 4
_i$30 = -148						; size = 4
_i$31 = -136						; size = 4
_i$32 = -124						; size = 4
_i$33 = -112						; size = 4
_i$34 = -100						; size = 4
_i$35 = -88						; size = 4
_io$36 = -76						; size = 4
_i$37 = -64						; size = 4
_lines$38 = -52						; size = 32
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ShowDemoWindowMisc@@YAXXZ PROC				; ShowDemoWindowMisc, COMDAT

; 2909 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowDemoWindowMisc@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec dc 03 00
	00		 sub	 esp, 988		; 000003dcH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 18 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-1000]
  00020	b9 f7 00 00 00	 mov	 ecx, 247		; 000000f7H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2910 :     if (ImGui::CollapsingHeader("Filtering"))

  0004a	6a 00		 push	 0
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_09BFICBINI@Filtering@
  00051	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00056	83 c4 08	 add	 esp, 8
  00059	0f b6 c0	 movzx	 eax, al
  0005c	85 c0		 test	 eax, eax
  0005e	0f 84 10 01 00
	00		 je	 $LN4@ShowDemoWi

; 2911 :     {
; 2912 :         // Helper class to easy setup a text filter.
; 2913 :         // You may want to implement a more feature-full filtering scheme in your own application.
; 2914 :         static ImGuiTextFilter filter;

  00064	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  00069	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00070	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00073	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?4??ShowDemoWindowMisc@@YAXXZ@4HA
  00078	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0007e	7e 4d		 jle	 SHORT $LN2@ShowDemoWi
  00080	68 00 00 00 00	 push	 OFFSET ?$TSS0@?4??ShowDemoWindowMisc@@YAXXZ@4HA
  00085	e8 00 00 00 00	 call	 __Init_thread_header
  0008a	83 c4 04	 add	 esp, 4
  0008d	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?4??ShowDemoWindowMisc@@YAXXZ@4HA, -1
  00094	75 37		 jne	 SHORT $LN2@ShowDemoWi
  00096	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  000a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?4??ShowDemoWindowMisc@@YAXXZ@4UImGuiTextFilter@@A
  000a7	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QAE@PBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  000ac	68 00 00 00 00	 push	 OFFSET ??__Ffilter@?4??ShowDemoWindowMisc@@YAXXZ@YAXXZ ; `ShowDemoWindowMisc'::`5'::`dynamic atexit destructor for 'filter''
  000b1	e8 00 00 00 00	 call	 _atexit
  000b6	83 c4 04	 add	 esp, 4
  000b9	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000c0	68 00 00 00 00	 push	 OFFSET ?$TSS0@?4??ShowDemoWindowMisc@@YAXXZ@4HA
  000c5	e8 00 00 00 00	 call	 __Init_thread_footer
  000ca	83 c4 04	 add	 esp, 4
$LN2@ShowDemoWi:

; 2915 :         ImGui::Text("Filter usage:\n"

  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0LH@KANOFBLE@Filter?5usage?3?6?5?5?$CC?$CC?5?5?5?5?5?5?5?5?5disp@
  000d2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  000d7	83 c4 04	 add	 esp, 4

; 2916 :                     "  \"\"         display all lines\n"
; 2917 :                     "  \"xxx\"      display lines containing \"xxx\"\n"
; 2918 :                     "  \"xxx,yyy\"  display lines containing \"xxx\" or \"yyy\"\n"
; 2919 :                     "  \"-xxx\"     hide lines containing \"xxx\"");
; 2920 :         filter.Draw();

  000da	51		 push	 ecx
  000db	0f 57 c0	 xorps	 xmm0, xmm0
  000de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HPCLFOON@Filter?5?$CIinc?0?9exc?$CJ@
  000e8	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?4??ShowDemoWindowMisc@@YAXXZ@4UImGuiTextFilter@@A
  000ed	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QAE_NPBDM@Z ; ImGuiTextFilter::Draw

; 2921 :         const char* lines[] = { "aaa1.c", "bbb1.c", "ccc1.c", "aaa2.cpp", "bbb2.cpp", "ccc2.cpp", "abc.h", "hello, world" };

  000f2	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp], OFFSET ??_C@_06BMDMCJJI@aaa1?4c@
  000f9	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+4], OFFSET ??_C@_06OMOADLHL@bbb1?4c@
  00100	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+8], OFFSET ??_C@_06LMKLMKNK@ccc1?4c@
  00107	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+12], OFFSET ??_C@_08GHAOHEK@aaa2?4cpp@
  0010e	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+16], OFFSET ??_C@_08IAJKMGPB@bbb2?4cpp@
  00115	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+20], OFFSET ??_C@_08PNDMNJJI@ccc2?4cpp@
  0011c	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+24], OFFSET ??_C@_05NIADHECG@abc?4h@
  00123	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _lines$38[ebp+28], OFFSET ??_C@_0N@OLAOGCLC@hello?0?5world@

; 2922 :         for (int i = 0; i < IM_ARRAYSIZE(lines); i++)

  0012a	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$37[ebp], 0
  00131	eb 09		 jmp	 SHORT $LN5@ShowDemoWi
$LN3@ShowDemoWi:
  00133	8b 45 c0	 mov	 eax, DWORD PTR _i$37[ebp]
  00136	83 c0 01	 add	 eax, 1
  00139	89 45 c0	 mov	 DWORD PTR _i$37[ebp], eax
$LN5@ShowDemoWi:
  0013c	83 7d c0 08	 cmp	 DWORD PTR _i$37[ebp], 8
  00140	7d 32		 jge	 SHORT $LN4@ShowDemoWi

; 2923 :             if (filter.PassFilter(lines[i]))

  00142	6a 00		 push	 0
  00144	8b 45 c0	 mov	 eax, DWORD PTR _i$37[ebp]
  00147	8b 4c 85 cc	 mov	 ecx, DWORD PTR _lines$38[ebp+eax*4]
  0014b	51		 push	 ecx
  0014c	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?4??ShowDemoWindowMisc@@YAXXZ@4UImGuiTextFilter@@A
  00151	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QBE_NPBD0@Z ; ImGuiTextFilter::PassFilter
  00156	0f b6 d0	 movzx	 edx, al
  00159	85 d2		 test	 edx, edx
  0015b	74 15		 je	 SHORT $LN46@ShowDemoWi

; 2924 :                 ImGui::BulletText("%s", lines[i]);

  0015d	8b 45 c0	 mov	 eax, DWORD PTR _i$37[ebp]
  00160	8b 4c 85 cc	 mov	 ecx, DWORD PTR _lines$38[ebp+eax*4]
  00164	51		 push	 ecx
  00165	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  0016a	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  0016f	83 c4 08	 add	 esp, 8
$LN46@ShowDemoWi:
  00172	eb bf		 jmp	 SHORT $LN3@ShowDemoWi
$LN4@ShowDemoWi:

; 2925 :     }
; 2926 : 
; 2927 :     if (ImGui::CollapsingHeader("Inputs, Navigation & Focus"))

  00174	6a 00		 push	 0
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IKGEMPPN@Inputs?0?5Navigation?5?$CG?5Focus@
  0017b	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00180	83 c4 08	 add	 esp, 8
  00183	0f b6 c0	 movzx	 eax, al
  00186	85 c0		 test	 eax, eax
  00188	0f 84 78 10 00
	00		 je	 $LN79@ShowDemoWi

; 2928 :     {
; 2929 :         ImGuiIO& io = ImGui::GetIO();

  0018e	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  00193	89 45 b4	 mov	 DWORD PTR _io$36[ebp], eax

; 2930 : 
; 2931 :         // Display ImGuiIO output flags
; 2932 :         ImGui::Text("WantCaptureMouse: %d", io.WantCaptureMouse);

  00196	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00199	0f b6 88 50 03
	00 00		 movzx	 ecx, BYTE PTR [eax+848]
  001a0	51		 push	 ecx
  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@MACLOFOD@WantCaptureMouse?3?5?$CFd@
  001a6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001ab	83 c4 08	 add	 esp, 8

; 2933 :         ImGui::Text("WantCaptureKeyboard: %d", io.WantCaptureKeyboard);

  001ae	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  001b1	0f b6 88 51 03
	00 00		 movzx	 ecx, BYTE PTR [eax+849]
  001b8	51		 push	 ecx
  001b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FJJPGPBI@WantCaptureKeyboard?3?5?$CFd@
  001be	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001c3	83 c4 08	 add	 esp, 8

; 2934 :         ImGui::Text("WantTextInput: %d", io.WantTextInput);

  001c6	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  001c9	0f b6 88 52 03
	00 00		 movzx	 ecx, BYTE PTR [eax+850]
  001d0	51		 push	 ecx
  001d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MNILMHJG@WantTextInput?3?5?$CFd@
  001d6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001db	83 c4 08	 add	 esp, 8

; 2935 :         ImGui::Text("WantSetMousePos: %d", io.WantSetMousePos);

  001de	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  001e1	0f b6 88 53 03
	00 00		 movzx	 ecx, BYTE PTR [eax+851]
  001e8	51		 push	 ecx
  001e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HMNMIAK@WantSetMousePos?3?5?$CFd@
  001ee	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001f3	83 c4 08	 add	 esp, 8

; 2936 :         ImGui::Text("NavActive: %d, NavVisible: %d", io.NavActive, io.NavVisible);

  001f6	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  001f9	0f b6 88 56 03
	00 00		 movzx	 ecx, BYTE PTR [eax+854]
  00200	51		 push	 ecx
  00201	8b 55 b4	 mov	 edx, DWORD PTR _io$36[ebp]
  00204	0f b6 82 55 03
	00 00		 movzx	 eax, BYTE PTR [edx+853]
  0020b	50		 push	 eax
  0020c	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@PADIALFI@NavActive?3?5?$CFd?0?5NavVisible?3?5?$CFd@
  00211	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00216	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2937 : 
; 2938 :         // Display Keyboard/Mouse state
; 2939 :         if (ImGui::TreeNode("Keyboard, Mouse & Navigation State"))

  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@IMLPMLDN@Keyboard?0?5Mouse?5?$CG?5Navigation?5St@
  0021e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00223	83 c4 04	 add	 esp, 4
  00226	0f b6 c0	 movzx	 eax, al
  00229	85 c0		 test	 eax, eax
  0022b	0f 84 14 08 00
	00		 je	 $LN48@ShowDemoWi

; 2940 :         {
; 2941 :             if (ImGui::IsMousePosValid())

  00231	6a 00		 push	 0
  00233	e8 00 00 00 00	 call	 ?IsMousePosValid@ImGui@@YA_NPBUImVec2@@@Z ; ImGui::IsMousePosValid
  00238	83 c4 04	 add	 esp, 4
  0023b	0f b6 c0	 movzx	 eax, al
  0023e	85 c0		 test	 eax, eax
  00240	74 35		 je	 SHORT $LN49@ShowDemoWi

; 2942 :                 ImGui::Text("Mouse pos: (%g, %g)", io.MousePos.x, io.MousePos.y);

  00242	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00245	f3 0f 5a 80 e4
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+228]
  0024d	83 ec 08	 sub	 esp, 8
  00250	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00255	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00258	f3 0f 5a 81 e0
	00 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+224]
  00260	83 ec 08	 sub	 esp, 8
  00263	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00268	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HGGCPGOH@Mouse?5pos?3?5?$CI?$CFg?0?5?$CFg?$CJ@
  0026d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00272	83 c4 14	 add	 esp, 20			; 00000014H
  00275	eb 0d		 jmp	 SHORT $LN50@ShowDemoWi
$LN49@ShowDemoWi:

; 2943 :             else
; 2944 :                 ImGui::Text("Mouse pos: <INVALID>");

  00277	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@BCIGOCNH@Mouse?5pos?3?5?$DMINVALID?$DO@
  0027c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00281	83 c4 04	 add	 esp, 4
$LN50@ShowDemoWi:

; 2945 :             ImGui::Text("Mouse delta: (%g, %g)", io.MouseDelta.x, io.MouseDelta.y);

  00284	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00287	f3 0f 5a 80 74
	03 00 00	 cvtss2sd xmm0, DWORD PTR [eax+884]
  0028f	83 ec 08	 sub	 esp, 8
  00292	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00297	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  0029a	f3 0f 5a 81 70
	03 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+880]
  002a2	83 ec 08	 sub	 esp, 8
  002a5	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  002aa	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@MNNMKHFC@Mouse?5delta?3?5?$CI?$CFg?0?5?$CFg?$CJ@
  002af	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002b4	83 c4 14	 add	 esp, 20			; 00000014H

; 2946 :             ImGui::Text("Mouse down:");     for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (io.MouseDownDuration[i] >= 0.0f)   { ImGui::SameLine(); ImGui::Text("b%d (%.02f secs)", i, io.MouseDownDuration[i]); }

  002b7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HODNMGFJ@Mouse?5down?3@
  002bc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002c1	83 c4 04	 add	 esp, 4
  002c4	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _i$35[ebp], 0
  002cb	eb 09		 jmp	 SHORT $LN8@ShowDemoWi
$LN6@ShowDemoWi:
  002cd	8b 45 a8	 mov	 eax, DWORD PTR _i$35[ebp]
  002d0	83 c0 01	 add	 eax, 1
  002d3	89 45 a8	 mov	 DWORD PTR _i$35[ebp], eax
$LN8@ShowDemoWi:
  002d6	83 7d a8 05	 cmp	 DWORD PTR _i$35[ebp], 5
  002da	7d 61		 jge	 SHORT $LN7@ShowDemoWi
  002dc	8b 45 a8	 mov	 eax, DWORD PTR _i$35[ebp]
  002df	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  002e2	f3 0f 10 84 81
	ec 03 00 00	 movss	 xmm0, DWORD PTR [ecx+eax*4+1004]
  002eb	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  002f2	72 47		 jb	 SHORT $LN51@ShowDemoWi
  002f4	51		 push	 ecx
  002f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00302	51		 push	 ecx
  00303	0f 57 c0	 xorps	 xmm0, xmm0
  00306	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0030b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00310	83 c4 08	 add	 esp, 8
  00313	8b 45 a8	 mov	 eax, DWORD PTR _i$35[ebp]
  00316	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00319	f3 0f 5a 84 81
	ec 03 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+1004]
  00322	83 ec 08	 sub	 esp, 8
  00325	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0032a	8b 55 a8	 mov	 edx, DWORD PTR _i$35[ebp]
  0032d	52		 push	 edx
  0032e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BCIHMLII@b?$CFd?5?$CI?$CF?402f?5secs?$CJ@
  00333	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00338	83 c4 10	 add	 esp, 16			; 00000010H
$LN51@ShowDemoWi:
  0033b	eb 90		 jmp	 SHORT $LN6@ShowDemoWi
$LN7@ShowDemoWi:

; 2947 :             ImGui::Text("Mouse clicked:");  for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseClicked(i))          { ImGui::SameLine(); ImGui::Text("b%d", i); }

  0033d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KEMIOLDA@Mouse?5clicked?3@
  00342	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00347	83 c4 04	 add	 esp, 4
  0034a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _i$34[ebp], 0
  00351	eb 09		 jmp	 SHORT $LN11@ShowDemoWi
$LN9@ShowDemoWi:
  00353	8b 45 9c	 mov	 eax, DWORD PTR _i$34[ebp]
  00356	83 c0 01	 add	 eax, 1
  00359	89 45 9c	 mov	 DWORD PTR _i$34[ebp], eax
$LN11@ShowDemoWi:
  0035c	83 7d 9c 05	 cmp	 DWORD PTR _i$34[ebp], 5
  00360	7d 47		 jge	 SHORT $LN10@ShowDemoWi
  00362	6a 00		 push	 0
  00364	8b 45 9c	 mov	 eax, DWORD PTR _i$34[ebp]
  00367	50		 push	 eax
  00368	e8 00 00 00 00	 call	 ?IsMouseClicked@ImGui@@YA_NH_N@Z ; ImGui::IsMouseClicked
  0036d	83 c4 08	 add	 esp, 8
  00370	0f b6 c8	 movzx	 ecx, al
  00373	85 c9		 test	 ecx, ecx
  00375	74 30		 je	 SHORT $LN52@ShowDemoWi
  00377	51		 push	 ecx
  00378	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00380	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00385	51		 push	 ecx
  00386	0f 57 c0	 xorps	 xmm0, xmm0
  00389	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00393	83 c4 08	 add	 esp, 8
  00396	8b 45 9c	 mov	 eax, DWORD PTR _i$34[ebp]
  00399	50		 push	 eax
  0039a	68 00 00 00 00	 push	 OFFSET ??_C@_03HAIDDFMD@b?$CFd@
  0039f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003a4	83 c4 08	 add	 esp, 8
$LN52@ShowDemoWi:
  003a7	eb aa		 jmp	 SHORT $LN9@ShowDemoWi
$LN10@ShowDemoWi:

; 2948 :             ImGui::Text("Mouse dbl-clicked:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseDoubleClicked(i)) { ImGui::SameLine(); ImGui::Text("b%d", i); }

  003a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@IEMOMOGE@Mouse?5dbl?9clicked?3@
  003ae	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003b3	83 c4 04	 add	 esp, 4
  003b6	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _i$33[ebp], 0
  003bd	eb 09		 jmp	 SHORT $LN14@ShowDemoWi
$LN12@ShowDemoWi:
  003bf	8b 45 90	 mov	 eax, DWORD PTR _i$33[ebp]
  003c2	83 c0 01	 add	 eax, 1
  003c5	89 45 90	 mov	 DWORD PTR _i$33[ebp], eax
$LN14@ShowDemoWi:
  003c8	83 7d 90 05	 cmp	 DWORD PTR _i$33[ebp], 5
  003cc	7d 45		 jge	 SHORT $LN13@ShowDemoWi
  003ce	8b 45 90	 mov	 eax, DWORD PTR _i$33[ebp]
  003d1	50		 push	 eax
  003d2	e8 00 00 00 00	 call	 ?IsMouseDoubleClicked@ImGui@@YA_NH@Z ; ImGui::IsMouseDoubleClicked
  003d7	83 c4 04	 add	 esp, 4
  003da	0f b6 c8	 movzx	 ecx, al
  003dd	85 c9		 test	 ecx, ecx
  003df	74 30		 je	 SHORT $LN53@ShowDemoWi
  003e1	51		 push	 ecx
  003e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ef	51		 push	 ecx
  003f0	0f 57 c0	 xorps	 xmm0, xmm0
  003f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  003fd	83 c4 08	 add	 esp, 8
  00400	8b 45 90	 mov	 eax, DWORD PTR _i$33[ebp]
  00403	50		 push	 eax
  00404	68 00 00 00 00	 push	 OFFSET ??_C@_03HAIDDFMD@b?$CFd@
  00409	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0040e	83 c4 08	 add	 esp, 8
$LN53@ShowDemoWi:
  00411	eb ac		 jmp	 SHORT $LN12@ShowDemoWi
$LN13@ShowDemoWi:

; 2949 :             ImGui::Text("Mouse released:"); for (int i = 0; i < IM_ARRAYSIZE(io.MouseDown); i++) if (ImGui::IsMouseReleased(i))         { ImGui::SameLine(); ImGui::Text("b%d", i); }

  00413	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NMIOGEHG@Mouse?5released?3@
  00418	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0041d	83 c4 04	 add	 esp, 4
  00420	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _i$32[ebp], 0
  00427	eb 09		 jmp	 SHORT $LN17@ShowDemoWi
$LN15@ShowDemoWi:
  00429	8b 45 84	 mov	 eax, DWORD PTR _i$32[ebp]
  0042c	83 c0 01	 add	 eax, 1
  0042f	89 45 84	 mov	 DWORD PTR _i$32[ebp], eax
$LN17@ShowDemoWi:
  00432	83 7d 84 05	 cmp	 DWORD PTR _i$32[ebp], 5
  00436	7d 45		 jge	 SHORT $LN16@ShowDemoWi
  00438	8b 45 84	 mov	 eax, DWORD PTR _i$32[ebp]
  0043b	50		 push	 eax
  0043c	e8 00 00 00 00	 call	 ?IsMouseReleased@ImGui@@YA_NH@Z ; ImGui::IsMouseReleased
  00441	83 c4 04	 add	 esp, 4
  00444	0f b6 c8	 movzx	 ecx, al
  00447	85 c9		 test	 ecx, ecx
  00449	74 30		 je	 SHORT $LN54@ShowDemoWi
  0044b	51		 push	 ecx
  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00459	51		 push	 ecx
  0045a	0f 57 c0	 xorps	 xmm0, xmm0
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00467	83 c4 08	 add	 esp, 8
  0046a	8b 45 84	 mov	 eax, DWORD PTR _i$32[ebp]
  0046d	50		 push	 eax
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_03HAIDDFMD@b?$CFd@
  00473	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00478	83 c4 08	 add	 esp, 8
$LN54@ShowDemoWi:
  0047b	eb ac		 jmp	 SHORT $LN15@ShowDemoWi
$LN16@ShowDemoWi:

; 2950 :             ImGui::Text("Mouse wheel: %.1f", io.MouseWheel);

  0047d	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00480	f3 0f 5a 80 f0
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+240]
  00488	83 ec 08	 sub	 esp, 8
  0048b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00490	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CFHNPKHB@Mouse?5wheel?3?5?$CF?41f@
  00495	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0049a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2951 : 
; 2952 :             ImGui::Text("Keys down:");      for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (io.KeysDownDuration[i] >= 0.0f)     { ImGui::SameLine(); ImGui::Text("%d (0x%X) (%.02f secs)", i, i, io.KeysDownDuration[i]); }

  0049d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@POLCMIEL@Keys?5down?3@
  004a2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004a7	83 c4 04	 add	 esp, 4
  004aa	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$31[ebp], 0
  004b4	eb 0f		 jmp	 SHORT $LN20@ShowDemoWi
$LN18@ShowDemoWi:
  004b6	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$31[ebp]
  004bc	83 c0 01	 add	 eax, 1
  004bf	89 85 78 ff ff
	ff		 mov	 DWORD PTR _i$31[ebp], eax
$LN20@ShowDemoWi:
  004c5	81 bd 78 ff ff
	ff 00 02 00 00	 cmp	 DWORD PTR _i$31[ebp], 512 ; 00000200H
  004cf	7d 74		 jge	 SHORT $LN19@ShowDemoWi
  004d1	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$31[ebp]
  004d7	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  004da	f3 0f 10 84 81
	50 04 00 00	 movss	 xmm0, DWORD PTR [ecx+eax*4+1104]
  004e3	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  004ea	72 54		 jb	 SHORT $LN55@ShowDemoWi
  004ec	51		 push	 ecx
  004ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  004f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fa	51		 push	 ecx
  004fb	0f 57 c0	 xorps	 xmm0, xmm0
  004fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00503	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00508	83 c4 08	 add	 esp, 8
  0050b	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$31[ebp]
  00511	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00514	f3 0f 5a 84 81
	50 04 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+1104]
  0051d	83 ec 08	 sub	 esp, 8
  00520	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00525	8b 95 78 ff ff
	ff		 mov	 edx, DWORD PTR _i$31[ebp]
  0052b	52		 push	 edx
  0052c	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _i$31[ebp]
  00532	50		 push	 eax
  00533	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@EIGPEOBP@?$CFd?5?$CI0x?$CFX?$CJ?5?$CI?$CF?402f?5secs?$CJ@
  00538	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0053d	83 c4 14	 add	 esp, 20			; 00000014H
$LN55@ShowDemoWi:
  00540	e9 71 ff ff ff	 jmp	 $LN18@ShowDemoWi
$LN19@ShowDemoWi:

; 2953 :             ImGui::Text("Keys pressed:");   for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyPressed(i))             { ImGui::SameLine(); ImGui::Text("%d (0x%X)", i, i); }

  00545	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DAHEMGJA@Keys?5pressed?3@
  0054a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0054f	83 c4 04	 add	 esp, 4
  00552	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$30[ebp], 0
  0055c	eb 0f		 jmp	 SHORT $LN23@ShowDemoWi
$LN21@ShowDemoWi:
  0055e	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$30[ebp]
  00564	83 c0 01	 add	 eax, 1
  00567	89 85 6c ff ff
	ff		 mov	 DWORD PTR _i$30[ebp], eax
$LN23@ShowDemoWi:
  0056d	81 bd 6c ff ff
	ff 00 02 00 00	 cmp	 DWORD PTR _i$30[ebp], 512 ; 00000200H
  00577	7d 54		 jge	 SHORT $LN22@ShowDemoWi
  00579	6a 01		 push	 1
  0057b	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$30[ebp]
  00581	50		 push	 eax
  00582	e8 00 00 00 00	 call	 ?IsKeyPressed@ImGui@@YA_NH_N@Z ; ImGui::IsKeyPressed
  00587	83 c4 08	 add	 esp, 8
  0058a	0f b6 c8	 movzx	 ecx, al
  0058d	85 c9		 test	 ecx, ecx
  0058f	74 3a		 je	 SHORT $LN56@ShowDemoWi
  00591	51		 push	 ecx
  00592	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	51		 push	 ecx
  005a0	0f 57 c0	 xorps	 xmm0, xmm0
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  005ad	83 c4 08	 add	 esp, 8
  005b0	8b 85 6c ff ff
	ff		 mov	 eax, DWORD PTR _i$30[ebp]
  005b6	50		 push	 eax
  005b7	8b 8d 6c ff ff
	ff		 mov	 ecx, DWORD PTR _i$30[ebp]
  005bd	51		 push	 ecx
  005be	68 00 00 00 00	 push	 OFFSET ??_C@_09MNHHIJFE@?$CFd?5?$CI0x?$CFX?$CJ@
  005c3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  005c8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN56@ShowDemoWi:
  005cb	eb 91		 jmp	 SHORT $LN21@ShowDemoWi
$LN22@ShowDemoWi:

; 2954 :             ImGui::Text("Keys release:");   for (int i = 0; i < IM_ARRAYSIZE(io.KeysDown); i++) if (ImGui::IsKeyReleased(i))            { ImGui::SameLine(); ImGui::Text("%d (0x%X)", i, i); }

  005cd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EGHLNEOH@Keys?5release?3@
  005d2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  005d7	83 c4 04	 add	 esp, 4
  005da	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$29[ebp], 0
  005e4	eb 0f		 jmp	 SHORT $LN26@ShowDemoWi
$LN24@ShowDemoWi:
  005e6	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _i$29[ebp]
  005ec	83 c0 01	 add	 eax, 1
  005ef	89 85 60 ff ff
	ff		 mov	 DWORD PTR _i$29[ebp], eax
$LN26@ShowDemoWi:
  005f5	81 bd 60 ff ff
	ff 00 02 00 00	 cmp	 DWORD PTR _i$29[ebp], 512 ; 00000200H
  005ff	7d 52		 jge	 SHORT $LN25@ShowDemoWi
  00601	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _i$29[ebp]
  00607	50		 push	 eax
  00608	e8 00 00 00 00	 call	 ?IsKeyReleased@ImGui@@YA_NH@Z ; ImGui::IsKeyReleased
  0060d	83 c4 04	 add	 esp, 4
  00610	0f b6 c8	 movzx	 ecx, al
  00613	85 c9		 test	 ecx, ecx
  00615	74 3a		 je	 SHORT $LN57@ShowDemoWi
  00617	51		 push	 ecx
  00618	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00620	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00625	51		 push	 ecx
  00626	0f 57 c0	 xorps	 xmm0, xmm0
  00629	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0062e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00633	83 c4 08	 add	 esp, 8
  00636	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _i$29[ebp]
  0063c	50		 push	 eax
  0063d	8b 8d 60 ff ff
	ff		 mov	 ecx, DWORD PTR _i$29[ebp]
  00643	51		 push	 ecx
  00644	68 00 00 00 00	 push	 OFFSET ??_C@_09MNHHIJFE@?$CFd?5?$CI0x?$CFX?$CJ@
  00649	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0064e	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN57@ShowDemoWi:
  00651	eb 93		 jmp	 SHORT $LN24@ShowDemoWi
$LN25@ShowDemoWi:

; 2955 :             ImGui::Text("Keys mods: %s%s%s%s", io.KeyCtrl ? "CTRL " : "", io.KeyShift ? "SHIFT " : "", io.KeyAlt ? "ALT " : "", io.KeySuper ? "SUPER " : "");

  00653	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00656	0f b6 88 fb 00
	00 00		 movzx	 ecx, BYTE PTR [eax+251]
  0065d	85 c9		 test	 ecx, ecx
  0065f	74 0c		 je	 SHORT $LN83@ShowDemoWi
  00661	c7 85 24 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv317[ebp], OFFSET ??_C@_06ECIIPDFH@SUPER?5@
  0066b	eb 0a		 jmp	 SHORT $LN84@ShowDemoWi
$LN83@ShowDemoWi:
  0066d	c7 85 24 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv317[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN84@ShowDemoWi:
  00677	8b 55 b4	 mov	 edx, DWORD PTR _io$36[ebp]
  0067a	0f b6 82 fa 00
	00 00		 movzx	 eax, BYTE PTR [edx+250]
  00681	85 c0		 test	 eax, eax
  00683	74 0c		 je	 SHORT $LN85@ShowDemoWi
  00685	c7 85 20 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv322[ebp], OFFSET ??_C@_04HDLNDMFA@ALT?5@
  0068f	eb 0a		 jmp	 SHORT $LN86@ShowDemoWi
$LN85@ShowDemoWi:
  00691	c7 85 20 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv322[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN86@ShowDemoWi:
  0069b	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  0069e	0f b6 91 f9 00
	00 00		 movzx	 edx, BYTE PTR [ecx+249]
  006a5	85 d2		 test	 edx, edx
  006a7	74 0c		 je	 SHORT $LN87@ShowDemoWi
  006a9	c7 85 1c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], OFFSET ??_C@_06IGAIMELN@SHIFT?5@
  006b3	eb 0a		 jmp	 SHORT $LN88@ShowDemoWi
$LN87@ShowDemoWi:
  006b5	c7 85 1c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv327[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN88@ShowDemoWi:
  006bf	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  006c2	0f b6 88 f8 00
	00 00		 movzx	 ecx, BYTE PTR [eax+248]
  006c9	85 c9		 test	 ecx, ecx
  006cb	74 0c		 je	 SHORT $LN89@ShowDemoWi
  006cd	c7 85 18 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv332[ebp], OFFSET ??_C@_05IHGCNILK@CTRL?5@
  006d7	eb 0a		 jmp	 SHORT $LN90@ShowDemoWi
$LN89@ShowDemoWi:
  006d9	c7 85 18 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv332[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN90@ShowDemoWi:
  006e3	8b 95 24 fc ff
	ff		 mov	 edx, DWORD PTR tv317[ebp]
  006e9	52		 push	 edx
  006ea	8b 85 20 fc ff
	ff		 mov	 eax, DWORD PTR tv322[ebp]
  006f0	50		 push	 eax
  006f1	8b 8d 1c fc ff
	ff		 mov	 ecx, DWORD PTR tv327[ebp]
  006f7	51		 push	 ecx
  006f8	8b 95 18 fc ff
	ff		 mov	 edx, DWORD PTR tv332[ebp]
  006fe	52		 push	 edx
  006ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HPBGOMPC@Keys?5mods?3?5?$CFs?$CFs?$CFs?$CFs@
  00704	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00709	83 c4 14	 add	 esp, 20			; 00000014H

; 2956 :             ImGui::Text("Chars queue:");    for (int i = 0; i < io.InputQueueCharacters.Size; i++) { ImWchar c = io.InputQueueCharacters[i]; ImGui::SameLine();  ImGui::Text("\'%c\' (0x%04X)", (c > ' ' && c <= 255) ? (char)c : '?', c); } // FIXME: We should convert 'c' to UTF-8 here but the functions are not public.

  0070c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PKFKOHDJ@Chars?5queue?3@
  00711	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00716	83 c4 04	 add	 esp, 4
  00719	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$28[ebp], 0
  00723	eb 0f		 jmp	 SHORT $LN29@ShowDemoWi
$LN27@ShowDemoWi:
  00725	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$28[ebp]
  0072b	83 c0 01	 add	 eax, 1
  0072e	89 85 54 ff ff
	ff		 mov	 DWORD PTR _i$28[ebp], eax
$LN29@ShowDemoWi:
  00734	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00737	8b 8d 54 ff ff
	ff		 mov	 ecx, DWORD PTR _i$28[ebp]
  0073d	3b 88 f8 14 00
	00		 cmp	 ecx, DWORD PTR [eax+5368]
  00743	0f 8d 90 00 00
	00		 jge	 $LN28@ShowDemoWi
  00749	8b 85 54 ff ff
	ff		 mov	 eax, DWORD PTR _i$28[ebp]
  0074f	50		 push	 eax
  00750	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00753	81 c1 f8 14 00
	00		 add	 ecx, 5368		; 000014f8H
  00759	e8 00 00 00 00	 call	 ??A?$ImVector@G@@QAEAAGH@Z ; ImVector<unsigned short>::operator[]
  0075e	66 8b 08	 mov	 cx, WORD PTR [eax]
  00761	66 89 8d 48 ff
	ff ff		 mov	 WORD PTR _c$27[ebp], cx
  00768	51		 push	 ecx
  00769	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00771	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00776	51		 push	 ecx
  00777	0f 57 c0	 xorps	 xmm0, xmm0
  0077a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00784	83 c4 08	 add	 esp, 8
  00787	0f b7 85 48 ff
	ff ff		 movzx	 eax, WORD PTR _c$27[ebp]
  0078e	83 f8 20	 cmp	 eax, 32			; 00000020H
  00791	7e 1d		 jle	 SHORT $LN91@ShowDemoWi
  00793	0f b7 8d 48 ff
	ff ff		 movzx	 ecx, WORD PTR _c$27[ebp]
  0079a	81 f9 ff 00 00
	00		 cmp	 ecx, 255		; 000000ffH
  007a0	7f 0e		 jg	 SHORT $LN91@ShowDemoWi
  007a2	8a 95 48 ff ff
	ff		 mov	 dl, BYTE PTR _c$27[ebp]
  007a8	88 95 27 fc ff
	ff		 mov	 BYTE PTR tv352[ebp], dl
  007ae	eb 07		 jmp	 SHORT $LN92@ShowDemoWi
$LN91@ShowDemoWi:
  007b0	c6 85 27 fc ff
	ff 3f		 mov	 BYTE PTR tv352[ebp], 63	; 0000003fH
$LN92@ShowDemoWi:
  007b7	0f b7 85 48 ff
	ff ff		 movzx	 eax, WORD PTR _c$27[ebp]
  007be	50		 push	 eax
  007bf	0f be 8d 27 fc
	ff ff		 movsx	 ecx, BYTE PTR tv352[ebp]
  007c6	51		 push	 ecx
  007c7	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FLAJMFCG@?8?$CFc?8?5?$CI0x?$CF04X?$CJ@
  007cc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  007d1	83 c4 0c	 add	 esp, 12			; 0000000cH
  007d4	e9 4c ff ff ff	 jmp	 $LN27@ShowDemoWi
$LN28@ShowDemoWi:

; 2957 : 
; 2958 :             ImGui::Text("NavInputs down:"); for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputs[i] > 0.0f)                    { ImGui::SameLine(); ImGui::Text("[%d] %.2f", i, io.NavInputs[i]); }

  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LIMLNKOJ@NavInputs?5down?3@
  007de	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  007e3	83 c4 04	 add	 esp, 4
  007e6	c7 85 3c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$26[ebp], 0
  007f0	eb 0f		 jmp	 SHORT $LN32@ShowDemoWi
$LN30@ShowDemoWi:
  007f2	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _i$26[ebp]
  007f8	83 c0 01	 add	 eax, 1
  007fb	89 85 3c ff ff
	ff		 mov	 DWORD PTR _i$26[ebp], eax
$LN32@ShowDemoWi:
  00801	83 bd 3c ff ff
	ff 15		 cmp	 DWORD PTR _i$26[ebp], 21 ; 00000015H
  00808	7d 6d		 jge	 SHORT $LN31@ShowDemoWi
  0080a	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _i$26[ebp]
  00810	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00813	f3 0f 10 84 81
	fc 02 00 00	 movss	 xmm0, DWORD PTR [ecx+eax*4+764]
  0081c	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00823	76 4d		 jbe	 SHORT $LN58@ShowDemoWi
  00825	51		 push	 ecx
  00826	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0082e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00833	51		 push	 ecx
  00834	0f 57 c0	 xorps	 xmm0, xmm0
  00837	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00841	83 c4 08	 add	 esp, 8
  00844	8b 85 3c ff ff
	ff		 mov	 eax, DWORD PTR _i$26[ebp]
  0084a	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  0084d	f3 0f 5a 84 81
	fc 02 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+764]
  00856	83 ec 08	 sub	 esp, 8
  00859	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0085e	8b 95 3c ff ff
	ff		 mov	 edx, DWORD PTR _i$26[ebp]
  00864	52		 push	 edx
  00865	68 00 00 00 00	 push	 OFFSET ??_C@_09NJGMILHM@?$FL?$CFd?$FN?5?$CF?42f@
  0086a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0086f	83 c4 10	 add	 esp, 16			; 00000010H
$LN58@ShowDemoWi:
  00872	e9 7b ff ff ff	 jmp	 $LN30@ShowDemoWi
$LN31@ShowDemoWi:

; 2959 :             ImGui::Text("NavInputs pressed:"); for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] == 0.0f)    { ImGui::SameLine(); ImGui::Text("[%d]", i); }

  00877	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@LLKFPGJD@NavInputs?5pressed?3@
  0087c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00881	83 c4 04	 add	 esp, 4
  00884	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$25[ebp], 0
  0088e	eb 0f		 jmp	 SHORT $LN35@ShowDemoWi
$LN33@ShowDemoWi:
  00890	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$25[ebp]
  00896	83 c0 01	 add	 eax, 1
  00899	89 85 30 ff ff
	ff		 mov	 DWORD PTR _i$25[ebp], eax
$LN35@ShowDemoWi:
  0089f	83 bd 30 ff ff
	ff 15		 cmp	 DWORD PTR _i$25[ebp], 21 ; 00000015H
  008a6	7d 54		 jge	 SHORT $LN34@ShowDemoWi
  008a8	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$25[ebp]
  008ae	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  008b1	f3 0f 10 84 81
	50 14 00 00	 movss	 xmm0, DWORD PTR [ecx+eax*4+5200]
  008ba	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  008c1	9f		 lahf
  008c2	f6 c4 44	 test	 ah, 68			; 00000044H
  008c5	7a 33		 jp	 SHORT $LN59@ShowDemoWi
  008c7	51		 push	 ecx
  008c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d5	51		 push	 ecx
  008d6	0f 57 c0	 xorps	 xmm0, xmm0
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008e3	83 c4 08	 add	 esp, 8
  008e6	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR _i$25[ebp]
  008ec	50		 push	 eax
  008ed	68 00 00 00 00	 push	 OFFSET ??_C@_04KBDJOJNB@?$FL?$CFd?$FN@
  008f2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  008f7	83 c4 08	 add	 esp, 8
$LN59@ShowDemoWi:
  008fa	eb 94		 jmp	 SHORT $LN33@ShowDemoWi
$LN34@ShowDemoWi:

; 2960 :             ImGui::Text("NavInputs duration:"); for (int i = 0; i < IM_ARRAYSIZE(io.NavInputs); i++) if (io.NavInputsDownDuration[i] >= 0.0f)   { ImGui::SameLine(); ImGui::Text("[%d] %.2f", i, io.NavInputsDownDuration[i]); }

  008fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OEEOJMCL@NavInputs?5duration?3@
  00901	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00906	83 c4 04	 add	 esp, 4
  00909	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$24[ebp], 0
  00913	eb 0f		 jmp	 SHORT $LN38@ShowDemoWi
$LN36@ShowDemoWi:
  00915	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$24[ebp]
  0091b	83 c0 01	 add	 eax, 1
  0091e	89 85 24 ff ff
	ff		 mov	 DWORD PTR _i$24[ebp], eax
$LN38@ShowDemoWi:
  00924	83 bd 24 ff ff
	ff 15		 cmp	 DWORD PTR _i$24[ebp], 21 ; 00000015H
  0092b	7d 6d		 jge	 SHORT $LN37@ShowDemoWi
  0092d	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$24[ebp]
  00933	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00936	f3 0f 10 84 81
	50 14 00 00	 movss	 xmm0, DWORD PTR [ecx+eax*4+5200]
  0093f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00946	72 4d		 jb	 SHORT $LN60@ShowDemoWi
  00948	51		 push	 ecx
  00949	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00951	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00956	51		 push	 ecx
  00957	0f 57 c0	 xorps	 xmm0, xmm0
  0095a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0095f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00964	83 c4 08	 add	 esp, 8
  00967	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$24[ebp]
  0096d	8b 4d b4	 mov	 ecx, DWORD PTR _io$36[ebp]
  00970	f3 0f 5a 84 81
	50 14 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+eax*4+5200]
  00979	83 ec 08	 sub	 esp, 8
  0097c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00981	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR _i$24[ebp]
  00987	52		 push	 edx
  00988	68 00 00 00 00	 push	 OFFSET ??_C@_09NJGMILHM@?$FL?$CFd?$FN?5?$CF?42f@
  0098d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00992	83 c4 10	 add	 esp, 16			; 00000010H
$LN60@ShowDemoWi:
  00995	e9 7b ff ff ff	 jmp	 $LN36@ShowDemoWi
$LN37@ShowDemoWi:

; 2961 : 
; 2962 :             ImGui::Button("Hovering me sets the\nkeyboard capture flag");

  0099a	51		 push	 ecx
  0099b	0f 57 c0	 xorps	 xmm0, xmm0
  0099e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009a3	51		 push	 ecx
  009a4	0f 57 c0	 xorps	 xmm0, xmm0
  009a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ac	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  009b2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  009b7	50		 push	 eax
  009b8	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@NJDOKPGI@Hovering?5me?5sets?5the?6keyboard?5c@
  009bd	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  009c2	83 c4 08	 add	 esp, 8

; 2963 :             if (ImGui::IsItemHovered())

  009c5	6a 00		 push	 0
  009c7	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  009cc	83 c4 04	 add	 esp, 4
  009cf	0f b6 c0	 movzx	 eax, al
  009d2	85 c0		 test	 eax, eax
  009d4	74 0a		 je	 SHORT $LN61@ShowDemoWi

; 2964 :                 ImGui::CaptureKeyboardFromApp(true);

  009d6	6a 01		 push	 1
  009d8	e8 00 00 00 00	 call	 ?CaptureKeyboardFromApp@ImGui@@YAX_N@Z ; ImGui::CaptureKeyboardFromApp
  009dd	83 c4 04	 add	 esp, 4
$LN61@ShowDemoWi:

; 2965 :             ImGui::SameLine();

  009e0	51		 push	 ecx
  009e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ee	51		 push	 ecx
  009ef	0f 57 c0	 xorps	 xmm0, xmm0
  009f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009f7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  009fc	83 c4 08	 add	 esp, 8

; 2966 :             ImGui::Button("Holding me clears the\nthe keyboard capture flag");

  009ff	51		 push	 ecx
  00a00	0f 57 c0	 xorps	 xmm0, xmm0
  00a03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a08	51		 push	 ecx
  00a09	0f 57 c0	 xorps	 xmm0, xmm0
  00a0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a11	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00a17	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00a1c	50		 push	 eax
  00a1d	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@JDENAPEM@Holding?5me?5clears?5the?6the?5keybo@
  00a22	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00a27	83 c4 08	 add	 esp, 8

; 2967 :             if (ImGui::IsItemActive())

  00a2a	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00a2f	0f b6 c0	 movzx	 eax, al
  00a32	85 c0		 test	 eax, eax
  00a34	74 0a		 je	 SHORT $LN62@ShowDemoWi

; 2968 :                 ImGui::CaptureKeyboardFromApp(false);

  00a36	6a 00		 push	 0
  00a38	e8 00 00 00 00	 call	 ?CaptureKeyboardFromApp@ImGui@@YAX_N@Z ; ImGui::CaptureKeyboardFromApp
  00a3d	83 c4 04	 add	 esp, 4
$LN62@ShowDemoWi:

; 2969 : 
; 2970 :             ImGui::TreePop();

  00a40	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN48@ShowDemoWi:

; 2971 :         }
; 2972 : 
; 2973 :         if (ImGui::TreeNode("Tabbing"))

  00a45	68 00 00 00 00	 push	 OFFSET ??_C@_07OOGFLDEE@Tabbing@
  00a4a	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00a4f	83 c4 04	 add	 esp, 4
  00a52	0f b6 c0	 movzx	 eax, al
  00a55	85 c0		 test	 eax, eax
  00a57	0f 84 a3 00 00
	00		 je	 $LN63@ShowDemoWi

; 2974 :         {
; 2975 :             ImGui::Text("Use TAB/SHIFT+TAB to cycle through keyboard editable fields.");

  00a5d	68 00 00 00 00	 push	 OFFSET ??_C@_0DN@DBMIKJE@Use?5TAB?1SHIFT?$CLTAB?5to?5cycle?5thro@
  00a62	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00a67	83 c4 04	 add	 esp, 4

; 2976 :             static char buf[32] = "dummy";
; 2977 :             ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));

  00a6a	6a 00		 push	 0
  00a6c	6a 00		 push	 0
  00a6e	6a 00		 push	 0
  00a70	6a 20		 push	 32			; 00000020H
  00a72	68 00 00 00 00	 push	 OFFSET ?buf@?EC@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00a77	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  00a7c	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00a81	83 c4 18	 add	 esp, 24			; 00000018H

; 2978 :             ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));

  00a84	6a 00		 push	 0
  00a86	6a 00		 push	 0
  00a88	6a 00		 push	 0
  00a8a	6a 20		 push	 32			; 00000020H
  00a8c	68 00 00 00 00	 push	 OFFSET ?buf@?EC@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00a91	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2@
  00a96	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00a9b	83 c4 18	 add	 esp, 24			; 00000018H

; 2979 :             ImGui::InputText("3", buf, IM_ARRAYSIZE(buf));

  00a9e	6a 00		 push	 0
  00aa0	6a 00		 push	 0
  00aa2	6a 00		 push	 0
  00aa4	6a 20		 push	 32			; 00000020H
  00aa6	68 00 00 00 00	 push	 OFFSET ?buf@?EC@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00aab	68 00 00 00 00	 push	 OFFSET ??_C@_01EKENIIDA@3@
  00ab0	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00ab5	83 c4 18	 add	 esp, 24			; 00000018H

; 2980 :             ImGui::PushAllowKeyboardFocus(false);

  00ab8	6a 00		 push	 0
  00aba	e8 00 00 00 00	 call	 ?PushAllowKeyboardFocus@ImGui@@YAX_N@Z ; ImGui::PushAllowKeyboardFocus
  00abf	83 c4 04	 add	 esp, 4

; 2981 :             ImGui::InputText("4 (tab skip)", buf, IM_ARRAYSIZE(buf));

  00ac2	6a 00		 push	 0
  00ac4	6a 00		 push	 0
  00ac6	6a 00		 push	 0
  00ac8	6a 20		 push	 32			; 00000020H
  00aca	68 00 00 00 00	 push	 OFFSET ?buf@?EC@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00acf	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MPCBNDPA@4?5?$CItab?5skip?$CJ@
  00ad4	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00ad9	83 c4 18	 add	 esp, 24			; 00000018H

; 2982 :             //ImGui::SameLine(); HelpMarker("Use ImGui::PushAllowKeyboardFocus(bool)\nto disable tabbing through certain widgets.");
; 2983 :             ImGui::PopAllowKeyboardFocus();

  00adc	e8 00 00 00 00	 call	 ?PopAllowKeyboardFocus@ImGui@@YAXXZ ; ImGui::PopAllowKeyboardFocus

; 2984 :             ImGui::InputText("5", buf, IM_ARRAYSIZE(buf));

  00ae1	6a 00		 push	 0
  00ae3	6a 00		 push	 0
  00ae5	6a 00		 push	 0
  00ae7	6a 20		 push	 32			; 00000020H
  00ae9	68 00 00 00 00	 push	 OFFSET ?buf@?EC@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00aee	68 00 00 00 00	 push	 OFFSET ??_C@_01BMBHCPLG@5@
  00af3	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00af8	83 c4 18	 add	 esp, 24			; 00000018H

; 2985 :             ImGui::TreePop();

  00afb	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN63@ShowDemoWi:

; 2986 :         }
; 2987 : 
; 2988 :         if (ImGui::TreeNode("Focus from code"))

  00b00	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PGBLAHMK@Focus?5from?5code@
  00b05	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00b0a	83 c4 04	 add	 esp, 4
  00b0d	0f b6 c0	 movzx	 eax, al
  00b10	85 c0		 test	 eax, eax
  00b12	0f 84 5a 03 00
	00		 je	 $LN64@ShowDemoWi

; 2989 :         {
; 2990 :             bool focus_1 = ImGui::Button("Focus on 1"); ImGui::SameLine();

  00b18	51		 push	 ecx
  00b19	0f 57 c0	 xorps	 xmm0, xmm0
  00b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b21	51		 push	 ecx
  00b22	0f 57 c0	 xorps	 xmm0, xmm0
  00b25	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2a	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00b30	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00b35	50		 push	 eax
  00b36	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OPJAAOKJ@Focus?5on?51@
  00b3b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00b40	83 c4 08	 add	 esp, 8
  00b43	88 85 1b ff ff
	ff		 mov	 BYTE PTR _focus_1$23[ebp], al
  00b49	51		 push	 ecx
  00b4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b57	51		 push	 ecx
  00b58	0f 57 c0	 xorps	 xmm0, xmm0
  00b5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b60	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b65	83 c4 08	 add	 esp, 8

; 2991 :             bool focus_2 = ImGui::Button("Focus on 2"); ImGui::SameLine();

  00b68	51		 push	 ecx
  00b69	0f 57 c0	 xorps	 xmm0, xmm0
  00b6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b71	51		 push	 ecx
  00b72	0f 57 c0	 xorps	 xmm0, xmm0
  00b75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7a	8d 8d 8c fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00b80	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00b85	50		 push	 eax
  00b86	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MELNFNGK@Focus?5on?52@
  00b8b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00b90	83 c4 08	 add	 esp, 8
  00b93	88 85 0f ff ff
	ff		 mov	 BYTE PTR _focus_2$22[ebp], al
  00b99	51		 push	 ecx
  00b9a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ba2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba7	51		 push	 ecx
  00ba8	0f 57 c0	 xorps	 xmm0, xmm0
  00bab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00bb5	83 c4 08	 add	 esp, 8

; 2992 :             bool focus_3 = ImGui::Button("Focus on 3");

  00bb8	51		 push	 ecx
  00bb9	0f 57 c0	 xorps	 xmm0, xmm0
  00bbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc1	51		 push	 ecx
  00bc2	0f 57 c0	 xorps	 xmm0, xmm0
  00bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bca	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00bd0	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00bd5	50		 push	 eax
  00bd6	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NNKGGMCL@Focus?5on?53@
  00bdb	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00be0	83 c4 08	 add	 esp, 8
  00be3	88 85 03 ff ff
	ff		 mov	 BYTE PTR _focus_3$21[ebp], al

; 2993 :             int has_focus = 0;

  00be9	c7 85 f4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _has_focus$20[ebp], 0

; 2994 :             static char buf[128] = "click on a button to set focus";
; 2995 : 
; 2996 :             if (focus_1) ImGui::SetKeyboardFocusHere();

  00bf3	0f b6 85 1b ff
	ff ff		 movzx	 eax, BYTE PTR _focus_1$23[ebp]
  00bfa	85 c0		 test	 eax, eax
  00bfc	74 0a		 je	 SHORT $LN65@ShowDemoWi
  00bfe	6a 00		 push	 0
  00c00	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
  00c05	83 c4 04	 add	 esp, 4
$LN65@ShowDemoWi:

; 2997 :             ImGui::InputText("1", buf, IM_ARRAYSIZE(buf));

  00c08	6a 00		 push	 0
  00c0a	6a 00		 push	 0
  00c0c	6a 00		 push	 0
  00c0e	68 80 00 00 00	 push	 128			; 00000080H
  00c13	68 00 00 00 00	 push	 OFFSET ?buf@?EF@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00c18	68 00 00 00 00	 push	 OFFSET ??_C@_01HIHLOKLC@1@
  00c1d	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00c22	83 c4 18	 add	 esp, 24			; 00000018H

; 2998 :             if (ImGui::IsItemActive()) has_focus = 1;

  00c25	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00c2a	0f b6 c0	 movzx	 eax, al
  00c2d	85 c0		 test	 eax, eax
  00c2f	74 0a		 je	 SHORT $LN66@ShowDemoWi
  00c31	c7 85 f4 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _has_focus$20[ebp], 1
$LN66@ShowDemoWi:

; 2999 : 
; 3000 :             if (focus_2) ImGui::SetKeyboardFocusHere();

  00c3b	0f b6 85 0f ff
	ff ff		 movzx	 eax, BYTE PTR _focus_2$22[ebp]
  00c42	85 c0		 test	 eax, eax
  00c44	74 0a		 je	 SHORT $LN67@ShowDemoWi
  00c46	6a 00		 push	 0
  00c48	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
  00c4d	83 c4 04	 add	 esp, 4
$LN67@ShowDemoWi:

; 3001 :             ImGui::InputText("2", buf, IM_ARRAYSIZE(buf));

  00c50	6a 00		 push	 0
  00c52	6a 00		 push	 0
  00c54	6a 00		 push	 0
  00c56	68 80 00 00 00	 push	 128			; 00000080H
  00c5b	68 00 00 00 00	 push	 OFFSET ?buf@?EF@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00c60	68 00 00 00 00	 push	 OFFSET ??_C@_01FDFGLJHB@2@
  00c65	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00c6a	83 c4 18	 add	 esp, 24			; 00000018H

; 3002 :             if (ImGui::IsItemActive()) has_focus = 2;

  00c6d	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00c72	0f b6 c0	 movzx	 eax, al
  00c75	85 c0		 test	 eax, eax
  00c77	74 0a		 je	 SHORT $LN68@ShowDemoWi
  00c79	c7 85 f4 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _has_focus$20[ebp], 2
$LN68@ShowDemoWi:

; 3003 : 
; 3004 :             ImGui::PushAllowKeyboardFocus(false);

  00c83	6a 00		 push	 0
  00c85	e8 00 00 00 00	 call	 ?PushAllowKeyboardFocus@ImGui@@YAX_N@Z ; ImGui::PushAllowKeyboardFocus
  00c8a	83 c4 04	 add	 esp, 4

; 3005 :             if (focus_3) ImGui::SetKeyboardFocusHere();

  00c8d	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR _focus_3$21[ebp]
  00c94	85 c0		 test	 eax, eax
  00c96	74 0a		 je	 SHORT $LN69@ShowDemoWi
  00c98	6a 00		 push	 0
  00c9a	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
  00c9f	83 c4 04	 add	 esp, 4
$LN69@ShowDemoWi:

; 3006 :             ImGui::InputText("3 (tab skip)", buf, IM_ARRAYSIZE(buf));

  00ca2	6a 00		 push	 0
  00ca4	6a 00		 push	 0
  00ca6	6a 00		 push	 0
  00ca8	68 80 00 00 00	 push	 128			; 00000080H
  00cad	68 00 00 00 00	 push	 OFFSET ?buf@?EF@??ShowDemoWindowMisc@@YAXXZ@4PADA
  00cb2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LCFCNFKI@3?5?$CItab?5skip?$CJ@
  00cb7	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00cbc	83 c4 18	 add	 esp, 24			; 00000018H

; 3007 :             if (ImGui::IsItemActive()) has_focus = 3;

  00cbf	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00cc4	0f b6 c0	 movzx	 eax, al
  00cc7	85 c0		 test	 eax, eax
  00cc9	74 0a		 je	 SHORT $LN70@ShowDemoWi
  00ccb	c7 85 f4 fe ff
	ff 03 00 00 00	 mov	 DWORD PTR _has_focus$20[ebp], 3
$LN70@ShowDemoWi:

; 3008 :             ImGui::PopAllowKeyboardFocus();

  00cd5	e8 00 00 00 00	 call	 ?PopAllowKeyboardFocus@ImGui@@YAXXZ ; ImGui::PopAllowKeyboardFocus

; 3009 : 
; 3010 :             if (has_focus)

  00cda	83 bd f4 fe ff
	ff 00		 cmp	 DWORD PTR _has_focus$20[ebp], 0
  00ce1	74 16		 je	 SHORT $LN71@ShowDemoWi

; 3011 :                 ImGui::Text("Item with focus: %d", has_focus);

  00ce3	8b 85 f4 fe ff
	ff		 mov	 eax, DWORD PTR _has_focus$20[ebp]
  00ce9	50		 push	 eax
  00cea	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PCNBLNDG@Item?5with?5focus?3?5?$CFd@
  00cef	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00cf4	83 c4 08	 add	 esp, 8
  00cf7	eb 0d		 jmp	 SHORT $LN72@ShowDemoWi
$LN71@ShowDemoWi:

; 3012 :             else
; 3013 :                 ImGui::Text("Item with focus: <none>");

  00cf9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@EPMJCFDB@Item?5with?5focus?3?5?$DMnone?$DO@
  00cfe	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00d03	83 c4 04	 add	 esp, 4
$LN72@ShowDemoWi:

; 3014 : 
; 3015 :             // Use >= 0 parameter to SetKeyboardFocusHere() to focus an upcoming item
; 3016 :             static float f3[3] = { 0.0f, 0.0f, 0.0f };
; 3017 :             int focus_ahead = -1;

  00d06	c7 85 e8 fe ff
	ff ff ff ff ff	 mov	 DWORD PTR _focus_ahead$19[ebp], -1

; 3018 :             if (ImGui::Button("Focus on X")) { focus_ahead = 0; } ImGui::SameLine();

  00d10	51		 push	 ecx
  00d11	0f 57 c0	 xorps	 xmm0, xmm0
  00d14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d19	51		 push	 ecx
  00d1a	0f 57 c0	 xorps	 xmm0, xmm0
  00d1d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d22	8d 8d 6c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00d28	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00d2d	50		 push	 eax
  00d2e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@FLKPNOEH@Focus?5on?5X@
  00d33	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00d38	83 c4 08	 add	 esp, 8
  00d3b	0f b6 c0	 movzx	 eax, al
  00d3e	85 c0		 test	 eax, eax
  00d40	74 0a		 je	 SHORT $LN73@ShowDemoWi
  00d42	c7 85 e8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _focus_ahead$19[ebp], 0
$LN73@ShowDemoWi:
  00d4c	51		 push	 ecx
  00d4d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00d55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5a	51		 push	 ecx
  00d5b	0f 57 c0	 xorps	 xmm0, xmm0
  00d5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d63	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00d68	83 c4 08	 add	 esp, 8

; 3019 :             if (ImGui::Button("Focus on Y")) { focus_ahead = 1; } ImGui::SameLine();

  00d6b	51		 push	 ecx
  00d6c	0f 57 c0	 xorps	 xmm0, xmm0
  00d6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d74	51		 push	 ecx
  00d75	0f 57 c0	 xorps	 xmm0, xmm0
  00d78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7d	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00d83	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00d88	50		 push	 eax
  00d89	68 00 00 00 00	 push	 OFFSET ??_C@_0L@ECLEOPAG@Focus?5on?5Y@
  00d8e	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00d93	83 c4 08	 add	 esp, 8
  00d96	0f b6 c0	 movzx	 eax, al
  00d99	85 c0		 test	 eax, eax
  00d9b	74 0a		 je	 SHORT $LN74@ShowDemoWi
  00d9d	c7 85 e8 fe ff
	ff 01 00 00 00	 mov	 DWORD PTR _focus_ahead$19[ebp], 1
$LN74@ShowDemoWi:
  00da7	51		 push	 ecx
  00da8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00db0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db5	51		 push	 ecx
  00db6	0f 57 c0	 xorps	 xmm0, xmm0
  00db9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dbe	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00dc3	83 c4 08	 add	 esp, 8

; 3020 :             if (ImGui::Button("Focus on Z")) { focus_ahead = 2; }

  00dc6	51		 push	 ecx
  00dc7	0f 57 c0	 xorps	 xmm0, xmm0
  00dca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dcf	51		 push	 ecx
  00dd0	0f 57 c0	 xorps	 xmm0, xmm0
  00dd3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd8	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00dde	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00de3	50		 push	 eax
  00de4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GJJJLMMF@Focus?5on?5Z@
  00de9	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00dee	83 c4 08	 add	 esp, 8
  00df1	0f b6 c0	 movzx	 eax, al
  00df4	85 c0		 test	 eax, eax
  00df6	74 0a		 je	 SHORT $LN75@ShowDemoWi
  00df8	c7 85 e8 fe ff
	ff 02 00 00 00	 mov	 DWORD PTR _focus_ahead$19[ebp], 2
$LN75@ShowDemoWi:

; 3021 :             if (focus_ahead != -1) ImGui::SetKeyboardFocusHere(focus_ahead);

  00e02	83 bd e8 fe ff
	ff ff		 cmp	 DWORD PTR _focus_ahead$19[ebp], -1
  00e09	74 0f		 je	 SHORT $LN76@ShowDemoWi
  00e0b	8b 85 e8 fe ff
	ff		 mov	 eax, DWORD PTR _focus_ahead$19[ebp]
  00e11	50		 push	 eax
  00e12	e8 00 00 00 00	 call	 ?SetKeyboardFocusHere@ImGui@@YAXH@Z ; ImGui::SetKeyboardFocusHere
  00e17	83 c4 04	 add	 esp, 4
$LN76@ShowDemoWi:

; 3022 :             ImGui::SliderFloat3("Float3", &f3[0], 0.0f, 1.0f);

  00e1a	51		 push	 ecx
  00e1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e28	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00e2d	51		 push	 ecx
  00e2e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3b	51		 push	 ecx
  00e3c	0f 57 c0	 xorps	 xmm0, xmm0
  00e3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e44	b8 04 00 00 00	 mov	 eax, 4
  00e49	6b c8 00	 imul	 ecx, eax, 0
  00e4c	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?f3@?EF@??ShowDemoWindowMisc@@YAXXZ@4PAMA
  00e52	51		 push	 ecx
  00e53	68 00 00 00 00	 push	 OFFSET ??_C@_06FBFHKKF@Float3@
  00e58	e8 00 00 00 00	 call	 ?SliderFloat3@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat3
  00e5d	83 c4 18	 add	 esp, 24			; 00000018H

; 3023 : 
; 3024 :             ImGui::TextWrapped("NB: Cursor & selection are preserved when refocusing last used item in code.");

  00e60	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@KGJCPIPJ@NB?3?5Cursor?5?$CG?5selection?5are?5pres@
  00e65	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00e6a	83 c4 04	 add	 esp, 4

; 3025 :             ImGui::TreePop();

  00e6d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN64@ShowDemoWi:

; 3026 :         }
; 3027 : 
; 3028 :         if (ImGui::TreeNode("Dragging"))

  00e72	68 00 00 00 00	 push	 OFFSET ??_C@_08EJAEFPJK@Dragging@
  00e77	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00e7c	83 c4 04	 add	 esp, 4
  00e7f	0f b6 c0	 movzx	 eax, al
  00e82	85 c0		 test	 eax, eax
  00e84	0f 84 f4 01 00
	00		 je	 $LN77@ShowDemoWi

; 3029 :         {
; 3030 :             ImGui::TextWrapped("You can use ImGui::GetMouseDragDelta(0) to query for the dragged amount on any widget.");

  00e8a	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@PFEFFOMN@You?5can?5use?5ImGui?3?3GetMouseDrag@
  00e8f	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00e94	83 c4 04	 add	 esp, 4

; 3031 :             for (int button = 0; button < 3; button++)

  00e97	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _button$18[ebp], 0
  00ea1	eb 0f		 jmp	 SHORT $LN41@ShowDemoWi
$LN39@ShowDemoWi:
  00ea3	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _button$18[ebp]
  00ea9	83 c0 01	 add	 eax, 1
  00eac	89 85 dc fe ff
	ff		 mov	 DWORD PTR _button$18[ebp], eax
$LN41@ShowDemoWi:
  00eb2	83 bd dc fe ff
	ff 03		 cmp	 DWORD PTR _button$18[ebp], 3
  00eb9	7d 77		 jge	 SHORT $LN40@ShowDemoWi

; 3032 :                 ImGui::Text("IsMouseDragging(%d):\n  w/ default threshold: %d,\n  w/ zero threshold: %d\n  w/ large threshold: %d",

  00ebb	51		 push	 ecx
  00ebc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  00ec4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ec9	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _button$18[ebp]
  00ecf	50		 push	 eax
  00ed0	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  00ed5	83 c4 08	 add	 esp, 8
  00ed8	0f b6 c8	 movzx	 ecx, al
  00edb	51		 push	 ecx
  00edc	51		 push	 ecx
  00edd	0f 57 c0	 xorps	 xmm0, xmm0
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	8b 95 dc fe ff
	ff		 mov	 edx, DWORD PTR _button$18[ebp]
  00eeb	52		 push	 edx
  00eec	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  00ef1	83 c4 08	 add	 esp, 8
  00ef4	0f b6 c0	 movzx	 eax, al
  00ef7	50		 push	 eax
  00ef8	51		 push	 ecx
  00ef9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f06	8b 8d dc fe ff
	ff		 mov	 ecx, DWORD PTR _button$18[ebp]
  00f0c	51		 push	 ecx
  00f0d	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  00f12	83 c4 08	 add	 esp, 8
  00f15	0f b6 d0	 movzx	 edx, al
  00f18	52		 push	 edx
  00f19	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _button$18[ebp]
  00f1f	50		 push	 eax
  00f20	68 00 00 00 00	 push	 OFFSET ??_C@_0GC@PPDGANOJ@IsMouseDragging?$CI?$CFd?$CJ?3?6?5?5w?1?5defau@
  00f25	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00f2a	83 c4 14	 add	 esp, 20			; 00000014H
  00f2d	e9 71 ff ff ff	 jmp	 $LN39@ShowDemoWi
$LN40@ShowDemoWi:

; 3033 :                     button, ImGui::IsMouseDragging(button), ImGui::IsMouseDragging(button, 0.0f), ImGui::IsMouseDragging(button, 20.0f));
; 3034 : 
; 3035 :             ImGui::Button("Drag Me");

  00f32	51		 push	 ecx
  00f33	0f 57 c0	 xorps	 xmm0, xmm0
  00f36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f3b	51		 push	 ecx
  00f3c	0f 57 c0	 xorps	 xmm0, xmm0
  00f3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f44	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00f4a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00f4f	50		 push	 eax
  00f50	68 00 00 00 00	 push	 OFFSET ??_C@_07GELNHEGO@Drag?5Me@
  00f55	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00f5a	83 c4 08	 add	 esp, 8

; 3036 :             if (ImGui::IsItemActive())

  00f5d	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  00f62	0f b6 c0	 movzx	 eax, al
  00f65	85 c0		 test	 eax, eax
  00f67	74 4f		 je	 SHORT $LN78@ShowDemoWi

; 3037 :                 ImGui::GetForegroundDrawList()->AddLine(io.MouseClickedPos[0], io.MousePos, ImGui::GetColorU32(ImGuiCol_Button), 4.0f); // Draw a line between the button and the mouse cursor

  00f69	51		 push	 ecx
  00f6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  00f72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f77	51		 push	 ecx
  00f78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00f80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f85	6a 15		 push	 21			; 00000015H
  00f87	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIHM@Z ; ImGui::GetColorU32
  00f8c	83 c4 08	 add	 esp, 8
  00f8f	50		 push	 eax
  00f90	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00f93	05 e0 00 00 00	 add	 eax, 224		; 000000e0H
  00f98	50		 push	 eax
  00f99	b9 08 00 00 00	 mov	 ecx, 8
  00f9e	6b d1 00	 imul	 edx, ecx, 0
  00fa1	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00fa4	8d 8c 10 80 03
	00 00		 lea	 ecx, DWORD PTR [eax+edx+896]
  00fab	51		 push	 ecx
  00fac	e8 00 00 00 00	 call	 ?GetForegroundDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
  00fb1	8b c8		 mov	 ecx, eax
  00fb3	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z ; ImDrawList::AddLine
$LN78@ShowDemoWi:

; 3038 : 
; 3039 :             // Drag operations gets "unlocked" when the mouse has moved past a certain threshold (the default threshold is stored in io.MouseDragThreshold)
; 3040 :             // You can request a lower or higher threshold using the second parameter of IsMouseDragging() and GetMouseDragDelta()
; 3041 :             ImVec2 value_raw = ImGui::GetMouseDragDelta(0, 0.0f);

  00fb8	51		 push	 ecx
  00fb9	0f 57 c0	 xorps	 xmm0, xmm0
  00fbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fc1	6a 00		 push	 0
  00fc3	8d 85 cc fe ff
	ff		 lea	 eax, DWORD PTR _value_raw$17[ebp]
  00fc9	50		 push	 eax
  00fca	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta
  00fcf	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3042 :             ImVec2 value_with_lock_threshold = ImGui::GetMouseDragDelta(0);

  00fd2	51		 push	 ecx
  00fd3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00fdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe0	6a 00		 push	 0
  00fe2	8d 85 bc fe ff
	ff		 lea	 eax, DWORD PTR _value_with_lock_threshold$16[ebp]
  00fe8	50		 push	 eax
  00fe9	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta
  00fee	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3043 :             ImVec2 mouse_delta = io.MouseDelta;

  00ff1	8b 45 b4	 mov	 eax, DWORD PTR _io$36[ebp]
  00ff4	8b 88 70 03 00
	00		 mov	 ecx, DWORD PTR [eax+880]
  00ffa	8b 90 74 03 00
	00		 mov	 edx, DWORD PTR [eax+884]
  01000	89 8d ac fe ff
	ff		 mov	 DWORD PTR _mouse_delta$15[ebp], ecx
  01006	89 95 b0 fe ff
	ff		 mov	 DWORD PTR _mouse_delta$15[ebp+4], edx

; 3044 :             ImGui::Text("GetMouseDragDelta(0):\n  w/ default threshold: (%.1f, %.1f),\n  w/ zero threshold: (%.1f, %.1f)\nMouseDelta: (%.1f, %.1f)", value_with_lock_threshold.x, value_with_lock_threshold.y, value_raw.x, value_raw.y, mouse_delta.x, mouse_delta.y);

  0100c	f3 0f 5a 85 b0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _mouse_delta$15[ebp+4]
  01014	83 ec 08	 sub	 esp, 8
  01017	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0101c	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _mouse_delta$15[ebp]
  01024	83 ec 08	 sub	 esp, 8
  01027	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0102c	f3 0f 5a 85 d0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _value_raw$17[ebp+4]
  01034	83 ec 08	 sub	 esp, 8
  01037	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0103c	f3 0f 5a 85 cc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _value_raw$17[ebp]
  01044	83 ec 08	 sub	 esp, 8
  01047	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0104c	f3 0f 5a 85 c0
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _value_with_lock_threshold$16[ebp+4]
  01054	83 ec 08	 sub	 esp, 8
  01057	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0105c	f3 0f 5a 85 bc
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _value_with_lock_threshold$16[ebp]
  01064	83 ec 08	 sub	 esp, 8
  01067	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0106c	68 00 00 00 00	 push	 OFFSET ??_C@_0HH@LIOOGCHA@GetMouseDragDelta?$CI0?$CJ?3?6?5?5w?1?5defa@
  01071	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01076	83 c4 34	 add	 esp, 52			; 00000034H

; 3045 :             ImGui::TreePop();

  01079	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN77@ShowDemoWi:

; 3046 :         }
; 3047 : 
; 3048 :         if (ImGui::TreeNode("Mouse cursors"))

  0107e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LHBMJOCH@Mouse?5cursors@
  01083	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01088	83 c4 04	 add	 esp, 4
  0108b	0f b6 c0	 movzx	 eax, al
  0108e	85 c0		 test	 eax, eax
  01090	0f 84 70 01 00
	00		 je	 $LN79@ShowDemoWi

; 3049 :         {
; 3050 :             const char* mouse_cursors_names[] = { "Arrow", "TextInput", "ResizeAll", "ResizeNS", "ResizeEW", "ResizeNESW", "ResizeNWSE", "Hand", "NotAllowed" };

  01096	c7 85 80 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp], OFFSET ??_C@_05OLOIDPAB@Arrow@
  010a0	c7 85 84 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+4], OFFSET ??_C@_09KBOPCPBA@TextInput@
  010aa	c7 85 88 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+8], OFFSET ??_C@_09NLNHGFHP@ResizeAll@
  010b4	c7 85 8c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+12], OFFSET ??_C@_08HLCKOJFI@ResizeNS@
  010be	c7 85 90 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+16], OFFSET ??_C@_08BDBDMDLN@ResizeEW@
  010c8	c7 85 94 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+20], OFFSET ??_C@_0L@EFMGKFJD@ResizeNESW@
  010d2	c7 85 98 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+24], OFFSET ??_C@_0L@MHCCEKFE@ResizeNWSE@
  010dc	c7 85 9c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+28], OFFSET ??_C@_04JBBMMDIF@Hand@
  010e6	c7 85 a0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _mouse_cursors_names$14[ebp+32], OFFSET ??_C@_0L@OJPFEFMM@NotAllowed@

; 3051 :             IM_ASSERT(IM_ARRAYSIZE(mouse_cursors_names) == ImGuiMouseCursor_COUNT);
; 3052 : 
; 3053 :             ImGui::Text("Current mouse cursor = %d: %s", ImGui::GetMouseCursor(), mouse_cursors_names[ImGui::GetMouseCursor()]);

  010f0	e8 00 00 00 00	 call	 ?GetMouseCursor@ImGui@@YAHXZ ; ImGui::GetMouseCursor
  010f5	8b 84 85 80 fe
	ff ff		 mov	 eax, DWORD PTR _mouse_cursors_names$14[ebp+eax*4]
  010fc	50		 push	 eax
  010fd	e8 00 00 00 00	 call	 ?GetMouseCursor@ImGui@@YAHXZ ; ImGui::GetMouseCursor
  01102	50		 push	 eax
  01103	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@CHGMKDBB@Current?5mouse?5cursor?5?$DN?5?$CFd?3?5?$CFs@
  01108	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0110d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3054 :             ImGui::Text("Hover to see mouse cursors:");

  01110	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@MCMILHH@Hover?5to?5see?5mouse?5cursors?3@
  01115	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0111a	83 c4 04	 add	 esp, 4

; 3055 :             ImGui::SameLine(); HelpMarker("Your application can render a different mouse cursor based on what ImGui::GetMouseCursor() returns. If software cursor rendering (io.MouseDrawCursor) is set ImGui will draw the right cursor for you, otherwise your backend needs to handle it.");

  0111d	51		 push	 ecx
  0111e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01126	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0112b	51		 push	 ecx
  0112c	0f 57 c0	 xorps	 xmm0, xmm0
  0112f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01134	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01139	83 c4 08	 add	 esp, 8
  0113c	68 00 00 00 00	 push	 OFFSET ??_C@_0PC@CDIOEKMA@Your?5application?5can?5render?5a?5d@
  01141	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01146	83 c4 04	 add	 esp, 4

; 3056 :             for (int i = 0; i < ImGuiMouseCursor_COUNT; i++)

  01149	c7 85 74 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$13[ebp], 0
  01153	eb 0f		 jmp	 SHORT $LN44@ShowDemoWi
$LN42@ShowDemoWi:
  01155	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  0115b	83 c0 01	 add	 eax, 1
  0115e	89 85 74 fe ff
	ff		 mov	 DWORD PTR _i$13[ebp], eax
$LN44@ShowDemoWi:
  01164	83 bd 74 fe ff
	ff 09		 cmp	 DWORD PTR _i$13[ebp], 9
  0116b	0f 8d 90 00 00
	00		 jge	 $LN43@ShowDemoWi

; 3057 :             {
; 3058 :                 char label[32];
; 3059 :                 sprintf(label, "Mouse cursor %d: %s", i, mouse_cursors_names[i]);

  01171	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  01177	8b 8c 85 80 fe
	ff ff		 mov	 ecx, DWORD PTR _mouse_cursors_names$14[ebp+eax*4]
  0117e	51		 push	 ecx
  0117f	8b 95 74 fe ff
	ff		 mov	 edx, DWORD PTR _i$13[ebp]
  01185	52		 push	 edx
  01186	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@KDPKCDI@Mouse?5cursor?5?$CFd?3?5?$CFs@
  0118b	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _label$12[ebp]
  01191	50		 push	 eax
  01192	e8 00 00 00 00	 call	 _sprintf
  01197	83 c4 10	 add	 esp, 16			; 00000010H

; 3060 :                 ImGui::Bullet(); ImGui::Selectable(label, false);

  0119a	e8 00 00 00 00	 call	 ?Bullet@ImGui@@YAXXZ	; ImGui::Bullet
  0119f	51		 push	 ecx
  011a0	0f 57 c0	 xorps	 xmm0, xmm0
  011a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011a8	51		 push	 ecx
  011a9	0f 57 c0	 xorps	 xmm0, xmm0
  011ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011b1	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  011b7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  011bc	50		 push	 eax
  011bd	6a 00		 push	 0
  011bf	6a 00		 push	 0
  011c1	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _label$12[ebp]
  011c7	50		 push	 eax
  011c8	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  011cd	83 c4 10	 add	 esp, 16			; 00000010H

; 3061 :                 if (ImGui::IsItemHovered() || ImGui::IsItemFocused())

  011d0	6a 00		 push	 0
  011d2	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  011d7	83 c4 04	 add	 esp, 4
  011da	0f b6 c0	 movzx	 eax, al
  011dd	85 c0		 test	 eax, eax
  011df	75 0c		 jne	 SHORT $LN81@ShowDemoWi
  011e1	e8 00 00 00 00	 call	 ?IsItemFocused@ImGui@@YA_NXZ ; ImGui::IsItemFocused
  011e6	0f b6 c0	 movzx	 eax, al
  011e9	85 c0		 test	 eax, eax
  011eb	74 0f		 je	 SHORT $LN80@ShowDemoWi
$LN81@ShowDemoWi:

; 3062 :                     ImGui::SetMouseCursor(i);

  011ed	8b 85 74 fe ff
	ff		 mov	 eax, DWORD PTR _i$13[ebp]
  011f3	50		 push	 eax
  011f4	e8 00 00 00 00	 call	 ?SetMouseCursor@ImGui@@YAXH@Z ; ImGui::SetMouseCursor
  011f9	83 c4 04	 add	 esp, 4
$LN80@ShowDemoWi:

; 3063 :             }

  011fc	e9 54 ff ff ff	 jmp	 $LN42@ShowDemoWi
$LN43@ShowDemoWi:

; 3064 :             ImGui::TreePop();

  01201	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN79@ShowDemoWi:

; 3065 :         }
; 3066 :     }
; 3067 : }

  01206	52		 push	 edx
  01207	8b cd		 mov	 ecx, ebp
  01209	50		 push	 eax
  0120a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN102@ShowDemoWi
  01210	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01215	58		 pop	 eax
  01216	5a		 pop	 edx
  01217	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0121a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01221	59		 pop	 ecx
  01222	5f		 pop	 edi
  01223	5e		 pop	 esi
  01224	5b		 pop	 ebx
  01225	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01228	33 cd		 xor	 ecx, ebp
  0122a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0122f	81 c4 e8 03 00
	00		 add	 esp, 1000		; 000003e8H
  01235	3b ec		 cmp	 ebp, esp
  01237	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0123c	8b e5		 mov	 esp, ebp
  0123e	5d		 pop	 ebp
  0123f	c3		 ret	 0
$LN102@ShowDemoWi:
  01240	06 00 00 00	 DD	 6
  01244	00 00 00 00	 DD	 $LN101@ShowDemoWi
$LN101@ShowDemoWi:
  01248	cc ff ff ff	 DD	 -52			; ffffffccH
  0124c	20 00 00 00	 DD	 32			; 00000020H
  01250	00 00 00 00	 DD	 $LN94@ShowDemoWi
  01254	cc fe ff ff	 DD	 -308			; fffffeccH
  01258	08 00 00 00	 DD	 8
  0125c	00 00 00 00	 DD	 $LN95@ShowDemoWi
  01260	bc fe ff ff	 DD	 -324			; fffffebcH
  01264	08 00 00 00	 DD	 8
  01268	00 00 00 00	 DD	 $LN96@ShowDemoWi
  0126c	ac fe ff ff	 DD	 -340			; fffffeacH
  01270	08 00 00 00	 DD	 8
  01274	00 00 00 00	 DD	 $LN97@ShowDemoWi
  01278	80 fe ff ff	 DD	 -384			; fffffe80H
  0127c	24 00 00 00	 DD	 36			; 00000024H
  01280	00 00 00 00	 DD	 $LN98@ShowDemoWi
  01284	4c fe ff ff	 DD	 -436			; fffffe4cH
  01288	20 00 00 00	 DD	 32			; 00000020H
  0128c	00 00 00 00	 DD	 $LN99@ShowDemoWi
$LN99@ShowDemoWi:
  01290	6c		 DB	 108			; 0000006cH
  01291	61		 DB	 97			; 00000061H
  01292	62		 DB	 98			; 00000062H
  01293	65		 DB	 101			; 00000065H
  01294	6c		 DB	 108			; 0000006cH
  01295	00		 DB	 0
$LN98@ShowDemoWi:
  01296	6d		 DB	 109			; 0000006dH
  01297	6f		 DB	 111			; 0000006fH
  01298	75		 DB	 117			; 00000075H
  01299	73		 DB	 115			; 00000073H
  0129a	65		 DB	 101			; 00000065H
  0129b	5f		 DB	 95			; 0000005fH
  0129c	63		 DB	 99			; 00000063H
  0129d	75		 DB	 117			; 00000075H
  0129e	72		 DB	 114			; 00000072H
  0129f	73		 DB	 115			; 00000073H
  012a0	6f		 DB	 111			; 0000006fH
  012a1	72		 DB	 114			; 00000072H
  012a2	73		 DB	 115			; 00000073H
  012a3	5f		 DB	 95			; 0000005fH
  012a4	6e		 DB	 110			; 0000006eH
  012a5	61		 DB	 97			; 00000061H
  012a6	6d		 DB	 109			; 0000006dH
  012a7	65		 DB	 101			; 00000065H
  012a8	73		 DB	 115			; 00000073H
  012a9	00		 DB	 0
$LN97@ShowDemoWi:
  012aa	6d		 DB	 109			; 0000006dH
  012ab	6f		 DB	 111			; 0000006fH
  012ac	75		 DB	 117			; 00000075H
  012ad	73		 DB	 115			; 00000073H
  012ae	65		 DB	 101			; 00000065H
  012af	5f		 DB	 95			; 0000005fH
  012b0	64		 DB	 100			; 00000064H
  012b1	65		 DB	 101			; 00000065H
  012b2	6c		 DB	 108			; 0000006cH
  012b3	74		 DB	 116			; 00000074H
  012b4	61		 DB	 97			; 00000061H
  012b5	00		 DB	 0
$LN96@ShowDemoWi:
  012b6	76		 DB	 118			; 00000076H
  012b7	61		 DB	 97			; 00000061H
  012b8	6c		 DB	 108			; 0000006cH
  012b9	75		 DB	 117			; 00000075H
  012ba	65		 DB	 101			; 00000065H
  012bb	5f		 DB	 95			; 0000005fH
  012bc	77		 DB	 119			; 00000077H
  012bd	69		 DB	 105			; 00000069H
  012be	74		 DB	 116			; 00000074H
  012bf	68		 DB	 104			; 00000068H
  012c0	5f		 DB	 95			; 0000005fH
  012c1	6c		 DB	 108			; 0000006cH
  012c2	6f		 DB	 111			; 0000006fH
  012c3	63		 DB	 99			; 00000063H
  012c4	6b		 DB	 107			; 0000006bH
  012c5	5f		 DB	 95			; 0000005fH
  012c6	74		 DB	 116			; 00000074H
  012c7	68		 DB	 104			; 00000068H
  012c8	72		 DB	 114			; 00000072H
  012c9	65		 DB	 101			; 00000065H
  012ca	73		 DB	 115			; 00000073H
  012cb	68		 DB	 104			; 00000068H
  012cc	6f		 DB	 111			; 0000006fH
  012cd	6c		 DB	 108			; 0000006cH
  012ce	64		 DB	 100			; 00000064H
  012cf	00		 DB	 0
$LN95@ShowDemoWi:
  012d0	76		 DB	 118			; 00000076H
  012d1	61		 DB	 97			; 00000061H
  012d2	6c		 DB	 108			; 0000006cH
  012d3	75		 DB	 117			; 00000075H
  012d4	65		 DB	 101			; 00000065H
  012d5	5f		 DB	 95			; 0000005fH
  012d6	72		 DB	 114			; 00000072H
  012d7	61		 DB	 97			; 00000061H
  012d8	77		 DB	 119			; 00000077H
  012d9	00		 DB	 0
$LN94@ShowDemoWi:
  012da	6c		 DB	 108			; 0000006cH
  012db	69		 DB	 105			; 00000069H
  012dc	6e		 DB	 110			; 0000006eH
  012dd	65		 DB	 101			; 00000065H
  012de	73		 DB	 115			; 00000073H
  012df	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowDemoWindowMisc@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?4??ShowDemoWindowMisc@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?ShowDemoWindowMisc@@YAXXZ:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 14 fc ff
	ff		 mov	 ecx, DWORD PTR [edx-1004]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0002a	33 c8		 xor	 ecx, eax
  0002c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00031	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowDemoWindowMisc@@YAXXZ
  00036	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowDemoWindowMisc@@YAXXZ ENDP				; ShowDemoWindowMisc
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowColumns@@YAXXZ
_TEXT	SEGMENT
tv616 = -652						; size = 4
tv541 = -652						; size = 4
tv159 = -649						; size = 1
$T2 = -644						; size = 8
$T3 = -628						; size = 8
$T4 = -612						; size = 8
$T5 = -596						; size = 8
$T6 = -580						; size = 8
$T7 = -564						; size = 8
$T8 = -548						; size = 8
$T9 = -532						; size = 8
$T10 = -516						; size = 8
_open2$11 = -305					; size = 1
_y$12 = -296						; size = 4
_open1$13 = -281					; size = 1
_x$14 = -272						; size = 4
_j$15 = -260						; size = 4
_i$16 = -248						; size = 4
_clipper$17 = -236					; size = 24
_ITEMS_COUNT$18 = -204					; size = 4
_i$19 = -192						; size = 4
_lines_count$20 = -180					; size = 4
_hovered$21 = -165					; size = 1
_label$22 = -156					; size = 32
_i$23 = -116						; size = 4
_paths$24 = -104					; size = 12
_names$25 = -84						; size = 12
_label$26 = -64						; size = 32
_n$27 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ShowDemoWindowColumns@@YAXXZ PROC			; ShowDemoWindowColumns, COMDAT

; 2682 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowDemoWindowColumns@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 80 02 00
	00		 sub	 esp, 640		; 00000280H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 74 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-652]
  00020	b9 a0 00 00 00	 mov	 ecx, 160		; 000000a0H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2683 :     if (!ImGui::CollapsingHeader("Columns"))

  0004a	6a 00		 push	 0
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_07IBCCJKML@Columns@
  00051	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00056	83 c4 08	 add	 esp, 8
  00059	0f b6 c0	 movzx	 eax, al
  0005c	85 c0		 test	 eax, eax
  0005e	75 05		 jne	 SHORT $LN25@ShowDemoWi

; 2684 :         return;

  00060	e9 5d 0a 00 00	 jmp	 $LN1@ShowDemoWi
$LN25@ShowDemoWi:

; 2685 : 
; 2686 :     ImGui::PushID("Columns");

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_07IBCCJKML@Columns@
  0006a	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  0006f	83 c4 04	 add	 esp, 4

; 2687 : 
; 2688 :     static bool disable_indent = false;
; 2689 :     ImGui::Checkbox("Disable tree indentation", &disable_indent);

  00072	68 00 00 00 00	 push	 OFFSET ?disable_indent@?1??ShowDemoWindowColumns@@YAXXZ@4_NA
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@JLFJACII@Disable?5tree?5indentation@
  0007c	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00081	83 c4 08	 add	 esp, 8

; 2690 :     ImGui::SameLine();

  00084	51		 push	 ecx
  00085	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0008d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00092	51		 push	 ecx
  00093	0f 57 c0	 xorps	 xmm0, xmm0
  00096	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  000a0	83 c4 08	 add	 esp, 8

; 2691 :     HelpMarker("Disable the indenting of tree nodes so demo columns can use the full window width.");

  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_0FD@EHJEKNDN@Disable?5the?5indenting?5of?5tree?5n@
  000a8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  000ad	83 c4 04	 add	 esp, 4

; 2692 :     if (disable_indent)

  000b0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_indent@?1??ShowDemoWindowColumns@@YAXXZ@4_NA
  000b7	85 c0		 test	 eax, eax
  000b9	74 13		 je	 SHORT $LN26@ShowDemoWi

; 2693 :         ImGui::PushStyleVar(ImGuiStyleVar_IndentSpacing, 0.0f);

  000bb	51		 push	 ecx
  000bc	0f 57 c0	 xorps	 xmm0, xmm0
  000bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c4	6a 0f		 push	 15			; 0000000fH
  000c6	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar
  000cb	83 c4 08	 add	 esp, 8
$LN26@ShowDemoWi:

; 2694 : 
; 2695 :     // Basic columns
; 2696 :     if (ImGui::TreeNode("Basic"))

  000ce	68 00 00 00 00	 push	 OFFSET ??_C@_05NIKDGMHP@Basic@
  000d3	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  000d8	83 c4 04	 add	 esp, 4
  000db	0f b6 c0	 movzx	 eax, al
  000de	85 c0		 test	 eax, eax
  000e0	0f 84 3c 02 00
	00		 je	 $LN27@ShowDemoWi

; 2697 :     {
; 2698 :         ImGui::Text("Without border:");

  000e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KGDHMKCI@Without?5border?3@
  000eb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  000f0	83 c4 04	 add	 esp, 4

; 2699 :         ImGui::Columns(3, "mycolumns3", false);  // 3-ways, no border

  000f3	6a 00		 push	 0
  000f5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GGDPAOBO@mycolumns3@
  000fa	6a 03		 push	 3
  000fc	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00101	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2700 :         ImGui::Separator();

  00104	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2701 :         for (int n = 0; n < 14; n++)

  00109	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _n$27[ebp], 0
  00110	eb 09		 jmp	 SHORT $LN4@ShowDemoWi
$LN2@ShowDemoWi:
  00112	8b 45 e8	 mov	 eax, DWORD PTR _n$27[ebp]
  00115	83 c0 01	 add	 eax, 1
  00118	89 45 e8	 mov	 DWORD PTR _n$27[ebp], eax
$LN4@ShowDemoWi:
  0011b	83 7d e8 0e	 cmp	 DWORD PTR _n$27[ebp], 14 ; 0000000eH
  0011f	7d 4a		 jge	 SHORT $LN3@ShowDemoWi

; 2702 :         {
; 2703 :             char label[32];
; 2704 :             sprintf(label, "Item %d", n);

  00121	8b 45 e8	 mov	 eax, DWORD PTR _n$27[ebp]
  00124	50		 push	 eax
  00125	68 00 00 00 00	 push	 OFFSET ??_C@_07BCJGKFOL@Item?5?$CFd@
  0012a	8d 4d c0	 lea	 ecx, DWORD PTR _label$26[ebp]
  0012d	51		 push	 ecx
  0012e	e8 00 00 00 00	 call	 _sprintf
  00133	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2705 :             if (ImGui::Selectable(label)) {}

  00136	51		 push	 ecx
  00137	0f 57 c0	 xorps	 xmm0, xmm0
  0013a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013f	51		 push	 ecx
  00140	0f 57 c0	 xorps	 xmm0, xmm0
  00143	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00148	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  0014e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00153	50		 push	 eax
  00154	6a 00		 push	 0
  00156	6a 00		 push	 0
  00158	8d 45 c0	 lea	 eax, DWORD PTR _label$26[ebp]
  0015b	50		 push	 eax
  0015c	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  00161	83 c4 10	 add	 esp, 16			; 00000010H

; 2706 :             //if (ImGui::Button(label, ImVec2(-FLT_MIN,0.0f))) {}
; 2707 :             ImGui::NextColumn();

  00164	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2708 :         }

  00169	eb a7		 jmp	 SHORT $LN2@ShowDemoWi
$LN3@ShowDemoWi:

; 2709 :         ImGui::Columns(1);

  0016b	6a 01		 push	 1
  0016d	6a 00		 push	 0
  0016f	6a 01		 push	 1
  00171	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00176	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2710 :         ImGui::Separator();

  00179	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2711 : 
; 2712 :         ImGui::Text("With border:");

  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IEPPLKGA@With?5border?3@
  00183	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00188	83 c4 04	 add	 esp, 4

; 2713 :         ImGui::Columns(4, "mycolumns"); // 4-ways, with border

  0018b	6a 01		 push	 1
  0018d	68 00 00 00 00	 push	 OFFSET ??_C@_09IGOFLFMM@mycolumns@
  00192	6a 04		 push	 4
  00194	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00199	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2714 :         ImGui::Separator();

  0019c	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2715 :         ImGui::Text("ID"); ImGui::NextColumn();

  001a1	68 00 00 00 00	 push	 OFFSET ??_C@_02OLOABKKD@ID@
  001a6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001ab	83 c4 04	 add	 esp, 4
  001ae	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2716 :         ImGui::Text("Name"); ImGui::NextColumn();

  001b3	68 00 00 00 00	 push	 OFFSET ??_C@_04FABLJDN@Name@
  001b8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001bd	83 c4 04	 add	 esp, 4
  001c0	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2717 :         ImGui::Text("Path"); ImGui::NextColumn();

  001c5	68 00 00 00 00	 push	 OFFSET ??_C@_04HMIIHGGM@Path@
  001ca	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001cf	83 c4 04	 add	 esp, 4
  001d2	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2718 :         ImGui::Text("Hovered"); ImGui::NextColumn();

  001d7	68 00 00 00 00	 push	 OFFSET ??_C@_07BPEJBMFM@Hovered@
  001dc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001e1	83 c4 04	 add	 esp, 4
  001e4	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2719 :         ImGui::Separator();

  001e9	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2720 :         const char* names[3] = { "One", "Two", "Three" };

  001ee	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _names$25[ebp], OFFSET ??_C@_03EHAPBBEA@One@
  001f5	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _names$25[ebp+4], OFFSET ??_C@_03CJAPLBKL@Two@
  001fc	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _names$25[ebp+8], OFFSET ??_C@_05OHMANGAP@Three@

; 2721 :         const char* paths[3] = { "/path/one", "/path/two", "/path/three" };

  00203	c7 45 98 00 00
	00 00		 mov	 DWORD PTR _paths$24[ebp], OFFSET ??_C@_09MIFGPDGD@?1path?1one@
  0020a	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _paths$24[ebp+4], OFFSET ??_C@_09KGFGFDII@?1path?1two@
  00211	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _paths$24[ebp+8], OFFSET ??_C@_0M@BHGNKNGD@?1path?1three@

; 2722 :         static int selected = -1;
; 2723 :         for (int i = 0; i < 3; i++)

  00218	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _i$23[ebp], 0
  0021f	eb 09		 jmp	 SHORT $LN7@ShowDemoWi
$LN5@ShowDemoWi:
  00221	8b 45 8c	 mov	 eax, DWORD PTR _i$23[ebp]
  00224	83 c0 01	 add	 eax, 1
  00227	89 45 8c	 mov	 DWORD PTR _i$23[ebp], eax
$LN7@ShowDemoWi:
  0022a	83 7d 8c 03	 cmp	 DWORD PTR _i$23[ebp], 3
  0022e	0f 8d d6 00 00
	00		 jge	 $LN6@ShowDemoWi

; 2724 :         {
; 2725 :             char label[32];
; 2726 :             sprintf(label, "%04d", i);

  00234	8b 45 8c	 mov	 eax, DWORD PTR _i$23[ebp]
  00237	50		 push	 eax
  00238	68 00 00 00 00	 push	 OFFSET ??_C@_04OCCELDNI@?$CF04d@
  0023d	8d 8d 64 ff ff
	ff		 lea	 ecx, DWORD PTR _label$22[ebp]
  00243	51		 push	 ecx
  00244	e8 00 00 00 00	 call	 _sprintf
  00249	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2727 :             if (ImGui::Selectable(label, selected == i, ImGuiSelectableFlags_SpanAllColumns))

  0024c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?selected@?8??ShowDemoWindowColumns@@YAXXZ@4HA
  00251	3b 45 8c	 cmp	 eax, DWORD PTR _i$23[ebp]
  00254	75 09		 jne	 SHORT $LN47@ShowDemoWi
  00256	c6 85 77 fd ff
	ff 01		 mov	 BYTE PTR tv159[ebp], 1
  0025d	eb 07		 jmp	 SHORT $LN48@ShowDemoWi
$LN47@ShowDemoWi:
  0025f	c6 85 77 fd ff
	ff 00		 mov	 BYTE PTR tv159[ebp], 0
$LN48@ShowDemoWi:
  00266	51		 push	 ecx
  00267	0f 57 c0	 xorps	 xmm0, xmm0
  0026a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026f	51		 push	 ecx
  00270	0f 57 c0	 xorps	 xmm0, xmm0
  00273	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00278	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0027e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00283	50		 push	 eax
  00284	6a 02		 push	 2
  00286	0f b6 8d 77 fd
	ff ff		 movzx	 ecx, BYTE PTR tv159[ebp]
  0028d	51		 push	 ecx
  0028e	8d 95 64 ff ff
	ff		 lea	 edx, DWORD PTR _label$22[ebp]
  00294	52		 push	 edx
  00295	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  0029a	83 c4 10	 add	 esp, 16			; 00000010H
  0029d	0f b6 c0	 movzx	 eax, al
  002a0	85 c0		 test	 eax, eax
  002a2	74 08		 je	 SHORT $LN29@ShowDemoWi

; 2728 :                 selected = i;

  002a4	8b 45 8c	 mov	 eax, DWORD PTR _i$23[ebp]
  002a7	a3 00 00 00 00	 mov	 DWORD PTR ?selected@?8??ShowDemoWindowColumns@@YAXXZ@4HA, eax
$LN29@ShowDemoWi:

; 2729 :             bool hovered = ImGui::IsItemHovered();

  002ac	6a 00		 push	 0
  002ae	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  002b3	83 c4 04	 add	 esp, 4
  002b6	88 85 5b ff ff
	ff		 mov	 BYTE PTR _hovered$21[ebp], al

; 2730 :             ImGui::NextColumn();

  002bc	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2731 :             ImGui::Text(names[i]); ImGui::NextColumn();

  002c1	8b 45 8c	 mov	 eax, DWORD PTR _i$23[ebp]
  002c4	8b 4c 85 ac	 mov	 ecx, DWORD PTR _names$25[ebp+eax*4]
  002c8	51		 push	 ecx
  002c9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002ce	83 c4 04	 add	 esp, 4
  002d1	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2732 :             ImGui::Text(paths[i]); ImGui::NextColumn();

  002d6	8b 45 8c	 mov	 eax, DWORD PTR _i$23[ebp]
  002d9	8b 4c 85 98	 mov	 ecx, DWORD PTR _paths$24[ebp+eax*4]
  002dd	51		 push	 ecx
  002de	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002e3	83 c4 04	 add	 esp, 4
  002e6	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2733 :             ImGui::Text("%d", hovered); ImGui::NextColumn();

  002eb	0f b6 85 5b ff
	ff ff		 movzx	 eax, BYTE PTR _hovered$21[ebp]
  002f2	50		 push	 eax
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  002f8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002fd	83 c4 08	 add	 esp, 8
  00300	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2734 :         }

  00305	e9 17 ff ff ff	 jmp	 $LN5@ShowDemoWi
$LN6@ShowDemoWi:

; 2735 :         ImGui::Columns(1);

  0030a	6a 01		 push	 1
  0030c	6a 00		 push	 0
  0030e	6a 01		 push	 1
  00310	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00315	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2736 :         ImGui::Separator();

  00318	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2737 :         ImGui::TreePop();

  0031d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN27@ShowDemoWi:

; 2738 :     }
; 2739 : 
; 2740 :     if (ImGui::TreeNode("Borders"))

  00322	68 00 00 00 00	 push	 OFFSET ??_C@_07PJFMDFHH@Borders@
  00327	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0032c	83 c4 04	 add	 esp, 4
  0032f	0f b6 c0	 movzx	 eax, al
  00332	85 c0		 test	 eax, eax
  00334	0f 84 22 02 00
	00		 je	 $LN30@ShowDemoWi

; 2741 :     {
; 2742 :         // NB: Future columns API should allow automatic horizontal borders.
; 2743 :         static bool h_borders = true;
; 2744 :         static bool v_borders = true;
; 2745 :         static int columns_count = 4;
; 2746 :         const int lines_count = 3;

  0033a	c7 85 4c ff ff
	ff 03 00 00 00	 mov	 DWORD PTR _lines_count$20[ebp], 3

; 2747 :         ImGui::SetNextItemWidth(ImGui::GetFontSize() * 8);

  00344	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00349	d9 9d 74 fd ff
	ff		 fstp	 DWORD PTR tv541[ebp]
  0034f	f3 0f 10 85 74
	fd ff ff	 movss	 xmm0, DWORD PTR tv541[ebp]
  00357	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41000000
  0035f	51		 push	 ecx
  00360	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00365	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  0036a	83 c4 04	 add	 esp, 4

; 2748 :         ImGui::DragInt("##columns_count", &columns_count, 0.1f, 2, 10, "%d columns");

  0036d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NLMHJDCE@?$CFd?5columns@
  00372	6a 0a		 push	 10			; 0000000aH
  00374	6a 02		 push	 2
  00376	51		 push	 ecx
  00377	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  0037f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00384	68 00 00 00 00	 push	 OFFSET ?columns_count@?BF@??ShowDemoWindowColumns@@YAXXZ@4HA
  00389	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EIBKBIKG@?$CD?$CDcolumns_count@
  0038e	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPBDPAHMHH0@Z ; ImGui::DragInt
  00393	83 c4 18	 add	 esp, 24			; 00000018H

; 2749 :         if (columns_count < 2)

  00396	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?columns_count@?BF@??ShowDemoWindowColumns@@YAXXZ@4HA, 2
  0039d	7d 0a		 jge	 SHORT $LN31@ShowDemoWi

; 2750 :             columns_count = 2;

  0039f	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?columns_count@?BF@??ShowDemoWindowColumns@@YAXXZ@4HA, 2
$LN31@ShowDemoWi:

; 2751 :         ImGui::SameLine();

  003a9	51		 push	 ecx
  003aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b7	51		 push	 ecx
  003b8	0f 57 c0	 xorps	 xmm0, xmm0
  003bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  003c5	83 c4 08	 add	 esp, 8

; 2752 :         ImGui::Checkbox("horizontal", &h_borders);

  003c8	68 00 00 00 00	 push	 OFFSET ?h_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA
  003cd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LMMKHPOB@horizontal@
  003d2	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  003d7	83 c4 08	 add	 esp, 8

; 2753 :         ImGui::SameLine();

  003da	51		 push	 ecx
  003db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e8	51		 push	 ecx
  003e9	0f 57 c0	 xorps	 xmm0, xmm0
  003ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  003f6	83 c4 08	 add	 esp, 8

; 2754 :         ImGui::Checkbox("vertical", &v_borders);

  003f9	68 00 00 00 00	 push	 OFFSET ?v_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA
  003fe	68 00 00 00 00	 push	 OFFSET ??_C@_08NEOMLJGJ@vertical@
  00403	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00408	83 c4 08	 add	 esp, 8

; 2755 :         ImGui::Columns(columns_count, NULL, v_borders);

  0040b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?v_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA
  00412	50		 push	 eax
  00413	6a 00		 push	 0
  00415	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?columns_count@?BF@??ShowDemoWindowColumns@@YAXXZ@4HA
  0041b	51		 push	 ecx
  0041c	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00421	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2756 :         for (int i = 0; i < columns_count * lines_count; i++)

  00424	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$19[ebp], 0
  0042e	eb 0f		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  00430	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$19[ebp]
  00436	83 c0 01	 add	 eax, 1
  00439	89 85 40 ff ff
	ff		 mov	 DWORD PTR _i$19[ebp], eax
$LN10@ShowDemoWi:
  0043f	6b 05 00 00 00
	00 03		 imul	 eax, DWORD PTR ?columns_count@?BF@??ShowDemoWindowColumns@@YAXXZ@4HA, 3
  00446	39 85 40 ff ff
	ff		 cmp	 DWORD PTR _i$19[ebp], eax
  0044c	0f 8d e7 00 00
	00		 jge	 $LN9@ShowDemoWi

; 2757 :         {
; 2758 :             if (h_borders && ImGui::GetColumnIndex() == 0)

  00452	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?h_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA
  00459	85 c0		 test	 eax, eax
  0045b	74 0e		 je	 SHORT $LN32@ShowDemoWi
  0045d	e8 00 00 00 00	 call	 ?GetColumnIndex@ImGui@@YAHXZ ; ImGui::GetColumnIndex
  00462	85 c0		 test	 eax, eax
  00464	75 05		 jne	 SHORT $LN32@ShowDemoWi

; 2759 :                 ImGui::Separator();

  00466	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN32@ShowDemoWi:

; 2760 :             ImGui::Text("%c%c%c", 'a' + i, 'a' + i, 'a' + i);

  0046b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$19[ebp]
  00471	83 c0 61	 add	 eax, 97			; 00000061H
  00474	50		 push	 eax
  00475	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _i$19[ebp]
  0047b	83 c1 61	 add	 ecx, 97			; 00000061H
  0047e	51		 push	 ecx
  0047f	8b 95 40 ff ff
	ff		 mov	 edx, DWORD PTR _i$19[ebp]
  00485	83 c2 61	 add	 edx, 97			; 00000061H
  00488	52		 push	 edx
  00489	68 00 00 00 00	 push	 OFFSET ??_C@_06CBJCAPLI@?$CFc?$CFc?$CFc@
  0048e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00493	83 c4 10	 add	 esp, 16			; 00000010H

; 2761 :             ImGui::Text("Width %.2f", ImGui::GetColumnWidth());

  00496	6a ff		 push	 -1
  00498	e8 00 00 00 00	 call	 ?GetColumnWidth@ImGui@@YAMH@Z ; ImGui::GetColumnWidth
  0049d	83 c4 fc	 add	 esp, -4			; fffffffcH
  004a0	dd 1c 24	 fstp	 QWORD PTR [esp]
  004a3	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CDOLGENO@Width?5?$CF?42f@
  004a8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004ad	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2762 :             ImGui::Text("Avail %.2f", ImGui::GetContentRegionAvail().x);

  004b0	8d 85 dc fd ff
	ff		 lea	 eax, DWORD PTR $T8[ebp]
  004b6	50		 push	 eax
  004b7	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  004bc	83 c4 04	 add	 esp, 4
  004bf	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  004c3	83 ec 08	 sub	 esp, 8
  004c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004cb	68 00 00 00 00	 push	 OFFSET ??_C@_0L@OKGLPFJF@Avail?5?$CF?42f@
  004d0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004d5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2763 :             ImGui::Text("Offset %.2f", ImGui::GetColumnOffset());

  004d8	6a ff		 push	 -1
  004da	e8 00 00 00 00	 call	 ?GetColumnOffset@ImGui@@YAMH@Z ; ImGui::GetColumnOffset
  004df	83 c4 fc	 add	 esp, -4			; fffffffcH
  004e2	dd 1c 24	 fstp	 QWORD PTR [esp]
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LBGPBMDK@Offset?5?$CF?42f@
  004ea	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004ef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2764 :             ImGui::Text("Long text that is likely to clip");

  004f2	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@CDDJNDCG@Long?5text?5that?5is?5likely?5to?5cli@
  004f7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004fc	83 c4 04	 add	 esp, 4

; 2765 :             ImGui::Button("Button", ImVec2(-FLT_MIN, 0.0f));

  004ff	51		 push	 ecx
  00500	0f 57 c0	 xorps	 xmm0, xmm0
  00503	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00508	51		 push	 ecx
  00509	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  00511	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00516	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0051c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00521	50		 push	 eax
  00522	68 00 00 00 00	 push	 OFFSET ??_C@_06LKBCGDFD@Button@
  00527	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0052c	83 c4 08	 add	 esp, 8

; 2766 :             ImGui::NextColumn();

  0052f	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2767 :         }

  00534	e9 f7 fe ff ff	 jmp	 $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 2768 :         ImGui::Columns(1);

  00539	6a 01		 push	 1
  0053b	6a 00		 push	 0
  0053d	6a 01		 push	 1
  0053f	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00544	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2769 :         if (h_borders)

  00547	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?h_borders@?BF@??ShowDemoWindowColumns@@YAXXZ@4_NA
  0054e	85 c0		 test	 eax, eax
  00550	74 05		 je	 SHORT $LN33@ShowDemoWi

; 2770 :             ImGui::Separator();

  00552	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN33@ShowDemoWi:

; 2771 :         ImGui::TreePop();

  00557	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN30@ShowDemoWi:

; 2772 :     }
; 2773 : 
; 2774 :     // Create multiple items in a same cell before switching to next column
; 2775 :     if (ImGui::TreeNode("Mixed items"))

  0055c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CEFNMID@Mixed?5items@
  00561	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00566	83 c4 04	 add	 esp, 4
  00569	0f b6 c0	 movzx	 eax, al
  0056c	85 c0		 test	 eax, eax
  0056e	0f 84 ca 01 00
	00		 je	 $LN34@ShowDemoWi

; 2776 :     {
; 2777 :         ImGui::Columns(3, "mixed");

  00574	6a 01		 push	 1
  00576	68 00 00 00 00	 push	 OFFSET ??_C@_05IPHDHIPP@mixed@
  0057b	6a 03		 push	 3
  0057d	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00582	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2778 :         ImGui::Separator();

  00585	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2779 : 
; 2780 :         ImGui::Text("Hello");

  0058a	68 00 00 00 00	 push	 OFFSET ??_C@_05COLMCDPH@Hello@
  0058f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00594	83 c4 04	 add	 esp, 4

; 2781 :         ImGui::Button("Banana");

  00597	51		 push	 ecx
  00598	0f 57 c0	 xorps	 xmm0, xmm0
  0059b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a0	51		 push	 ecx
  005a1	0f 57 c0	 xorps	 xmm0, xmm0
  005a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a9	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  005af	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  005b4	50		 push	 eax
  005b5	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  005ba	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  005bf	83 c4 08	 add	 esp, 8

; 2782 :         ImGui::NextColumn();

  005c2	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2783 : 
; 2784 :         ImGui::Text("ImGui");

  005c7	68 00 00 00 00	 push	 OFFSET ??_C@_05OHAOKMNF@ImGui@
  005cc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  005d1	83 c4 04	 add	 esp, 4

; 2785 :         ImGui::Button("Apple");

  005d4	51		 push	 ecx
  005d5	0f 57 c0	 xorps	 xmm0, xmm0
  005d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005dd	51		 push	 ecx
  005de	0f 57 c0	 xorps	 xmm0, xmm0
  005e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e6	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  005ec	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  005f1	50		 push	 eax
  005f2	68 00 00 00 00	 push	 OFFSET ??_C@_05EBJDGKGA@Apple@
  005f7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  005fc	83 c4 08	 add	 esp, 8

; 2786 :         static float foo = 1.0f;
; 2787 :         ImGui::InputFloat("red", &foo, 0.05f, 0, "%.3f");

  005ff	6a 00		 push	 0
  00601	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00606	51		 push	 ecx
  00607	0f 57 c0	 xorps	 xmm0, xmm0
  0060a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060f	51		 push	 ecx
  00610	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00618	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061d	68 00 00 00 00	 push	 OFFSET ?foo@?CA@??ShowDemoWindowColumns@@YAXXZ@4MA
  00622	68 00 00 00 00	 push	 OFFSET ??_C@_03FAAAOPJM@red@
  00627	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  0062c	83 c4 18	 add	 esp, 24			; 00000018H

; 2788 :         ImGui::Text("An extra line here.");

  0062f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OADKLHKC@An?5extra?5line?5here?4@
  00634	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00639	83 c4 04	 add	 esp, 4

; 2789 :         ImGui::NextColumn();

  0063c	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2790 : 
; 2791 :         ImGui::Text("Sailor");

  00641	68 00 00 00 00	 push	 OFFSET ??_C@_06IFGMFLK@Sailor@
  00646	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0064b	83 c4 04	 add	 esp, 4

; 2792 :         ImGui::Button("Corniflower");

  0064e	51		 push	 ecx
  0064f	0f 57 c0	 xorps	 xmm0, xmm0
  00652	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00657	51		 push	 ecx
  00658	0f 57 c0	 xorps	 xmm0, xmm0
  0065b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00660	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00666	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0066b	50		 push	 eax
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IAINFGJF@Corniflower@
  00671	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00676	83 c4 08	 add	 esp, 8

; 2793 :         static float bar = 1.0f;
; 2794 :         ImGui::InputFloat("blue", &bar, 0.05f, 0, "%.3f");

  00679	6a 00		 push	 0
  0067b	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00680	51		 push	 ecx
  00681	0f 57 c0	 xorps	 xmm0, xmm0
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  00692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00697	68 00 00 00 00	 push	 OFFSET ?bar@?CA@??ShowDemoWindowColumns@@YAXXZ@4MA
  0069c	68 00 00 00 00	 push	 OFFSET ??_C@_04OBGPFBCN@blue@
  006a1	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  006a6	83 c4 18	 add	 esp, 24			; 00000018H

; 2795 :         ImGui::NextColumn();

  006a9	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2796 : 
; 2797 :         if (ImGui::CollapsingHeader("Category A")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();

  006ae	6a 00		 push	 0
  006b0	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CDAKMJEM@Category?5A@
  006b5	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  006ba	83 c4 08	 add	 esp, 8
  006bd	0f b6 c0	 movzx	 eax, al
  006c0	85 c0		 test	 eax, eax
  006c2	74 0d		 je	 SHORT $LN35@ShowDemoWi
  006c4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CNBMJDEI@Blah?5blah?5blah@
  006c9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  006ce	83 c4 04	 add	 esp, 4
$LN35@ShowDemoWi:
  006d1	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2798 :         if (ImGui::CollapsingHeader("Category B")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();

  006d6	6a 00		 push	 0
  006d8	68 00 00 00 00	 push	 OFFSET ??_C@_0L@ICHJKIP@Category?5B@
  006dd	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  006e2	83 c4 08	 add	 esp, 8
  006e5	0f b6 c0	 movzx	 eax, al
  006e8	85 c0		 test	 eax, eax
  006ea	74 0d		 je	 SHORT $LN36@ShowDemoWi
  006ec	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CNBMJDEI@Blah?5blah?5blah@
  006f1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  006f6	83 c4 04	 add	 esp, 4
$LN36@ShowDemoWi:
  006f9	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2799 :         if (ImGui::CollapsingHeader("Category C")) { ImGui::Text("Blah blah blah"); } ImGui::NextColumn();

  006fe	6a 00		 push	 0
  00700	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BBDMKLMO@Category?5C@
  00705	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  0070a	83 c4 08	 add	 esp, 8
  0070d	0f b6 c0	 movzx	 eax, al
  00710	85 c0		 test	 eax, eax
  00712	74 0d		 je	 SHORT $LN37@ShowDemoWi
  00714	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CNBMJDEI@Blah?5blah?5blah@
  00719	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0071e	83 c4 04	 add	 esp, 4
$LN37@ShowDemoWi:
  00721	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2800 :         ImGui::Columns(1);

  00726	6a 01		 push	 1
  00728	6a 00		 push	 0
  0072a	6a 01		 push	 1
  0072c	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00731	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2801 :         ImGui::Separator();

  00734	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2802 :         ImGui::TreePop();

  00739	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN34@ShowDemoWi:

; 2803 :     }
; 2804 : 
; 2805 :     // Word wrapping
; 2806 :     if (ImGui::TreeNode("Word-wrapping"))

  0073e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FMIDKLNC@Word?9wrapping@
  00743	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00748	83 c4 04	 add	 esp, 4
  0074b	0f b6 c0	 movzx	 eax, al
  0074e	85 c0		 test	 eax, eax
  00750	74 67		 je	 SHORT $LN38@ShowDemoWi

; 2807 :     {
; 2808 :         ImGui::Columns(2, "word-wrapping");

  00752	6a 01		 push	 1
  00754	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JBOHNDAK@word?9wrapping@
  00759	6a 02		 push	 2
  0075b	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00760	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2809 :         ImGui::Separator();

  00763	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2810 :         ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");

  00768	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5@
  0076d	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00772	83 c4 04	 add	 esp, 4

; 2811 :         ImGui::TextWrapped("Hello Left");

  00775	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BOIODOOK@Hello?5Left@
  0077a	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  0077f	83 c4 04	 add	 esp, 4

; 2812 :         ImGui::NextColumn();

  00782	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2813 :         ImGui::TextWrapped("The quick brown fox jumps over the lazy dog.");

  00787	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@PEHKNKIL@The?5quick?5brown?5fox?5jumps?5over?5@
  0078c	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00791	83 c4 04	 add	 esp, 4

; 2814 :         ImGui::TextWrapped("Hello Right");

  00794	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FKDOIKDB@Hello?5Right@
  00799	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  0079e	83 c4 04	 add	 esp, 4

; 2815 :         ImGui::Columns(1);

  007a1	6a 01		 push	 1
  007a3	6a 00		 push	 0
  007a5	6a 01		 push	 1
  007a7	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  007ac	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2816 :         ImGui::Separator();

  007af	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2817 :         ImGui::TreePop();

  007b4	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN38@ShowDemoWi:

; 2818 :     }
; 2819 : 
; 2820 :     // Scrolling columns
; 2821 :     /*
; 2822 :     if (ImGui::TreeNode("Vertical Scrolling"))
; 2823 :     {
; 2824 :         ImGui::BeginChild("##header", ImVec2(0, ImGui::GetTextLineHeightWithSpacing()+ImGui::GetStyle().ItemSpacing.y));
; 2825 :         ImGui::Columns(3);
; 2826 :         ImGui::Text("ID"); ImGui::NextColumn();
; 2827 :         ImGui::Text("Name"); ImGui::NextColumn();
; 2828 :         ImGui::Text("Path"); ImGui::NextColumn();
; 2829 :         ImGui::Columns(1);
; 2830 :         ImGui::Separator();
; 2831 :         ImGui::EndChild();
; 2832 :         ImGui::BeginChild("##scrollingregion", ImVec2(0, 60));
; 2833 :         ImGui::Columns(3);
; 2834 :         for (int i = 0; i < 10; i++)
; 2835 :         {
; 2836 :             ImGui::Text("%04d", i); ImGui::NextColumn();
; 2837 :             ImGui::Text("Foobar"); ImGui::NextColumn();
; 2838 :             ImGui::Text("/path/foobar/%04d/", i); ImGui::NextColumn();
; 2839 :         }
; 2840 :         ImGui::Columns(1);
; 2841 :         ImGui::EndChild();
; 2842 :         ImGui::TreePop();
; 2843 :     }
; 2844 :     */
; 2845 : 
; 2846 :     if (ImGui::TreeNode("Horizontal Scrolling"))

  007b9	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EDLEGCAK@Horizontal?5Scrolling@
  007be	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  007c3	83 c4 04	 add	 esp, 4
  007c6	0f b6 c0	 movzx	 eax, al
  007c9	85 c0		 test	 eax, eax
  007cb	0f 84 68 01 00
	00		 je	 $LN39@ShowDemoWi

; 2847 :     {
; 2848 :         ImGui::SetNextWindowContentSize(ImVec2(1500.0f, 0.0f));

  007d1	51		 push	 ecx
  007d2	0f 57 c0	 xorps	 xmm0, xmm0
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	51		 push	 ecx
  007db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44bb8000
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  007ee	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  007f3	50		 push	 eax
  007f4	e8 00 00 00 00	 call	 ?SetNextWindowContentSize@ImGui@@YAXABUImVec2@@@Z ; ImGui::SetNextWindowContentSize
  007f9	83 c4 04	 add	 esp, 4

; 2849 :         ImGui::BeginChild("##ScrollingRegion", ImVec2(0, ImGui::GetFontSize() * 20), false, ImGuiWindowFlags_HorizontalScrollbar);

  007fc	68 00 08 00 00	 push	 2048			; 00000800H
  00801	6a 00		 push	 0
  00803	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00808	d9 9d 74 fd ff
	ff		 fstp	 DWORD PTR tv616[ebp]
  0080e	f3 0f 10 85 74
	fd ff ff	 movss	 xmm0, DWORD PTR tv616[ebp]
  00816	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  0081e	51		 push	 ecx
  0081f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00824	51		 push	 ecx
  00825	0f 57 c0	 xorps	 xmm0, xmm0
  00828	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082d	8d 8d 7c fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00833	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00838	50		 push	 eax
  00839	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OPBMFBNO@?$CD?$CDScrollingRegion@
  0083e	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  00843	83 c4 10	 add	 esp, 16			; 00000010H

; 2850 :         ImGui::Columns(10);

  00846	6a 01		 push	 1
  00848	6a 00		 push	 0
  0084a	6a 0a		 push	 10			; 0000000aH
  0084c	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00851	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2851 :         int ITEMS_COUNT = 2000;

  00854	c7 85 34 ff ff
	ff d0 07 00 00	 mov	 DWORD PTR _ITEMS_COUNT$18[ebp], 2000 ; 000007d0H

; 2852 :         ImGuiListClipper clipper(ITEMS_COUNT);  // Also demonstrate using the clipper for large list

  0085e	51		 push	 ecx
  0085f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00867	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0086c	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _ITEMS_COUNT$18[ebp]
  00872	50		 push	 eax
  00873	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$17[ebp]
  00879	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QAE@HM@Z ; ImGuiListClipper::ImGuiListClipper
  0087e	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
$LN11@ShowDemoWi:

; 2853 :         while (clipper.Step())

  00885	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$17[ebp]
  0088b	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QAE_NXZ ; ImGuiListClipper::Step
  00890	0f b6 c0	 movzx	 eax, al
  00893	85 c0		 test	 eax, eax
  00895	74 78		 je	 SHORT $LN12@ShowDemoWi

; 2854 :         {
; 2855 :             for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)

  00897	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _clipper$17[ebp+16]
  0089d	89 85 08 ff ff
	ff		 mov	 DWORD PTR _i$16[ebp], eax
  008a3	eb 0f		 jmp	 SHORT $LN15@ShowDemoWi
$LN13@ShowDemoWi:
  008a5	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _i$16[ebp]
  008ab	83 c0 01	 add	 eax, 1
  008ae	89 85 08 ff ff
	ff		 mov	 DWORD PTR _i$16[ebp], eax
$LN15@ShowDemoWi:
  008b4	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _i$16[ebp]
  008ba	3b 85 28 ff ff
	ff		 cmp	 eax, DWORD PTR _clipper$17[ebp+20]
  008c0	7d 48		 jge	 SHORT $LN14@ShowDemoWi

; 2856 :                 for (int j = 0; j < 10; j++)

  008c2	c7 85 fc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _j$15[ebp], 0
  008cc	eb 0f		 jmp	 SHORT $LN18@ShowDemoWi
$LN16@ShowDemoWi:
  008ce	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _j$15[ebp]
  008d4	83 c0 01	 add	 eax, 1
  008d7	89 85 fc fe ff
	ff		 mov	 DWORD PTR _j$15[ebp], eax
$LN18@ShowDemoWi:
  008dd	83 bd fc fe ff
	ff 0a		 cmp	 DWORD PTR _j$15[ebp], 10 ; 0000000aH
  008e4	7d 22		 jge	 SHORT $LN17@ShowDemoWi

; 2857 :                 {
; 2858 :                     ImGui::Text("Line %d Column %d...", i, j);

  008e6	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _j$15[ebp]
  008ec	50		 push	 eax
  008ed	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _i$16[ebp]
  008f3	51		 push	 ecx
  008f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OFLPNIGP@Line?5?$CFd?5Column?5?$CFd?4?4?4@
  008f9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  008fe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2859 :                     ImGui::NextColumn();

  00901	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2860 :                 }

  00906	eb c6		 jmp	 SHORT $LN16@ShowDemoWi
$LN17@ShowDemoWi:
  00908	eb 9b		 jmp	 SHORT $LN13@ShowDemoWi
$LN14@ShowDemoWi:

; 2861 :         }

  0090a	e9 76 ff ff ff	 jmp	 $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 2862 :         ImGui::Columns(1);

  0090f	6a 01		 push	 1
  00911	6a 00		 push	 0
  00913	6a 01		 push	 1
  00915	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  0091a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2863 :         ImGui::EndChild();

  0091d	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2864 :         ImGui::TreePop();

  00922	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 2865 :     }

  00927	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0092e	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$17[ebp]
  00934	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN39@ShowDemoWi:

; 2866 : 
; 2867 :     if (ImGui::TreeNode("Tree"))

  00939	68 00 00 00 00	 push	 OFFSET ??_C@_04GDOOJPNH@Tree@
  0093e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00943	83 c4 04	 add	 esp, 4
  00946	0f b6 c0	 movzx	 eax, al
  00949	85 c0		 test	 eax, eax
  0094b	0f 84 57 01 00
	00		 je	 $LN40@ShowDemoWi

; 2868 :     {
; 2869 :         ImGui::Columns(2, "tree", true);

  00951	6a 01		 push	 1
  00953	68 00 00 00 00	 push	 OFFSET ??_C@_04KCCPLAND@tree@
  00958	6a 02		 push	 2
  0095a	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  0095f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2870 :         for (int x = 0; x < 3; x++)

  00962	c7 85 f0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$14[ebp], 0
  0096c	eb 0f		 jmp	 SHORT $LN21@ShowDemoWi
$LN19@ShowDemoWi:
  0096e	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _x$14[ebp]
  00974	83 c0 01	 add	 eax, 1
  00977	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _x$14[ebp], eax
$LN21@ShowDemoWi:
  0097d	83 bd f0 fe ff
	ff 03		 cmp	 DWORD PTR _x$14[ebp], 3
  00984	0f 8d 0b 01 00
	00		 jge	 $LN20@ShowDemoWi

; 2871 :         {
; 2872 :             bool open1 = ImGui::TreeNode((void*)(intptr_t)x, "Node%d", x);

  0098a	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _x$14[ebp]
  00990	50		 push	 eax
  00991	68 00 00 00 00	 push	 OFFSET ??_C@_06NAFIGPDO@Node?$CFd@
  00996	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _x$14[ebp]
  0099c	51		 push	 ecx
  0099d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBXPBDZZ ; ImGui::TreeNode
  009a2	83 c4 0c	 add	 esp, 12			; 0000000cH
  009a5	88 85 e7 fe ff
	ff		 mov	 BYTE PTR _open1$13[ebp], al

; 2873 :             ImGui::NextColumn();

  009ab	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2874 :             ImGui::Text("Node contents");

  009b0	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DCLBKAFC@Node?5contents@
  009b5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  009ba	83 c4 04	 add	 esp, 4

; 2875 :             ImGui::NextColumn();

  009bd	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2876 :             if (open1)

  009c2	0f b6 85 e7 fe
	ff ff		 movzx	 eax, BYTE PTR _open1$13[ebp]
  009c9	85 c0		 test	 eax, eax
  009cb	0f 84 bf 00 00
	00		 je	 $LN41@ShowDemoWi

; 2877 :             {
; 2878 :                 for (int y = 0; y < 3; y++)

  009d1	c7 85 d8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$12[ebp], 0
  009db	eb 0f		 jmp	 SHORT $LN24@ShowDemoWi
$LN22@ShowDemoWi:
  009dd	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _y$12[ebp]
  009e3	83 c0 01	 add	 eax, 1
  009e6	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _y$12[ebp], eax
$LN24@ShowDemoWi:
  009ec	83 bd d8 fe ff
	ff 03		 cmp	 DWORD PTR _y$12[ebp], 3
  009f3	0f 8d 92 00 00
	00		 jge	 $LN23@ShowDemoWi

; 2879 :                 {
; 2880 :                     bool open2 = ImGui::TreeNode((void*)(intptr_t)y, "Node%d.%d", x, y);

  009f9	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _y$12[ebp]
  009ff	50		 push	 eax
  00a00	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _x$14[ebp]
  00a06	51		 push	 ecx
  00a07	68 00 00 00 00	 push	 OFFSET ??_C@_09NGNKJEEB@Node?$CFd?4?$CFd@
  00a0c	8b 95 d8 fe ff
	ff		 mov	 edx, DWORD PTR _y$12[ebp]
  00a12	52		 push	 edx
  00a13	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBXPBDZZ ; ImGui::TreeNode
  00a18	83 c4 10	 add	 esp, 16			; 00000010H
  00a1b	88 85 cf fe ff
	ff		 mov	 BYTE PTR _open2$11[ebp], al

; 2881 :                     ImGui::NextColumn();

  00a21	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2882 :                     ImGui::Text("Node contents");

  00a26	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DCLBKAFC@Node?5contents@
  00a2b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00a30	83 c4 04	 add	 esp, 4

; 2883 :                     if (open2)

  00a33	0f b6 85 cf fe
	ff ff		 movzx	 eax, BYTE PTR _open2$11[ebp]
  00a3a	85 c0		 test	 eax, eax
  00a3c	74 33		 je	 SHORT $LN43@ShowDemoWi

; 2884 :                     {
; 2885 :                         ImGui::Text("Even more contents");

  00a3e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MJPJLCIK@Even?5more?5contents@
  00a43	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00a48	83 c4 04	 add	 esp, 4

; 2886 :                         if (ImGui::TreeNode("Tree in column"))

  00a4b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LKPCNPLG@Tree?5in?5column@
  00a50	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00a55	83 c4 04	 add	 esp, 4
  00a58	0f b6 c0	 movzx	 eax, al
  00a5b	85 c0		 test	 eax, eax
  00a5d	74 12		 je	 SHORT $LN43@ShowDemoWi

; 2887 :                         {
; 2888 :                             ImGui::Text("The quick brown fox jumps over the lazy dog");

  00a5f	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5@
  00a64	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00a69	83 c4 04	 add	 esp, 4

; 2889 :                             ImGui::TreePop();

  00a6c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN43@ShowDemoWi:

; 2890 :                         }
; 2891 :                     }
; 2892 :                     ImGui::NextColumn();

  00a71	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2893 :                     if (open2)

  00a76	0f b6 85 cf fe
	ff ff		 movzx	 eax, BYTE PTR _open2$11[ebp]
  00a7d	85 c0		 test	 eax, eax
  00a7f	74 05		 je	 SHORT $LN44@ShowDemoWi

; 2894 :                         ImGui::TreePop();

  00a81	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN44@ShowDemoWi:

; 2895 :                 }

  00a86	e9 52 ff ff ff	 jmp	 $LN22@ShowDemoWi
$LN23@ShowDemoWi:

; 2896 :                 ImGui::TreePop();

  00a8b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN41@ShowDemoWi:

; 2897 :             }
; 2898 :         }

  00a90	e9 d9 fe ff ff	 jmp	 $LN19@ShowDemoWi
$LN20@ShowDemoWi:

; 2899 :         ImGui::Columns(1);

  00a95	6a 01		 push	 1
  00a97	6a 00		 push	 0
  00a99	6a 01		 push	 1
  00a9b	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00aa0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2900 :         ImGui::TreePop();

  00aa3	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN40@ShowDemoWi:

; 2901 :     }
; 2902 : 
; 2903 :     if (disable_indent)

  00aa8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_indent@?1??ShowDemoWindowColumns@@YAXXZ@4_NA
  00aaf	85 c0		 test	 eax, eax
  00ab1	74 0a		 je	 SHORT $LN45@ShowDemoWi

; 2904 :         ImGui::PopStyleVar();

  00ab3	6a 01		 push	 1
  00ab5	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  00aba	83 c4 04	 add	 esp, 4
$LN45@ShowDemoWi:

; 2905 :     ImGui::PopID();

  00abd	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID
$LN1@ShowDemoWi:

; 2906 : }

  00ac2	52		 push	 edx
  00ac3	8b cd		 mov	 ecx, ebp
  00ac5	50		 push	 eax
  00ac6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN57@ShowDemoWi
  00acc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00ad1	58		 pop	 eax
  00ad2	5a		 pop	 edx
  00ad3	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00ad6	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00add	59		 pop	 ecx
  00ade	5f		 pop	 edi
  00adf	5e		 pop	 esi
  00ae0	5b		 pop	 ebx
  00ae1	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00ae4	33 cd		 xor	 ecx, ebp
  00ae6	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00aeb	81 c4 8c 02 00
	00		 add	 esp, 652		; 0000028cH
  00af1	3b ec		 cmp	 ebp, esp
  00af3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00af8	8b e5		 mov	 esp, ebp
  00afa	5d		 pop	 ebp
  00afb	c3		 ret	 0
$LN57@ShowDemoWi:
  00afc	05 00 00 00	 DD	 5
  00b00	00 00 00 00	 DD	 $LN56@ShowDemoWi
$LN56@ShowDemoWi:
  00b04	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00b08	20 00 00 00	 DD	 32			; 00000020H
  00b0c	00 00 00 00	 DD	 $LN50@ShowDemoWi
  00b10	ac ff ff ff	 DD	 -84			; ffffffacH
  00b14	0c 00 00 00	 DD	 12			; 0000000cH
  00b18	00 00 00 00	 DD	 $LN51@ShowDemoWi
  00b1c	98 ff ff ff	 DD	 -104			; ffffff98H
  00b20	0c 00 00 00	 DD	 12			; 0000000cH
  00b24	00 00 00 00	 DD	 $LN52@ShowDemoWi
  00b28	64 ff ff ff	 DD	 -156			; ffffff64H
  00b2c	20 00 00 00	 DD	 32			; 00000020H
  00b30	00 00 00 00	 DD	 $LN53@ShowDemoWi
  00b34	14 ff ff ff	 DD	 -236			; ffffff14H
  00b38	18 00 00 00	 DD	 24			; 00000018H
  00b3c	00 00 00 00	 DD	 $LN54@ShowDemoWi
$LN54@ShowDemoWi:
  00b40	63		 DB	 99			; 00000063H
  00b41	6c		 DB	 108			; 0000006cH
  00b42	69		 DB	 105			; 00000069H
  00b43	70		 DB	 112			; 00000070H
  00b44	70		 DB	 112			; 00000070H
  00b45	65		 DB	 101			; 00000065H
  00b46	72		 DB	 114			; 00000072H
  00b47	00		 DB	 0
$LN53@ShowDemoWi:
  00b48	6c		 DB	 108			; 0000006cH
  00b49	61		 DB	 97			; 00000061H
  00b4a	62		 DB	 98			; 00000062H
  00b4b	65		 DB	 101			; 00000065H
  00b4c	6c		 DB	 108			; 0000006cH
  00b4d	00		 DB	 0
$LN52@ShowDemoWi:
  00b4e	70		 DB	 112			; 00000070H
  00b4f	61		 DB	 97			; 00000061H
  00b50	74		 DB	 116			; 00000074H
  00b51	68		 DB	 104			; 00000068H
  00b52	73		 DB	 115			; 00000073H
  00b53	00		 DB	 0
$LN51@ShowDemoWi:
  00b54	6e		 DB	 110			; 0000006eH
  00b55	61		 DB	 97			; 00000061H
  00b56	6d		 DB	 109			; 0000006dH
  00b57	65		 DB	 101			; 00000065H
  00b58	73		 DB	 115			; 00000073H
  00b59	00		 DB	 0
$LN50@ShowDemoWi:
  00b5a	6c		 DB	 108			; 0000006cH
  00b5b	61		 DB	 97			; 00000061H
  00b5c	62		 DB	 98			; 00000062H
  00b5d	65		 DB	 101			; 00000065H
  00b5e	6c		 DB	 108			; 0000006cH
  00b5f	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowDemoWindowColumns@@YAXXZ$0:
  00000	8d 8d 14 ff ff
	ff		 lea	 ecx, DWORD PTR _clipper$17[ebp]
  00006	e9 00 00 00 00	 jmp	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
  0000b	cc		 int	 3
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
__ehhandler$?ShowDemoWindowColumns@@YAXXZ:
  00010	90		 npad	 1
  00011	90		 npad	 1
  00012	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00016	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00019	8b 8a 70 fd ff
	ff		 mov	 ecx, DWORD PTR [edx-656]
  0001f	33 c8		 xor	 ecx, eax
  00021	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00026	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00029	33 c8		 xor	 ecx, eax
  0002b	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00030	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowDemoWindowColumns@@YAXXZ
  00035	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowDemoWindowColumns@@YAXXZ ENDP			; ShowDemoWindowColumns
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowPopups@@YAXXZ
_TEXT	SEGMENT
tv90 = -636						; size = 4
$T1 = -628						; size = 8
$T2 = -612						; size = 8
$T3 = -596						; size = 8
$T4 = -580						; size = 8
$T5 = -564						; size = 8
$T6 = -548						; size = 8
$T7 = -532						; size = 8
$T8 = -516						; size = 8
$T9 = -500						; size = 8
$T10 = -484						; size = 8
$T11 = -468						; size = 8
$T12 = -452						; size = 8
$T13 = -436						; size = 8
$T14 = -420						; size = 8
$T15 = -404						; size = 8
$T16 = -388						; size = 8
$T17 = -372						; size = 8
$T18 = -356						; size = 8
_dummy_open$19 = -145					; size = 1
_buf$20 = -136						; size = 64
_i$21 = -64						; size = 4
_i$22 = -52						; size = 4
_i$23 = -40						; size = 4
_names$24 = -28						; size = 20
__$ArrayPad$ = -4					; size = 4
?ShowDemoWindowPopups@@YAXXZ PROC			; ShowDemoWindowPopups, COMDAT

; 2452 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 7c 02 00
	00		 sub	 esp, 636		; 0000027cH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 84 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-636]
  00012	b9 9f 00 00 00	 mov	 ecx, 159		; 0000009fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 2453 :     if (!ImGui::CollapsingHeader("Popups & Modal windows"))

  00032	6a 00		 push	 0
  00034	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JODLIHDO@Popups?5?$CG?5Modal?5windows@
  00039	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  0003e	83 c4 08	 add	 esp, 8
  00041	0f b6 c0	 movzx	 eax, al
  00044	85 c0		 test	 eax, eax
  00046	75 05		 jne	 SHORT $LN11@ShowDemoWi

; 2454 :         return;

  00048	e9 dc 09 00 00	 jmp	 $LN1@ShowDemoWi
$LN11@ShowDemoWi:

; 2455 : 
; 2456 :     // The properties of popups windows are:
; 2457 :     // - They block normal mouse hovering detection outside them. (*)
; 2458 :     // - Unless modal, they can be closed by clicking anywhere outside them, or by pressing ESCAPE.
; 2459 :     // - Their visibility state (~bool) is held internally by Dear ImGui instead of being held by the programmer as we are used to with regular Begin() calls.
; 2460 :     //   User can manipulate the visibility state by calling OpenPopup().
; 2461 :     // (*) One can use IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup) to bypass it and detect hovering even when normally blocked by a popup.
; 2462 :     // Those three properties are connected. The library needs to hold their visibility state because it can close popups at any time.
; 2463 : 
; 2464 :     // Typical use for regular windows:
; 2465 :     //   bool my_tool_is_active = false; if (ImGui::Button("Open")) my_tool_is_active = true; [...] if (my_tool_is_active) Begin("My Tool", &my_tool_is_active) { [...] } End();
; 2466 :     // Typical use for popups:
; 2467 :     //   if (ImGui::Button("Open")) ImGui::OpenPopup("MyPopup"); if (ImGui::BeginPopup("MyPopup") { [...] EndPopup(); }
; 2468 : 
; 2469 :     // With popups we have to go through a library call (here OpenPopup) to manipulate the visibility state.
; 2470 :     // This may be a bit confusing at first but it should quickly make sense. Follow on the examples below.
; 2471 : 
; 2472 :     if (ImGui::TreeNode("Popups"))

  0004d	68 00 00 00 00	 push	 OFFSET ??_C@_06ENDEIGLN@Popups@
  00052	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00057	83 c4 04	 add	 esp, 4
  0005a	0f b6 c0	 movzx	 eax, al
  0005d	85 c0		 test	 eax, eax
  0005f	0f 84 d2 03 00
	00		 je	 $LN12@ShowDemoWi

; 2473 :     {
; 2474 :         ImGui::TextWrapped("When a popup is active, it inhibits interacting with windows that are behind the popup. Clicking outside the popup closes it.");

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0HO@LGMOGOO@When?5a?5popup?5is?5active?0?5it?5inhi@
  0006a	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  0006f	83 c4 04	 add	 esp, 4

; 2475 : 
; 2476 :         static int selected_fish = -1;
; 2477 :         const char* names[] = { "Bream", "Haddock", "Mackerel", "Pollock", "Tilefish" };

  00072	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _names$24[ebp], OFFSET ??_C@_05BKABPFFI@Bream@
  00079	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _names$24[ebp+4], OFFSET ??_C@_07BNGOACBO@Haddock@
  00080	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _names$24[ebp+8], OFFSET ??_C@_08OFLHLLIP@Mackerel@
  00087	c7 45 f0 00 00
	00 00		 mov	 DWORD PTR _names$24[ebp+12], OFFSET ??_C@_07DOCMJKHB@Pollock@
  0008e	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _names$24[ebp+16], OFFSET ??_C@_08EGAMPFAB@Tilefish@

; 2478 :         static bool toggles[] = { true, false, false, false, false };
; 2479 : 
; 2480 :         // Simple selection popup
; 2481 :         // (If you want to show the current selection inside the Button itself, you may want to build a string using the "###" operator to preserve a constant ID with a variable label)
; 2482 :         if (ImGui::Button("Select.."))

  00095	51		 push	 ecx
  00096	0f 57 c0	 xorps	 xmm0, xmm0
  00099	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0009e	51		 push	 ecx
  0009f	0f 57 c0	 xorps	 xmm0, xmm0
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  000ad	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000b2	50		 push	 eax
  000b3	68 00 00 00 00	 push	 OFFSET ??_C@_08NNBGNINF@Select?4?4@
  000b8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  000bd	83 c4 08	 add	 esp, 8
  000c0	0f b6 c0	 movzx	 eax, al
  000c3	85 c0		 test	 eax, eax
  000c5	74 0d		 je	 SHORT $LN13@ShowDemoWi

; 2483 :             ImGui::OpenPopup("my_select_popup");

  000c7	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GGCCCMJM@my_select_popup@
  000cc	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  000d1	83 c4 04	 add	 esp, 4
$LN13@ShowDemoWi:

; 2484 :         ImGui::SameLine();

  000d4	51		 push	 ecx
  000d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e2	51		 push	 ecx
  000e3	0f 57 c0	 xorps	 xmm0, xmm0
  000e6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000eb	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  000f0	83 c4 08	 add	 esp, 8

; 2485 :         ImGui::TextUnformatted(selected_fish == -1 ? "<None>" : names[selected_fish]);

  000f3	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?selected_fish@?6??ShowDemoWindowPopups@@YAXXZ@4HA, -1
  000fa	75 0c		 jne	 SHORT $LN50@ShowDemoWi
  000fc	c7 85 84 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv90[ebp], OFFSET ??_C@_06PHEAPGKB@?$DMNone?$DO@
  00106	eb 0f		 jmp	 SHORT $LN51@ShowDemoWi
$LN50@ShowDemoWi:
  00108	a1 00 00 00 00	 mov	 eax, DWORD PTR ?selected_fish@?6??ShowDemoWindowPopups@@YAXXZ@4HA
  0010d	8b 4c 85 e4	 mov	 ecx, DWORD PTR _names$24[ebp+eax*4]
  00111	89 8d 84 fd ff
	ff		 mov	 DWORD PTR tv90[ebp], ecx
$LN51@ShowDemoWi:
  00117	6a 00		 push	 0
  00119	8b 95 84 fd ff
	ff		 mov	 edx, DWORD PTR tv90[ebp]
  0011f	52		 push	 edx
  00120	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  00125	83 c4 08	 add	 esp, 8

; 2486 :         if (ImGui::BeginPopup("my_select_popup"))

  00128	6a 00		 push	 0
  0012a	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GGCCCMJM@my_select_popup@
  0012f	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  00134	83 c4 08	 add	 esp, 8
  00137	0f b6 c0	 movzx	 eax, al
  0013a	85 c0		 test	 eax, eax
  0013c	74 72		 je	 SHORT $LN14@ShowDemoWi

; 2487 :         {
; 2488 :             ImGui::Text("Aquarium");

  0013e	68 00 00 00 00	 push	 OFFSET ??_C@_08IKEIPKBP@Aquarium@
  00143	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00148	83 c4 04	 add	 esp, 4

; 2489 :             ImGui::Separator();

  0014b	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2490 :             for (int i = 0; i < IM_ARRAYSIZE(names); i++)

  00150	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _i$23[ebp], 0
  00157	eb 09		 jmp	 SHORT $LN4@ShowDemoWi
$LN2@ShowDemoWi:
  00159	8b 45 d8	 mov	 eax, DWORD PTR _i$23[ebp]
  0015c	83 c0 01	 add	 eax, 1
  0015f	89 45 d8	 mov	 DWORD PTR _i$23[ebp], eax
$LN4@ShowDemoWi:
  00162	83 7d d8 05	 cmp	 DWORD PTR _i$23[ebp], 5
  00166	7d 43		 jge	 SHORT $LN3@ShowDemoWi

; 2491 :                 if (ImGui::Selectable(names[i]))

  00168	51		 push	 ecx
  00169	0f 57 c0	 xorps	 xmm0, xmm0
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	51		 push	 ecx
  00172	0f 57 c0	 xorps	 xmm0, xmm0
  00175	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0017a	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00180	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00185	50		 push	 eax
  00186	6a 00		 push	 0
  00188	6a 00		 push	 0
  0018a	8b 45 d8	 mov	 eax, DWORD PTR _i$23[ebp]
  0018d	8b 4c 85 e4	 mov	 ecx, DWORD PTR _names$24[ebp+eax*4]
  00191	51		 push	 ecx
  00192	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  00197	83 c4 10	 add	 esp, 16			; 00000010H
  0019a	0f b6 d0	 movzx	 edx, al
  0019d	85 d2		 test	 edx, edx
  0019f	74 08		 je	 SHORT $LN15@ShowDemoWi

; 2492 :                     selected_fish = i;

  001a1	8b 45 d8	 mov	 eax, DWORD PTR _i$23[ebp]
  001a4	a3 00 00 00 00	 mov	 DWORD PTR ?selected_fish@?6??ShowDemoWindowPopups@@YAXXZ@4HA, eax
$LN15@ShowDemoWi:
  001a9	eb ae		 jmp	 SHORT $LN2@ShowDemoWi
$LN3@ShowDemoWi:

; 2493 :             ImGui::EndPopup();

  001ab	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN14@ShowDemoWi:

; 2494 :         }
; 2495 : 
; 2496 :         // Showing a menu with toggles
; 2497 :         if (ImGui::Button("Toggle.."))

  001b0	51		 push	 ecx
  001b1	0f 57 c0	 xorps	 xmm0, xmm0
  001b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b9	51		 push	 ecx
  001ba	0f 57 c0	 xorps	 xmm0, xmm0
  001bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c2	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  001c8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001cd	50		 push	 eax
  001ce	68 00 00 00 00	 push	 OFFSET ??_C@_08NINPLAO@Toggle?4?4@
  001d3	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  001d8	83 c4 08	 add	 esp, 8
  001db	0f b6 c0	 movzx	 eax, al
  001de	85 c0		 test	 eax, eax
  001e0	74 0d		 je	 SHORT $LN16@ShowDemoWi

; 2498 :             ImGui::OpenPopup("my_toggle_popup");

  001e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LJBKGLLI@my_toggle_popup@
  001e7	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  001ec	83 c4 04	 add	 esp, 4
$LN16@ShowDemoWi:

; 2499 :         if (ImGui::BeginPopup("my_toggle_popup"))

  001ef	6a 00		 push	 0
  001f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@LJBKGLLI@my_toggle_popup@
  001f6	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  001fb	83 c4 08	 add	 esp, 8
  001fe	0f b6 c0	 movzx	 eax, al
  00201	85 c0		 test	 eax, eax
  00203	0f 84 ca 01 00
	00		 je	 $LN17@ShowDemoWi

; 2500 :         {
; 2501 :             for (int i = 0; i < IM_ARRAYSIZE(names); i++)

  00209	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _i$22[ebp], 0
  00210	eb 09		 jmp	 SHORT $LN7@ShowDemoWi
$LN5@ShowDemoWi:
  00212	8b 45 cc	 mov	 eax, DWORD PTR _i$22[ebp]
  00215	83 c0 01	 add	 eax, 1
  00218	89 45 cc	 mov	 DWORD PTR _i$22[ebp], eax
$LN7@ShowDemoWi:
  0021b	83 7d cc 05	 cmp	 DWORD PTR _i$22[ebp], 5
  0021f	7d 22		 jge	 SHORT $LN6@ShowDemoWi

; 2502 :                 ImGui::MenuItem(names[i], "", &toggles[i]);

  00221	6a 01		 push	 1
  00223	8b 45 cc	 mov	 eax, DWORD PTR _i$22[ebp]
  00226	05 00 00 00 00	 add	 eax, OFFSET ?toggles@?6??ShowDemoWindowPopups@@YAXXZ@4PA_NA
  0022b	50		 push	 eax
  0022c	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00231	8b 4d cc	 mov	 ecx, DWORD PTR _i$22[ebp]
  00234	8b 54 8d e4	 mov	 edx, DWORD PTR _names$24[ebp+ecx*4]
  00238	52		 push	 edx
  00239	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  0023e	83 c4 10	 add	 esp, 16			; 00000010H
  00241	eb cf		 jmp	 SHORT $LN5@ShowDemoWi
$LN6@ShowDemoWi:

; 2503 :             if (ImGui::BeginMenu("Sub-menu"))

  00243	6a 01		 push	 1
  00245	68 00 00 00 00	 push	 OFFSET ??_C@_08GMNJJNGG@Sub?9menu@
  0024a	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  0024f	83 c4 08	 add	 esp, 8
  00252	0f b6 c0	 movzx	 eax, al
  00255	85 c0		 test	 eax, eax
  00257	74 18		 je	 SHORT $LN18@ShowDemoWi

; 2504 :             {
; 2505 :                 ImGui::MenuItem("Click me");

  00259	6a 01		 push	 1
  0025b	6a 00		 push	 0
  0025d	6a 00		 push	 0
  0025f	68 00 00 00 00	 push	 OFFSET ??_C@_08PPLGDLFG@Click?5me@
  00264	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00269	83 c4 10	 add	 esp, 16			; 00000010H

; 2506 :                 ImGui::EndMenu();

  0026c	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN18@ShowDemoWi:

; 2507 :             }
; 2508 : 
; 2509 :             ImGui::Separator();

  00271	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2510 :             ImGui::Text("Tooltip here");

  00276	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IODHFNG@Tooltip?5here@
  0027b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00280	83 c4 04	 add	 esp, 4

; 2511 :             if (ImGui::IsItemHovered())

  00283	6a 00		 push	 0
  00285	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0028a	83 c4 04	 add	 esp, 4
  0028d	0f b6 c0	 movzx	 eax, al
  00290	85 c0		 test	 eax, eax
  00292	74 0d		 je	 SHORT $LN19@ShowDemoWi

; 2512 :                 ImGui::SetTooltip("I am a tooltip over a popup");

  00294	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@HJLGLIOD@I?5am?5a?5tooltip?5over?5a?5popup@
  00299	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPBDZZ ; ImGui::SetTooltip
  0029e	83 c4 04	 add	 esp, 4
$LN19@ShowDemoWi:

; 2513 : 
; 2514 :             if (ImGui::Button("Stacked Popup"))

  002a1	51		 push	 ecx
  002a2	0f 57 c0	 xorps	 xmm0, xmm0
  002a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002aa	51		 push	 ecx
  002ab	0f 57 c0	 xorps	 xmm0, xmm0
  002ae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b3	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  002b9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002be	50		 push	 eax
  002bf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NAJLJJDJ@Stacked?5Popup@
  002c4	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  002c9	83 c4 08	 add	 esp, 8
  002cc	0f b6 c0	 movzx	 eax, al
  002cf	85 c0		 test	 eax, eax
  002d1	74 0d		 je	 SHORT $LN20@ShowDemoWi

; 2515 :                 ImGui::OpenPopup("another popup");

  002d3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CMMIFNBD@another?5popup@
  002d8	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  002dd	83 c4 04	 add	 esp, 4
$LN20@ShowDemoWi:

; 2516 :             if (ImGui::BeginPopup("another popup"))

  002e0	6a 00		 push	 0
  002e2	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CMMIFNBD@another?5popup@
  002e7	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  002ec	83 c4 08	 add	 esp, 8
  002ef	0f b6 c0	 movzx	 eax, al
  002f2	85 c0		 test	 eax, eax
  002f4	0f 84 d4 00 00
	00		 je	 $LN21@ShowDemoWi

; 2517 :             {
; 2518 :                 for (int i = 0; i < IM_ARRAYSIZE(names); i++)

  002fa	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _i$21[ebp], 0
  00301	eb 09		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  00303	8b 45 c0	 mov	 eax, DWORD PTR _i$21[ebp]
  00306	83 c0 01	 add	 eax, 1
  00309	89 45 c0	 mov	 DWORD PTR _i$21[ebp], eax
$LN10@ShowDemoWi:
  0030c	83 7d c0 05	 cmp	 DWORD PTR _i$21[ebp], 5
  00310	7d 22		 jge	 SHORT $LN9@ShowDemoWi

; 2519 :                     ImGui::MenuItem(names[i], "", &toggles[i]);

  00312	6a 01		 push	 1
  00314	8b 45 c0	 mov	 eax, DWORD PTR _i$21[ebp]
  00317	05 00 00 00 00	 add	 eax, OFFSET ?toggles@?6??ShowDemoWindowPopups@@YAXXZ@4PA_NA
  0031c	50		 push	 eax
  0031d	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00322	8b 4d c0	 mov	 ecx, DWORD PTR _i$21[ebp]
  00325	8b 54 8d e4	 mov	 edx, DWORD PTR _names$24[ebp+ecx*4]
  00329	52		 push	 edx
  0032a	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  0032f	83 c4 10	 add	 esp, 16			; 00000010H
  00332	eb cf		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 2520 :                 if (ImGui::BeginMenu("Sub-menu"))

  00334	6a 01		 push	 1
  00336	68 00 00 00 00	 push	 OFFSET ??_C@_08GMNJJNGG@Sub?9menu@
  0033b	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00340	83 c4 08	 add	 esp, 8
  00343	0f b6 c0	 movzx	 eax, al
  00346	85 c0		 test	 eax, eax
  00348	74 7f		 je	 SHORT $LN22@ShowDemoWi

; 2521 :                 {
; 2522 :                     ImGui::MenuItem("Click me");

  0034a	6a 01		 push	 1
  0034c	6a 00		 push	 0
  0034e	6a 00		 push	 0
  00350	68 00 00 00 00	 push	 OFFSET ??_C@_08PPLGDLFG@Click?5me@
  00355	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0035a	83 c4 10	 add	 esp, 16			; 00000010H

; 2523 :                     if (ImGui::Button("Stacked Popup"))

  0035d	51		 push	 ecx
  0035e	0f 57 c0	 xorps	 xmm0, xmm0
  00361	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00366	51		 push	 ecx
  00367	0f 57 c0	 xorps	 xmm0, xmm0
  0036a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036f	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00375	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0037a	50		 push	 eax
  0037b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NAJLJJDJ@Stacked?5Popup@
  00380	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00385	83 c4 08	 add	 esp, 8
  00388	0f b6 c0	 movzx	 eax, al
  0038b	85 c0		 test	 eax, eax
  0038d	74 0d		 je	 SHORT $LN23@ShowDemoWi

; 2524 :                         ImGui::OpenPopup("another popup");

  0038f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CMMIFNBD@another?5popup@
  00394	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  00399	83 c4 04	 add	 esp, 4
$LN23@ShowDemoWi:

; 2525 :                     if (ImGui::BeginPopup("another popup"))

  0039c	6a 00		 push	 0
  0039e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CMMIFNBD@another?5popup@
  003a3	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  003a8	83 c4 08	 add	 esp, 8
  003ab	0f b6 c0	 movzx	 eax, al
  003ae	85 c0		 test	 eax, eax
  003b0	74 12		 je	 SHORT $LN24@ShowDemoWi

; 2526 :                     {
; 2527 :                         ImGui::Text("I am the last one here.");

  003b2	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DMMONLJF@I?5am?5the?5last?5one?5here?4@
  003b7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003bc	83 c4 04	 add	 esp, 4

; 2528 :                         ImGui::EndPopup();

  003bf	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN24@ShowDemoWi:

; 2529 :                     }
; 2530 :                     ImGui::EndMenu();

  003c4	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN22@ShowDemoWi:

; 2531 :                 }
; 2532 :                 ImGui::EndPopup();

  003c9	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN21@ShowDemoWi:

; 2533 :             }
; 2534 :             ImGui::EndPopup();

  003ce	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN17@ShowDemoWi:

; 2535 :         }
; 2536 : 
; 2537 :         // Call the more complete ShowExampleMenuFile which we use in various places of this demo
; 2538 :         if (ImGui::Button("File Menu.."))

  003d3	51		 push	 ecx
  003d4	0f 57 c0	 xorps	 xmm0, xmm0
  003d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003dc	51		 push	 ecx
  003dd	0f 57 c0	 xorps	 xmm0, xmm0
  003e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e5	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  003eb	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  003f0	50		 push	 eax
  003f1	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GKGGLAGK@File?5Menu?4?4@
  003f6	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  003fb	83 c4 08	 add	 esp, 8
  003fe	0f b6 c0	 movzx	 eax, al
  00401	85 c0		 test	 eax, eax
  00403	74 0d		 je	 SHORT $LN25@ShowDemoWi

; 2539 :             ImGui::OpenPopup("my_file_popup");

  00405	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CMFGCCH@my_file_popup@
  0040a	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  0040f	83 c4 04	 add	 esp, 4
$LN25@ShowDemoWi:

; 2540 :         if (ImGui::BeginPopup("my_file_popup"))

  00412	6a 00		 push	 0
  00414	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CMFGCCH@my_file_popup@
  00419	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  0041e	83 c4 08	 add	 esp, 8
  00421	0f b6 c0	 movzx	 eax, al
  00424	85 c0		 test	 eax, eax
  00426	74 0a		 je	 SHORT $LN26@ShowDemoWi

; 2541 :         {
; 2542 :             ShowExampleMenuFile();

  00428	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 2543 :             ImGui::EndPopup();

  0042d	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN26@ShowDemoWi:

; 2544 :         }
; 2545 : 
; 2546 :         ImGui::TreePop();

  00432	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN12@ShowDemoWi:

; 2547 :     }
; 2548 : 
; 2549 :     if (ImGui::TreeNode("Context menus"))

  00437	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EGPMCJBG@Context?5menus@
  0043c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00441	83 c4 04	 add	 esp, 4
  00444	0f b6 c0	 movzx	 eax, al
  00447	85 c0		 test	 eax, eax
  00449	0f 84 27 02 00
	00		 je	 $LN27@ShowDemoWi

; 2550 :     {
; 2551 :         // BeginPopupContextItem() is a helper to provide common/simple popup behavior of essentially doing:
; 2552 :         //    if (IsItemHovered() && IsMouseReleased(0))
; 2553 :         //       OpenPopup(id);
; 2554 :         //    return BeginPopup(id);
; 2555 :         // For more advanced uses you may want to replicate and cuztomize this code. This the comments inside BeginPopupContextItem() implementation.
; 2556 :         static float value = 0.5f;
; 2557 :         ImGui::Text("Value = %.3f (<-- right-click here)", value);

  0044f	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?value@?DA@??ShowDemoWindowPopups@@YAXXZ@4MA
  00457	83 ec 08	 sub	 esp, 8
  0045a	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0045f	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FFAOKKJB@Value?5?$DN?5?$CF?43f?5?$CI?$DM?9?9?5right?9click?5h@
  00464	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00469	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2558 :         if (ImGui::BeginPopupContextItem("item context menu"))

  0046c	6a 01		 push	 1
  0046e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LPLCKLLE@item?5context?5menu@
  00473	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopupContextItem
  00478	83 c4 08	 add	 esp, 8
  0047b	0f b6 c0	 movzx	 eax, al
  0047e	85 c0		 test	 eax, eax
  00480	0f 84 e7 00 00
	00		 je	 $LN28@ShowDemoWi

; 2559 :         {
; 2560 :             if (ImGui::Selectable("Set to zero")) value = 0.0f;

  00486	51		 push	 ecx
  00487	0f 57 c0	 xorps	 xmm0, xmm0
  0048a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0048f	51		 push	 ecx
  00490	0f 57 c0	 xorps	 xmm0, xmm0
  00493	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00498	8d 8d 3c fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  0049e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  004a3	50		 push	 eax
  004a4	6a 00		 push	 0
  004a6	6a 00		 push	 0
  004a8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MLNNLOAO@Set?5to?5zero@
  004ad	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  004b2	83 c4 10	 add	 esp, 16			; 00000010H
  004b5	0f b6 c0	 movzx	 eax, al
  004b8	85 c0		 test	 eax, eax
  004ba	74 0b		 je	 SHORT $LN29@ShowDemoWi
  004bc	0f 57 c0	 xorps	 xmm0, xmm0
  004bf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?DA@??ShowDemoWindowPopups@@YAXXZ@4MA, xmm0
$LN29@ShowDemoWi:

; 2561 :             if (ImGui::Selectable("Set to PI")) value = 3.1415f;

  004c7	51		 push	 ecx
  004c8	0f 57 c0	 xorps	 xmm0, xmm0
  004cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d0	51		 push	 ecx
  004d1	0f 57 c0	 xorps	 xmm0, xmm0
  004d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d9	8d 8d 2c fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  004df	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  004e4	50		 push	 eax
  004e5	6a 00		 push	 0
  004e7	6a 00		 push	 0
  004e9	68 00 00 00 00	 push	 OFFSET ??_C@_09NJOBBCFG@Set?5to?5PI@
  004ee	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  004f3	83 c4 10	 add	 esp, 16			; 00000010H
  004f6	0f b6 c0	 movzx	 eax, al
  004f9	85 c0		 test	 eax, eax
  004fb	74 10		 je	 SHORT $LN30@ShowDemoWi
  004fd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40490e56
  00505	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?value@?DA@??ShowDemoWindowPopups@@YAXXZ@4MA, xmm0
$LN30@ShowDemoWi:

; 2562 :             ImGui::SetNextItemWidth(-1);

  0050d	51		 push	 ecx
  0050e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00516	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051b	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  00520	83 c4 04	 add	 esp, 4

; 2563 :             ImGui::DragFloat("##Value", &value, 0.1f, 0.0f, 0.0f);

  00523	51		 push	 ecx
  00524	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0052c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00531	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00536	51		 push	 ecx
  00537	0f 57 c0	 xorps	 xmm0, xmm0
  0053a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053f	51		 push	 ecx
  00540	0f 57 c0	 xorps	 xmm0, xmm0
  00543	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00548	51		 push	 ecx
  00549	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00551	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00556	68 00 00 00 00	 push	 OFFSET ?value@?DA@??ShowDemoWindowPopups@@YAXXZ@4MA
  0055b	68 00 00 00 00	 push	 OFFSET ??_C@_07FGLEKONH@?$CD?$CDValue@
  00560	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00565	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2564 :             ImGui::EndPopup();

  00568	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN28@ShowDemoWi:

; 2565 :         }
; 2566 : 
; 2567 :         // We can also use OpenPopupOnItemClick() which is the same as BeginPopupContextItem() but without the Begin call.
; 2568 :         // So here we will make it that clicking on the text field with the right mouse button (1) will toggle the visibility of the popup above.
; 2569 :         ImGui::Text("(You can also right-click me to open the same popup as above.)");

  0056d	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@BJIBGGDI@?$CIYou?5can?5also?5right?9click?5me?5to@
  00572	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00577	83 c4 04	 add	 esp, 4

; 2570 :         ImGui::OpenPopupOnItemClick("item context menu", 1);

  0057a	6a 01		 push	 1
  0057c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LPLCKLLE@item?5context?5menu@
  00581	e8 00 00 00 00	 call	 ?OpenPopupOnItemClick@ImGui@@YA_NPBDH@Z ; ImGui::OpenPopupOnItemClick
  00586	83 c4 08	 add	 esp, 8

; 2571 : 
; 2572 :         // When used after an item that has an ID (here the Button), we can skip providing an ID to BeginPopupContextItem().
; 2573 :         // BeginPopupContextItem() will use the last item ID as the popup ID.
; 2574 :         // In addition here, we want to include your editable label inside the button label. We use the ### operator to override the ID (read FAQ about ID for details)
; 2575 :         static char name[32] = "Label1";
; 2576 :         char buf[64]; sprintf(buf, "Button: %s###Button", name); // ### operator override ID ignoring the preceding label

  00589	68 00 00 00 00	 push	 OFFSET ?name@?DA@??ShowDemoWindowPopups@@YAXXZ@4PADA
  0058e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BJGBOOKP@Button?3?5?$CFs?$CD?$CD?$CDButton@
  00593	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$20[ebp]
  00599	50		 push	 eax
  0059a	e8 00 00 00 00	 call	 _sprintf
  0059f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2577 :         ImGui::Button(buf);

  005a2	51		 push	 ecx
  005a3	0f 57 c0	 xorps	 xmm0, xmm0
  005a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ab	51		 push	 ecx
  005ac	0f 57 c0	 xorps	 xmm0, xmm0
  005af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b4	8d 8d 1c fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  005ba	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  005bf	50		 push	 eax
  005c0	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$20[ebp]
  005c6	50		 push	 eax
  005c7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  005cc	83 c4 08	 add	 esp, 8

; 2578 :         if (ImGui::BeginPopupContextItem())

  005cf	6a 01		 push	 1
  005d1	6a 00		 push	 0
  005d3	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopupContextItem
  005d8	83 c4 08	 add	 esp, 8
  005db	0f b6 c0	 movzx	 eax, al
  005de	85 c0		 test	 eax, eax
  005e0	74 63		 je	 SHORT $LN31@ShowDemoWi

; 2579 :         {
; 2580 :             ImGui::Text("Edit name:");

  005e2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MIFJAGAG@Edit?5name?3@
  005e7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  005ec	83 c4 04	 add	 esp, 4

; 2581 :             ImGui::InputText("##edit", name, IM_ARRAYSIZE(name));

  005ef	6a 00		 push	 0
  005f1	6a 00		 push	 0
  005f3	6a 00		 push	 0
  005f5	6a 20		 push	 32			; 00000020H
  005f7	68 00 00 00 00	 push	 OFFSET ?name@?DA@??ShowDemoWindowPopups@@YAXXZ@4PADA
  005fc	68 00 00 00 00	 push	 OFFSET ??_C@_06PEDNKACM@?$CD?$CDedit@
  00601	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  00606	83 c4 18	 add	 esp, 24			; 00000018H

; 2582 :             if (ImGui::Button("Close"))

  00609	51		 push	 ecx
  0060a	0f 57 c0	 xorps	 xmm0, xmm0
  0060d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00612	51		 push	 ecx
  00613	0f 57 c0	 xorps	 xmm0, xmm0
  00616	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0061b	8d 8d 0c fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00621	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00626	50		 push	 eax
  00627	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  0062c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00631	83 c4 08	 add	 esp, 8
  00634	0f b6 c0	 movzx	 eax, al
  00637	85 c0		 test	 eax, eax
  00639	74 05		 je	 SHORT $LN32@ShowDemoWi

; 2583 :                 ImGui::CloseCurrentPopup();

  0063b	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN32@ShowDemoWi:

; 2584 :             ImGui::EndPopup();

  00640	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN31@ShowDemoWi:

; 2585 :         }
; 2586 :         ImGui::SameLine(); ImGui::Text("(<-- right-click here)");

  00645	51		 push	 ecx
  00646	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0064e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00653	51		 push	 ecx
  00654	0f 57 c0	 xorps	 xmm0, xmm0
  00657	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0065c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00661	83 c4 08	 add	 esp, 8
  00664	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BPPDJDHF@?$CI?$DM?9?9?5right?9click?5here?$CJ@
  00669	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0066e	83 c4 04	 add	 esp, 4

; 2587 : 
; 2588 :         ImGui::TreePop();

  00671	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN27@ShowDemoWi:

; 2589 :     }
; 2590 : 
; 2591 :     if (ImGui::TreeNode("Modals"))

  00676	68 00 00 00 00	 push	 OFFSET ??_C@_06BEBKNACN@Modals@
  0067b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00680	83 c4 04	 add	 esp, 4
  00683	0f b6 c0	 movzx	 eax, al
  00686	85 c0		 test	 eax, eax
  00688	0f 84 23 03 00
	00		 je	 $LN33@ShowDemoWi

; 2592 :     {
; 2593 :         ImGui::TextWrapped("Modal windows are like popups but the user cannot close them by clicking outside the window.");

  0068e	68 00 00 00 00	 push	 OFFSET ??_C@_0FN@LBGEHGKO@Modal?5windows?5are?5like?5popups?5b@
  00693	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00698	83 c4 04	 add	 esp, 4

; 2594 : 
; 2595 :         if (ImGui::Button("Delete.."))

  0069b	51		 push	 ecx
  0069c	0f 57 c0	 xorps	 xmm0, xmm0
  0069f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a4	51		 push	 ecx
  006a5	0f 57 c0	 xorps	 xmm0, xmm0
  006a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ad	8d 8d fc fd ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  006b3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  006b8	50		 push	 eax
  006b9	68 00 00 00 00	 push	 OFFSET ??_C@_08CPNCIMAF@Delete?4?4@
  006be	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  006c3	83 c4 08	 add	 esp, 8
  006c6	0f b6 c0	 movzx	 eax, al
  006c9	85 c0		 test	 eax, eax
  006cb	74 0d		 je	 SHORT $LN34@ShowDemoWi

; 2596 :             ImGui::OpenPopup("Delete?");

  006cd	68 00 00 00 00	 push	 OFFSET ??_C@_07DCPPKMOD@Delete?$DP@
  006d2	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  006d7	83 c4 04	 add	 esp, 4
$LN34@ShowDemoWi:

; 2597 : 
; 2598 :         if (ImGui::BeginPopupModal("Delete?", NULL, ImGuiWindowFlags_AlwaysAutoResize))

  006da	6a 40		 push	 64			; 00000040H
  006dc	6a 00		 push	 0
  006de	68 00 00 00 00	 push	 OFFSET ??_C@_07DCPPKMOD@Delete?$DP@
  006e3	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginPopupModal
  006e8	83 c4 0c	 add	 esp, 12			; 0000000cH
  006eb	0f b6 c0	 movzx	 eax, al
  006ee	85 c0		 test	 eax, eax
  006f0	0f 84 f7 00 00
	00		 je	 $LN35@ShowDemoWi

; 2599 :         {
; 2600 :             ImGui::Text("All those beautiful files will be deleted.\nThis operation cannot be undone!\n\n");

  006f6	68 00 00 00 00	 push	 OFFSET ??_C@_0EO@GEGEJAML@All?5those?5beautiful?5files?5will?5@
  006fb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00700	83 c4 04	 add	 esp, 4

; 2601 :             ImGui::Separator();

  00703	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2602 : 
; 2603 :             //static int dummy_i = 0;
; 2604 :             //ImGui::Combo("Combo", &dummy_i, "Delete\0Delete harder\0");
; 2605 : 
; 2606 :             static bool dont_ask_me_next_time = false;
; 2607 :             ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(0, 0));

  00708	51		 push	 ecx
  00709	0f 57 c0	 xorps	 xmm0, xmm0
  0070c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00711	51		 push	 ecx
  00712	0f 57 c0	 xorps	 xmm0, xmm0
  00715	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0071a	8d 8d ec fd ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00720	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00725	50		 push	 eax
  00726	6a 0a		 push	 10			; 0000000aH
  00728	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  0072d	83 c4 08	 add	 esp, 8

; 2608 :             ImGui::Checkbox("Don't ask me next time", &dont_ask_me_next_time);

  00730	68 00 00 00 00	 push	 OFFSET ?dont_ask_me_next_time@?EE@??ShowDemoWindowPopups@@YAXXZ@4_NA
  00735	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BGNANACB@Don?8t?5ask?5me?5next?5time@
  0073a	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0073f	83 c4 08	 add	 esp, 8

; 2609 :             ImGui::PopStyleVar();

  00742	6a 01		 push	 1
  00744	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  00749	83 c4 04	 add	 esp, 4

; 2610 : 
; 2611 :             if (ImGui::Button("OK", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }

  0074c	51		 push	 ecx
  0074d	0f 57 c0	 xorps	 xmm0, xmm0
  00750	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00755	51		 push	 ecx
  00756	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42f00000
  0075e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00763	8d 8d dc fd ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00769	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0076e	50		 push	 eax
  0076f	68 00 00 00 00	 push	 OFFSET ??_C@_02GIPFHKNO@OK@
  00774	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00779	83 c4 08	 add	 esp, 8
  0077c	0f b6 c0	 movzx	 eax, al
  0077f	85 c0		 test	 eax, eax
  00781	74 05		 je	 SHORT $LN36@ShowDemoWi
  00783	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN36@ShowDemoWi:

; 2612 :             ImGui::SetItemDefaultFocus();

  00788	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus

; 2613 :             ImGui::SameLine();

  0078d	51		 push	 ecx
  0078e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00796	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0079b	51		 push	 ecx
  0079c	0f 57 c0	 xorps	 xmm0, xmm0
  0079f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  007a9	83 c4 08	 add	 esp, 8

; 2614 :             if (ImGui::Button("Cancel", ImVec2(120, 0))) { ImGui::CloseCurrentPopup(); }

  007ac	51		 push	 ecx
  007ad	0f 57 c0	 xorps	 xmm0, xmm0
  007b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b5	51		 push	 ecx
  007b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42f00000
  007be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c3	8d 8d cc fd ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  007c9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  007ce	50		 push	 eax
  007cf	68 00 00 00 00	 push	 OFFSET ??_C@_06FMBNCPDL@Cancel@
  007d4	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  007d9	83 c4 08	 add	 esp, 8
  007dc	0f b6 c0	 movzx	 eax, al
  007df	85 c0		 test	 eax, eax
  007e1	74 05		 je	 SHORT $LN37@ShowDemoWi
  007e3	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN37@ShowDemoWi:

; 2615 :             ImGui::EndPopup();

  007e8	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN35@ShowDemoWi:

; 2616 :         }
; 2617 : 
; 2618 :         if (ImGui::Button("Stacked modals.."))

  007ed	51		 push	 ecx
  007ee	0f 57 c0	 xorps	 xmm0, xmm0
  007f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f6	51		 push	 ecx
  007f7	0f 57 c0	 xorps	 xmm0, xmm0
  007fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ff	8d 8d bc fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00805	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0080a	50		 push	 eax
  0080b	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NNACGNLC@Stacked?5modals?4?4@
  00810	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00815	83 c4 08	 add	 esp, 8
  00818	0f b6 c0	 movzx	 eax, al
  0081b	85 c0		 test	 eax, eax
  0081d	74 0d		 je	 SHORT $LN38@ShowDemoWi

; 2619 :             ImGui::OpenPopup("Stacked 1");

  0081f	68 00 00 00 00	 push	 OFFSET ??_C@_09DMLDOIOE@Stacked?51@
  00824	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  00829	83 c4 04	 add	 esp, 4
$LN38@ShowDemoWi:

; 2620 :         if (ImGui::BeginPopupModal("Stacked 1", NULL, ImGuiWindowFlags_MenuBar))

  0082c	68 00 04 00 00	 push	 1024			; 00000400H
  00831	6a 00		 push	 0
  00833	68 00 00 00 00	 push	 OFFSET ??_C@_09DMLDOIOE@Stacked?51@
  00838	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginPopupModal
  0083d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00840	0f b6 c0	 movzx	 eax, al
  00843	85 c0		 test	 eax, eax
  00845	0f 84 61 01 00
	00		 je	 $LN39@ShowDemoWi

; 2621 :         {
; 2622 :             if (ImGui::BeginMenuBar())

  0084b	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  00850	0f b6 c0	 movzx	 eax, al
  00853	85 c0		 test	 eax, eax
  00855	74 33		 je	 SHORT $LN40@ShowDemoWi

; 2623 :             {
; 2624 :                 if (ImGui::BeginMenu("File"))

  00857	6a 01		 push	 1
  00859	68 00 00 00 00	 push	 OFFSET ??_C@_04PBAHLACE@File@
  0085e	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00863	83 c4 08	 add	 esp, 8
  00866	0f b6 c0	 movzx	 eax, al
  00869	85 c0		 test	 eax, eax
  0086b	74 18		 je	 SHORT $LN41@ShowDemoWi

; 2625 :                 {
; 2626 :                     if (ImGui::MenuItem("Dummy menu item")) {}

  0086d	6a 01		 push	 1
  0086f	6a 00		 push	 0
  00871	6a 00		 push	 0
  00873	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DBBHCGNO@Dummy?5menu?5item@
  00878	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0087d	83 c4 10	 add	 esp, 16			; 00000010H

; 2627 :                     ImGui::EndMenu();

  00880	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN41@ShowDemoWi:

; 2628 :                 }
; 2629 :                 ImGui::EndMenuBar();

  00885	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN40@ShowDemoWi:

; 2630 :             }
; 2631 :             ImGui::Text("Hello from Stacked The First\nUsing style.Colors[ImGuiCol_ModalWindowDimBg] behind it.");

  0088a	68 00 00 00 00	 push	 OFFSET ??_C@_0FG@FEJJJKAO@Hello?5from?5Stacked?5The?5First?6Us@
  0088f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00894	83 c4 04	 add	 esp, 4

; 2632 : 
; 2633 :             // Testing behavior of widgets stacking their own regular popups over the modal.
; 2634 :             static int item = 1;
; 2635 :             static float color[4] = { 0.4f,0.7f,0.0f,0.5f };
; 2636 :             ImGui::Combo("Combo", &item, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

  00897	6a ff		 push	 -1
  00899	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA@
  0089e	68 00 00 00 00	 push	 OFFSET ?item@?EP@??ShowDemoWindowPopups@@YAXXZ@4HA
  008a3	68 00 00 00 00	 push	 OFFSET ??_C@_05LMOJIBPK@Combo@
  008a8	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  008ad	83 c4 10	 add	 esp, 16			; 00000010H

; 2637 :             ImGui::ColorEdit4("color", color);

  008b0	6a 00		 push	 0
  008b2	68 00 00 00 00	 push	 OFFSET ?color@?EP@??ShowDemoWindowPopups@@YAXXZ@4PAMA
  008b7	68 00 00 00 00	 push	 OFFSET ??_C@_05PEENBMOG@color@
  008bc	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  008c1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2638 : 
; 2639 :             if (ImGui::Button("Add another modal.."))

  008c4	51		 push	 ecx
  008c5	0f 57 c0	 xorps	 xmm0, xmm0
  008c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008cd	51		 push	 ecx
  008ce	0f 57 c0	 xorps	 xmm0, xmm0
  008d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d6	8d 8d ac fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  008dc	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  008e1	50		 push	 eax
  008e2	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EOGCGODN@Add?5another?5modal?4?4@
  008e7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  008ec	83 c4 08	 add	 esp, 8
  008ef	0f b6 c0	 movzx	 eax, al
  008f2	85 c0		 test	 eax, eax
  008f4	74 0d		 je	 SHORT $LN43@ShowDemoWi

; 2640 :                 ImGui::OpenPopup("Stacked 2");

  008f6	68 00 00 00 00	 push	 OFFSET ??_C@_09BHJOLLCH@Stacked?52@
  008fb	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  00900	83 c4 04	 add	 esp, 4
$LN43@ShowDemoWi:

; 2641 : 
; 2642 :             // Also demonstrate passing a bool* to BeginPopupModal(), this will create a regular close button which will close the popup.
; 2643 :             // Note that the visibility state of popups is owned by imgui, so the input value of the bool actually doesn't matter here.
; 2644 :             bool dummy_open = true;

  00903	c6 85 6f ff ff
	ff 01		 mov	 BYTE PTR _dummy_open$19[ebp], 1

; 2645 :             if (ImGui::BeginPopupModal("Stacked 2", &dummy_open))

  0090a	6a 00		 push	 0
  0090c	8d 85 6f ff ff
	ff		 lea	 eax, DWORD PTR _dummy_open$19[ebp]
  00912	50		 push	 eax
  00913	68 00 00 00 00	 push	 OFFSET ??_C@_09BHJOLLCH@Stacked?52@
  00918	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginPopupModal
  0091d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00920	0f b6 c8	 movzx	 ecx, al
  00923	85 c9		 test	 ecx, ecx
  00925	74 49		 je	 SHORT $LN44@ShowDemoWi

; 2646 :             {
; 2647 :                 ImGui::Text("Hello from Stacked The Second!");

  00927	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CPFMAIJ@Hello?5from?5Stacked?5The?5Second?$CB@
  0092c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00931	83 c4 04	 add	 esp, 4

; 2648 :                 if (ImGui::Button("Close"))

  00934	51		 push	 ecx
  00935	0f 57 c0	 xorps	 xmm0, xmm0
  00938	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093d	51		 push	 ecx
  0093e	0f 57 c0	 xorps	 xmm0, xmm0
  00941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00946	8d 8d 9c fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0094c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00951	50		 push	 eax
  00952	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  00957	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0095c	83 c4 08	 add	 esp, 8
  0095f	0f b6 c0	 movzx	 eax, al
  00962	85 c0		 test	 eax, eax
  00964	74 05		 je	 SHORT $LN45@ShowDemoWi

; 2649 :                     ImGui::CloseCurrentPopup();

  00966	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN45@ShowDemoWi:

; 2650 :                 ImGui::EndPopup();

  0096b	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN44@ShowDemoWi:

; 2651 :             }
; 2652 : 
; 2653 :             if (ImGui::Button("Close"))

  00970	51		 push	 ecx
  00971	0f 57 c0	 xorps	 xmm0, xmm0
  00974	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00979	51		 push	 ecx
  0097a	0f 57 c0	 xorps	 xmm0, xmm0
  0097d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00982	8d 8d 8c fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  00988	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0098d	50		 push	 eax
  0098e	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  00993	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00998	83 c4 08	 add	 esp, 8
  0099b	0f b6 c0	 movzx	 eax, al
  0099e	85 c0		 test	 eax, eax
  009a0	74 05		 je	 SHORT $LN46@ShowDemoWi

; 2654 :                 ImGui::CloseCurrentPopup();

  009a2	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN46@ShowDemoWi:

; 2655 :             ImGui::EndPopup();

  009a7	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN39@ShowDemoWi:

; 2656 :         }
; 2657 : 
; 2658 :         ImGui::TreePop();

  009ac	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN33@ShowDemoWi:

; 2659 :     }
; 2660 : 
; 2661 :     if (ImGui::TreeNode("Menus inside a regular window"))

  009b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EEOFHCMN@Menus?5inside?5a?5regular?5window@
  009b6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  009bb	83 c4 04	 add	 esp, 4
  009be	0f b6 c0	 movzx	 eax, al
  009c1	85 c0		 test	 eax, eax
  009c3	74 64		 je	 SHORT $LN47@ShowDemoWi

; 2662 :     {
; 2663 :         ImGui::TextWrapped("Below we are testing adding menu items to a regular window. It's rather unusual but should work!");

  009c5	68 00 00 00 00	 push	 OFFSET ??_C@_0GB@PMDHHLNB@Below?5we?5are?5testing?5adding?5men@
  009ca	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  009cf	83 c4 04	 add	 esp, 4

; 2664 :         ImGui::Separator();

  009d2	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2665 :         // NB: As a quirk in this very specific example, we want to differentiate the parent of this menu from the parent of the various popup menus above.
; 2666 :         // To do so we are encloding the items in a PushID()/PopID() block to make them two different menusets. If we don't, opening any popup above and hovering our menu here
; 2667 :         // would open it. This is because once a menu is active, we allow to switch to a sibling menu by just hovering on it, which is the desired behavior for regular menus.
; 2668 :         ImGui::PushID("foo");

  009d7	68 00 00 00 00	 push	 OFFSET ??_C@_03GBBIHDEJ@foo@
  009dc	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  009e1	83 c4 04	 add	 esp, 4

; 2669 :         ImGui::MenuItem("Menu item", "CTRL+M");

  009e4	6a 01		 push	 1
  009e6	6a 00		 push	 0
  009e8	68 00 00 00 00	 push	 OFFSET ??_C@_06GCLBOGOD@CTRL?$CLM@
  009ed	68 00 00 00 00	 push	 OFFSET ??_C@_09PDGIKJJH@Menu?5item@
  009f2	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  009f7	83 c4 10	 add	 esp, 16			; 00000010H

; 2670 :         if (ImGui::BeginMenu("Menu inside a regular window"))

  009fa	6a 01		 push	 1
  009fc	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MFBALFLF@Menu?5inside?5a?5regular?5window@
  00a01	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00a06	83 c4 08	 add	 esp, 8
  00a09	0f b6 c0	 movzx	 eax, al
  00a0c	85 c0		 test	 eax, eax
  00a0e	74 0a		 je	 SHORT $LN48@ShowDemoWi

; 2671 :         {
; 2672 :             ShowExampleMenuFile();

  00a10	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 2673 :             ImGui::EndMenu();

  00a15	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN48@ShowDemoWi:

; 2674 :         }
; 2675 :         ImGui::PopID();

  00a1a	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2676 :         ImGui::Separator();

  00a1f	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2677 :         ImGui::TreePop();

  00a24	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN47@ShowDemoWi:
$LN1@ShowDemoWi:

; 2678 :     }
; 2679 : }

  00a29	52		 push	 edx
  00a2a	8b cd		 mov	 ecx, ebp
  00a2c	50		 push	 eax
  00a2d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN56@ShowDemoWi
  00a33	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00a38	58		 pop	 eax
  00a39	5a		 pop	 edx
  00a3a	5f		 pop	 edi
  00a3b	5e		 pop	 esi
  00a3c	5b		 pop	 ebx
  00a3d	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00a40	33 cd		 xor	 ecx, ebp
  00a42	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00a47	81 c4 7c 02 00
	00		 add	 esp, 636		; 0000027cH
  00a4d	3b ec		 cmp	 ebp, esp
  00a4f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a54	8b e5		 mov	 esp, ebp
  00a56	5d		 pop	 ebp
  00a57	c3		 ret	 0
$LN56@ShowDemoWi:
  00a58	03 00 00 00	 DD	 3
  00a5c	00 00 00 00	 DD	 $LN55@ShowDemoWi
$LN55@ShowDemoWi:
  00a60	e4 ff ff ff	 DD	 -28			; ffffffe4H
  00a64	14 00 00 00	 DD	 20			; 00000014H
  00a68	00 00 00 00	 DD	 $LN52@ShowDemoWi
  00a6c	78 ff ff ff	 DD	 -136			; ffffff78H
  00a70	40 00 00 00	 DD	 64			; 00000040H
  00a74	00 00 00 00	 DD	 $LN53@ShowDemoWi
  00a78	6f ff ff ff	 DD	 -145			; ffffff6fH
  00a7c	01 00 00 00	 DD	 1
  00a80	00 00 00 00	 DD	 $LN54@ShowDemoWi
$LN54@ShowDemoWi:
  00a84	64		 DB	 100			; 00000064H
  00a85	75		 DB	 117			; 00000075H
  00a86	6d		 DB	 109			; 0000006dH
  00a87	6d		 DB	 109			; 0000006dH
  00a88	79		 DB	 121			; 00000079H
  00a89	5f		 DB	 95			; 0000005fH
  00a8a	6f		 DB	 111			; 0000006fH
  00a8b	70		 DB	 112			; 00000070H
  00a8c	65		 DB	 101			; 00000065H
  00a8d	6e		 DB	 110			; 0000006eH
  00a8e	00		 DB	 0
$LN53@ShowDemoWi:
  00a8f	62		 DB	 98			; 00000062H
  00a90	75		 DB	 117			; 00000075H
  00a91	66		 DB	 102			; 00000066H
  00a92	00		 DB	 0
$LN52@ShowDemoWi:
  00a93	6e		 DB	 110			; 0000006eH
  00a94	61		 DB	 97			; 00000061H
  00a95	6d		 DB	 109			; 0000006dH
  00a96	65		 DB	 101			; 00000065H
  00a97	73		 DB	 115			; 00000073H
  00a98	00		 DB	 0
?ShowDemoWindowPopups@@YAXXZ ENDP			; ShowDemoWindowPopups
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowLayout@@YAXXZ
_TEXT	SEGMENT
tv1454 = -3020						; size = 4
tv1455 = -3016						; size = 4
tv163 = -3016						; size = 4
tv3126 = -3012						; size = 4
tv3124 = -3012						; size = 4
tv3122 = -3012						; size = 4
tv3120 = -3012						; size = 4
tv3112 = -3012						; size = 4
tv2951 = -3012						; size = 4
tv2908 = -3012						; size = 4
tv2831 = -3012						; size = 4
tv2770 = -3012						; size = 4
tv2099 = -3012						; size = 4
tv2062 = -3012						; size = 4
tv2022 = -3012						; size = 4
tv1625 = -3012						; size = 4
tv1456 = -3012						; size = 4
tv1435 = -3012						; size = 4
tv1311 = -3012						; size = 4
tv1240 = -3012						; size = 4
tv160 = -3012						; size = 4
tv132 = -3012						; size = 4
$T2 = -3004						; size = 8
$T3 = -2988						; size = 8
$T4 = -2972						; size = 8
$T5 = -2956						; size = 8
$T6 = -2940						; size = 8
$T7 = -2924						; size = 8
$T8 = -2908						; size = 8
$T9 = -2892						; size = 8
$T10 = -2876						; size = 8
$T11 = -2860						; size = 8
$T12 = -2844						; size = 8
$T13 = -2828						; size = 8
$T14 = -2812						; size = 8
$T15 = -2796						; size = 16
$T16 = -2772						; size = 16
$T17 = -2748						; size = 16
$T18 = -2724						; size = 16
$T19 = -2700						; size = 16
$T20 = -2676						; size = 16
$T21 = -2652						; size = 8
$T22 = -2636						; size = 8
$T23 = -2620						; size = 16
$T24 = -2596						; size = 8
$T25 = -2580						; size = 8
$T26 = -2564						; size = 16
$T27 = -2540						; size = 8
$T28 = -2524						; size = 8
$T29 = -2508						; size = 8
$T30 = -2492						; size = 8
$T31 = -2476						; size = 8
$T32 = -2460						; size = 8
$T33 = -2444						; size = 8
$T34 = -2428						; size = 8
$T35 = -2412						; size = 8
$T36 = -2396						; size = 8
$T37 = -2380						; size = 8
$T38 = -2364						; size = 8
$T39 = -2348						; size = 8
$T40 = -2332						; size = 8
$T41 = -2316						; size = 8
$T42 = -2300						; size = 8
$T43 = -2284						; size = 8
$T44 = -2268						; size = 8
$T45 = -2252						; size = 8
$T46 = -2236						; size = 8
$T47 = -2220						; size = 8
$T48 = -2204						; size = 8
$T49 = -2188						; size = 8
$T50 = -2172						; size = 8
$T51 = -2156						; size = 8
$T52 = -2140						; size = 8
$T53 = -2124						; size = 8
$T54 = -2108						; size = 8
$T55 = -2092						; size = 8
$T56 = -2076						; size = 8
$T57 = -2060						; size = 8
$T58 = -2044						; size = 8
$T59 = -2028						; size = 8
$T60 = -2012						; size = 8
$T61 = -1996						; size = 16
$T62 = -1972						; size = 16
$T63 = -1948						; size = 8
$T64 = -1932						; size = 8
$T65 = -1916						; size = 8
$T66 = -1900						; size = 8
$T67 = -1884						; size = 8
$T68 = -1868						; size = 8
_clip_rect$69 = -892					; size = 16
_pos$70 = -868						; size = 8
_n$71 = -852						; size = 4
_open$72 = -837						; size = 1
_p$73 = -828						; size = 8
_scroll_x_delta$74 = -812				; size = 4
_scroll_max_x$75 = -800					; size = 4
_scroll_x$76 = -788					; size = 4
_hue$77 = -776						; size = 4
_label$78 = -764					; size = 4
_num_buf$79 = -752					; size = 16
_n$80 = -728						; size = 4
_num_buttons$81 = -716					; size = 4
_line$82 = -704						; size = 4
_names$83 = -692					; size = 20
_scroll_max_x$84 = -664					; size = 4
_scroll_x$85 = -652					; size = 4
_item$86 = -640						; size = 4
_window_visible$87 = -625				; size = 1
_child_flags$88 = -616					; size = 4
_child_height$89 = -604					; size = 4
_i$90 = -592						; size = 4
_scroll_max_y$91 = -580					; size = 4
_scroll_y$92 = -568					; size = 4
_item$93 = -556						; size = 4
_window_visible$94 = -541				; size = 1
_child_flags$95 = -532					; size = 4
_names$96 = -520					; size = 20
_i$97 = -492						; size = 4
_child_w$98 = -480					; size = 4
_style$99 = -468					; size = 4
_scroll_to_pos$100 = -453				; size = 1
_scroll_to_off$101 = -441				; size = 1
_i$102 = -432						; size = 4
_node_open$103 = -417					; size = 1
_i$104 = -408						; size = 4
_spacing$105 = -396					; size = 4
_values$106 = -384					; size = 20
_size$107 = -356					; size = 8
_n$108 = -340						; size = 4
_n$109 = -328						; size = 4
_names$110 = -316					; size = 16
_tab_bar_flags$111 = -292				; size = 4
_next_button_x2$112 = -280				; size = 4
_last_button_x2$113 = -268				; size = 4
_n$114 = -256						; size = 4
_window_visible_x2$115 = -244				; size = 4
_buttons_count$116 = -232				; size = 4
_style$117 = -220					; size = 4
_button_sz$118 = -208					; size = 8
_i$119 = -192						; size = 4
_items$120 = -180					; size = 16
_child_rect_max$121 = -156				; size = 8
_child_rect_min$122 = -140				; size = 8
_n$123 = -124						; size = 4
_buf$124 = -112						; size = 32
_i$125 = -72						; size = 4
_window_flags$126 = -60					; size = 4
_i$127 = -48						; size = 4
_window_flags$128 = -36					; size = 4
_goto_line$129 = -21					; size = 1
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ShowDemoWindowLayout@@YAXXZ PROC			; ShowDemoWindowLayout, COMDAT

; 1760 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowDemoWindowLayout@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 0b 00
	00		 sub	 esp, 3008		; 00000bc0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 f4 ff
	ff		 lea	 edi, DWORD PTR [ebp-3020]
  00020	b9 f0 02 00 00	 mov	 ecx, 752		; 000002f0H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1761 :     if (!ImGui::CollapsingHeader("Layout"))

  0004a	6a 00		 push	 0
  0004c	68 00 00 00 00	 push	 OFFSET ??_C@_06KMHOJANB@Layout@
  00051	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00056	83 c4 08	 add	 esp, 8
  00059	0f b6 c0	 movzx	 eax, al
  0005c	85 c0		 test	 eax, eax
  0005e	75 05		 jne	 SHORT $LN52@ShowDemoWi

; 1762 :         return;

  00060	e9 a1 36 00 00	 jmp	 $LN1@ShowDemoWi
$LN52@ShowDemoWi:

; 1763 : 
; 1764 :     if (ImGui::TreeNode("Child windows"))

  00065	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CCLKLEED@Child?5windows@
  0006a	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0006f	83 c4 04	 add	 esp, 4
  00072	0f b6 c0	 movzx	 eax, al
  00075	85 c0		 test	 eax, eax
  00077	0f 84 5b 04 00
	00		 je	 $LN53@ShowDemoWi

; 1765 :     {
; 1766 :         HelpMarker("Use child windows to begin into a self-contained independent scrolling/clipping regions within a host window.");

  0007d	68 00 00 00 00	 push	 OFFSET ??_C@_0GO@NHEDEMHF@Use?5child?5windows?5to?5begin?5into@
  00082	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00087	83 c4 04	 add	 esp, 4

; 1767 :         static bool disable_mouse_wheel = false;
; 1768 :         static bool disable_menu = false;
; 1769 :         ImGui::Checkbox("Disable Mouse Wheel", &disable_mouse_wheel);

  0008a	68 00 00 00 00	 push	 OFFSET ?disable_mouse_wheel@?6??ShowDemoWindowLayout@@YAXXZ@4_NA
  0008f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DLAKMPBE@Disable?5Mouse?5Wheel@
  00094	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00099	83 c4 08	 add	 esp, 8

; 1770 :         ImGui::Checkbox("Disable Menu", &disable_menu);

  0009c	68 00 00 00 00	 push	 OFFSET ?disable_menu@?6??ShowDemoWindowLayout@@YAXXZ@4_NA
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PGMIMFJH@Disable?5Menu@
  000a6	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  000ab	83 c4 08	 add	 esp, 8

; 1771 : 
; 1772 :         static int line = 50;
; 1773 :         bool goto_line = ImGui::Button("Goto");

  000ae	51		 push	 ecx
  000af	0f 57 c0	 xorps	 xmm0, xmm0
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	51		 push	 ecx
  000b8	0f 57 c0	 xorps	 xmm0, xmm0
  000bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c0	8d 8d b4 f8 ff
	ff		 lea	 ecx, DWORD PTR $T68[ebp]
  000c6	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000cb	50		 push	 eax
  000cc	68 00 00 00 00	 push	 OFFSET ??_C@_04BNGNMAK@Goto@
  000d1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  000d6	83 c4 08	 add	 esp, 8
  000d9	88 45 eb	 mov	 BYTE PTR _goto_line$129[ebp], al

; 1774 :         ImGui::SameLine();

  000dc	51		 push	 ecx
  000dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ea	51		 push	 ecx
  000eb	0f 57 c0	 xorps	 xmm0, xmm0
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  000f8	83 c4 08	 add	 esp, 8

; 1775 :         ImGui::SetNextItemWidth(100);

  000fb	51		 push	 ecx
  000fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  0010e	83 c4 04	 add	 esp, 4

; 1776 :         goto_line |= ImGui::InputInt("##Line", &line, 0, 0, ImGuiInputTextFlags_EnterReturnsTrue);

  00111	0f b6 45 eb	 movzx	 eax, BYTE PTR _goto_line$129[ebp]
  00115	6a 20		 push	 32			; 00000020H
  00117	6a 00		 push	 0
  00119	6a 00		 push	 0
  0011b	68 00 00 00 00	 push	 OFFSET ?line@?6??ShowDemoWindowLayout@@YAXXZ@4HA
  00120	68 00 00 00 00	 push	 OFFSET ??_C@_06JMBAAABB@?$CD?$CDLine@
  00125	89 85 3c f4 ff
	ff		 mov	 DWORD PTR tv3120[ebp], eax
  0012b	e8 00 00 00 00	 call	 ?InputInt@ImGui@@YA_NPBDPAHHHH@Z ; ImGui::InputInt
  00130	83 c4 14	 add	 esp, 20			; 00000014H
  00133	0f b6 c0	 movzx	 eax, al
  00136	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv3120[ebp]
  0013c	0b c8		 or	 ecx, eax
  0013e	88 4d eb	 mov	 BYTE PTR _goto_line$129[ebp], cl

; 1777 : 
; 1778 :         // Child 1: no border, enable horizontal scrollbar
; 1779 :         {
; 1780 :             ImGuiWindowFlags window_flags = ImGuiWindowFlags_HorizontalScrollbar | (disable_mouse_wheel ? ImGuiWindowFlags_NoScrollWithMouse : 0);

  00141	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_mouse_wheel@?6??ShowDemoWindowLayout@@YAXXZ@4_NA
  00148	85 c0		 test	 eax, eax
  0014a	74 0c		 je	 SHORT $LN120@ShowDemoWi
  0014c	c7 85 3c f4 ff
	ff 10 00 00 00	 mov	 DWORD PTR tv132[ebp], 16 ; 00000010H
  00156	eb 0a		 jmp	 SHORT $LN121@ShowDemoWi
$LN120@ShowDemoWi:
  00158	c7 85 3c f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv132[ebp], 0
$LN121@ShowDemoWi:
  00162	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv132[ebp]
  00168	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  0016e	89 4d dc	 mov	 DWORD PTR _window_flags$128[ebp], ecx

; 1781 :             ImGui::BeginChild("Child1", ImVec2(ImGui::GetWindowContentRegionWidth() * 0.5f, 260), false, window_flags);

  00171	8b 45 dc	 mov	 eax, DWORD PTR _window_flags$128[ebp]
  00174	50		 push	 eax
  00175	6a 00		 push	 0
  00177	51		 push	 ecx
  00178	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43820000
  00180	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00185	e8 00 00 00 00	 call	 ?GetWindowContentRegionWidth@ImGui@@YAMXZ ; ImGui::GetWindowContentRegionWidth
  0018a	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2022[ebp]
  00190	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2022[ebp]
  00198	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  001a0	51		 push	 ecx
  001a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a6	8d 8d a4 f8 ff
	ff		 lea	 ecx, DWORD PTR $T67[ebp]
  001ac	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001b1	50		 push	 eax
  001b2	68 00 00 00 00	 push	 OFFSET ??_C@_06JPIGPLJL@Child1@
  001b7	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  001bc	83 c4 10	 add	 esp, 16			; 00000010H

; 1782 :             for (int i = 0; i < 100; i++)

  001bf	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _i$127[ebp], 0
  001c6	eb 09		 jmp	 SHORT $LN4@ShowDemoWi
$LN2@ShowDemoWi:
  001c8	8b 45 d0	 mov	 eax, DWORD PTR _i$127[ebp]
  001cb	83 c0 01	 add	 eax, 1
  001ce	89 45 d0	 mov	 DWORD PTR _i$127[ebp], eax
$LN4@ShowDemoWi:
  001d1	83 7d d0 64	 cmp	 DWORD PTR _i$127[ebp], 100 ; 00000064H
  001d5	7d 3b		 jge	 SHORT $LN3@ShowDemoWi

; 1783 :             {
; 1784 :                 ImGui::Text("%04d: scrollable region", i);

  001d7	8b 45 d0	 mov	 eax, DWORD PTR _i$127[ebp]
  001da	50		 push	 eax
  001db	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NIHPFDMO@?$CF04d?3?5scrollable?5region@
  001e0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001e5	83 c4 08	 add	 esp, 8

; 1785 :                 if (goto_line && line == i)

  001e8	0f b6 45 eb	 movzx	 eax, BYTE PTR _goto_line$129[ebp]
  001ec	85 c0		 test	 eax, eax
  001ee	74 20		 je	 SHORT $LN54@ShowDemoWi
  001f0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?line@?6??ShowDemoWindowLayout@@YAXXZ@4HA
  001f5	3b 45 d0	 cmp	 eax, DWORD PTR _i$127[ebp]
  001f8	75 16		 jne	 SHORT $LN54@ShowDemoWi

; 1786 :                     ImGui::SetScrollHereY();

  001fa	51		 push	 ecx
  001fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  00203	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00208	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
  0020d	83 c4 04	 add	 esp, 4
$LN54@ShowDemoWi:

; 1787 :             }

  00210	eb b6		 jmp	 SHORT $LN2@ShowDemoWi
$LN3@ShowDemoWi:

; 1788 :             if (goto_line && line >= 100)

  00212	0f b6 45 eb	 movzx	 eax, BYTE PTR _goto_line$129[ebp]
  00216	85 c0		 test	 eax, eax
  00218	74 1f		 je	 SHORT $LN55@ShowDemoWi
  0021a	83 3d 00 00 00
	00 64		 cmp	 DWORD PTR ?line@?6??ShowDemoWindowLayout@@YAXXZ@4HA, 100 ; 00000064H
  00221	7c 16		 jl	 SHORT $LN55@ShowDemoWi

; 1789 :                 ImGui::SetScrollHereY();

  00223	51		 push	 ecx
  00224	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0022c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00231	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
  00236	83 c4 04	 add	 esp, 4
$LN55@ShowDemoWi:

; 1790 :             ImGui::EndChild();

  00239	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 1791 :         }
; 1792 : 
; 1793 :         ImGui::SameLine();

  0023e	51		 push	 ecx
  0023f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00247	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024c	51		 push	 ecx
  0024d	0f 57 c0	 xorps	 xmm0, xmm0
  00250	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00255	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0025a	83 c4 08	 add	 esp, 8

; 1794 : 
; 1795 :         // Child 2: rounded border
; 1796 :         {
; 1797 :             ImGuiWindowFlags window_flags = (disable_mouse_wheel ? ImGuiWindowFlags_NoScrollWithMouse : 0) | (disable_menu ? 0 : ImGuiWindowFlags_MenuBar);

  0025d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_mouse_wheel@?6??ShowDemoWindowLayout@@YAXXZ@4_NA
  00264	85 c0		 test	 eax, eax
  00266	74 0c		 je	 SHORT $LN122@ShowDemoWi
  00268	c7 85 3c f4 ff
	ff 10 00 00 00	 mov	 DWORD PTR tv160[ebp], 16 ; 00000010H
  00272	eb 0a		 jmp	 SHORT $LN123@ShowDemoWi
$LN122@ShowDemoWi:
  00274	c7 85 3c f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv160[ebp], 0
$LN123@ShowDemoWi:
  0027e	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?disable_menu@?6??ShowDemoWindowLayout@@YAXXZ@4_NA
  00285	85 c9		 test	 ecx, ecx
  00287	74 0c		 je	 SHORT $LN124@ShowDemoWi
  00289	c7 85 38 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv163[ebp], 0
  00293	eb 0a		 jmp	 SHORT $LN125@ShowDemoWi
$LN124@ShowDemoWi:
  00295	c7 85 38 f4 ff
	ff 00 04 00 00	 mov	 DWORD PTR tv163[ebp], 1024 ; 00000400H
$LN125@ShowDemoWi:
  0029f	8b 95 3c f4 ff
	ff		 mov	 edx, DWORD PTR tv160[ebp]
  002a5	0b 95 38 f4 ff
	ff		 or	 edx, DWORD PTR tv163[ebp]
  002ab	89 55 c4	 mov	 DWORD PTR _window_flags$126[ebp], edx

; 1798 :             ImGui::PushStyleVar(ImGuiStyleVar_ChildRounding, 5.0f);

  002ae	51		 push	 ecx
  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	6a 06		 push	 6
  002be	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar
  002c3	83 c4 08	 add	 esp, 8

; 1799 :             ImGui::BeginChild("Child2", ImVec2(0, 260), true, window_flags);

  002c6	8b 45 c4	 mov	 eax, DWORD PTR _window_flags$126[ebp]
  002c9	50		 push	 eax
  002ca	6a 01		 push	 1
  002cc	51		 push	 ecx
  002cd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43820000
  002d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002da	51		 push	 ecx
  002db	0f 57 c0	 xorps	 xmm0, xmm0
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	8d 8d 94 f8 ff
	ff		 lea	 ecx, DWORD PTR $T66[ebp]
  002e9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002ee	50		 push	 eax
  002ef	68 00 00 00 00	 push	 OFFSET ??_C@_06LEKLKIFI@Child2@
  002f4	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  002f9	83 c4 10	 add	 esp, 16			; 00000010H

; 1800 :             if (!disable_menu && ImGui::BeginMenuBar())

  002fc	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?disable_menu@?6??ShowDemoWindowLayout@@YAXXZ@4_NA
  00303	85 c0		 test	 eax, eax
  00305	75 31		 jne	 SHORT $LN56@ShowDemoWi
  00307	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  0030c	0f b6 c0	 movzx	 eax, al
  0030f	85 c0		 test	 eax, eax
  00311	74 25		 je	 SHORT $LN56@ShowDemoWi

; 1801 :             {
; 1802 :                 if (ImGui::BeginMenu("Menu"))

  00313	6a 01		 push	 1
  00315	68 00 00 00 00	 push	 OFFSET ??_C@_04IFEHPILC@Menu@
  0031a	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  0031f	83 c4 08	 add	 esp, 8
  00322	0f b6 c0	 movzx	 eax, al
  00325	85 c0		 test	 eax, eax
  00327	74 0a		 je	 SHORT $LN57@ShowDemoWi

; 1803 :                 {
; 1804 :                     ShowExampleMenuFile();

  00329	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 1805 :                     ImGui::EndMenu();

  0032e	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN57@ShowDemoWi:

; 1806 :                 }
; 1807 :                 ImGui::EndMenuBar();

  00333	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN56@ShowDemoWi:

; 1808 :             }
; 1809 :             ImGui::Columns(2);

  00338	6a 01		 push	 1
  0033a	6a 00		 push	 0
  0033c	6a 02		 push	 2
  0033e	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00343	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1810 :             for (int i = 0; i < 100; i++)

  00346	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _i$125[ebp], 0
  0034d	eb 09		 jmp	 SHORT $LN7@ShowDemoWi
$LN5@ShowDemoWi:
  0034f	8b 45 b8	 mov	 eax, DWORD PTR _i$125[ebp]
  00352	83 c0 01	 add	 eax, 1
  00355	89 45 b8	 mov	 DWORD PTR _i$125[ebp], eax
$LN7@ShowDemoWi:
  00358	83 7d b8 64	 cmp	 DWORD PTR _i$125[ebp], 100 ; 00000064H
  0035c	7d 4b		 jge	 SHORT $LN6@ShowDemoWi

; 1811 :             {
; 1812 :                 char buf[32];
; 1813 :                 sprintf(buf, "%03d", i);

  0035e	8b 45 b8	 mov	 eax, DWORD PTR _i$125[ebp]
  00361	50		 push	 eax
  00362	68 00 00 00 00	 push	 OFFSET ??_C@_04OHGLKFFN@?$CF03d@
  00367	8d 4d 90	 lea	 ecx, DWORD PTR _buf$124[ebp]
  0036a	51		 push	 ecx
  0036b	e8 00 00 00 00	 call	 _sprintf
  00370	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1814 :                 ImGui::Button(buf, ImVec2(-FLT_MIN, 0.0f));

  00373	51		 push	 ecx
  00374	0f 57 c0	 xorps	 xmm0, xmm0
  00377	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037c	51		 push	 ecx
  0037d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  00385	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0038a	8d 8d 84 f8 ff
	ff		 lea	 ecx, DWORD PTR $T65[ebp]
  00390	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00395	50		 push	 eax
  00396	8d 45 90	 lea	 eax, DWORD PTR _buf$124[ebp]
  00399	50		 push	 eax
  0039a	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0039f	83 c4 08	 add	 esp, 8

; 1815 :                 ImGui::NextColumn();

  003a2	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 1816 :             }

  003a7	eb a6		 jmp	 SHORT $LN5@ShowDemoWi
$LN6@ShowDemoWi:

; 1817 :             ImGui::EndChild();

  003a9	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 1818 :             ImGui::PopStyleVar();

  003ae	6a 01		 push	 1
  003b0	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  003b5	83 c4 04	 add	 esp, 4

; 1819 :         }
; 1820 : 
; 1821 :         ImGui::Separator();

  003b8	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1822 : 
; 1823 :         // Demonstrate a few extra things
; 1824 :         // - Changing ImGuiCol_ChildBg (which is transparent black in default styles)
; 1825 :         // - Using SetCursorPos() to position the child window (because the child window is an item from the POV of the parent window)
; 1826 :         //   You can also call SetNextWindowPos() to position the child window. The parent window will effectively layout from this position.
; 1827 :         // - Using ImGui::GetItemRectMin/Max() to query the "item" state (because the child window is an item from the POV of the parent window)
; 1828 :         //   See "Widgets" -> "Querying Status (Active/Focused/Hovered etc.)" section for more details about this.
; 1829 :         {
; 1830 :             ImGui::SetCursorPosX(ImGui::GetCursorPosX() + 10);

  003bd	e8 00 00 00 00	 call	 ?GetCursorPosX@ImGui@@YAMXZ ; ImGui::GetCursorPosX
  003c2	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2062[ebp]
  003c8	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2062[ebp]
  003d0	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  003d8	51		 push	 ecx
  003d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003de	e8 00 00 00 00	 call	 ?SetCursorPosX@ImGui@@YAXM@Z ; ImGui::SetCursorPosX
  003e3	83 c4 04	 add	 esp, 4

; 1831 :             ImGui::PushStyleColor(ImGuiCol_ChildBg, IM_COL32(255, 0, 0, 100));

  003e6	68 ff 00 00 64	 push	 1677721855		; 640000ffH
  003eb	6a 03		 push	 3
  003ed	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHI@Z ; ImGui::PushStyleColor
  003f2	83 c4 08	 add	 esp, 8

; 1832 :             ImGui::BeginChild("blah", ImVec2(200, 100), true, ImGuiWindowFlags_None);

  003f5	6a 00		 push	 0
  003f7	6a 01		 push	 1
  003f9	51		 push	 ecx
  003fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00402	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00407	51		 push	 ecx
  00408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  00410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00415	8d 8d 74 f8 ff
	ff		 lea	 ecx, DWORD PTR $T64[ebp]
  0041b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00420	50		 push	 eax
  00421	68 00 00 00 00	 push	 OFFSET ??_C@_04EPOOCEMM@blah@
  00426	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  0042b	83 c4 10	 add	 esp, 16			; 00000010H

; 1833 :             for (int n = 0; n < 50; n++)

  0042e	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _n$123[ebp], 0
  00435	eb 09		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  00437	8b 45 84	 mov	 eax, DWORD PTR _n$123[ebp]
  0043a	83 c0 01	 add	 eax, 1
  0043d	89 45 84	 mov	 DWORD PTR _n$123[ebp], eax
$LN10@ShowDemoWi:
  00440	83 7d 84 32	 cmp	 DWORD PTR _n$123[ebp], 50 ; 00000032H
  00444	7d 13		 jge	 SHORT $LN9@ShowDemoWi

; 1834 :                 ImGui::Text("Some test %d", n);

  00446	8b 45 84	 mov	 eax, DWORD PTR _n$123[ebp]
  00449	50		 push	 eax
  0044a	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NPCHMHMN@Some?5test?5?$CFd@
  0044f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00454	83 c4 08	 add	 esp, 8
  00457	eb de		 jmp	 SHORT $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 1835 :             ImGui::EndChild();

  00459	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 1836 :             ImVec2 child_rect_min = ImGui::GetItemRectMin();

  0045e	8d 85 74 ff ff
	ff		 lea	 eax, DWORD PTR _child_rect_min$122[ebp]
  00464	50		 push	 eax
  00465	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  0046a	83 c4 04	 add	 esp, 4

; 1837 :             ImVec2 child_rect_max = ImGui::GetItemRectMax();

  0046d	8d 85 64 ff ff
	ff		 lea	 eax, DWORD PTR _child_rect_max$121[ebp]
  00473	50		 push	 eax
  00474	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  00479	83 c4 04	 add	 esp, 4

; 1838 :             ImGui::PopStyleColor();

  0047c	6a 01		 push	 1
  0047e	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
  00483	83 c4 04	 add	 esp, 4

; 1839 :             ImGui::Text("Rect of child window is: (%.0f,%.0f) (%.0f,%.0f)", child_rect_min.x, child_rect_min.y, child_rect_max.x, child_rect_max.y);

  00486	f3 0f 5a 85 68
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _child_rect_max$121[ebp+4]
  0048e	83 ec 08	 sub	 esp, 8
  00491	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00496	f3 0f 5a 85 64
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _child_rect_max$121[ebp]
  0049e	83 ec 08	 sub	 esp, 8
  004a1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004a6	f3 0f 5a 85 78
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _child_rect_min$122[ebp+4]
  004ae	83 ec 08	 sub	 esp, 8
  004b1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004b6	f3 0f 5a 85 74
	ff ff ff	 cvtss2sd xmm0, DWORD PTR _child_rect_min$122[ebp]
  004be	83 ec 08	 sub	 esp, 8
  004c1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004c6	68 00 00 00 00	 push	 OFFSET ??_C@_0DB@EENCLFAL@Rect?5of?5child?5window?5is?3?5?$CI?$CF?40f?0@
  004cb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004d0	83 c4 24	 add	 esp, 36			; 00000024H

; 1840 :         }
; 1841 : 
; 1842 :         ImGui::TreePop();

  004d3	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN53@ShowDemoWi:

; 1843 :     }
; 1844 : 
; 1845 :     if (ImGui::TreeNode("Widgets Width"))

  004d8	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PINHNBJ@Widgets?5Width@
  004dd	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  004e2	83 c4 04	 add	 esp, 4
  004e5	0f b6 c0	 movzx	 eax, al
  004e8	85 c0		 test	 eax, eax
  004ea	0f 84 9e 03 00
	00		 je	 $LN58@ShowDemoWi

; 1846 :     {
; 1847 :         // Use SetNextItemWidth() to set the width of a single upcoming item.
; 1848 :         // Use PushItemWidth()/PopItemWidth() to set the width of a group of items.
; 1849 :         static float f = 0.0f;
; 1850 :         ImGui::Text("SetNextItemWidth/PushItemWidth(100)");

  004f0	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LPIOKAFF@SetNextItemWidth?1PushItemWidth?$CI@
  004f5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004fa	83 c4 04	 add	 esp, 4

; 1851 :         ImGui::SameLine(); HelpMarker("Fixed width.");

  004fd	51		 push	 ecx
  004fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00506	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0050b	51		 push	 ecx
  0050c	0f 57 c0	 xorps	 xmm0, xmm0
  0050f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00514	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00519	83 c4 08	 add	 esp, 8
  0051c	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BANGKKCL@Fixed?5width?4@
  00521	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00526	83 c4 04	 add	 esp, 4

; 1852 :         ImGui::SetNextItemWidth(100);

  00529	51		 push	 ecx
  0052a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00537	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  0053c	83 c4 04	 add	 esp, 4

; 1853 :         ImGui::DragFloat("float##1", &f);

  0053f	51		 push	 ecx
  00540	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00548	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0054d	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00552	51		 push	 ecx
  00553	0f 57 c0	 xorps	 xmm0, xmm0
  00556	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0055b	51		 push	 ecx
  0055c	0f 57 c0	 xorps	 xmm0, xmm0
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	51		 push	 ecx
  00565	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0056d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00572	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00577	68 00 00 00 00	 push	 OFFSET ??_C@_08ENBOPPKM@float?$CD?$CD1@
  0057c	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00581	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1854 : 
; 1855 :         ImGui::Text("SetNextItemWidth/PushItemWidth(GetWindowWidth() * 0.5f)");

  00584	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@PLEIEGIE@SetNextItemWidth?1PushItemWidth?$CI@
  00589	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0058e	83 c4 04	 add	 esp, 4

; 1856 :         ImGui::SameLine(); HelpMarker("Half of window width.");

  00591	51		 push	 ecx
  00592	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0059a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059f	51		 push	 ecx
  005a0	0f 57 c0	 xorps	 xmm0, xmm0
  005a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  005ad	83 c4 08	 add	 esp, 8
  005b0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@HBJEDPEN@Half?5of?5window?5width?4@
  005b5	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  005ba	83 c4 04	 add	 esp, 4

; 1857 :         ImGui::SetNextItemWidth(ImGui::GetWindowWidth() * 0.5f);

  005bd	e8 00 00 00 00	 call	 ?GetWindowWidth@ImGui@@YAMXZ ; ImGui::GetWindowWidth
  005c2	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2099[ebp]
  005c8	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2099[ebp]
  005d0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  005d8	51		 push	 ecx
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  005e3	83 c4 04	 add	 esp, 4

; 1858 :         ImGui::DragFloat("float##2", &f);

  005e6	51		 push	 ecx
  005e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f4	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  005f9	51		 push	 ecx
  005fa	0f 57 c0	 xorps	 xmm0, xmm0
  005fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00602	51		 push	 ecx
  00603	0f 57 c0	 xorps	 xmm0, xmm0
  00606	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0060b	51		 push	 ecx
  0060c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00619	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  0061e	68 00 00 00 00	 push	 OFFSET ??_C@_08GGDDKMGP@float?$CD?$CD2@
  00623	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00628	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1859 : 
; 1860 :         ImGui::Text("SetNextItemWidth/PushItemWidth(GetContentRegionAvail().x * 0.5f)");

  0062b	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@LHGGMOLL@SetNextItemWidth?1PushItemWidth?$CI@
  00630	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00635	83 c4 04	 add	 esp, 4

; 1861 :         ImGui::SameLine(); HelpMarker("Half of available width.\n(~ right-cursor_pos)\n(works within a column set)");

  00638	51		 push	 ecx
  00639	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00641	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00646	51		 push	 ecx
  00647	0f 57 c0	 xorps	 xmm0, xmm0
  0064a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0064f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00654	83 c4 08	 add	 esp, 8
  00657	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@LHEEJHHB@Half?5of?5available?5width?4?6?$CI?$HO?5rig@
  0065c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00661	83 c4 04	 add	 esp, 4

; 1862 :         ImGui::SetNextItemWidth(ImGui::GetContentRegionAvail().x * 0.5f);

  00664	8d 85 64 f8 ff
	ff		 lea	 eax, DWORD PTR $T63[ebp]
  0066a	50		 push	 eax
  0066b	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  00670	83 c4 04	 add	 esp, 4
  00673	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00677	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0067f	51		 push	 ecx
  00680	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00685	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  0068a	83 c4 04	 add	 esp, 4

; 1863 :         ImGui::DragFloat("float##3", &f);

  0068d	51		 push	 ecx
  0068e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0069b	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  006a0	51		 push	 ecx
  006a1	0f 57 c0	 xorps	 xmm0, xmm0
  006a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006a9	51		 push	 ecx
  006aa	0f 57 c0	 xorps	 xmm0, xmm0
  006ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b2	51		 push	 ecx
  006b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c0	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  006c5	68 00 00 00 00	 push	 OFFSET ??_C@_08HPCIJNCO@float?$CD?$CD3@
  006ca	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  006cf	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1864 : 
; 1865 :         ImGui::Text("SetNextItemWidth/PushItemWidth(-100)");

  006d2	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@FHLMHJP@SetNextItemWidth?1PushItemWidth?$CI@
  006d7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  006dc	83 c4 04	 add	 esp, 4

; 1866 :         ImGui::SameLine(); HelpMarker("Align to right edge minus 100");

  006df	51		 push	 ecx
  006e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ed	51		 push	 ecx
  006ee	0f 57 c0	 xorps	 xmm0, xmm0
  006f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006f6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  006fb	83 c4 08	 add	 esp, 8
  006fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IEOHBCBL@Align?5to?5right?5edge?5minus?5100@
  00703	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00708	83 c4 04	 add	 esp, 4

; 1867 :         ImGui::SetNextItemWidth(-100);

  0070b	51		 push	 ecx
  0070c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2c80000
  00714	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00719	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  0071e	83 c4 04	 add	 esp, 4

; 1868 :         ImGui::DragFloat("float##4", &f);

  00721	51		 push	 ecx
  00722	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0072a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072f	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00734	51		 push	 ecx
  00735	0f 57 c0	 xorps	 xmm0, xmm0
  00738	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0073d	51		 push	 ecx
  0073e	0f 57 c0	 xorps	 xmm0, xmm0
  00741	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00746	51		 push	 ecx
  00747	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0074f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00754	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00759	68 00 00 00 00	 push	 OFFSET ??_C@_08DAGJALOJ@float?$CD?$CD4@
  0075e	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00763	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1869 : 
; 1870 :         // Demonstrate using PushItemWidth to surround three items. Calling SetNextItemWidth() before each of them would have the same effect.
; 1871 :         ImGui::Text("SetNextItemWidth/PushItemWidth(-1)");

  00766	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JMHOPAFH@SetNextItemWidth?1PushItemWidth?$CI@
  0076b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00770	83 c4 04	 add	 esp, 4

; 1872 :         ImGui::SameLine(); HelpMarker("Align to right edge");

  00773	51		 push	 ecx
  00774	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0077c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00781	51		 push	 ecx
  00782	0f 57 c0	 xorps	 xmm0, xmm0
  00785	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0078f	83 c4 08	 add	 esp, 8
  00792	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@CLIHJLDF@Align?5to?5right?5edge@
  00797	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  0079c	83 c4 04	 add	 esp, 4

; 1873 :         ImGui::PushItemWidth(-1);

  0079f	51		 push	 ecx
  007a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ad	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  007b2	83 c4 04	 add	 esp, 4

; 1874 :         ImGui::DragFloat("##float5a", &f);

  007b5	51		 push	 ecx
  007b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c3	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  007c8	51		 push	 ecx
  007c9	0f 57 c0	 xorps	 xmm0, xmm0
  007cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d1	51		 push	 ecx
  007d2	0f 57 c0	 xorps	 xmm0, xmm0
  007d5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007da	51		 push	 ecx
  007db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  007ed	68 00 00 00 00	 push	 OFFSET ??_C@_09LOBKLHLF@?$CD?$CDfloat5a@
  007f2	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  007f7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1875 :         ImGui::DragFloat("##float5b", &f);

  007fa	51		 push	 ecx
  007fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00808	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  0080d	51		 push	 ecx
  0080e	0f 57 c0	 xorps	 xmm0, xmm0
  00811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00816	51		 push	 ecx
  00817	0f 57 c0	 xorps	 xmm0, xmm0
  0081a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0081f	51		 push	 ecx
  00820	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00828	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082d	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00832	68 00 00 00 00	 push	 OFFSET ??_C@_09JFDHOEHG@?$CD?$CDfloat5b@
  00837	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  0083c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1876 :         ImGui::DragFloat("##float5c", &f);

  0083f	51		 push	 ecx
  00840	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00848	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084d	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00852	51		 push	 ecx
  00853	0f 57 c0	 xorps	 xmm0, xmm0
  00856	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085b	51		 push	 ecx
  0085c	0f 57 c0	 xorps	 xmm0, xmm0
  0085f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00864	51		 push	 ecx
  00865	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0086d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00872	68 00 00 00 00	 push	 OFFSET ?f@?BM@??ShowDemoWindowLayout@@YAXXZ@4MA
  00877	68 00 00 00 00	 push	 OFFSET ??_C@_09IMCMNFDH@?$CD?$CDfloat5c@
  0087c	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00881	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1877 :         ImGui::PopItemWidth();

  00884	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 1878 : 
; 1879 :         ImGui::TreePop();

  00889	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN58@ShowDemoWi:

; 1880 :     }
; 1881 : 
; 1882 :     if (ImGui::TreeNode("Basic Horizontal Layout"))

  0088e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@MLGIMKHF@Basic?5Horizontal?5Layout@
  00893	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00898	83 c4 04	 add	 esp, 4
  0089b	0f b6 c0	 movzx	 eax, al
  0089e	85 c0		 test	 eax, eax
  008a0	0f 84 c2 07 00
	00		 je	 $LN59@ShowDemoWi

; 1883 :     {
; 1884 :         ImGui::TextWrapped("(Use ImGui::SameLine() to keep adding items to the right of the preceding item)");

  008a6	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@GPJJJDFK@?$CIUse?5ImGui?3?3SameLine?$CI?$CJ?5to?5keep?5@
  008ab	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  008b0	83 c4 04	 add	 esp, 4

; 1885 : 
; 1886 :         // Text
; 1887 :         ImGui::Text("Two items: Hello"); ImGui::SameLine();

  008b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CPONELNL@Two?5items?3?5Hello@
  008b8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  008bd	83 c4 04	 add	 esp, 4
  008c0	51		 push	 ecx
  008c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  008c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ce	51		 push	 ecx
  008cf	0f 57 c0	 xorps	 xmm0, xmm0
  008d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008d7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008dc	83 c4 08	 add	 esp, 8

; 1888 :         ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

  008df	68 00 00 00 00	 push	 OFFSET ??_C@_06IFGMFLK@Sailor@
  008e4	51		 push	 ecx
  008e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f2	51		 push	 ecx
  008f3	0f 57 c0	 xorps	 xmm0, xmm0
  008f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fb	51		 push	 ecx
  008fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00904	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00909	51		 push	 ecx
  0090a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00912	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00917	8d 8d 4c f8 ff
	ff		 lea	 ecx, DWORD PTR $T62[ebp]
  0091d	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  00922	50		 push	 eax
  00923	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXABUImVec4@@PBDZZ ; ImGui::TextColored
  00928	83 c4 08	 add	 esp, 8

; 1889 : 
; 1890 :         // Adjust spacing
; 1891 :         ImGui::Text("More spacing: Hello"); ImGui::SameLine(0, 20);

  0092b	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BBDLDECN@More?5spacing?3?5Hello@
  00930	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00935	83 c4 04	 add	 esp, 4
  00938	51		 push	 ecx
  00939	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  00941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00946	51		 push	 ecx
  00947	0f 57 c0	 xorps	 xmm0, xmm0
  0094a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0094f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00954	83 c4 08	 add	 esp, 8

; 1892 :         ImGui::TextColored(ImVec4(1,1,0,1), "Sailor");

  00957	68 00 00 00 00	 push	 OFFSET ??_C@_06IFGMFLK@Sailor@
  0095c	51		 push	 ecx
  0095d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00965	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096a	51		 push	 ecx
  0096b	0f 57 c0	 xorps	 xmm0, xmm0
  0096e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00973	51		 push	 ecx
  00974	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0097c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00981	51		 push	 ecx
  00982	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0098a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0098f	8d 8d 34 f8 ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp]
  00995	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0099a	50		 push	 eax
  0099b	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXABUImVec4@@PBDZZ ; ImGui::TextColored
  009a0	83 c4 08	 add	 esp, 8

; 1893 : 
; 1894 :         // Button
; 1895 :         ImGui::AlignTextToFramePadding();

  009a3	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 1896 :         ImGui::Text("Normal buttons"); ImGui::SameLine();

  009a8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PEKJFFJL@Normal?5buttons@
  009ad	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  009b2	83 c4 04	 add	 esp, 4
  009b5	51		 push	 ecx
  009b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c3	51		 push	 ecx
  009c4	0f 57 c0	 xorps	 xmm0, xmm0
  009c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cc	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  009d1	83 c4 08	 add	 esp, 8

; 1897 :         ImGui::Button("Banana"); ImGui::SameLine();

  009d4	51		 push	 ecx
  009d5	0f 57 c0	 xorps	 xmm0, xmm0
  009d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009dd	51		 push	 ecx
  009de	0f 57 c0	 xorps	 xmm0, xmm0
  009e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009e6	8d 8d 24 f8 ff
	ff		 lea	 ecx, DWORD PTR $T60[ebp]
  009ec	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  009f1	50		 push	 eax
  009f2	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  009f7	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  009fc	83 c4 08	 add	 esp, 8
  009ff	51		 push	 ecx
  00a00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	51		 push	 ecx
  00a0e	0f 57 c0	 xorps	 xmm0, xmm0
  00a11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a16	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a1b	83 c4 08	 add	 esp, 8

; 1898 :         ImGui::Button("Apple"); ImGui::SameLine();

  00a1e	51		 push	 ecx
  00a1f	0f 57 c0	 xorps	 xmm0, xmm0
  00a22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a27	51		 push	 ecx
  00a28	0f 57 c0	 xorps	 xmm0, xmm0
  00a2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a30	8d 8d 14 f8 ff
	ff		 lea	 ecx, DWORD PTR $T59[ebp]
  00a36	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00a3b	50		 push	 eax
  00a3c	68 00 00 00 00	 push	 OFFSET ??_C@_05EBJDGKGA@Apple@
  00a41	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00a46	83 c4 08	 add	 esp, 8
  00a49	51		 push	 ecx
  00a4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a52	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a57	51		 push	 ecx
  00a58	0f 57 c0	 xorps	 xmm0, xmm0
  00a5b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a60	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a65	83 c4 08	 add	 esp, 8

; 1899 :         ImGui::Button("Corniflower");

  00a68	51		 push	 ecx
  00a69	0f 57 c0	 xorps	 xmm0, xmm0
  00a6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a71	51		 push	 ecx
  00a72	0f 57 c0	 xorps	 xmm0, xmm0
  00a75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7a	8d 8d 04 f8 ff
	ff		 lea	 ecx, DWORD PTR $T58[ebp]
  00a80	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00a85	50		 push	 eax
  00a86	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IAINFGJF@Corniflower@
  00a8b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00a90	83 c4 08	 add	 esp, 8

; 1900 : 
; 1901 :         // Button
; 1902 :         ImGui::Text("Small buttons"); ImGui::SameLine();

  00a93	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JIDOKED@Small?5buttons@
  00a98	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00a9d	83 c4 04	 add	 esp, 4
  00aa0	51		 push	 ecx
  00aa1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aa9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aae	51		 push	 ecx
  00aaf	0f 57 c0	 xorps	 xmm0, xmm0
  00ab2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00abc	83 c4 08	 add	 esp, 8

; 1903 :         ImGui::SmallButton("Like this one"); ImGui::SameLine();

  00abf	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DOOOCPOJ@Like?5this?5one@
  00ac4	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  00ac9	83 c4 04	 add	 esp, 4
  00acc	51		 push	 ecx
  00acd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ad5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ada	51		 push	 ecx
  00adb	0f 57 c0	 xorps	 xmm0, xmm0
  00ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00ae8	83 c4 08	 add	 esp, 8

; 1904 :         ImGui::Text("can fit within a text block.");

  00aeb	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FOPDMCKC@can?5fit?5within?5a?5text?5block?4@
  00af0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00af5	83 c4 04	 add	 esp, 4

; 1905 : 
; 1906 :         // Aligned to arbitrary position. Easy/cheap column.
; 1907 :         ImGui::Text("Aligned");

  00af8	68 00 00 00 00	 push	 OFFSET ??_C@_07KDGBBGOD@Aligned@
  00afd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00b02	83 c4 04	 add	 esp, 4

; 1908 :         ImGui::SameLine(150); ImGui::Text("x=150");

  00b05	51		 push	 ecx
  00b06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b13	51		 push	 ecx
  00b14	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00b1c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b21	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b26	83 c4 08	 add	 esp, 8
  00b29	68 00 00 00 00	 push	 OFFSET ??_C@_05EFIMCDIL@x?$DN150@
  00b2e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00b33	83 c4 04	 add	 esp, 4

; 1909 :         ImGui::SameLine(300); ImGui::Text("x=300");

  00b36	51		 push	 ecx
  00b37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b44	51		 push	 ecx
  00b45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00b4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b52	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b57	83 c4 08	 add	 esp, 8
  00b5a	68 00 00 00 00	 push	 OFFSET ??_C@_05OJEOCJOL@x?$DN300@
  00b5f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00b64	83 c4 04	 add	 esp, 4

; 1910 :         ImGui::Text("Aligned");

  00b67	68 00 00 00 00	 push	 OFFSET ??_C@_07KDGBBGOD@Aligned@
  00b6c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00b71	83 c4 04	 add	 esp, 4

; 1911 :         ImGui::SameLine(150); ImGui::SmallButton("x=150");

  00b74	51		 push	 ecx
  00b75	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b82	51		 push	 ecx
  00b83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00b8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b90	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b95	83 c4 08	 add	 esp, 8
  00b98	68 00 00 00 00	 push	 OFFSET ??_C@_05EFIMCDIL@x?$DN150@
  00b9d	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  00ba2	83 c4 04	 add	 esp, 4

; 1912 :         ImGui::SameLine(300); ImGui::SmallButton("x=300");

  00ba5	51		 push	 ecx
  00ba6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00bae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb3	51		 push	 ecx
  00bb4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00bbc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bc1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00bc6	83 c4 08	 add	 esp, 8
  00bc9	68 00 00 00 00	 push	 OFFSET ??_C@_05OJEOCJOL@x?$DN300@
  00bce	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  00bd3	83 c4 04	 add	 esp, 4

; 1913 : 
; 1914 :         // Checkbox
; 1915 :         static bool c1 = false, c2 = false, c3 = false, c4 = false;
; 1916 :         ImGui::Checkbox("My", &c1); ImGui::SameLine();

  00bd6	68 00 00 00 00	 push	 OFFSET ?c1@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00bdb	68 00 00 00 00	 push	 OFFSET ??_C@_02IGABPKMB@My@
  00be0	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00be5	83 c4 08	 add	 esp, 8
  00be8	51		 push	 ecx
  00be9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00bf1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bf6	51		 push	 ecx
  00bf7	0f 57 c0	 xorps	 xmm0, xmm0
  00bfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bff	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00c04	83 c4 08	 add	 esp, 8

; 1917 :         ImGui::Checkbox("Tailor", &c2); ImGui::SameLine();

  00c07	68 00 00 00 00	 push	 OFFSET ?c2@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00c0c	68 00 00 00 00	 push	 OFFSET ??_C@_06MNPBPLDE@Tailor@
  00c11	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00c16	83 c4 08	 add	 esp, 8
  00c19	51		 push	 ecx
  00c1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00c22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c27	51		 push	 ecx
  00c28	0f 57 c0	 xorps	 xmm0, xmm0
  00c2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c30	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00c35	83 c4 08	 add	 esp, 8

; 1918 :         ImGui::Checkbox("Is", &c3); ImGui::SameLine();

  00c38	68 00 00 00 00	 push	 OFFSET ?c3@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00c3d	68 00 00 00 00	 push	 OFFSET ??_C@_02HLOHLKJH@Is@
  00c42	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00c47	83 c4 08	 add	 esp, 8
  00c4a	51		 push	 ecx
  00c4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00c53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c58	51		 push	 ecx
  00c59	0f 57 c0	 xorps	 xmm0, xmm0
  00c5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c61	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00c66	83 c4 08	 add	 esp, 8

; 1919 :         ImGui::Checkbox("Rich", &c4);

  00c69	68 00 00 00 00	 push	 OFFSET ?c4@?BP@??ShowDemoWindowLayout@@YAXXZ@4_NA
  00c6e	68 00 00 00 00	 push	 OFFSET ??_C@_04NKJFLIBG@Rich@
  00c73	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00c78	83 c4 08	 add	 esp, 8

; 1920 : 
; 1921 :         // Various
; 1922 :         static float f0 = 1.0f, f1 = 2.0f, f2 = 3.0f;
; 1923 :         ImGui::PushItemWidth(80);

  00c7b	51		 push	 ecx
  00c7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  00c84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c89	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  00c8e	83 c4 04	 add	 esp, 4

; 1924 :         const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD" };

  00c91	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$120[ebp], OFFSET ??_C@_04OHNMNPPA@AAAA@
  00c9b	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$120[ebp+4], OFFSET ??_C@_04JLKCOHFE@BBBB@
  00ca5	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$120[ebp+8], OFFSET ??_C@_04GKHPCPH@CCCC@
  00caf	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$120[ebp+12], OFFSET ??_C@_04GDFOJGBM@DDDD@

; 1925 :         static int item = -1;
; 1926 :         ImGui::Combo("Combo", &item, items, IM_ARRAYSIZE(items)); ImGui::SameLine();

  00cb9	6a ff		 push	 -1
  00cbb	6a 04		 push	 4
  00cbd	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _items$120[ebp]
  00cc3	50		 push	 eax
  00cc4	68 00 00 00 00	 push	 OFFSET ?item@?BP@??ShowDemoWindowLayout@@YAXXZ@4HA
  00cc9	68 00 00 00 00	 push	 OFFSET ??_C@_05LMOJIBPK@Combo@
  00cce	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::Combo
  00cd3	83 c4 14	 add	 esp, 20			; 00000014H
  00cd6	51		 push	 ecx
  00cd7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00cdf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ce4	51		 push	 ecx
  00ce5	0f 57 c0	 xorps	 xmm0, xmm0
  00ce8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ced	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00cf2	83 c4 08	 add	 esp, 8

; 1927 :         ImGui::SliderFloat("X", &f0, 0.0f, 5.0f); ImGui::SameLine();

  00cf5	51		 push	 ecx
  00cf6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00cfe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d03	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00d08	51		 push	 ecx
  00d09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00d11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d16	51		 push	 ecx
  00d17	0f 57 c0	 xorps	 xmm0, xmm0
  00d1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1f	68 00 00 00 00	 push	 OFFSET ?f0@?BP@??ShowDemoWindowLayout@@YAXXZ@4MA
  00d24	68 00 00 00 00	 push	 OFFSET ??_C@_01MMEEDKFM@X@
  00d29	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00d2e	83 c4 18	 add	 esp, 24			; 00000018H
  00d31	51		 push	 ecx
  00d32	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00d3a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d3f	51		 push	 ecx
  00d40	0f 57 c0	 xorps	 xmm0, xmm0
  00d43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d48	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00d4d	83 c4 08	 add	 esp, 8

; 1928 :         ImGui::SliderFloat("Y", &f1, 0.0f, 5.0f); ImGui::SameLine();

  00d50	51		 push	 ecx
  00d51	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00d59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d5e	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00d63	51		 push	 ecx
  00d64	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00d6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d71	51		 push	 ecx
  00d72	0f 57 c0	 xorps	 xmm0, xmm0
  00d75	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d7a	68 00 00 00 00	 push	 OFFSET ?f1@?BP@??ShowDemoWindowLayout@@YAXXZ@4MA
  00d7f	68 00 00 00 00	 push	 OFFSET ??_C@_01NFFPALBN@Y@
  00d84	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00d89	83 c4 18	 add	 esp, 24			; 00000018H
  00d8c	51		 push	 ecx
  00d8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00d95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9a	51		 push	 ecx
  00d9b	0f 57 c0	 xorps	 xmm0, xmm0
  00d9e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00da3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00da8	83 c4 08	 add	 esp, 8

; 1929 :         ImGui::SliderFloat("Z", &f2, 0.0f, 5.0f);

  00dab	51		 push	 ecx
  00dac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00db4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db9	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00dbe	51		 push	 ecx
  00dbf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  00dc7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dcc	51		 push	 ecx
  00dcd	0f 57 c0	 xorps	 xmm0, xmm0
  00dd0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dd5	68 00 00 00 00	 push	 OFFSET ?f2@?BP@??ShowDemoWindowLayout@@YAXXZ@4MA
  00dda	68 00 00 00 00	 push	 OFFSET ??_C@_01POHCFINO@Z@
  00ddf	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00de4	83 c4 18	 add	 esp, 24			; 00000018H

; 1930 :         ImGui::PopItemWidth();

  00de7	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 1931 : 
; 1932 :         ImGui::PushItemWidth(80);

  00dec	51		 push	 ecx
  00ded	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  00df5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dfa	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  00dff	83 c4 04	 add	 esp, 4

; 1933 :         ImGui::Text("Lists:");

  00e02	68 00 00 00 00	 push	 OFFSET ??_C@_06OHPCMELK@Lists?3@
  00e07	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00e0c	83 c4 04	 add	 esp, 4

; 1934 :         static int selection[4] = { 0, 1, 2, 3 };
; 1935 :         for (int i = 0; i < 4; i++)

  00e0f	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$119[ebp], 0
  00e19	eb 0f		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  00e1b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$119[ebp]
  00e21	83 c0 01	 add	 eax, 1
  00e24	89 85 40 ff ff
	ff		 mov	 DWORD PTR _i$119[ebp], eax
$LN13@ShowDemoWi:
  00e2a	83 bd 40 ff ff
	ff 04		 cmp	 DWORD PTR _i$119[ebp], 4
  00e31	7d 64		 jge	 SHORT $LN12@ShowDemoWi

; 1936 :         {
; 1937 :             if (i > 0) ImGui::SameLine();

  00e33	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _i$119[ebp], 0
  00e3a	7e 1f		 jle	 SHORT $LN60@ShowDemoWi
  00e3c	51		 push	 ecx
  00e3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00e45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e4a	51		 push	 ecx
  00e4b	0f 57 c0	 xorps	 xmm0, xmm0
  00e4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e53	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00e58	83 c4 08	 add	 esp, 8
$LN60@ShowDemoWi:

; 1938 :             ImGui::PushID(i);

  00e5b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$119[ebp]
  00e61	50		 push	 eax
  00e62	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  00e67	83 c4 04	 add	 esp, 4

; 1939 :             ImGui::ListBox("", &selection[i], items, IM_ARRAYSIZE(items));

  00e6a	6a ff		 push	 -1
  00e6c	6a 04		 push	 4
  00e6e	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _items$120[ebp]
  00e74	50		 push	 eax
  00e75	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _i$119[ebp]
  00e7b	8d 14 8d 00 00
	00 00		 lea	 edx, DWORD PTR ?selection@?BP@??ShowDemoWindowLayout@@YAXXZ@4PAHA[ecx*4]
  00e82	52		 push	 edx
  00e83	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00e88	e8 00 00 00 00	 call	 ?ListBox@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::ListBox
  00e8d	83 c4 14	 add	 esp, 20			; 00000014H

; 1940 :             ImGui::PopID();

  00e90	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1941 :             //if (ImGui::IsItemHovered()) ImGui::SetTooltip("ListBox %d hovered", i);
; 1942 :         }

  00e95	eb 84		 jmp	 SHORT $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 1943 :         ImGui::PopItemWidth();

  00e97	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 1944 : 
; 1945 :         // Dummy
; 1946 :         ImVec2 button_sz(40, 40);

  00e9c	51		 push	 ecx
  00e9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42200000
  00ea5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eaa	51		 push	 ecx
  00eab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42200000
  00eb3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb8	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _button_sz$118[ebp]
  00ebe	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 1947 :         ImGui::Button("A", button_sz); ImGui::SameLine();

  00ec3	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _button_sz$118[ebp]
  00ec9	50		 push	 eax
  00eca	68 00 00 00 00	 push	 OFFSET ??_C@_01FHEEJDEE@A@
  00ecf	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00ed4	83 c4 08	 add	 esp, 8
  00ed7	51		 push	 ecx
  00ed8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ee0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee5	51		 push	 ecx
  00ee6	0f 57 c0	 xorps	 xmm0, xmm0
  00ee9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eee	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00ef3	83 c4 08	 add	 esp, 8

; 1948 :         ImGui::Dummy(button_sz); ImGui::SameLine();

  00ef6	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _button_sz$118[ebp]
  00efc	50		 push	 eax
  00efd	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXABUImVec2@@@Z ; ImGui::Dummy
  00f02	83 c4 04	 add	 esp, 4
  00f05	51		 push	 ecx
  00f06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00f0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f13	51		 push	 ecx
  00f14	0f 57 c0	 xorps	 xmm0, xmm0
  00f17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f1c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00f21	83 c4 08	 add	 esp, 8

; 1949 :         ImGui::Button("B", button_sz);

  00f24	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _button_sz$118[ebp]
  00f2a	50		 push	 eax
  00f2b	68 00 00 00 00	 push	 OFFSET ??_C@_01HMGJMAIH@B@
  00f30	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00f35	83 c4 08	 add	 esp, 8

; 1950 : 
; 1951 :         // Manually wrapping (we should eventually provide this as an automatic layout feature, but for now you can do it manually)
; 1952 :         ImGui::Text("Manually wrapping:");

  00f38	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CAEJLMBE@Manually?5wrapping?3@
  00f3d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00f42	83 c4 04	 add	 esp, 4

; 1953 :         ImGuiStyle& style = ImGui::GetStyle();

  00f45	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  00f4a	89 85 24 ff ff
	ff		 mov	 DWORD PTR _style$117[ebp], eax

; 1954 :         int buttons_count = 20;

  00f50	c7 85 18 ff ff
	ff 14 00 00 00	 mov	 DWORD PTR _buttons_count$116[ebp], 20 ; 00000014H

; 1955 :         float window_visible_x2 = ImGui::GetWindowPos().x + ImGui::GetWindowContentRegionMax().x;

  00f5a	8d 85 f4 f7 ff
	ff		 lea	 eax, DWORD PTR $T57[ebp]
  00f60	50		 push	 eax
  00f61	e8 00 00 00 00	 call	 ?GetWindowPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowPos
  00f66	83 c4 04	 add	 esp, 4
  00f69	8b f0		 mov	 esi, eax
  00f6b	8d 8d e4 f7 ff
	ff		 lea	 ecx, DWORD PTR $T56[ebp]
  00f71	51		 push	 ecx
  00f72	e8 00 00 00 00	 call	 ?GetWindowContentRegionMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowContentRegionMax
  00f77	83 c4 04	 add	 esp, 4
  00f7a	f3 0f 10 06	 movss	 xmm0, DWORD PTR [esi]
  00f7e	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  00f82	f3 0f 11 85 0c
	ff ff ff	 movss	 DWORD PTR _window_visible_x2$115[ebp], xmm0

; 1956 :         for (int n = 0; n < buttons_count; n++)

  00f8a	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$114[ebp], 0
  00f94	eb 0f		 jmp	 SHORT $LN16@ShowDemoWi
$LN14@ShowDemoWi:
  00f96	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _n$114[ebp]
  00f9c	83 c0 01	 add	 eax, 1
  00f9f	89 85 00 ff ff
	ff		 mov	 DWORD PTR _n$114[ebp], eax
$LN16@ShowDemoWi:
  00fa5	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _n$114[ebp]
  00fab	3b 85 18 ff ff
	ff		 cmp	 eax, DWORD PTR _buttons_count$116[ebp]
  00fb1	0f 8d ac 00 00
	00		 jge	 $LN15@ShowDemoWi

; 1957 :         {
; 1958 :             ImGui::PushID(n);

  00fb7	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _n$114[ebp]
  00fbd	50		 push	 eax
  00fbe	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  00fc3	83 c4 04	 add	 esp, 4

; 1959 :             ImGui::Button("Box", button_sz);

  00fc6	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _button_sz$118[ebp]
  00fcc	50		 push	 eax
  00fcd	68 00 00 00 00	 push	 OFFSET ??_C@_03ELMLMPLG@Box@
  00fd2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00fd7	83 c4 08	 add	 esp, 8

; 1960 :             float last_button_x2 = ImGui::GetItemRectMax().x;

  00fda	8d 85 d4 f7 ff
	ff		 lea	 eax, DWORD PTR $T55[ebp]
  00fe0	50		 push	 eax
  00fe1	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  00fe6	83 c4 04	 add	 esp, 4
  00fe9	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  00fed	f3 0f 11 85 f4
	fe ff ff	 movss	 DWORD PTR _last_button_x2$113[ebp], xmm0

; 1961 :             float next_button_x2 = last_button_x2 + style.ItemSpacing.x + button_sz.x; // Expected position if next button was on same line

  00ff5	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _style$117[ebp]
  00ffb	f3 0f 10 85 f4
	fe ff ff	 movss	 xmm0, DWORD PTR _last_button_x2$113[ebp]
  01003	f3 0f 58 40 48	 addss	 xmm0, DWORD PTR [eax+72]
  01008	f3 0f 58 85 30
	ff ff ff	 addss	 xmm0, DWORD PTR _button_sz$118[ebp]
  01010	f3 0f 11 85 e8
	fe ff ff	 movss	 DWORD PTR _next_button_x2$112[ebp], xmm0

; 1962 :             if (n + 1 < buttons_count && next_button_x2 < window_visible_x2)

  01018	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR _n$114[ebp]
  0101e	83 c0 01	 add	 eax, 1
  01021	3b 85 18 ff ff
	ff		 cmp	 eax, DWORD PTR _buttons_count$116[ebp]
  01027	7d 30		 jge	 SHORT $LN61@ShowDemoWi
  01029	f3 0f 10 85 0c
	ff ff ff	 movss	 xmm0, DWORD PTR _window_visible_x2$115[ebp]
  01031	0f 2f 85 e8 fe
	ff ff		 comiss	 xmm0, DWORD PTR _next_button_x2$112[ebp]
  01038	76 1f		 jbe	 SHORT $LN61@ShowDemoWi

; 1963 :                 ImGui::SameLine();

  0103a	51		 push	 ecx
  0103b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01048	51		 push	 ecx
  01049	0f 57 c0	 xorps	 xmm0, xmm0
  0104c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01051	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01056	83 c4 08	 add	 esp, 8
$LN61@ShowDemoWi:

; 1964 :             ImGui::PopID();

  01059	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1965 :         }

  0105e	e9 33 ff ff ff	 jmp	 $LN14@ShowDemoWi
$LN15@ShowDemoWi:

; 1966 : 
; 1967 :         ImGui::TreePop();

  01063	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN59@ShowDemoWi:

; 1968 :     }
; 1969 : 
; 1970 :     if (ImGui::TreeNode("Tabs"))

  01068	68 00 00 00 00	 push	 OFFSET ??_C@_04DIJFMEPE@Tabs@
  0106d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01072	83 c4 04	 add	 esp, 4
  01075	0f b6 c0	 movzx	 eax, al
  01078	85 c0		 test	 eax, eax
  0107a	0f 84 0b 03 00
	00		 je	 $LN62@ShowDemoWi

; 1971 :     {
; 1972 :         if (ImGui::TreeNode("Basic"))

  01080	68 00 00 00 00	 push	 OFFSET ??_C@_05NIKDGMHP@Basic@
  01085	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0108a	83 c4 04	 add	 esp, 4
  0108d	0f b6 c0	 movzx	 eax, al
  01090	85 c0		 test	 eax, eax
  01092	0f 84 b6 00 00
	00		 je	 $LN63@ShowDemoWi

; 1973 :         {
; 1974 :             ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_None;

  01098	c7 85 dc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _tab_bar_flags$111[ebp], 0

; 1975 :             if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))

  010a2	8b 85 dc fe ff
	ff		 mov	 eax, DWORD PTR _tab_bar_flags$111[ebp]
  010a8	50		 push	 eax
  010a9	68 00 00 00 00	 push	 OFFSET ??_C@_08BHPFJKBJ@MyTabBar@
  010ae	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  010b3	83 c4 08	 add	 esp, 8
  010b6	0f b6 c8	 movzx	 ecx, al
  010b9	85 c9		 test	 ecx, ecx
  010bb	0f 84 83 00 00
	00		 je	 $LN64@ShowDemoWi

; 1976 :             {
; 1977 :                 if (ImGui::BeginTabItem("Avocado"))

  010c1	6a 00		 push	 0
  010c3	6a 00		 push	 0
  010c5	68 00 00 00 00	 push	 OFFSET ??_C@_07PJEDDDBE@Avocado@
  010ca	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  010cf	83 c4 0c	 add	 esp, 12			; 0000000cH
  010d2	0f b6 c0	 movzx	 eax, al
  010d5	85 c0		 test	 eax, eax
  010d7	74 12		 je	 SHORT $LN65@ShowDemoWi

; 1978 :                 {
; 1979 :                     ImGui::Text("This is the Avocado tab!\nblah blah blah blah blah");

  010d9	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@GCKNABCK@This?5is?5the?5Avocado?5tab?$CB?6blah?5b@
  010de	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  010e3	83 c4 04	 add	 esp, 4

; 1980 :                     ImGui::EndTabItem();

  010e6	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN65@ShowDemoWi:

; 1981 :                 }
; 1982 :                 if (ImGui::BeginTabItem("Broccoli"))

  010eb	6a 00		 push	 0
  010ed	6a 00		 push	 0
  010ef	68 00 00 00 00	 push	 OFFSET ??_C@_08LMFMBPKH@Broccoli@
  010f4	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  010f9	83 c4 0c	 add	 esp, 12			; 0000000cH
  010fc	0f b6 c0	 movzx	 eax, al
  010ff	85 c0		 test	 eax, eax
  01101	74 12		 je	 SHORT $LN66@ShowDemoWi

; 1983 :                 {
; 1984 :                     ImGui::Text("This is the Broccoli tab!\nblah blah blah blah blah");

  01103	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@MJGBNDMM@This?5is?5the?5Broccoli?5tab?$CB?6blah?5@
  01108	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0110d	83 c4 04	 add	 esp, 4

; 1985 :                     ImGui::EndTabItem();

  01110	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN66@ShowDemoWi:

; 1986 :                 }
; 1987 :                 if (ImGui::BeginTabItem("Cucumber"))

  01115	6a 00		 push	 0
  01117	6a 00		 push	 0
  01119	68 00 00 00 00	 push	 OFFSET ??_C@_08FIHABPKG@Cucumber@
  0111e	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  01123	83 c4 0c	 add	 esp, 12			; 0000000cH
  01126	0f b6 c0	 movzx	 eax, al
  01129	85 c0		 test	 eax, eax
  0112b	74 12		 je	 SHORT $LN67@ShowDemoWi

; 1988 :                 {
; 1989 :                     ImGui::Text("This is the Cucumber tab!\nblah blah blah blah blah");

  0112d	68 00 00 00 00	 push	 OFFSET ??_C@_0DD@CJPLEJGJ@This?5is?5the?5Cucumber?5tab?$CB?6blah?5@
  01132	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01137	83 c4 04	 add	 esp, 4

; 1990 :                     ImGui::EndTabItem();

  0113a	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN67@ShowDemoWi:

; 1991 :                 }
; 1992 :                 ImGui::EndTabBar();

  0113f	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN64@ShowDemoWi:

; 1993 :             }
; 1994 :             ImGui::Separator();

  01144	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1995 :             ImGui::TreePop();

  01149	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN63@ShowDemoWi:

; 1996 :         }
; 1997 : 
; 1998 :         if (ImGui::TreeNode("Advanced & Close Button"))

  0114e	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NAEAKGLC@Advanced?5?$CG?5Close?5Button@
  01153	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01158	83 c4 04	 add	 esp, 4
  0115b	0f b6 c0	 movzx	 eax, al
  0115e	85 c0		 test	 eax, eax
  01160	0f 84 20 02 00
	00		 je	 $LN68@ShowDemoWi

; 1999 :         {
; 2000 :             // Expose a couple of the available flags. In most cases you may just call BeginTabBar() with no flags (0).
; 2001 :             static ImGuiTabBarFlags tab_bar_flags = ImGuiTabBarFlags_Reorderable;
; 2002 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_Reorderable", (unsigned int*)&tab_bar_flags, ImGuiTabBarFlags_Reorderable);

  01166	6a 01		 push	 1
  01168	68 00 00 00 00	 push	 OFFSET ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  0116d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@FKNGBAKI@ImGuiTabBarFlags_Reorderable@
  01172	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  01177	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2003 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_AutoSelectNewTabs", (unsigned int*)&tab_bar_flags, ImGuiTabBarFlags_AutoSelectNewTabs);

  0117a	6a 02		 push	 2
  0117c	68 00 00 00 00	 push	 OFFSET ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  01181	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@CJJDGNCL@ImGuiTabBarFlags_AutoSelectNewT@
  01186	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  0118b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2004 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_TabListPopupButton", (unsigned int*)&tab_bar_flags, ImGuiTabBarFlags_TabListPopupButton);

  0118e	6a 04		 push	 4
  01190	68 00 00 00 00	 push	 OFFSET ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  01195	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ODMHCKNA@ImGuiTabBarFlags_TabListPopupBu@
  0119a	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  0119f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2005 :             ImGui::CheckboxFlags("ImGuiTabBarFlags_NoCloseWithMiddleMouseButton", (unsigned int*)&tab_bar_flags, ImGuiTabBarFlags_NoCloseWithMiddleMouseButton);

  011a2	6a 08		 push	 8
  011a4	68 00 00 00 00	 push	 OFFSET ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  011a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@PEFOKBDP@ImGuiTabBarFlags_NoCloseWithMid@
  011ae	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  011b3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2006 :             if ((tab_bar_flags & ImGuiTabBarFlags_FittingPolicyMask_) == 0)

  011b6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  011bb	25 c0 00 00 00	 and	 eax, 192		; 000000c0H
  011c0	75 0d		 jne	 SHORT $LN69@ShowDemoWi

; 2007 :                 tab_bar_flags |= ImGuiTabBarFlags_FittingPolicyDefault_;

  011c2	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  011c7	83 c8 40	 or	 eax, 64			; 00000040H
  011ca	a3 00 00 00 00	 mov	 DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA, eax
$LN69@ShowDemoWi:

; 2008 :             if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyResizeDown", (unsigned int*)&tab_bar_flags, ImGuiTabBarFlags_FittingPolicyResizeDown))

  011cf	6a 40		 push	 64			; 00000040H
  011d1	68 00 00 00 00	 push	 OFFSET ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  011d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CJ@IIIJDEBN@ImGuiTabBarFlags_FittingPolicyR@
  011db	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  011e0	83 c4 0c	 add	 esp, 12			; 0000000cH
  011e3	0f b6 c0	 movzx	 eax, al
  011e6	85 c0		 test	 eax, eax
  011e8	74 0f		 je	 SHORT $LN70@ShowDemoWi

; 2009 :                 tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyResizeDown);

  011ea	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  011ef	25 7f ff ff ff	 and	 eax, -129		; ffffff7fH
  011f4	a3 00 00 00 00	 mov	 DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA, eax
$LN70@ShowDemoWi:

; 2010 :             if (ImGui::CheckboxFlags("ImGuiTabBarFlags_FittingPolicyScroll", (unsigned int*)&tab_bar_flags, ImGuiTabBarFlags_FittingPolicyScroll))

  011f9	68 80 00 00 00	 push	 128			; 00000080H
  011fe	68 00 00 00 00	 push	 OFFSET ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  01203	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@NLLNBILH@ImGuiTabBarFlags_FittingPolicyS@
  01208	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  0120d	83 c4 0c	 add	 esp, 12			; 0000000cH
  01210	0f b6 c0	 movzx	 eax, al
  01213	85 c0		 test	 eax, eax
  01215	74 0d		 je	 SHORT $LN71@ShowDemoWi

; 2011 :                 tab_bar_flags &= ~(ImGuiTabBarFlags_FittingPolicyMask_ ^ ImGuiTabBarFlags_FittingPolicyScroll);

  01217	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  0121c	83 e0 bf	 and	 eax, -65		; ffffffbfH
  0121f	a3 00 00 00 00	 mov	 DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA, eax
$LN71@ShowDemoWi:

; 2012 : 
; 2013 :             // Tab Bar
; 2014 :             const char* names[4] = { "Artichoke", "Beetroot", "Celery", "Daikon" };

  01224	c7 85 c4 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$110[ebp], OFFSET ??_C@_09JNADJLBG@Artichoke@
  0122e	c7 85 c8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$110[ebp+4], OFFSET ??_C@_08NACLCGIP@Beetroot@
  01238	c7 85 cc fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$110[ebp+8], OFFSET ??_C@_06LGPLDCHA@Celery@
  01242	c7 85 d0 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$110[ebp+12], OFFSET ??_C@_06NBIPACBO@Daikon@

; 2015 :             static bool opened[4] = { true, true, true, true }; // Persistent user state
; 2016 :             for (int n = 0; n < IM_ARRAYSIZE(opened); n++)

  0124c	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$109[ebp], 0
  01256	eb 0f		 jmp	 SHORT $LN19@ShowDemoWi
$LN17@ShowDemoWi:
  01258	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _n$109[ebp]
  0125e	83 c0 01	 add	 eax, 1
  01261	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _n$109[ebp], eax
$LN19@ShowDemoWi:
  01267	83 bd b8 fe ff
	ff 04		 cmp	 DWORD PTR _n$109[ebp], 4
  0126e	7d 4c		 jge	 SHORT $LN18@ShowDemoWi

; 2017 :             {
; 2018 :                 if (n > 0) { ImGui::SameLine(); }

  01270	83 bd b8 fe ff
	ff 00		 cmp	 DWORD PTR _n$109[ebp], 0
  01277	7e 1f		 jle	 SHORT $LN72@ShowDemoWi
  01279	51		 push	 ecx
  0127a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01282	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01287	51		 push	 ecx
  01288	0f 57 c0	 xorps	 xmm0, xmm0
  0128b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01290	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01295	83 c4 08	 add	 esp, 8
$LN72@ShowDemoWi:

; 2019 :                 ImGui::Checkbox(names[n], &opened[n]);

  01298	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _n$109[ebp]
  0129e	05 00 00 00 00	 add	 eax, OFFSET ?opened@?DM@??ShowDemoWindowLayout@@YAXXZ@4PA_NA
  012a3	50		 push	 eax
  012a4	8b 8d b8 fe ff
	ff		 mov	 ecx, DWORD PTR _n$109[ebp]
  012aa	8b 94 8d c4 fe
	ff ff		 mov	 edx, DWORD PTR _names$110[ebp+ecx*4]
  012b1	52		 push	 edx
  012b2	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  012b7	83 c4 08	 add	 esp, 8

; 2020 :             }

  012ba	eb 9c		 jmp	 SHORT $LN17@ShowDemoWi
$LN18@ShowDemoWi:

; 2021 : 
; 2022 :             // Passing a bool* to BeginTabItem() is similar to passing one to Begin(): the underlying bool will be set to false when the tab is closed.
; 2023 :             if (ImGui::BeginTabBar("MyTabBar", tab_bar_flags))

  012bc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?tab_bar_flags@?DM@??ShowDemoWindowLayout@@YAXXZ@4HA
  012c1	50		 push	 eax
  012c2	68 00 00 00 00	 push	 OFFSET ??_C@_08BHPFJKBJ@MyTabBar@
  012c7	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  012cc	83 c4 08	 add	 esp, 8
  012cf	0f b6 c8	 movzx	 ecx, al
  012d2	85 c9		 test	 ecx, ecx
  012d4	0f 84 a2 00 00
	00		 je	 $LN73@ShowDemoWi

; 2024 :             {
; 2025 :                 for (int n = 0; n < IM_ARRAYSIZE(opened); n++)

  012da	c7 85 ac fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$108[ebp], 0
  012e4	eb 0f		 jmp	 SHORT $LN22@ShowDemoWi
$LN20@ShowDemoWi:
  012e6	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _n$108[ebp]
  012ec	83 c0 01	 add	 eax, 1
  012ef	89 85 ac fe ff
	ff		 mov	 DWORD PTR _n$108[ebp], eax
$LN22@ShowDemoWi:
  012f5	83 bd ac fe ff
	ff 04		 cmp	 DWORD PTR _n$108[ebp], 4
  012fc	7d 79		 jge	 SHORT $LN21@ShowDemoWi

; 2026 :                     if (opened[n] && ImGui::BeginTabItem(names[n], &opened[n], ImGuiTabItemFlags_None))

  012fe	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _n$108[ebp]
  01304	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?opened@?DM@??ShowDemoWindowLayout@@YAXXZ@4PA_NA[eax]
  0130b	85 c9		 test	 ecx, ecx
  0130d	74 63		 je	 SHORT $LN74@ShowDemoWi
  0130f	6a 00		 push	 0
  01311	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _n$108[ebp]
  01317	05 00 00 00 00	 add	 eax, OFFSET ?opened@?DM@??ShowDemoWindowLayout@@YAXXZ@4PA_NA
  0131c	50		 push	 eax
  0131d	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _n$108[ebp]
  01323	8b 94 8d c4 fe
	ff ff		 mov	 edx, DWORD PTR _names$110[ebp+ecx*4]
  0132a	52		 push	 edx
  0132b	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  01330	83 c4 0c	 add	 esp, 12			; 0000000cH
  01333	0f b6 c0	 movzx	 eax, al
  01336	85 c0		 test	 eax, eax
  01338	74 38		 je	 SHORT $LN74@ShowDemoWi

; 2027 :                     {
; 2028 :                         ImGui::Text("This is the %s tab!", names[n]);

  0133a	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _n$108[ebp]
  01340	8b 8c 85 c4 fe
	ff ff		 mov	 ecx, DWORD PTR _names$110[ebp+eax*4]
  01347	51		 push	 ecx
  01348	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HMOLENGG@This?5is?5the?5?$CFs?5tab?$CB@
  0134d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01352	83 c4 08	 add	 esp, 8

; 2029 :                         if (n & 1)

  01355	8b 85 ac fe ff
	ff		 mov	 eax, DWORD PTR _n$108[ebp]
  0135b	83 e0 01	 and	 eax, 1
  0135e	74 0d		 je	 SHORT $LN75@ShowDemoWi

; 2030 :                             ImGui::Text("I am an odd tab.");

  01360	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PAPJGNOM@I?5am?5an?5odd?5tab?4@
  01365	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0136a	83 c4 04	 add	 esp, 4
$LN75@ShowDemoWi:

; 2031 :                         ImGui::EndTabItem();

  0136d	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN74@ShowDemoWi:

; 2032 :                     }

  01372	e9 6f ff ff ff	 jmp	 $LN20@ShowDemoWi
$LN21@ShowDemoWi:

; 2033 :                 ImGui::EndTabBar();

  01377	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN73@ShowDemoWi:

; 2034 :             }
; 2035 :             ImGui::Separator();

  0137c	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2036 :             ImGui::TreePop();

  01381	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN68@ShowDemoWi:

; 2037 :         }
; 2038 :         ImGui::TreePop();

  01386	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN62@ShowDemoWi:

; 2039 :     }
; 2040 : 
; 2041 :     if (ImGui::TreeNode("Groups"))

  0138b	68 00 00 00 00	 push	 OFFSET ??_C@_06LCLFDFOL@Groups@
  01390	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01395	83 c4 04	 add	 esp, 4
  01398	0f b6 c0	 movzx	 eax, al
  0139b	85 c0		 test	 eax, eax
  0139d	0f 84 9f 03 00
	00		 je	 $LN76@ShowDemoWi

; 2042 :     {
; 2043 :         HelpMarker("BeginGroup() basically locks the horizontal position for new line. EndGroup() bundles the whole group so that you can use \"item\" functions such as IsItemHovered()/IsItemActive() or SameLine() etc. on the whole group.");

  013a3	68 00 00 00 00	 push	 OFFSET ??_C@_0NJ@BBEJCFPH@BeginGroup?$CI?$CJ?5basically?5locks?5th@
  013a8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  013ad	83 c4 04	 add	 esp, 4

; 2044 :         ImGui::BeginGroup();

  013b0	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2045 :         {
; 2046 :             ImGui::BeginGroup();

  013b5	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2047 :             ImGui::Button("AAA");

  013ba	51		 push	 ecx
  013bb	0f 57 c0	 xorps	 xmm0, xmm0
  013be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013c3	51		 push	 ecx
  013c4	0f 57 c0	 xorps	 xmm0, xmm0
  013c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013cc	8d 8d c4 f7 ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  013d2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  013d7	50		 push	 eax
  013d8	68 00 00 00 00	 push	 OFFSET ??_C@_03GFCJIGAI@AAA@
  013dd	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  013e2	83 c4 08	 add	 esp, 8

; 2048 :             ImGui::SameLine();

  013e5	51		 push	 ecx
  013e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  013ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013f3	51		 push	 ecx
  013f4	0f 57 c0	 xorps	 xmm0, xmm0
  013f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013fc	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01401	83 c4 08	 add	 esp, 8

; 2049 :             ImGui::Button("BBB");

  01404	51		 push	 ecx
  01405	0f 57 c0	 xorps	 xmm0, xmm0
  01408	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0140d	51		 push	 ecx
  0140e	0f 57 c0	 xorps	 xmm0, xmm0
  01411	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01416	8d 8d b4 f7 ff
	ff		 lea	 ecx, DWORD PTR $T53[ebp]
  0141c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01421	50		 push	 eax
  01422	68 00 00 00 00	 push	 OFFSET ??_C@_03FOPHMEHM@BBB@
  01427	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0142c	83 c4 08	 add	 esp, 8

; 2050 :             ImGui::SameLine();

  0142f	51		 push	 ecx
  01430	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01438	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0143d	51		 push	 ecx
  0143e	0f 57 c0	 xorps	 xmm0, xmm0
  01441	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01446	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0144b	83 c4 08	 add	 esp, 8

; 2051 :             ImGui::BeginGroup();

  0144e	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2052 :             ImGui::Button("CCC");

  01453	51		 push	 ecx
  01454	0f 57 c0	 xorps	 xmm0, xmm0
  01457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0145c	51		 push	 ecx
  0145d	0f 57 c0	 xorps	 xmm0, xmm0
  01460	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01465	8d 8d a4 f7 ff
	ff		 lea	 ecx, DWORD PTR $T52[ebp]
  0146b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01470	50		 push	 eax
  01471	68 00 00 00 00	 push	 OFFSET ??_C@_03POJCPIGP@CCC@
  01476	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0147b	83 c4 08	 add	 esp, 8

; 2053 :             ImGui::Button("DDD");

  0147e	51		 push	 ecx
  0147f	0f 57 c0	 xorps	 xmm0, xmm0
  01482	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01487	51		 push	 ecx
  01488	0f 57 c0	 xorps	 xmm0, xmm0
  0148b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01490	8d 8d 94 f7 ff
	ff		 lea	 ecx, DWORD PTR $T51[ebp]
  01496	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0149b	50		 push	 eax
  0149c	68 00 00 00 00	 push	 OFFSET ??_C@_03CJELEAJE@DDD@
  014a1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  014a6	83 c4 08	 add	 esp, 8

; 2054 :             ImGui::EndGroup();

  014a9	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2055 :             ImGui::SameLine();

  014ae	51		 push	 ecx
  014af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  014b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014bc	51		 push	 ecx
  014bd	0f 57 c0	 xorps	 xmm0, xmm0
  014c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014c5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  014ca	83 c4 08	 add	 esp, 8

; 2056 :             ImGui::Button("EEE");

  014cd	51		 push	 ecx
  014ce	0f 57 c0	 xorps	 xmm0, xmm0
  014d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014d6	51		 push	 ecx
  014d7	0f 57 c0	 xorps	 xmm0, xmm0
  014da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014df	8d 8d 84 f7 ff
	ff		 lea	 ecx, DWORD PTR $T50[ebp]
  014e5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  014ea	50		 push	 eax
  014eb	68 00 00 00 00	 push	 OFFSET ??_C@_03IJCOHMIH@EEE@
  014f0	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  014f5	83 c4 08	 add	 esp, 8

; 2057 :             ImGui::EndGroup();

  014f8	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2058 :             if (ImGui::IsItemHovered())

  014fd	6a 00		 push	 0
  014ff	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  01504	83 c4 04	 add	 esp, 4
  01507	0f b6 c0	 movzx	 eax, al
  0150a	85 c0		 test	 eax, eax
  0150c	74 0d		 je	 SHORT $LN77@ShowDemoWi

; 2059 :                 ImGui::SetTooltip("First group hovered");

  0150e	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GCGPENCF@First?5group?5hovered@
  01513	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPBDZZ ; ImGui::SetTooltip
  01518	83 c4 04	 add	 esp, 4
$LN77@ShowDemoWi:

; 2060 :         }
; 2061 :         // Capture the group size and create widgets using the same size
; 2062 :         ImVec2 size = ImGui::GetItemRectSize();

  0151b	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _size$107[ebp]
  01521	50		 push	 eax
  01522	e8 00 00 00 00	 call	 ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectSize
  01527	83 c4 04	 add	 esp, 4

; 2063 :         const float values[5] = { 0.5f, 0.20f, 0.80f, 0.60f, 0.25f };

  0152a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01532	f3 0f 11 85 80
	fe ff ff	 movss	 DWORD PTR _values$106[ebp], xmm0
  0153a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01542	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _values$106[ebp+4], xmm0
  0154a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  01552	f3 0f 11 85 88
	fe ff ff	 movss	 DWORD PTR _values$106[ebp+8], xmm0
  0155a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  01562	f3 0f 11 85 8c
	fe ff ff	 movss	 DWORD PTR _values$106[ebp+12], xmm0
  0156a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  01572	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _values$106[ebp+16], xmm0

; 2064 :         ImGui::PlotHistogram("##values", values, IM_ARRAYSIZE(values), 0, NULL, 0.0f, 1.0f, size);

  0157a	6a 04		 push	 4
  0157c	8b 85 a0 fe ff
	ff		 mov	 eax, DWORD PTR _size$107[ebp+4]
  01582	50		 push	 eax
  01583	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _size$107[ebp]
  01589	51		 push	 ecx
  0158a	51		 push	 ecx
  0158b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01593	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01598	51		 push	 ecx
  01599	0f 57 c0	 xorps	 xmm0, xmm0
  0159c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015a1	6a 00		 push	 0
  015a3	6a 00		 push	 0
  015a5	6a 05		 push	 5
  015a7	8d 95 80 fe ff
	ff		 lea	 edx, DWORD PTR _values$106[ebp]
  015ad	52		 push	 edx
  015ae	68 00 00 00 00	 push	 OFFSET ??_C@_08NDEOOAHA@?$CD?$CDvalues@
  015b3	e8 00 00 00 00	 call	 ?PlotHistogram@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z ; ImGui::PlotHistogram
  015b8	83 c4 28	 add	 esp, 40			; 00000028H

; 2065 : 
; 2066 :         ImGui::Button("ACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x)*0.5f, size.y));

  015bb	51		 push	 ecx
  015bc	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _size$107[ebp+4]
  015c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015c9	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  015ce	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _size$107[ebp]
  015d6	f3 0f 5c 40 48	 subss	 xmm0, DWORD PTR [eax+72]
  015db	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  015e3	51		 push	 ecx
  015e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015e9	8d 8d 74 f7 ff
	ff		 lea	 ecx, DWORD PTR $T49[ebp]
  015ef	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  015f4	50		 push	 eax
  015f5	68 00 00 00 00	 push	 OFFSET ??_C@_06DHJAPAEE@ACTION@
  015fa	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  015ff	83 c4 08	 add	 esp, 8

; 2067 :         ImGui::SameLine();

  01602	51		 push	 ecx
  01603	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0160b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01610	51		 push	 ecx
  01611	0f 57 c0	 xorps	 xmm0, xmm0
  01614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01619	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0161e	83 c4 08	 add	 esp, 8

; 2068 :         ImGui::Button("REACTION", ImVec2((size.x - ImGui::GetStyle().ItemSpacing.x)*0.5f, size.y));

  01621	51		 push	 ecx
  01622	f3 0f 10 85 a0
	fe ff ff	 movss	 xmm0, DWORD PTR _size$107[ebp+4]
  0162a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0162f	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  01634	f3 0f 10 85 9c
	fe ff ff	 movss	 xmm0, DWORD PTR _size$107[ebp]
  0163c	f3 0f 5c 40 48	 subss	 xmm0, DWORD PTR [eax+72]
  01641	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01649	51		 push	 ecx
  0164a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0164f	8d 8d 64 f7 ff
	ff		 lea	 ecx, DWORD PTR $T48[ebp]
  01655	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0165a	50		 push	 eax
  0165b	68 00 00 00 00	 push	 OFFSET ??_C@_08HBCMJOON@REACTION@
  01660	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01665	83 c4 08	 add	 esp, 8

; 2069 :         ImGui::EndGroup();

  01668	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2070 :         ImGui::SameLine();

  0166d	51		 push	 ecx
  0166e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0167b	51		 push	 ecx
  0167c	0f 57 c0	 xorps	 xmm0, xmm0
  0167f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01684	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01689	83 c4 08	 add	 esp, 8

; 2071 : 
; 2072 :         ImGui::Button("LEVERAGE\nBUZZWORD", size);

  0168c	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _size$107[ebp]
  01692	50		 push	 eax
  01693	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NCAPIIPH@LEVERAGE?6BUZZWORD@
  01698	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0169d	83 c4 08	 add	 esp, 8

; 2073 :         ImGui::SameLine();

  016a0	51		 push	 ecx
  016a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  016a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ae	51		 push	 ecx
  016af	0f 57 c0	 xorps	 xmm0, xmm0
  016b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016b7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  016bc	83 c4 08	 add	 esp, 8

; 2074 : 
; 2075 :         if (ImGui::ListBoxHeader("List", size))

  016bf	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _size$107[ebp]
  016c5	50		 push	 eax
  016c6	68 00 00 00 00	 push	 OFFSET ??_C@_04PPBEGPNI@List@
  016cb	e8 00 00 00 00	 call	 ?ListBoxHeader@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::ListBoxHeader
  016d0	83 c4 08	 add	 esp, 8
  016d3	0f b6 c8	 movzx	 ecx, al
  016d6	85 c9		 test	 ecx, ecx
  016d8	74 63		 je	 SHORT $LN78@ShowDemoWi

; 2076 :         {
; 2077 :             ImGui::Selectable("Selected", true);

  016da	51		 push	 ecx
  016db	0f 57 c0	 xorps	 xmm0, xmm0
  016de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016e3	51		 push	 ecx
  016e4	0f 57 c0	 xorps	 xmm0, xmm0
  016e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ec	8d 8d 54 f7 ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  016f2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  016f7	50		 push	 eax
  016f8	6a 00		 push	 0
  016fa	6a 01		 push	 1
  016fc	68 00 00 00 00	 push	 OFFSET ??_C@_08KLEPBNHL@Selected@
  01701	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  01706	83 c4 10	 add	 esp, 16			; 00000010H

; 2078 :             ImGui::Selectable("Not Selected", false);

  01709	51		 push	 ecx
  0170a	0f 57 c0	 xorps	 xmm0, xmm0
  0170d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01712	51		 push	 ecx
  01713	0f 57 c0	 xorps	 xmm0, xmm0
  01716	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0171b	8d 8d 44 f7 ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  01721	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01726	50		 push	 eax
  01727	6a 00		 push	 0
  01729	6a 00		 push	 0
  0172b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@FODJADJE@Not?5Selected@
  01730	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  01735	83 c4 10	 add	 esp, 16			; 00000010H

; 2079 :             ImGui::ListBoxFooter();

  01738	e8 00 00 00 00	 call	 ?ListBoxFooter@ImGui@@YAXXZ ; ImGui::ListBoxFooter
$LN78@ShowDemoWi:

; 2080 :         }
; 2081 : 
; 2082 :         ImGui::TreePop();

  0173d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN76@ShowDemoWi:

; 2083 :     }
; 2084 : 
; 2085 :     if (ImGui::TreeNode("Text Baseline Alignment"))

  01742	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@DMCNFLHM@Text?5Baseline?5Alignment@
  01747	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0174c	83 c4 04	 add	 esp, 4
  0174f	0f b6 c0	 movzx	 eax, al
  01752	85 c0		 test	 eax, eax
  01754	0f 84 5d 08 00
	00		 je	 $LN79@ShowDemoWi

; 2086 :     {
; 2087 :         {
; 2088 :             ImGui::BulletText("Text baseline:");

  0175a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FLJDDPLM@Text?5baseline?3@
  0175f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01764	83 c4 04	 add	 esp, 4

; 2089 :             ImGui::SameLine();

  01767	51		 push	 ecx
  01768	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01770	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01775	51		 push	 ecx
  01776	0f 57 c0	 xorps	 xmm0, xmm0
  01779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0177e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01783	83 c4 08	 add	 esp, 8

; 2090 :             HelpMarker("This is testing the vertical alignment that gets applied on text to keep it aligned with widgets. Lines only composed of text or \"small\" widgets fit in less vertical spaces than lines with normal widgets.");

  01786	68 00 00 00 00	 push	 OFFSET ??_C@_0MN@BCGLJGPG@This?5is?5testing?5the?5vertical?5al@
  0178b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01790	83 c4 04	 add	 esp, 4

; 2091 :             ImGui::Indent();

  01793	51		 push	 ecx
  01794	0f 57 c0	 xorps	 xmm0, xmm0
  01797	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0179c	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
  017a1	83 c4 04	 add	 esp, 4

; 2092 : 
; 2093 :             ImGui::Text("KO Blahblah"); ImGui::SameLine();

  017a4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HEDLMKK@KO?5Blahblah@
  017a9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  017ae	83 c4 04	 add	 esp, 4
  017b1	51		 push	 ecx
  017b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  017ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017bf	51		 push	 ecx
  017c0	0f 57 c0	 xorps	 xmm0, xmm0
  017c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017c8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  017cd	83 c4 08	 add	 esp, 8

; 2094 :             ImGui::Button("Some framed item"); ImGui::SameLine();

  017d0	51		 push	 ecx
  017d1	0f 57 c0	 xorps	 xmm0, xmm0
  017d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d9	51		 push	 ecx
  017da	0f 57 c0	 xorps	 xmm0, xmm0
  017dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017e2	8d 8d 34 f7 ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  017e8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  017ed	50		 push	 eax
  017ee	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GBEAAIAC@Some?5framed?5item@
  017f3	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  017f8	83 c4 08	 add	 esp, 8
  017fb	51		 push	 ecx
  017fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01804	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01809	51		 push	 ecx
  0180a	0f 57 c0	 xorps	 xmm0, xmm0
  0180d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01812	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01817	83 c4 08	 add	 esp, 8

; 2095 :             HelpMarker("Baseline of button will look misaligned with text..");

  0181a	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@PMNLFDAO@Baseline?5of?5button?5will?5look?5mi@
  0181f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01824	83 c4 04	 add	 esp, 4

; 2096 : 
; 2097 :             // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
; 2098 :             // Because we don't know what's coming after the Text() statement, we need to move the text baseline down by FramePadding.y
; 2099 :             ImGui::AlignTextToFramePadding();

  01827	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2100 :             ImGui::Text("OK Blahblah"); ImGui::SameLine();

  0182c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LEJMPEFH@OK?5Blahblah@
  01831	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01836	83 c4 04	 add	 esp, 4
  01839	51		 push	 ecx
  0183a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01842	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01847	51		 push	 ecx
  01848	0f 57 c0	 xorps	 xmm0, xmm0
  0184b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01850	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01855	83 c4 08	 add	 esp, 8

; 2101 :             ImGui::Button("Some framed item"); ImGui::SameLine();

  01858	51		 push	 ecx
  01859	0f 57 c0	 xorps	 xmm0, xmm0
  0185c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01861	51		 push	 ecx
  01862	0f 57 c0	 xorps	 xmm0, xmm0
  01865	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186a	8d 8d 24 f7 ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  01870	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01875	50		 push	 eax
  01876	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GBEAAIAC@Some?5framed?5item@
  0187b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01880	83 c4 08	 add	 esp, 8
  01883	51		 push	 ecx
  01884	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0188c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01891	51		 push	 ecx
  01892	0f 57 c0	 xorps	 xmm0, xmm0
  01895	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0189a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0189f	83 c4 08	 add	 esp, 8

; 2102 :             HelpMarker("We call AlignTextToFramePadding() to vertically align the text baseline by +FramePadding.y");

  018a2	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@DLOHNEGO@We?5call?5AlignTextToFramePadding@
  018a7	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  018ac	83 c4 04	 add	 esp, 4

; 2103 : 
; 2104 :             // SmallButton() uses the same vertical padding as Text
; 2105 :             ImGui::Button("TEST##1"); ImGui::SameLine();

  018af	51		 push	 ecx
  018b0	0f 57 c0	 xorps	 xmm0, xmm0
  018b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018b8	51		 push	 ecx
  018b9	0f 57 c0	 xorps	 xmm0, xmm0
  018bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018c1	8d 8d 14 f7 ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  018c7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  018cc	50		 push	 eax
  018cd	68 00 00 00 00	 push	 OFFSET ??_C@_07FENKGLPN@TEST?$CD?$CD1@
  018d2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  018d7	83 c4 08	 add	 esp, 8
  018da	51		 push	 ecx
  018db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  018e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018e8	51		 push	 ecx
  018e9	0f 57 c0	 xorps	 xmm0, xmm0
  018ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  018f1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  018f6	83 c4 08	 add	 esp, 8

; 2106 :             ImGui::Text("TEST"); ImGui::SameLine();

  018f9	68 00 00 00 00	 push	 OFFSET ??_C@_04OIKJMBFP@TEST@
  018fe	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01903	83 c4 04	 add	 esp, 4
  01906	51		 push	 ecx
  01907	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0190f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01914	51		 push	 ecx
  01915	0f 57 c0	 xorps	 xmm0, xmm0
  01918	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0191d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01922	83 c4 08	 add	 esp, 8

; 2107 :             ImGui::SmallButton("TEST##2");

  01925	68 00 00 00 00	 push	 OFFSET ??_C@_07HPPHDIDO@TEST?$CD?$CD2@
  0192a	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  0192f	83 c4 04	 add	 esp, 4

; 2108 : 
; 2109 :             // If your line starts with text, call AlignTextToFramePadding() to align text to upcoming widgets.
; 2110 :             ImGui::AlignTextToFramePadding();

  01932	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2111 :             ImGui::Text("Text aligned to framed item"); ImGui::SameLine();

  01937	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CCJJPIAI@Text?5aligned?5to?5framed?5item@
  0193c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01941	83 c4 04	 add	 esp, 4
  01944	51		 push	 ecx
  01945	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0194d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01952	51		 push	 ecx
  01953	0f 57 c0	 xorps	 xmm0, xmm0
  01956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0195b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01960	83 c4 08	 add	 esp, 8

; 2112 :             ImGui::Button("Item##1"); ImGui::SameLine();

  01963	51		 push	 ecx
  01964	0f 57 c0	 xorps	 xmm0, xmm0
  01967	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0196c	51		 push	 ecx
  0196d	0f 57 c0	 xorps	 xmm0, xmm0
  01970	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01975	8d 8d 04 f7 ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  0197b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01980	50		 push	 eax
  01981	68 00 00 00 00	 push	 OFFSET ??_C@_07MDGCNPKG@Item?$CD?$CD1@
  01986	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0198b	83 c4 08	 add	 esp, 8
  0198e	51		 push	 ecx
  0198f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01997	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0199c	51		 push	 ecx
  0199d	0f 57 c0	 xorps	 xmm0, xmm0
  019a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  019aa	83 c4 08	 add	 esp, 8

; 2113 :             ImGui::Text("Item"); ImGui::SameLine();

  019ad	68 00 00 00 00	 push	 OFFSET ??_C@_04BGCMBJDA@Item@
  019b2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  019b7	83 c4 04	 add	 esp, 4
  019ba	51		 push	 ecx
  019bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  019c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c8	51		 push	 ecx
  019c9	0f 57 c0	 xorps	 xmm0, xmm0
  019cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019d1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  019d6	83 c4 08	 add	 esp, 8

; 2114 :             ImGui::SmallButton("Item##2"); ImGui::SameLine();

  019d9	68 00 00 00 00	 push	 OFFSET ??_C@_07OIEPIMGF@Item?$CD?$CD2@
  019de	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  019e3	83 c4 04	 add	 esp, 4
  019e6	51		 push	 ecx
  019e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  019ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f4	51		 push	 ecx
  019f5	0f 57 c0	 xorps	 xmm0, xmm0
  019f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019fd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01a02	83 c4 08	 add	 esp, 8

; 2115 :             ImGui::Button("Item##3");

  01a05	51		 push	 ecx
  01a06	0f 57 c0	 xorps	 xmm0, xmm0
  01a09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a0e	51		 push	 ecx
  01a0f	0f 57 c0	 xorps	 xmm0, xmm0
  01a12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a17	8d 8d f4 f6 ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  01a1d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01a22	50		 push	 eax
  01a23	68 00 00 00 00	 push	 OFFSET ??_C@_07PBFELNCE@Item?$CD?$CD3@
  01a28	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01a2d	83 c4 08	 add	 esp, 8

; 2116 : 
; 2117 :             ImGui::Unindent();

  01a30	51		 push	 ecx
  01a31	0f 57 c0	 xorps	 xmm0, xmm0
  01a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a39	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
  01a3e	83 c4 04	 add	 esp, 4

; 2118 :         }
; 2119 : 
; 2120 :         ImGui::Spacing();

  01a41	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2121 : 
; 2122 :         {
; 2123 :             ImGui::BulletText("Multi-line text:");

  01a46	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IKLHLLAO@Multi?9line?5text?3@
  01a4b	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01a50	83 c4 04	 add	 esp, 4

; 2124 :             ImGui::Indent();

  01a53	51		 push	 ecx
  01a54	0f 57 c0	 xorps	 xmm0, xmm0
  01a57	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a5c	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
  01a61	83 c4 04	 add	 esp, 4

; 2125 :             ImGui::Text("One\nTwo\nThree"); ImGui::SameLine();

  01a64	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LPFJLNGJ@One?6Two?6Three@
  01a69	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01a6e	83 c4 04	 add	 esp, 4
  01a71	51		 push	 ecx
  01a72	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7f	51		 push	 ecx
  01a80	0f 57 c0	 xorps	 xmm0, xmm0
  01a83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a88	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01a8d	83 c4 08	 add	 esp, 8

; 2126 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01a90	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MEHCJFNA@Hello?6World@
  01a95	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01a9a	83 c4 04	 add	 esp, 4
  01a9d	51		 push	 ecx
  01a9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01aa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aab	51		 push	 ecx
  01aac	0f 57 c0	 xorps	 xmm0, xmm0
  01aaf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ab4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01ab9	83 c4 08	 add	 esp, 8

; 2127 :             ImGui::Text("Banana");

  01abc	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  01ac1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01ac6	83 c4 04	 add	 esp, 4

; 2128 : 
; 2129 :             ImGui::Text("Banana"); ImGui::SameLine();

  01ac9	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  01ace	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01ad3	83 c4 04	 add	 esp, 4
  01ad6	51		 push	 ecx
  01ad7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01adf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ae4	51		 push	 ecx
  01ae5	0f 57 c0	 xorps	 xmm0, xmm0
  01ae8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aed	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01af2	83 c4 08	 add	 esp, 8

; 2130 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01af5	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MEHCJFNA@Hello?6World@
  01afa	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01aff	83 c4 04	 add	 esp, 4
  01b02	51		 push	 ecx
  01b03	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01b0b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b10	51		 push	 ecx
  01b11	0f 57 c0	 xorps	 xmm0, xmm0
  01b14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b19	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01b1e	83 c4 08	 add	 esp, 8

; 2131 :             ImGui::Text("One\nTwo\nThree");

  01b21	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LPFJLNGJ@One?6Two?6Three@
  01b26	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01b2b	83 c4 04	 add	 esp, 4

; 2132 : 
; 2133 :             ImGui::Button("HOP##1"); ImGui::SameLine();

  01b2e	51		 push	 ecx
  01b2f	0f 57 c0	 xorps	 xmm0, xmm0
  01b32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b37	51		 push	 ecx
  01b38	0f 57 c0	 xorps	 xmm0, xmm0
  01b3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b40	8d 8d e4 f6 ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  01b46	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01b4b	50		 push	 eax
  01b4c	68 00 00 00 00	 push	 OFFSET ??_C@_06JNLLJDDG@HOP?$CD?$CD1@
  01b51	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01b56	83 c4 08	 add	 esp, 8
  01b59	51		 push	 ecx
  01b5a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01b62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b67	51		 push	 ecx
  01b68	0f 57 c0	 xorps	 xmm0, xmm0
  01b6b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b70	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01b75	83 c4 08	 add	 esp, 8

; 2134 :             ImGui::Text("Banana"); ImGui::SameLine();

  01b78	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  01b7d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01b82	83 c4 04	 add	 esp, 4
  01b85	51		 push	 ecx
  01b86	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01b8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b93	51		 push	 ecx
  01b94	0f 57 c0	 xorps	 xmm0, xmm0
  01b97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b9c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01ba1	83 c4 08	 add	 esp, 8

; 2135 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01ba4	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MEHCJFNA@Hello?6World@
  01ba9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01bae	83 c4 04	 add	 esp, 4
  01bb1	51		 push	 ecx
  01bb2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01bba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bbf	51		 push	 ecx
  01bc0	0f 57 c0	 xorps	 xmm0, xmm0
  01bc3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bc8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01bcd	83 c4 08	 add	 esp, 8

; 2136 :             ImGui::Text("Banana");

  01bd0	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  01bd5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01bda	83 c4 04	 add	 esp, 4

; 2137 : 
; 2138 :             ImGui::Button("HOP##2"); ImGui::SameLine();

  01bdd	51		 push	 ecx
  01bde	0f 57 c0	 xorps	 xmm0, xmm0
  01be1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01be6	51		 push	 ecx
  01be7	0f 57 c0	 xorps	 xmm0, xmm0
  01bea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bef	8d 8d d4 f6 ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  01bf5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01bfa	50		 push	 eax
  01bfb	68 00 00 00 00	 push	 OFFSET ??_C@_06LGJGMAPF@HOP?$CD?$CD2@
  01c00	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01c05	83 c4 08	 add	 esp, 8
  01c08	51		 push	 ecx
  01c09	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01c11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c16	51		 push	 ecx
  01c17	0f 57 c0	 xorps	 xmm0, xmm0
  01c1a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c1f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01c24	83 c4 08	 add	 esp, 8

; 2139 :             ImGui::Text("Hello\nWorld"); ImGui::SameLine();

  01c27	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MEHCJFNA@Hello?6World@
  01c2c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01c31	83 c4 04	 add	 esp, 4
  01c34	51		 push	 ecx
  01c35	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01c3d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c42	51		 push	 ecx
  01c43	0f 57 c0	 xorps	 xmm0, xmm0
  01c46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c4b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01c50	83 c4 08	 add	 esp, 8

; 2140 :             ImGui::Text("Banana");

  01c53	68 00 00 00 00	 push	 OFFSET ??_C@_06OJJIHNKI@Banana@
  01c58	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01c5d	83 c4 04	 add	 esp, 4

; 2141 :             ImGui::Unindent();

  01c60	51		 push	 ecx
  01c61	0f 57 c0	 xorps	 xmm0, xmm0
  01c64	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c69	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
  01c6e	83 c4 04	 add	 esp, 4

; 2142 :         }
; 2143 : 
; 2144 :         ImGui::Spacing();

  01c71	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2145 : 
; 2146 :         {
; 2147 :             ImGui::BulletText("Misc items:");

  01c76	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OFIEFPON@Misc?5items?3@
  01c7b	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01c80	83 c4 04	 add	 esp, 4

; 2148 :             ImGui::Indent();

  01c83	51		 push	 ecx
  01c84	0f 57 c0	 xorps	 xmm0, xmm0
  01c87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c8c	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
  01c91	83 c4 04	 add	 esp, 4

; 2149 : 
; 2150 :             // SmallButton() sets FramePadding to zero. Text baseline is aligned to match baseline of previous Button
; 2151 :             ImGui::Button("80x80", ImVec2(80, 80));

  01c94	51		 push	 ecx
  01c95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  01c9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ca2	51		 push	 ecx
  01ca3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  01cab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cb0	8d 8d c4 f6 ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  01cb6	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01cbb	50		 push	 eax
  01cbc	68 00 00 00 00	 push	 OFFSET ??_C@_05FMIAGJLC@80x80@
  01cc1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01cc6	83 c4 08	 add	 esp, 8

; 2152 :             ImGui::SameLine();

  01cc9	51		 push	 ecx
  01cca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01cd2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cd7	51		 push	 ecx
  01cd8	0f 57 c0	 xorps	 xmm0, xmm0
  01cdb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce0	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01ce5	83 c4 08	 add	 esp, 8

; 2153 :             ImGui::Button("50x50", ImVec2(50, 50));

  01ce8	51		 push	 ecx
  01ce9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  01cf1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cf6	51		 push	 ecx
  01cf7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  01cff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d04	8d 8d b4 f6 ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  01d0a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01d0f	50		 push	 eax
  01d10	68 00 00 00 00	 push	 OFFSET ??_C@_05OIMGOJDP@50x50@
  01d15	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01d1a	83 c4 08	 add	 esp, 8

; 2154 :             ImGui::SameLine();

  01d1d	51		 push	 ecx
  01d1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01d26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d2b	51		 push	 ecx
  01d2c	0f 57 c0	 xorps	 xmm0, xmm0
  01d2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d34	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01d39	83 c4 08	 add	 esp, 8

; 2155 :             ImGui::Button("Button()");

  01d3c	51		 push	 ecx
  01d3d	0f 57 c0	 xorps	 xmm0, xmm0
  01d40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d45	51		 push	 ecx
  01d46	0f 57 c0	 xorps	 xmm0, xmm0
  01d49	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d4e	8d 8d a4 f6 ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  01d54	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01d59	50		 push	 eax
  01d5a	68 00 00 00 00	 push	 OFFSET ??_C@_08DHDFAMNE@Button?$CI?$CJ@
  01d5f	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01d64	83 c4 08	 add	 esp, 8

; 2156 :             ImGui::SameLine();

  01d67	51		 push	 ecx
  01d68	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01d70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d75	51		 push	 ecx
  01d76	0f 57 c0	 xorps	 xmm0, xmm0
  01d79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d7e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01d83	83 c4 08	 add	 esp, 8

; 2157 :             ImGui::SmallButton("SmallButton()");

  01d86	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DANAPFLN@SmallButton?$CI?$CJ@
  01d8b	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  01d90	83 c4 04	 add	 esp, 4

; 2158 : 
; 2159 :             // Tree
; 2160 :             const float spacing = ImGui::GetStyle().ItemInnerSpacing.x;

  01d93	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  01d98	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  01d9d	f3 0f 11 85 74
	fe ff ff	 movss	 DWORD PTR _spacing$105[ebp], xmm0

; 2161 :             ImGui::Button("Button##1");

  01da5	51		 push	 ecx
  01da6	0f 57 c0	 xorps	 xmm0, xmm0
  01da9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dae	51		 push	 ecx
  01daf	0f 57 c0	 xorps	 xmm0, xmm0
  01db2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db7	8d 8d 94 f6 ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  01dbd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01dc2	50		 push	 eax
  01dc3	68 00 00 00 00	 push	 OFFSET ??_C@_09JNECCGKE@Button?$CD?$CD1@
  01dc8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01dcd	83 c4 08	 add	 esp, 8

; 2162 :             ImGui::SameLine(0.0f, spacing);

  01dd0	51		 push	 ecx
  01dd1	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _spacing$105[ebp]
  01dd9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dde	51		 push	 ecx
  01ddf	0f 57 c0	 xorps	 xmm0, xmm0
  01de2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01de7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01dec	83 c4 08	 add	 esp, 8

; 2163 :             if (ImGui::TreeNode("Node##1")) { for (int i = 0; i < 6; i++) ImGui::BulletText("Item %d..", i); ImGui::TreePop(); }    // Dummy tree data

  01def	68 00 00 00 00	 push	 OFFSET ??_C@_07FHFCIGOP@Node?$CD?$CD1@
  01df4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01df9	83 c4 04	 add	 esp, 4
  01dfc	0f b6 c0	 movzx	 eax, al
  01dff	85 c0		 test	 eax, eax
  01e01	74 3f		 je	 SHORT $LN80@ShowDemoWi
  01e03	c7 85 68 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$104[ebp], 0
  01e0d	eb 0f		 jmp	 SHORT $LN25@ShowDemoWi
$LN23@ShowDemoWi:
  01e0f	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _i$104[ebp]
  01e15	83 c0 01	 add	 eax, 1
  01e18	89 85 68 fe ff
	ff		 mov	 DWORD PTR _i$104[ebp], eax
$LN25@ShowDemoWi:
  01e1e	83 bd 68 fe ff
	ff 06		 cmp	 DWORD PTR _i$104[ebp], 6
  01e25	7d 16		 jge	 SHORT $LN24@ShowDemoWi
  01e27	8b 85 68 fe ff
	ff		 mov	 eax, DWORD PTR _i$104[ebp]
  01e2d	50		 push	 eax
  01e2e	68 00 00 00 00	 push	 OFFSET ??_C@_09CCOCANBA@Item?5?$CFd?4?4@
  01e33	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01e38	83 c4 08	 add	 esp, 8
  01e3b	eb d2		 jmp	 SHORT $LN23@ShowDemoWi
$LN24@ShowDemoWi:
  01e3d	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN80@ShowDemoWi:

; 2164 : 
; 2165 :             ImGui::AlignTextToFramePadding();           // Vertically align text node a bit lower so it'll be vertically centered with upcoming widget. Otherwise you can use SmallButton (smaller fit).

  01e42	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2166 :             bool node_open = ImGui::TreeNode("Node##2");// Common mistake to avoid: if we want to SameLine after TreeNode we need to do it before we add child content.

  01e47	68 00 00 00 00	 push	 OFFSET ??_C@_07HMHPNFCM@Node?$CD?$CD2@
  01e4c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01e51	83 c4 04	 add	 esp, 4
  01e54	88 85 5f fe ff
	ff		 mov	 BYTE PTR _node_open$103[ebp], al

; 2167 :             ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##2");

  01e5a	51		 push	 ecx
  01e5b	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _spacing$105[ebp]
  01e63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e68	51		 push	 ecx
  01e69	0f 57 c0	 xorps	 xmm0, xmm0
  01e6c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e71	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01e76	83 c4 08	 add	 esp, 8
  01e79	51		 push	 ecx
  01e7a	0f 57 c0	 xorps	 xmm0, xmm0
  01e7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e82	51		 push	 ecx
  01e83	0f 57 c0	 xorps	 xmm0, xmm0
  01e86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e8b	8d 8d 84 f6 ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  01e91	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01e96	50		 push	 eax
  01e97	68 00 00 00 00	 push	 OFFSET ??_C@_09LGGPHFGH@Button?$CD?$CD2@
  01e9c	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01ea1	83 c4 08	 add	 esp, 8

; 2168 :             if (node_open) { for (int i = 0; i < 6; i++) ImGui::BulletText("Item %d..", i); ImGui::TreePop(); }   // Dummy tree data

  01ea4	0f b6 85 5f fe
	ff ff		 movzx	 eax, BYTE PTR _node_open$103[ebp]
  01eab	85 c0		 test	 eax, eax
  01ead	74 3f		 je	 SHORT $LN81@ShowDemoWi
  01eaf	c7 85 50 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$102[ebp], 0
  01eb9	eb 0f		 jmp	 SHORT $LN28@ShowDemoWi
$LN26@ShowDemoWi:
  01ebb	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _i$102[ebp]
  01ec1	83 c0 01	 add	 eax, 1
  01ec4	89 85 50 fe ff
	ff		 mov	 DWORD PTR _i$102[ebp], eax
$LN28@ShowDemoWi:
  01eca	83 bd 50 fe ff
	ff 06		 cmp	 DWORD PTR _i$102[ebp], 6
  01ed1	7d 16		 jge	 SHORT $LN27@ShowDemoWi
  01ed3	8b 85 50 fe ff
	ff		 mov	 eax, DWORD PTR _i$102[ebp]
  01ed9	50		 push	 eax
  01eda	68 00 00 00 00	 push	 OFFSET ??_C@_09CCOCANBA@Item?5?$CFd?4?4@
  01edf	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01ee4	83 c4 08	 add	 esp, 8
  01ee7	eb d2		 jmp	 SHORT $LN26@ShowDemoWi
$LN27@ShowDemoWi:
  01ee9	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN81@ShowDemoWi:

; 2169 : 
; 2170 :             // Bullet
; 2171 :             ImGui::Button("Button##3");

  01eee	51		 push	 ecx
  01eef	0f 57 c0	 xorps	 xmm0, xmm0
  01ef2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ef7	51		 push	 ecx
  01ef8	0f 57 c0	 xorps	 xmm0, xmm0
  01efb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f00	8d 8d 74 f6 ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  01f06	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01f0b	50		 push	 eax
  01f0c	68 00 00 00 00	 push	 OFFSET ??_C@_09KPHEEECG@Button?$CD?$CD3@
  01f11	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01f16	83 c4 08	 add	 esp, 8

; 2172 :             ImGui::SameLine(0.0f, spacing);

  01f19	51		 push	 ecx
  01f1a	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _spacing$105[ebp]
  01f22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f27	51		 push	 ecx
  01f28	0f 57 c0	 xorps	 xmm0, xmm0
  01f2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f30	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01f35	83 c4 08	 add	 esp, 8

; 2173 :             ImGui::BulletText("Bullet text");

  01f38	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DABAODPF@Bullet?5text@
  01f3d	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01f42	83 c4 04	 add	 esp, 4

; 2174 : 
; 2175 :             ImGui::AlignTextToFramePadding();

  01f45	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 2176 :             ImGui::BulletText("Node");

  01f4a	68 00 00 00 00	 push	 OFFSET ??_C@_04OKAPPFIB@Node@
  01f4f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  01f54	83 c4 04	 add	 esp, 4

; 2177 :             ImGui::SameLine(0.0f, spacing); ImGui::Button("Button##4");

  01f57	51		 push	 ecx
  01f58	f3 0f 10 85 74
	fe ff ff	 movss	 xmm0, DWORD PTR _spacing$105[ebp]
  01f60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f65	51		 push	 ecx
  01f66	0f 57 c0	 xorps	 xmm0, xmm0
  01f69	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f6e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01f73	83 c4 08	 add	 esp, 8
  01f76	51		 push	 ecx
  01f77	0f 57 c0	 xorps	 xmm0, xmm0
  01f7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f7f	51		 push	 ecx
  01f80	0f 57 c0	 xorps	 xmm0, xmm0
  01f83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f88	8d 8d 64 f6 ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  01f8e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01f93	50		 push	 eax
  01f94	68 00 00 00 00	 push	 OFFSET ??_C@_09OADFNCOB@Button?$CD?$CD4@
  01f99	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01f9e	83 c4 08	 add	 esp, 8

; 2178 :             ImGui::Unindent();

  01fa1	51		 push	 ecx
  01fa2	0f 57 c0	 xorps	 xmm0, xmm0
  01fa5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01faa	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
  01faf	83 c4 04	 add	 esp, 4

; 2179 :         }
; 2180 : 
; 2181 :         ImGui::TreePop();

  01fb2	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN79@ShowDemoWi:

; 2182 :     }
; 2183 : 
; 2184 :     if (ImGui::TreeNode("Scrolling"))

  01fb7	68 00 00 00 00	 push	 OFFSET ??_C@_09LFBMELOM@Scrolling@
  01fbc	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01fc1	83 c4 04	 add	 esp, 4
  01fc4	0f b6 c0	 movzx	 eax, al
  01fc7	85 c0		 test	 eax, eax
  01fc9	0f 84 13 14 00
	00		 je	 $LN82@ShowDemoWi

; 2185 :     {
; 2186 :         // Vertical scroll functions
; 2187 :         HelpMarker("Use SetScrollHereY() or SetScrollFromPosY() to scroll to a given vertical position.");

  01fcf	68 00 00 00 00	 push	 OFFSET ??_C@_0FE@KFLONGJI@Use?5SetScrollHereY?$CI?$CJ?5or?5SetScro@
  01fd4	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01fd9	83 c4 04	 add	 esp, 4

; 2188 : 
; 2189 :         static int track_item = 50;
; 2190 :         static bool enable_track = true;
; 2191 :         static bool enable_extra_decorations = false;
; 2192 :         static float scroll_to_off_px = 0.0f;
; 2193 :         static float scroll_to_pos_px = 200.0f;
; 2194 : 
; 2195 :         ImGui::Checkbox("Decoration", &enable_extra_decorations);

  01fdc	68 00 00 00 00	 push	 OFFSET ?enable_extra_decorations@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  01fe1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@ODNEMNHD@Decoration@
  01fe6	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  01feb	83 c4 08	 add	 esp, 8

; 2196 :         ImGui::SameLine();

  01fee	51		 push	 ecx
  01fef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ffc	51		 push	 ecx
  01ffd	0f 57 c0	 xorps	 xmm0, xmm0
  02000	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02005	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0200a	83 c4 08	 add	 esp, 8

; 2197 :         HelpMarker("We expose this for testing because scrolling sometimes had issues with window decoration such as menu-bars.");

  0200d	68 00 00 00 00	 push	 OFFSET ??_C@_0GM@GBNFBEFB@We?5expose?5this?5for?5testing?5beca@
  02012	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  02017	83 c4 04	 add	 esp, 4

; 2198 : 
; 2199 :         ImGui::Checkbox("Track", &enable_track);

  0201a	68 00 00 00 00	 push	 OFFSET ?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0201f	68 00 00 00 00	 push	 OFFSET ??_C@_05BFDCPAGB@Track@
  02024	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02029	83 c4 08	 add	 esp, 8

; 2200 :         ImGui::PushItemWidth(100);

  0202c	51		 push	 ecx
  0202d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  02035	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0203a	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  0203f	83 c4 04	 add	 esp, 4

; 2201 :         ImGui::SameLine(140); enable_track |= ImGui::DragInt("##item", &track_item, 0.25f, 0, 99, "Item = %d");

  02042	51		 push	 ecx
  02043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0204b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02050	51		 push	 ecx
  02051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  02059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0205e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02063	83 c4 08	 add	 esp, 8
  02066	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0206d	68 00 00 00 00	 push	 OFFSET ??_C@_09GAMHFGFH@Item?5?$DN?5?$CFd@
  02072	6a 63		 push	 99			; 00000063H
  02074	6a 00		 push	 0
  02076	51		 push	 ecx
  02077	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  0207f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02084	68 00 00 00 00	 push	 OFFSET ?track_item@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA
  02089	68 00 00 00 00	 push	 OFFSET ??_C@_06PDMOEKMO@?$CD?$CDitem@
  0208e	89 85 3c f4 ff
	ff		 mov	 DWORD PTR tv3122[ebp], eax
  02094	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPBDPAHMHH0@Z ; ImGui::DragInt
  02099	83 c4 18	 add	 esp, 24			; 00000018H
  0209c	0f b6 c0	 movzx	 eax, al
  0209f	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv3122[ebp]
  020a5	0b c8		 or	 ecx, eax
  020a7	88 0d 00 00 00
	00		 mov	 BYTE PTR ?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA, cl

; 2202 : 
; 2203 :         bool scroll_to_off = ImGui::Button("Scroll Offset");

  020ad	51		 push	 ecx
  020ae	0f 57 c0	 xorps	 xmm0, xmm0
  020b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020b6	51		 push	 ecx
  020b7	0f 57 c0	 xorps	 xmm0, xmm0
  020ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020bf	8d 8d 54 f6 ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  020c5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  020ca	50		 push	 eax
  020cb	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EDOJIGBC@Scroll?5Offset@
  020d0	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  020d5	83 c4 08	 add	 esp, 8
  020d8	88 85 47 fe ff
	ff		 mov	 BYTE PTR _scroll_to_off$101[ebp], al

; 2204 :         ImGui::SameLine(140); scroll_to_off |= ImGui::DragFloat("##off", &scroll_to_off_px, 1.00f, 0, FLT_MAX, "+%.0f px");

  020de	51		 push	 ecx
  020df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  020e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ec	51		 push	 ecx
  020ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  020f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020fa	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  020ff	83 c4 08	 add	 esp, 8
  02102	0f b6 85 47 fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_off$101[ebp]
  02109	51		 push	 ecx
  0210a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02112	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02117	68 00 00 00 00	 push	 OFFSET ??_C@_08DGGLGIAM@?$CL?$CF?40f?5px@
  0211c	51		 push	 ecx
  0211d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  02125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0212a	51		 push	 ecx
  0212b	0f 57 c0	 xorps	 xmm0, xmm0
  0212e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02133	51		 push	 ecx
  02134	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0213c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02141	68 00 00 00 00	 push	 OFFSET ?scroll_to_off_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA
  02146	68 00 00 00 00	 push	 OFFSET ??_C@_05FFNMOAPG@?$CD?$CDoff@
  0214b	89 85 3c f4 ff
	ff		 mov	 DWORD PTR tv3124[ebp], eax
  02151	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  02156	83 c4 1c	 add	 esp, 28			; 0000001cH
  02159	0f b6 c0	 movzx	 eax, al
  0215c	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv3124[ebp]
  02162	0b c8		 or	 ecx, eax
  02164	88 8d 47 fe ff
	ff		 mov	 BYTE PTR _scroll_to_off$101[ebp], cl

; 2205 : 
; 2206 :         bool scroll_to_pos = ImGui::Button("Scroll To Pos");

  0216a	51		 push	 ecx
  0216b	0f 57 c0	 xorps	 xmm0, xmm0
  0216e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02173	51		 push	 ecx
  02174	0f 57 c0	 xorps	 xmm0, xmm0
  02177	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0217c	8d 8d 44 f6 ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  02182	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02187	50		 push	 eax
  02188	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CGNNKBMG@Scroll?5To?5Pos@
  0218d	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  02192	83 c4 08	 add	 esp, 8
  02195	88 85 3b fe ff
	ff		 mov	 BYTE PTR _scroll_to_pos$100[ebp], al

; 2207 :         ImGui::SameLine(140); scroll_to_pos |= ImGui::DragFloat("##pos", &scroll_to_pos_px, 1.00f, -10, FLT_MAX, "X/Y = %.0f px");

  0219b	51		 push	 ecx
  0219c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021a9	51		 push	 ecx
  021aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@430c0000
  021b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  021bc	83 c4 08	 add	 esp, 8
  021bf	0f b6 85 3b fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_pos$100[ebp]
  021c6	51		 push	 ecx
  021c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021d4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LJJDDGBB@X?1Y?5?$DN?5?$CF?40f?5px@
  021d9	51		 push	 ecx
  021da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  021e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021e7	51		 push	 ecx
  021e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1200000
  021f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021f5	51		 push	 ecx
  021f6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  021fe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02203	68 00 00 00 00	 push	 OFFSET ?scroll_to_pos_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA
  02208	68 00 00 00 00	 push	 OFFSET ??_C@_05GFMCHKKE@?$CD?$CDpos@
  0220d	89 85 3c f4 ff
	ff		 mov	 DWORD PTR tv3126[ebp], eax
  02213	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  02218	83 c4 1c	 add	 esp, 28			; 0000001cH
  0221b	0f b6 c0	 movzx	 eax, al
  0221e	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv3126[ebp]
  02224	0b c8		 or	 ecx, eax
  02226	88 8d 3b fe ff
	ff		 mov	 BYTE PTR _scroll_to_pos$100[ebp], cl

; 2208 :         ImGui::PopItemWidth();

  0222c	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 2209 : 
; 2210 :         if (scroll_to_off || scroll_to_pos)

  02231	0f b6 85 47 fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_off$101[ebp]
  02238	85 c0		 test	 eax, eax
  0223a	75 0b		 jne	 SHORT $LN84@ShowDemoWi
  0223c	0f b6 85 3b fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_pos$100[ebp]
  02243	85 c0		 test	 eax, eax
  02245	74 07		 je	 SHORT $LN83@ShowDemoWi
$LN84@ShowDemoWi:

; 2211 :             enable_track = false;

  02247	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA, 0
$LN83@ShowDemoWi:

; 2212 : 
; 2213 :         ImGuiStyle& style = ImGui::GetStyle();

  0224e	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  02253	89 85 2c fe ff
	ff		 mov	 DWORD PTR _style$99[ebp], eax

; 2214 :         float child_w = (ImGui::GetContentRegionAvail().x - 4 * style.ItemSpacing.x) / 5;

  02259	8d 85 34 f6 ff
	ff		 lea	 eax, DWORD PTR $T29[ebp]
  0225f	50		 push	 eax
  02260	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  02265	83 c4 04	 add	 esp, 4
  02268	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _style$99[ebp]
  0226e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  02276	f3 0f 59 41 48	 mulss	 xmm0, DWORD PTR [ecx+72]
  0227b	f3 0f 10 08	 movss	 xmm1, DWORD PTR [eax]
  0227f	f3 0f 5c c8	 subss	 xmm1, xmm0
  02283	f3 0f 5e 0d 00
	00 00 00	 divss	 xmm1, DWORD PTR __real@40a00000
  0228b	f3 0f 11 8d 20
	fe ff ff	 movss	 DWORD PTR _child_w$98[ebp], xmm1

; 2215 :         if (child_w < 1.0f)

  02293	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0229b	0f 2f 85 20 fe
	ff ff		 comiss	 xmm0, DWORD PTR _child_w$98[ebp]
  022a2	76 10		 jbe	 SHORT $LN85@ShowDemoWi

; 2216 :             child_w = 1.0f;

  022a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  022ac	f3 0f 11 85 20
	fe ff ff	 movss	 DWORD PTR _child_w$98[ebp], xmm0
$LN85@ShowDemoWi:

; 2217 :         ImGui::PushID("##VerticalScrolling");

  022b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@NILALFMA@?$CD?$CDVerticalScrolling@
  022b9	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  022be	83 c4 04	 add	 esp, 4

; 2218 :         for (int i = 0; i < 5; i++)

  022c1	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$97[ebp], 0
  022cb	eb 0f		 jmp	 SHORT $LN31@ShowDemoWi
$LN29@ShowDemoWi:
  022cd	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _i$97[ebp]
  022d3	83 c0 01	 add	 eax, 1
  022d6	89 85 14 fe ff
	ff		 mov	 DWORD PTR _i$97[ebp], eax
$LN31@ShowDemoWi:
  022dc	83 bd 14 fe ff
	ff 05		 cmp	 DWORD PTR _i$97[ebp], 5
  022e3	0f 8d b1 02 00
	00		 jge	 $LN30@ShowDemoWi

; 2219 :         {
; 2220 :             if (i > 0) ImGui::SameLine();

  022e9	83 bd 14 fe ff
	ff 00		 cmp	 DWORD PTR _i$97[ebp], 0
  022f0	7e 1f		 jle	 SHORT $LN86@ShowDemoWi
  022f2	51		 push	 ecx
  022f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  022fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02300	51		 push	 ecx
  02301	0f 57 c0	 xorps	 xmm0, xmm0
  02304	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02309	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0230e	83 c4 08	 add	 esp, 8
$LN86@ShowDemoWi:

; 2221 :             ImGui::BeginGroup();

  02311	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 2222 :             const char* names[] = { "Top", "25%", "Center", "75%", "Bottom" };

  02316	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$96[ebp], OFFSET ??_C@_03PGGAENPN@Top@
  02320	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$96[ebp+4], OFFSET ??_C@_03EOMKOHFF@25?$CF@
  0232a	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$96[ebp+8], OFFSET ??_C@_06NOADDNNE@Center@
  02334	c7 85 04 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$96[ebp+12], OFFSET ??_C@_03HJBEBHGH@75?$CF@
  0233e	c7 85 08 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$96[ebp+16], OFFSET ??_C@_06DDHCBBGN@Bottom@

; 2223 :             ImGui::TextUnformatted(names[i]);

  02348	6a 00		 push	 0
  0234a	8b 85 14 fe ff
	ff		 mov	 eax, DWORD PTR _i$97[ebp]
  02350	8b 8c 85 f8 fd
	ff ff		 mov	 ecx, DWORD PTR _names$96[ebp+eax*4]
  02357	51		 push	 ecx
  02358	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  0235d	83 c4 08	 add	 esp, 8

; 2224 : 
; 2225 :             ImGuiWindowFlags child_flags = enable_extra_decorations ? ImGuiWindowFlags_MenuBar : 0;

  02360	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_extra_decorations@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02367	85 c0		 test	 eax, eax
  02369	74 0c		 je	 SHORT $LN126@ShowDemoWi
  0236b	c7 85 3c f4 ff
	ff 00 04 00 00	 mov	 DWORD PTR tv1240[ebp], 1024 ; 00000400H
  02375	eb 0a		 jmp	 SHORT $LN127@ShowDemoWi
$LN126@ShowDemoWi:
  02377	c7 85 3c f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1240[ebp], 0
$LN127@ShowDemoWi:
  02381	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv1240[ebp]
  02387	89 8d ec fd ff
	ff		 mov	 DWORD PTR _child_flags$95[ebp], ecx

; 2226 :             bool window_visible = ImGui::BeginChild(ImGui::GetID((void*)(intptr_t)i), ImVec2(child_w, 200.0f), true, child_flags);

  0238d	8b 85 ec fd ff
	ff		 mov	 eax, DWORD PTR _child_flags$95[ebp]
  02393	50		 push	 eax
  02394	6a 01		 push	 1
  02396	51		 push	 ecx
  02397	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  0239f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023a4	51		 push	 ecx
  023a5	f3 0f 10 85 20
	fe ff ff	 movss	 xmm0, DWORD PTR _child_w$98[ebp]
  023ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  023b2	8d 8d 24 f6 ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  023b8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  023bd	50		 push	 eax
  023be	8b 8d 14 fe ff
	ff		 mov	 ecx, DWORD PTR _i$97[ebp]
  023c4	51		 push	 ecx
  023c5	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPBX@Z	; ImGui::GetID
  023ca	83 c4 04	 add	 esp, 4
  023cd	50		 push	 eax
  023ce	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NIABUImVec2@@_NH@Z ; ImGui::BeginChild
  023d3	83 c4 10	 add	 esp, 16			; 00000010H
  023d6	88 85 e3 fd ff
	ff		 mov	 BYTE PTR _window_visible$94[ebp], al

; 2227 :             if (ImGui::BeginMenuBar())

  023dc	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  023e1	0f b6 c0	 movzx	 eax, al
  023e4	85 c0		 test	 eax, eax
  023e6	74 14		 je	 SHORT $LN87@ShowDemoWi

; 2228 :             {
; 2229 :                 ImGui::TextUnformatted("abc");

  023e8	6a 00		 push	 0
  023ea	68 00 00 00 00	 push	 OFFSET ??_C@_03FIKCJHKP@abc@
  023ef	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  023f4	83 c4 08	 add	 esp, 8

; 2230 :                 ImGui::EndMenuBar();

  023f7	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN87@ShowDemoWi:

; 2231 :             }
; 2232 :             if (scroll_to_off)

  023fc	0f b6 85 47 fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_off$101[ebp]
  02403	85 c0		 test	 eax, eax
  02405	74 16		 je	 SHORT $LN88@ShowDemoWi

; 2233 :                 ImGui::SetScrollY(scroll_to_off_px);

  02407	51		 push	 ecx
  02408	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scroll_to_off_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA
  02410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02415	e8 00 00 00 00	 call	 ?SetScrollY@ImGui@@YAXM@Z ; ImGui::SetScrollY
  0241a	83 c4 04	 add	 esp, 4
$LN88@ShowDemoWi:

; 2234 :             if (scroll_to_pos)

  0241d	0f b6 85 3b fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_pos$100[ebp]
  02424	85 c0		 test	 eax, eax
  02426	74 40		 je	 SHORT $LN89@ShowDemoWi

; 2235 :                 ImGui::SetScrollFromPosY(ImGui::GetCursorStartPos().y + scroll_to_pos_px, i * 0.25f);

  02428	f3 0f 2a 85 14
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$97[ebp]
  02430	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  02438	51		 push	 ecx
  02439	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0243e	8d 85 14 f6 ff
	ff		 lea	 eax, DWORD PTR $T27[ebp]
  02444	50		 push	 eax
  02445	e8 00 00 00 00	 call	 ?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorStartPos
  0244a	83 c4 04	 add	 esp, 4
  0244d	f3 0f 10 40 04	 movss	 xmm0, DWORD PTR [eax+4]
  02452	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scroll_to_pos_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA
  0245a	51		 push	 ecx
  0245b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02460	e8 00 00 00 00	 call	 ?SetScrollFromPosY@ImGui@@YAXMM@Z ; ImGui::SetScrollFromPosY
  02465	83 c4 08	 add	 esp, 8
$LN89@ShowDemoWi:

; 2236 :             if (window_visible) // Avoid calling SetScrollHereY when running with culled items

  02468	0f b6 85 e3 fd
	ff ff		 movzx	 eax, BYTE PTR _window_visible$94[ebp]
  0246f	85 c0		 test	 eax, eax
  02471	0f 84 d1 00 00
	00		 je	 $LN33@ShowDemoWi

; 2237 :             {
; 2238 :                 for (int item = 0; item < 100; item++)

  02477	c7 85 d4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _item$93[ebp], 0
  02481	eb 0f		 jmp	 SHORT $LN34@ShowDemoWi
$LN32@ShowDemoWi:
  02483	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _item$93[ebp]
  02489	83 c0 01	 add	 eax, 1
  0248c	89 85 d4 fd ff
	ff		 mov	 DWORD PTR _item$93[ebp], eax
$LN34@ShowDemoWi:
  02492	83 bd d4 fd ff
	ff 64		 cmp	 DWORD PTR _item$93[ebp], 100 ; 00000064H
  02499	0f 8d a9 00 00
	00		 jge	 $LN33@ShowDemoWi

; 2239 :                 {
; 2240 :                     if (enable_track && item == track_item)

  0249f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  024a6	85 c0		 test	 eax, eax
  024a8	0f 84 81 00 00
	00		 je	 $LN91@ShowDemoWi
  024ae	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _item$93[ebp]
  024b4	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?track_item@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA
  024ba	75 73		 jne	 SHORT $LN91@ShowDemoWi

; 2241 :                     {
; 2242 :                         ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);

  024bc	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _item$93[ebp]
  024c2	50		 push	 eax
  024c3	68 00 00 00 00	 push	 OFFSET ??_C@_07BCJGKFOL@Item?5?$CFd@
  024c8	51		 push	 ecx
  024c9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024d1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024d6	51		 push	 ecx
  024d7	0f 57 c0	 xorps	 xmm0, xmm0
  024da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024df	51		 push	 ecx
  024e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024ed	51		 push	 ecx
  024ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  024f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024fb	8d 8d fc f5 ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  02501	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  02506	50		 push	 eax
  02507	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXABUImVec4@@PBDZZ ; ImGui::TextColored
  0250c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2243 :                         ImGui::SetScrollHereY(i * 0.25f); // 0.0f:top, 0.5f:center, 1.0f:bottom

  0250f	f3 0f 2a 85 14
	fe ff ff	 cvtsi2ss xmm0, DWORD PTR _i$97[ebp]
  02517	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  0251f	51		 push	 ecx
  02520	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02525	e8 00 00 00 00	 call	 ?SetScrollHereY@ImGui@@YAXM@Z ; ImGui::SetScrollHereY
  0252a	83 c4 04	 add	 esp, 4

; 2244 :                     }

  0252d	eb 14		 jmp	 SHORT $LN92@ShowDemoWi
$LN91@ShowDemoWi:

; 2245 :                     else
; 2246 :                     {
; 2247 :                         ImGui::Text("Item %d", item);

  0252f	8b 85 d4 fd ff
	ff		 mov	 eax, DWORD PTR _item$93[ebp]
  02535	50		 push	 eax
  02536	68 00 00 00 00	 push	 OFFSET ??_C@_07BCJGKFOL@Item?5?$CFd@
  0253b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  02540	83 c4 08	 add	 esp, 8
$LN92@ShowDemoWi:

; 2248 :                     }
; 2249 :                 }

  02543	e9 3b ff ff ff	 jmp	 $LN32@ShowDemoWi
$LN33@ShowDemoWi:

; 2250 :             }
; 2251 :             float scroll_y = ImGui::GetScrollY();

  02548	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  0254d	d9 9d c8 fd ff
	ff		 fstp	 DWORD PTR _scroll_y$92[ebp]

; 2252 :             float scroll_max_y = ImGui::GetScrollMaxY();

  02553	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  02558	d9 9d bc fd ff
	ff		 fstp	 DWORD PTR _scroll_max_y$91[ebp]

; 2253 :             ImGui::EndChild();

  0255e	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2254 :             ImGui::Text("%.0f/%.0f", scroll_y, scroll_max_y);

  02563	f3 0f 5a 85 bc
	fd ff ff	 cvtss2sd xmm0, DWORD PTR _scroll_max_y$91[ebp]
  0256b	83 ec 08	 sub	 esp, 8
  0256e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02573	f3 0f 5a 85 c8
	fd ff ff	 cvtss2sd xmm0, DWORD PTR _scroll_y$92[ebp]
  0257b	83 ec 08	 sub	 esp, 8
  0257e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02583	68 00 00 00 00	 push	 OFFSET ??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f@
  02588	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0258d	83 c4 14	 add	 esp, 20			; 00000014H

; 2255 :             ImGui::EndGroup();

  02590	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 2256 :         }

  02595	e9 33 fd ff ff	 jmp	 $LN29@ShowDemoWi
$LN30@ShowDemoWi:

; 2257 :         ImGui::PopID();

  0259a	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2258 : 
; 2259 :         // Horizontal scroll functions
; 2260 :         ImGui::Spacing();

  0259f	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2261 :         HelpMarker("Use SetScrollHereX() or SetScrollFromPosX() to scroll to a given horizontal position.\n\nUsing the \"Scroll To Pos\" button above will make the discontinuity at edges visible: scrolling to the top/bottom/left/right-most item will add an additional WindowPadding to reflect on reaching the edge of the list.\n\nBecause the clipping rectangle of most window hides half worth of WindowPadding on the left/right, using SetScrollFromPosX(+1) will usually result in clipped text whereas the equivalent SetScrollFromPosY(+1) wouldn't.");

  025a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CAK@JJECNJPI@Use?5SetScrollHereX?$CI?$CJ?5or?5SetScro@
  025a9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  025ae	83 c4 04	 add	 esp, 4

; 2262 :         ImGui::PushID("##HorizontalScrolling");

  025b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@BEAADLOE@?$CD?$CDHorizontalScrolling@
  025b6	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  025bb	83 c4 04	 add	 esp, 4

; 2263 :         for (int i = 0; i < 5; i++)

  025be	c7 85 b0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$90[ebp], 0
  025c8	eb 0f		 jmp	 SHORT $LN37@ShowDemoWi
$LN35@ShowDemoWi:
  025ca	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _i$90[ebp]
  025d0	83 c0 01	 add	 eax, 1
  025d3	89 85 b0 fd ff
	ff		 mov	 DWORD PTR _i$90[ebp], eax
$LN37@ShowDemoWi:
  025d9	83 bd b0 fd ff
	ff 05		 cmp	 DWORD PTR _i$90[ebp], 5
  025e0	0f 8d da 02 00
	00		 jge	 $LN36@ShowDemoWi

; 2264 :         {
; 2265 :             float child_height = ImGui::GetTextLineHeight() + style.ScrollbarSize + style.WindowPadding.y * 2.0f;

  025e6	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  025eb	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2770[ebp]
  025f1	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2770[ebp]
  025f9	8b 85 2c fe ff
	ff		 mov	 eax, DWORD PTR _style$99[ebp]
  025ff	f3 0f 58 40 68	 addss	 xmm0, DWORD PTR [eax+104]
  02604	8b 8d 2c fe ff
	ff		 mov	 ecx, DWORD PTR _style$99[ebp]
  0260a	f3 0f 10 49 08	 movss	 xmm1, DWORD PTR [ecx+8]
  0260f	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@40000000
  02617	f3 0f 58 c1	 addss	 xmm0, xmm1
  0261b	f3 0f 11 85 a4
	fd ff ff	 movss	 DWORD PTR _child_height$89[ebp], xmm0

; 2266 :             ImGuiWindowFlags child_flags = ImGuiWindowFlags_HorizontalScrollbar | (enable_extra_decorations ? ImGuiWindowFlags_AlwaysVerticalScrollbar : 0);

  02623	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_extra_decorations@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0262a	85 c0		 test	 eax, eax
  0262c	74 0c		 je	 SHORT $LN128@ShowDemoWi
  0262e	c7 85 3c f4 ff
	ff 00 40 00 00	 mov	 DWORD PTR tv1311[ebp], 16384 ; 00004000H
  02638	eb 0a		 jmp	 SHORT $LN129@ShowDemoWi
$LN128@ShowDemoWi:
  0263a	c7 85 3c f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1311[ebp], 0
$LN129@ShowDemoWi:
  02644	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv1311[ebp]
  0264a	81 c9 00 08 00
	00		 or	 ecx, 2048		; 00000800H
  02650	89 8d 98 fd ff
	ff		 mov	 DWORD PTR _child_flags$88[ebp], ecx

; 2267 :             bool window_visible = ImGui::BeginChild(ImGui::GetID((void*)(intptr_t)i), ImVec2(-100, child_height), true, child_flags);

  02656	8b 85 98 fd ff
	ff		 mov	 eax, DWORD PTR _child_flags$88[ebp]
  0265c	50		 push	 eax
  0265d	6a 01		 push	 1
  0265f	51		 push	 ecx
  02660	f3 0f 10 85 a4
	fd ff ff	 movss	 xmm0, DWORD PTR _child_height$89[ebp]
  02668	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0266d	51		 push	 ecx
  0266e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c2c80000
  02676	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0267b	8d 8d ec f5 ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  02681	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02686	50		 push	 eax
  02687	8b 8d b0 fd ff
	ff		 mov	 ecx, DWORD PTR _i$90[ebp]
  0268d	51		 push	 ecx
  0268e	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPBX@Z	; ImGui::GetID
  02693	83 c4 04	 add	 esp, 4
  02696	50		 push	 eax
  02697	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NIABUImVec2@@_NH@Z ; ImGui::BeginChild
  0269c	83 c4 10	 add	 esp, 16			; 00000010H
  0269f	88 85 8f fd ff
	ff		 mov	 BYTE PTR _window_visible$87[ebp], al

; 2268 :             if (scroll_to_off)

  026a5	0f b6 85 47 fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_off$101[ebp]
  026ac	85 c0		 test	 eax, eax
  026ae	74 16		 je	 SHORT $LN93@ShowDemoWi

; 2269 :                 ImGui::SetScrollX(scroll_to_off_px);

  026b0	51		 push	 ecx
  026b1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?scroll_to_off_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA
  026b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026be	e8 00 00 00 00	 call	 ?SetScrollX@ImGui@@YAXM@Z ; ImGui::SetScrollX
  026c3	83 c4 04	 add	 esp, 4
$LN93@ShowDemoWi:

; 2270 :             if (scroll_to_pos)

  026c6	0f b6 85 3b fe
	ff ff		 movzx	 eax, BYTE PTR _scroll_to_pos$100[ebp]
  026cd	85 c0		 test	 eax, eax
  026cf	74 3f		 je	 SHORT $LN94@ShowDemoWi

; 2271 :                 ImGui::SetScrollFromPosX(ImGui::GetCursorStartPos().x + scroll_to_pos_px, i * 0.25f);

  026d1	f3 0f 2a 85 b0
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _i$90[ebp]
  026d9	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  026e1	51		 push	 ecx
  026e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  026e7	8d 85 dc f5 ff
	ff		 lea	 eax, DWORD PTR $T24[ebp]
  026ed	50		 push	 eax
  026ee	e8 00 00 00 00	 call	 ?GetCursorStartPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorStartPos
  026f3	83 c4 04	 add	 esp, 4
  026f6	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  026fa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?scroll_to_pos_px@?GK@??ShowDemoWindowLayout@@YAXXZ@4MA
  02702	51		 push	 ecx
  02703	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02708	e8 00 00 00 00	 call	 ?SetScrollFromPosX@ImGui@@YAXMM@Z ; ImGui::SetScrollFromPosX
  0270d	83 c4 08	 add	 esp, 8
$LN94@ShowDemoWi:

; 2272 :             if (window_visible) // Avoid calling SetScrollHereY when running with culled items

  02710	0f b6 85 8f fd
	ff ff		 movzx	 eax, BYTE PTR _window_visible$87[ebp]
  02717	85 c0		 test	 eax, eax
  02719	0f 84 f0 00 00
	00		 je	 $LN39@ShowDemoWi

; 2273 :             {
; 2274 :                 for (int item = 0; item < 100; item++)

  0271f	c7 85 80 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _item$86[ebp], 0
  02729	eb 0f		 jmp	 SHORT $LN40@ShowDemoWi
$LN38@ShowDemoWi:
  0272b	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR _item$86[ebp]
  02731	83 c0 01	 add	 eax, 1
  02734	89 85 80 fd ff
	ff		 mov	 DWORD PTR _item$86[ebp], eax
$LN40@ShowDemoWi:
  0273a	83 bd 80 fd ff
	ff 64		 cmp	 DWORD PTR _item$86[ebp], 100 ; 00000064H
  02741	0f 8d c8 00 00
	00		 jge	 $LN39@ShowDemoWi

; 2275 :                 {
; 2276 :                     if (enable_track && item == track_item)

  02747	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?enable_track@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0274e	85 c0		 test	 eax, eax
  02750	0f 84 81 00 00
	00		 je	 $LN96@ShowDemoWi
  02756	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR _item$86[ebp]
  0275c	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?track_item@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA
  02762	75 73		 jne	 SHORT $LN96@ShowDemoWi

; 2277 :                     {
; 2278 :                         ImGui::TextColored(ImVec4(1, 1, 0, 1), "Item %d", item);

  02764	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR _item$86[ebp]
  0276a	50		 push	 eax
  0276b	68 00 00 00 00	 push	 OFFSET ??_C@_07BCJGKFOL@Item?5?$CFd@
  02770	51		 push	 ecx
  02771	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0277e	51		 push	 ecx
  0277f	0f 57 c0	 xorps	 xmm0, xmm0
  02782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02787	51		 push	 ecx
  02788	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02790	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02795	51		 push	 ecx
  02796	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0279e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027a3	8d 8d c4 f5 ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  027a9	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  027ae	50		 push	 eax
  027af	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXABUImVec4@@PBDZZ ; ImGui::TextColored
  027b4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2279 :                         ImGui::SetScrollHereX(i * 0.25f); // 0.0f:left, 0.5f:center, 1.0f:right

  027b7	f3 0f 2a 85 b0
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _i$90[ebp]
  027bf	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e800000
  027c7	51		 push	 ecx
  027c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027cd	e8 00 00 00 00	 call	 ?SetScrollHereX@ImGui@@YAXM@Z ; ImGui::SetScrollHereX
  027d2	83 c4 04	 add	 esp, 4

; 2280 :                     }

  027d5	eb 14		 jmp	 SHORT $LN97@ShowDemoWi
$LN96@ShowDemoWi:

; 2281 :                     else
; 2282 :                     {
; 2283 :                         ImGui::Text("Item %d", item);

  027d7	8b 85 80 fd ff
	ff		 mov	 eax, DWORD PTR _item$86[ebp]
  027dd	50		 push	 eax
  027de	68 00 00 00 00	 push	 OFFSET ??_C@_07BCJGKFOL@Item?5?$CFd@
  027e3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  027e8	83 c4 08	 add	 esp, 8
$LN97@ShowDemoWi:

; 2284 :                     }
; 2285 :                     ImGui::SameLine();

  027eb	51		 push	 ecx
  027ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  027f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027f9	51		 push	 ecx
  027fa	0f 57 c0	 xorps	 xmm0, xmm0
  027fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02802	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02807	83 c4 08	 add	 esp, 8

; 2286 :                 }

  0280a	e9 1c ff ff ff	 jmp	 $LN38@ShowDemoWi
$LN39@ShowDemoWi:

; 2287 :             }
; 2288 :             float scroll_x = ImGui::GetScrollX();

  0280f	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  02814	d9 9d 74 fd ff
	ff		 fstp	 DWORD PTR _scroll_x$85[ebp]

; 2289 :             float scroll_max_x = ImGui::GetScrollMaxX();

  0281a	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  0281f	d9 9d 68 fd ff
	ff		 fstp	 DWORD PTR _scroll_max_x$84[ebp]

; 2290 :             ImGui::EndChild();

  02825	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2291 :             ImGui::SameLine();

  0282a	51		 push	 ecx
  0282b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02833	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02838	51		 push	 ecx
  02839	0f 57 c0	 xorps	 xmm0, xmm0
  0283c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02841	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02846	83 c4 08	 add	 esp, 8

; 2292 :             const char* names[] = { "Left", "25%", "Center", "75%", "Right" };

  02849	c7 85 4c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$83[ebp], OFFSET ??_C@_04KPCPLBPL@Left@
  02853	c7 85 50 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$83[ebp+4], OFFSET ??_C@_03EOMKOHFF@25?$CF@
  0285d	c7 85 54 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$83[ebp+8], OFFSET ??_C@_06NOADDNNE@Center@
  02867	c7 85 58 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$83[ebp+12], OFFSET ??_C@_03HJBEBHGH@75?$CF@
  02871	c7 85 5c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _names$83[ebp+16], OFFSET ??_C@_05DADPALEM@Right@

; 2293 :             ImGui::Text("%s\n%.0f/%.0f", names[i], scroll_x, scroll_max_x);

  0287b	f3 0f 5a 85 68
	fd ff ff	 cvtss2sd xmm0, DWORD PTR _scroll_max_x$84[ebp]
  02883	83 ec 08	 sub	 esp, 8
  02886	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0288b	f3 0f 5a 85 74
	fd ff ff	 cvtss2sd xmm0, DWORD PTR _scroll_x$85[ebp]
  02893	83 ec 08	 sub	 esp, 8
  02896	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0289b	8b 85 b0 fd ff
	ff		 mov	 eax, DWORD PTR _i$90[ebp]
  028a1	8b 8c 85 4c fd
	ff ff		 mov	 ecx, DWORD PTR _names$83[ebp+eax*4]
  028a8	51		 push	 ecx
  028a9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MJLHBHDH@?$CFs?6?$CF?40f?1?$CF?40f@
  028ae	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  028b3	83 c4 18	 add	 esp, 24			; 00000018H

; 2294 :             ImGui::Spacing();

  028b6	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2295 :         }

  028bb	e9 0a fd ff ff	 jmp	 $LN35@ShowDemoWi
$LN36@ShowDemoWi:

; 2296 :         ImGui::PopID();

  028c0	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2297 : 
; 2298 :         // Miscellaneous Horizontal Scrolling Demo
; 2299 :         HelpMarker("Horizontal scrolling for a window has to be enabled explicitly via the ImGuiWindowFlags_HorizontalScrollbar flag.\n\nYou may want to explicitly specify content width by calling SetNextWindowContentWidth() before Begin().");

  028c5	68 00 00 00 00	 push	 OFFSET ??_C@_0NL@PPAIPOMM@Horizontal?5scrolling?5for?5a?5wind@
  028ca	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  028cf	83 c4 04	 add	 esp, 4

; 2300 :         static int lines = 7;
; 2301 :         ImGui::SliderInt("Lines", &lines, 1, 15);

  028d2	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  028d7	6a 0f		 push	 15			; 0000000fH
  028d9	6a 01		 push	 1
  028db	68 00 00 00 00	 push	 OFFSET ?lines@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA
  028e0	68 00 00 00 00	 push	 OFFSET ??_C@_05DDHCCCLJ@Lines@
  028e5	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPBDPAHHH0@Z ; ImGui::SliderInt
  028ea	83 c4 14	 add	 esp, 20			; 00000014H

; 2302 :         ImGui::PushStyleVar(ImGuiStyleVar_FrameRounding, 3.0f);

  028ed	51		 push	 ecx
  028ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40400000
  028f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028fb	6a 0b		 push	 11			; 0000000bH
  028fd	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar
  02902	83 c4 08	 add	 esp, 8

; 2303 :         ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2.0f, 1.0f));

  02905	51		 push	 ecx
  02906	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0290e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02913	51		 push	 ecx
  02914	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0291c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02921	8d 8d b4 f5 ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  02927	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0292c	50		 push	 eax
  0292d	6a 0a		 push	 10			; 0000000aH
  0292f	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  02934	83 c4 08	 add	 esp, 8

; 2304 :         ImGui::BeginChild("scrolling", ImVec2(0, ImGui::GetFrameHeightWithSpacing() * 7 + 30), true, ImGuiWindowFlags_HorizontalScrollbar);

  02937	68 00 08 00 00	 push	 2048			; 00000800H
  0293c	6a 01		 push	 1
  0293e	e8 00 00 00 00	 call	 ?GetFrameHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetFrameHeightWithSpacing
  02943	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2831[ebp]
  02949	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2831[ebp]
  02951	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40e00000
  02959	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41f00000
  02961	51		 push	 ecx
  02962	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02967	51		 push	 ecx
  02968	0f 57 c0	 xorps	 xmm0, xmm0
  0296b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02970	8d 8d a4 f5 ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  02976	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0297b	50		 push	 eax
  0297c	68 00 00 00 00	 push	 OFFSET ??_C@_09PKEBEIDM@scrolling@
  02981	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  02986	83 c4 10	 add	 esp, 16			; 00000010H

; 2305 :         for (int line = 0; line < lines; line++)

  02989	c7 85 40 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _line$82[ebp], 0
  02993	eb 0f		 jmp	 SHORT $LN43@ShowDemoWi
$LN41@ShowDemoWi:
  02995	8b 85 40 fd ff
	ff		 mov	 eax, DWORD PTR _line$82[ebp]
  0299b	83 c0 01	 add	 eax, 1
  0299e	89 85 40 fd ff
	ff		 mov	 DWORD PTR _line$82[ebp], eax
$LN43@ShowDemoWi:
  029a4	8b 85 40 fd ff
	ff		 mov	 eax, DWORD PTR _line$82[ebp]
  029aa	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lines@?GK@??ShowDemoWindowLayout@@YAXXZ@4HA
  029b0	0f 8d 00 03 00
	00		 jge	 $LN42@ShowDemoWi

; 2306 :         {
; 2307 :             // Display random stuff (for the sake of this trivial demo we are using basic Button+SameLine. If you want to create your own time line for a real application you may be better off
; 2308 :             // manipulating the cursor position yourself, aka using SetCursorPos/SetCursorScreenPos to position the widgets yourself. You may also want to use the lower-level ImDrawList API)
; 2309 :             int num_buttons = 10 + ((line & 1) ? line * 9 : line * 3);

  029b6	8b 85 40 fd ff
	ff		 mov	 eax, DWORD PTR _line$82[ebp]
  029bc	83 e0 01	 and	 eax, 1
  029bf	74 0f		 je	 SHORT $LN130@ShowDemoWi
  029c1	6b 8d 40 fd ff
	ff 09		 imul	 ecx, DWORD PTR _line$82[ebp], 9
  029c8	89 8d 3c f4 ff
	ff		 mov	 DWORD PTR tv1435[ebp], ecx
  029ce	eb 0d		 jmp	 SHORT $LN131@ShowDemoWi
$LN130@ShowDemoWi:
  029d0	6b 95 40 fd ff
	ff 03		 imul	 edx, DWORD PTR _line$82[ebp], 3
  029d7	89 95 3c f4 ff
	ff		 mov	 DWORD PTR tv1435[ebp], edx
$LN131@ShowDemoWi:
  029dd	8b 85 3c f4 ff
	ff		 mov	 eax, DWORD PTR tv1435[ebp]
  029e3	83 c0 0a	 add	 eax, 10			; 0000000aH
  029e6	89 85 34 fd ff
	ff		 mov	 DWORD PTR _num_buttons$81[ebp], eax

; 2310 :             for (int n = 0; n < num_buttons; n++)

  029ec	c7 85 28 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$80[ebp], 0
  029f6	eb 0f		 jmp	 SHORT $LN46@ShowDemoWi
$LN44@ShowDemoWi:
  029f8	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _n$80[ebp]
  029fe	83 c0 01	 add	 eax, 1
  02a01	89 85 28 fd ff
	ff		 mov	 DWORD PTR _n$80[ebp], eax
$LN46@ShowDemoWi:
  02a07	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _n$80[ebp]
  02a0d	3b 85 34 fd ff
	ff		 cmp	 eax, DWORD PTR _num_buttons$81[ebp]
  02a13	0f 8d 98 02 00
	00		 jge	 $LN45@ShowDemoWi

; 2311 :             {
; 2312 :                 if (n > 0) ImGui::SameLine();

  02a19	83 bd 28 fd ff
	ff 00		 cmp	 DWORD PTR _n$80[ebp], 0
  02a20	7e 1f		 jle	 SHORT $LN98@ShowDemoWi
  02a22	51		 push	 ecx
  02a23	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02a2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a30	51		 push	 ecx
  02a31	0f 57 c0	 xorps	 xmm0, xmm0
  02a34	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a39	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02a3e	83 c4 08	 add	 esp, 8
$LN98@ShowDemoWi:

; 2313 :                 ImGui::PushID(n + line * 1000);

  02a41	69 85 40 fd ff
	ff e8 03 00 00	 imul	 eax, DWORD PTR _line$82[ebp], 1000
  02a4b	03 85 28 fd ff
	ff		 add	 eax, DWORD PTR _n$80[ebp]
  02a51	50		 push	 eax
  02a52	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  02a57	83 c4 04	 add	 esp, 4

; 2314 :                 char num_buf[16];
; 2315 :                 sprintf(num_buf, "%d", n);

  02a5a	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _n$80[ebp]
  02a60	50		 push	 eax
  02a61	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  02a66	8d 8d 10 fd ff
	ff		 lea	 ecx, DWORD PTR _num_buf$79[ebp]
  02a6c	51		 push	 ecx
  02a6d	e8 00 00 00 00	 call	 _sprintf
  02a72	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2316 :                 const char* label = (!(n%15)) ? "FizzBuzz" : (!(n%3)) ? "Fizz" : (!(n%5)) ? "Buzz" : num_buf;

  02a75	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _n$80[ebp]
  02a7b	99		 cdq
  02a7c	b9 0f 00 00 00	 mov	 ecx, 15			; 0000000fH
  02a81	f7 f9		 idiv	 ecx
  02a83	85 d2		 test	 edx, edx
  02a85	75 0c		 jne	 SHORT $LN136@ShowDemoWi
  02a87	c7 85 3c f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1456[ebp], OFFSET ??_C@_08GLBPKMPD@FizzBuzz@
  02a91	eb 60		 jmp	 SHORT $LN137@ShowDemoWi
$LN136@ShowDemoWi:
  02a93	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _n$80[ebp]
  02a99	99		 cdq
  02a9a	b9 03 00 00 00	 mov	 ecx, 3
  02a9f	f7 f9		 idiv	 ecx
  02aa1	85 d2		 test	 edx, edx
  02aa3	75 0c		 jne	 SHORT $LN134@ShowDemoWi
  02aa5	c7 85 38 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1455[ebp], OFFSET ??_C@_04CEPGGBHI@Fizz@
  02aaf	eb 36		 jmp	 SHORT $LN135@ShowDemoWi
$LN134@ShowDemoWi:
  02ab1	8b 85 28 fd ff
	ff		 mov	 eax, DWORD PTR _n$80[ebp]
  02ab7	99		 cdq
  02ab8	b9 05 00 00 00	 mov	 ecx, 5
  02abd	f7 f9		 idiv	 ecx
  02abf	85 d2		 test	 edx, edx
  02ac1	75 0c		 jne	 SHORT $LN132@ShowDemoWi
  02ac3	c7 85 34 f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1454[ebp], OFFSET ??_C@_04MLLJCPJP@Buzz@
  02acd	eb 0c		 jmp	 SHORT $LN133@ShowDemoWi
$LN132@ShowDemoWi:
  02acf	8d 95 10 fd ff
	ff		 lea	 edx, DWORD PTR _num_buf$79[ebp]
  02ad5	89 95 34 f4 ff
	ff		 mov	 DWORD PTR tv1454[ebp], edx
$LN133@ShowDemoWi:
  02adb	8b 85 34 f4 ff
	ff		 mov	 eax, DWORD PTR tv1454[ebp]
  02ae1	89 85 38 f4 ff
	ff		 mov	 DWORD PTR tv1455[ebp], eax
$LN135@ShowDemoWi:
  02ae7	8b 8d 38 f4 ff
	ff		 mov	 ecx, DWORD PTR tv1455[ebp]
  02aed	89 8d 3c f4 ff
	ff		 mov	 DWORD PTR tv1456[ebp], ecx
$LN137@ShowDemoWi:
  02af3	8b 95 3c f4 ff
	ff		 mov	 edx, DWORD PTR tv1456[ebp]
  02af9	89 95 04 fd ff
	ff		 mov	 DWORD PTR _label$78[ebp], edx

; 2317 :                 float hue = n*0.05f;

  02aff	f3 0f 2a 85 28
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _n$80[ebp]
  02b07	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3d4ccccd
  02b0f	f3 0f 11 85 f8
	fc ff ff	 movss	 DWORD PTR _hue$77[ebp], xmm0

; 2318 :                 ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(hue, 0.6f, 0.6f));

  02b17	8d 85 74 f5 ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  02b1d	50		 push	 eax
  02b1e	51		 push	 ecx
  02b1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02b27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b2c	51		 push	 ecx
  02b2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  02b35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b3a	51		 push	 ecx
  02b3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  02b43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b48	51		 push	 ecx
  02b49	f3 0f 10 85 f8
	fc ff ff	 movss	 xmm0, DWORD PTR _hue$77[ebp]
  02b51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b56	8d 8d 8c f5 ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  02b5c	51		 push	 ecx
  02b5d	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  02b62	83 c4 14	 add	 esp, 20			; 00000014H
  02b65	8b c8		 mov	 ecx, eax
  02b67	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  02b6c	50		 push	 eax
  02b6d	6a 15		 push	 21			; 00000015H
  02b6f	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  02b74	83 c4 08	 add	 esp, 8

; 2319 :                 ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(hue, 0.7f, 0.7f));

  02b77	8d 85 44 f5 ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  02b7d	50		 push	 eax
  02b7e	51		 push	 ecx
  02b7f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02b87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b8c	51		 push	 ecx
  02b8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  02b95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b9a	51		 push	 ecx
  02b9b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  02ba3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ba8	51		 push	 ecx
  02ba9	f3 0f 10 85 f8
	fc ff ff	 movss	 xmm0, DWORD PTR _hue$77[ebp]
  02bb1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bb6	8d 8d 5c f5 ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  02bbc	51		 push	 ecx
  02bbd	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  02bc2	83 c4 14	 add	 esp, 20			; 00000014H
  02bc5	8b c8		 mov	 ecx, eax
  02bc7	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  02bcc	50		 push	 eax
  02bcd	6a 16		 push	 22			; 00000016H
  02bcf	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  02bd4	83 c4 08	 add	 esp, 8

; 2320 :                 ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(hue, 0.8f, 0.8f));

  02bd7	8d 85 14 f5 ff
	ff		 lea	 eax, DWORD PTR $T15[ebp]
  02bdd	50		 push	 eax
  02bde	51		 push	 ecx
  02bdf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02be7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bec	51		 push	 ecx
  02bed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02bf5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bfa	51		 push	 ecx
  02bfb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  02c03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c08	51		 push	 ecx
  02c09	f3 0f 10 85 f8
	fc ff ff	 movss	 xmm0, DWORD PTR _hue$77[ebp]
  02c11	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c16	8d 8d 2c f5 ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  02c1c	51		 push	 ecx
  02c1d	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  02c22	83 c4 14	 add	 esp, 20			; 00000014H
  02c25	8b c8		 mov	 ecx, eax
  02c27	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  02c2c	50		 push	 eax
  02c2d	6a 17		 push	 23			; 00000017H
  02c2f	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  02c34	83 c4 08	 add	 esp, 8

; 2321 :                 ImGui::Button(label, ImVec2(40.0f + sinf((float)(line + n)) * 20.0f, 0.0f));

  02c37	51		 push	 ecx
  02c38	0f 57 c0	 xorps	 xmm0, xmm0
  02c3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c40	8b 85 40 fd ff
	ff		 mov	 eax, DWORD PTR _line$82[ebp]
  02c46	03 85 28 fd ff
	ff		 add	 eax, DWORD PTR _n$80[ebp]
  02c4c	f3 0f 2a c0	 cvtsi2ss xmm0, eax
  02c50	51		 push	 ecx
  02c51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c56	e8 00 00 00 00	 call	 _sinf
  02c5b	83 c4 04	 add	 esp, 4
  02c5e	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2908[ebp]
  02c64	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2908[ebp]
  02c6c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  02c74	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@42200000
  02c7c	51		 push	 ecx
  02c7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c82	8d 8d 04 f5 ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  02c88	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02c8d	50		 push	 eax
  02c8e	8b 8d 04 fd ff
	ff		 mov	 ecx, DWORD PTR _label$78[ebp]
  02c94	51		 push	 ecx
  02c95	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  02c9a	83 c4 08	 add	 esp, 8

; 2322 :                 ImGui::PopStyleColor(3);

  02c9d	6a 03		 push	 3
  02c9f	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
  02ca4	83 c4 04	 add	 esp, 4

; 2323 :                 ImGui::PopID();

  02ca7	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 2324 :             }

  02cac	e9 47 fd ff ff	 jmp	 $LN44@ShowDemoWi
$LN45@ShowDemoWi:

; 2325 :         }

  02cb1	e9 df fc ff ff	 jmp	 $LN41@ShowDemoWi
$LN42@ShowDemoWi:

; 2326 :         float scroll_x = ImGui::GetScrollX();

  02cb6	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  02cbb	d9 9d ec fc ff
	ff		 fstp	 DWORD PTR _scroll_x$76[ebp]

; 2327 :         float scroll_max_x = ImGui::GetScrollMaxX();

  02cc1	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  02cc6	d9 9d e0 fc ff
	ff		 fstp	 DWORD PTR _scroll_max_x$75[ebp]

; 2328 :         ImGui::EndChild();

  02ccc	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 2329 :         ImGui::PopStyleVar(2);

  02cd1	6a 02		 push	 2
  02cd3	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  02cd8	83 c4 04	 add	 esp, 4

; 2330 :         float scroll_x_delta = 0.0f;

  02cdb	0f 57 c0	 xorps	 xmm0, xmm0
  02cde	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR _scroll_x_delta$74[ebp], xmm0

; 2331 :         ImGui::SmallButton("<<"); if (ImGui::IsItemActive()) { scroll_x_delta = -ImGui::GetIO().DeltaTime * 1000.0f; } ImGui::SameLine();

  02ce6	68 00 00 00 00	 push	 OFFSET ??_C@_02FODMEDOG@?$DM?$DM@
  02ceb	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  02cf0	83 c4 04	 add	 esp, 4
  02cf3	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  02cf8	0f b6 c0	 movzx	 eax, al
  02cfb	85 c0		 test	 eax, eax
  02cfd	74 21		 je	 SHORT $LN99@ShowDemoWi
  02cff	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  02d04	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  02d09	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  02d10	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@447a0000
  02d18	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR _scroll_x_delta$74[ebp], xmm0
$LN99@ShowDemoWi:
  02d20	51		 push	 ecx
  02d21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02d29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d2e	51		 push	 ecx
  02d2f	0f 57 c0	 xorps	 xmm0, xmm0
  02d32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d37	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02d3c	83 c4 08	 add	 esp, 8

; 2332 :         ImGui::Text("Scroll from code"); ImGui::SameLine();

  02d3f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@HICDBOJF@Scroll?5from?5code@
  02d44	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  02d49	83 c4 04	 add	 esp, 4
  02d4c	51		 push	 ecx
  02d4d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02d55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d5a	51		 push	 ecx
  02d5b	0f 57 c0	 xorps	 xmm0, xmm0
  02d5e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d63	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02d68	83 c4 08	 add	 esp, 8

; 2333 :         ImGui::SmallButton(">>"); if (ImGui::IsItemActive()) { scroll_x_delta = +ImGui::GetIO().DeltaTime * 1000.0f; } ImGui::SameLine();

  02d6b	68 00 00 00 00	 push	 OFFSET ??_C@_02GPIOPFAK@?$DO?$DO@
  02d70	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  02d75	83 c4 04	 add	 esp, 4
  02d78	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  02d7d	0f b6 c0	 movzx	 eax, al
  02d80	85 c0		 test	 eax, eax
  02d82	74 1a		 je	 SHORT $LN100@ShowDemoWi
  02d84	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  02d89	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  02d8e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@447a0000
  02d96	f3 0f 11 85 d4
	fc ff ff	 movss	 DWORD PTR _scroll_x_delta$74[ebp], xmm0
$LN100@ShowDemoWi:
  02d9e	51		 push	 ecx
  02d9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02da7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02dac	51		 push	 ecx
  02dad	0f 57 c0	 xorps	 xmm0, xmm0
  02db0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02db5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02dba	83 c4 08	 add	 esp, 8

; 2334 :         ImGui::Text("%.0f/%.0f", scroll_x, scroll_max_x);

  02dbd	f3 0f 5a 85 e0
	fc ff ff	 cvtss2sd xmm0, DWORD PTR _scroll_max_x$75[ebp]
  02dc5	83 ec 08	 sub	 esp, 8
  02dc8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02dcd	f3 0f 5a 85 ec
	fc ff ff	 cvtss2sd xmm0, DWORD PTR _scroll_x$76[ebp]
  02dd5	83 ec 08	 sub	 esp, 8
  02dd8	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02ddd	68 00 00 00 00	 push	 OFFSET ??_C@_09DKGDMKKF@?$CF?40f?1?$CF?40f@
  02de2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  02de7	83 c4 14	 add	 esp, 20			; 00000014H

; 2335 :         if (scroll_x_delta != 0.0f)

  02dea	f3 0f 10 85 d4
	fc ff ff	 movss	 xmm0, DWORD PTR _scroll_x_delta$74[ebp]
  02df2	0f 2e 05 00 00
	00 00		 ucomiss xmm0, DWORD PTR __real@00000000
  02df9	9f		 lahf
  02dfa	f6 c4 44	 test	 ah, 68			; 00000044H
  02dfd	7b 5d		 jnp	 SHORT $LN101@ShowDemoWi

; 2336 :         {
; 2337 :             ImGui::BeginChild("scrolling"); // Demonstrate a trick: you can use Begin to set yourself in the context of another window (here we are already out of your child window)

  02dff	6a 00		 push	 0
  02e01	6a 00		 push	 0
  02e03	51		 push	 ecx
  02e04	0f 57 c0	 xorps	 xmm0, xmm0
  02e07	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e0c	51		 push	 ecx
  02e0d	0f 57 c0	 xorps	 xmm0, xmm0
  02e10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e15	8d 8d f4 f4 ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  02e1b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02e20	50		 push	 eax
  02e21	68 00 00 00 00	 push	 OFFSET ??_C@_09PKEBEIDM@scrolling@
  02e26	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  02e2b	83 c4 10	 add	 esp, 16			; 00000010H

; 2338 :             ImGui::SetScrollX(ImGui::GetScrollX() + scroll_x_delta);

  02e2e	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  02e33	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv2951[ebp]
  02e39	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv2951[ebp]
  02e41	f3 0f 58 85 d4
	fc ff ff	 addss	 xmm0, DWORD PTR _scroll_x_delta$74[ebp]
  02e49	51		 push	 ecx
  02e4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e4f	e8 00 00 00 00	 call	 ?SetScrollX@ImGui@@YAXM@Z ; ImGui::SetScrollX
  02e54	83 c4 04	 add	 esp, 4

; 2339 :             ImGui::EndChild();

  02e57	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild
$LN101@ShowDemoWi:

; 2340 :         }
; 2341 :         ImGui::Spacing();

  02e5c	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 2342 : 
; 2343 :         static bool show_horizontal_contents_size_demo_window = false;
; 2344 :         ImGui::Checkbox("Show Horizontal contents size demo window", &show_horizontal_contents_size_demo_window);

  02e61	68 00 00 00 00	 push	 OFFSET ?show_horizontal_contents_size_demo_window@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02e66	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@KHHLOHPL@Show?5Horizontal?5contents?5size?5d@
  02e6b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02e70	83 c4 08	 add	 esp, 8

; 2345 : 
; 2346 :         if (show_horizontal_contents_size_demo_window)

  02e73	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_horizontal_contents_size_demo_window@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02e7a	85 c0		 test	 eax, eax
  02e7c	0f 84 5b 05 00
	00		 je	 $LN102@ShowDemoWi

; 2347 :         {
; 2348 :             static bool show_h_scrollbar = true;
; 2349 :             static bool show_button = true;
; 2350 :             static bool show_tree_nodes = true;
; 2351 :             static bool show_text_wrapped = false;
; 2352 :             static bool show_columns = true;
; 2353 :             static bool show_tab_bar = true;
; 2354 :             static bool show_child = false;
; 2355 :             static bool explicit_content_size = false;
; 2356 :             static float contents_size_x = 300.0f;
; 2357 :             if (explicit_content_size)

  02e82	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?explicit_content_size@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02e89	85 c0		 test	 eax, eax
  02e8b	74 2b		 je	 SHORT $LN103@ShowDemoWi

; 2358 :                 ImGui::SetNextWindowContentSize(ImVec2(contents_size_x, 0.0f));

  02e8d	51		 push	 ecx
  02e8e	0f 57 c0	 xorps	 xmm0, xmm0
  02e91	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e96	51		 push	 ecx
  02e97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?contents_size_x@?KF@??ShowDemoWindowLayout@@YAXXZ@4MA
  02e9f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ea4	8d 8d e4 f4 ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  02eaa	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02eaf	50		 push	 eax
  02eb0	e8 00 00 00 00	 call	 ?SetNextWindowContentSize@ImGui@@YAXABUImVec2@@@Z ; ImGui::SetNextWindowContentSize
  02eb5	83 c4 04	 add	 esp, 4
$LN103@ShowDemoWi:

; 2359 :             ImGui::Begin("Horizontal contents size demo window", &show_horizontal_contents_size_demo_window, show_h_scrollbar ? ImGuiWindowFlags_HorizontalScrollbar : 0);

  02eb8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_h_scrollbar@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02ebf	85 c0		 test	 eax, eax
  02ec1	74 0c		 je	 SHORT $LN138@ShowDemoWi
  02ec3	c7 85 3c f4 ff
	ff 00 08 00 00	 mov	 DWORD PTR tv1625[ebp], 2048 ; 00000800H
  02ecd	eb 0a		 jmp	 SHORT $LN139@ShowDemoWi
$LN138@ShowDemoWi:
  02ecf	c7 85 3c f4 ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1625[ebp], 0
$LN139@ShowDemoWi:
  02ed9	8b 8d 3c f4 ff
	ff		 mov	 ecx, DWORD PTR tv1625[ebp]
  02edf	51		 push	 ecx
  02ee0	68 00 00 00 00	 push	 OFFSET ?show_horizontal_contents_size_demo_window@?GK@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02ee5	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@OHGKBEFE@Horizontal?5contents?5size?5demo?5w@
  02eea	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  02eef	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2360 :             ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(2, 0));

  02ef2	51		 push	 ecx
  02ef3	0f 57 c0	 xorps	 xmm0, xmm0
  02ef6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02efb	51		 push	 ecx
  02efc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02f04	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f09	8d 8d d4 f4 ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  02f0f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02f14	50		 push	 eax
  02f15	6a 0d		 push	 13			; 0000000dH
  02f17	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  02f1c	83 c4 08	 add	 esp, 8

; 2361 :             ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2, 0));

  02f1f	51		 push	 ecx
  02f20	0f 57 c0	 xorps	 xmm0, xmm0
  02f23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f28	51		 push	 ecx
  02f29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  02f31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f36	8d 8d c4 f4 ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  02f3c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02f41	50		 push	 eax
  02f42	6a 0a		 push	 10			; 0000000aH
  02f44	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  02f49	83 c4 08	 add	 esp, 8

; 2362 :             HelpMarker("Test of different widgets react and impact the work rectangle growing when horizontal scrolling is enabled.\n\nUse 'Metrics->Tools->Show windows rectangles' to visualize rectangles.");

  02f4c	68 00 00 00 00	 push	 OFFSET ??_C@_0LE@BCMFBNBD@Test?5of?5different?5widgets?5react@
  02f51	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  02f56	83 c4 04	 add	 esp, 4

; 2363 :             ImGui::Checkbox("H-scrollbar", &show_h_scrollbar);

  02f59	68 00 00 00 00	 push	 OFFSET ?show_h_scrollbar@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02f5e	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PCJBMDND@H?9scrollbar@
  02f63	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02f68	83 c4 08	 add	 esp, 8

; 2364 :             ImGui::Checkbox("Button", &show_button);            // Will grow contents size (unless explicitly overwritten)

  02f6b	68 00 00 00 00	 push	 OFFSET ?show_button@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02f70	68 00 00 00 00	 push	 OFFSET ??_C@_06LKBCGDFD@Button@
  02f75	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02f7a	83 c4 08	 add	 esp, 8

; 2365 :             ImGui::Checkbox("Tree nodes", &show_tree_nodes);    // Will grow contents size and display highlight over full width

  02f7d	68 00 00 00 00	 push	 OFFSET ?show_tree_nodes@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02f82	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DIDHCLKE@Tree?5nodes@
  02f87	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02f8c	83 c4 08	 add	 esp, 8

; 2366 :             ImGui::Checkbox("Text wrapped", &show_text_wrapped);// Will grow and use contents size

  02f8f	68 00 00 00 00	 push	 OFFSET ?show_text_wrapped@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02f94	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HDFBIJDK@Text?5wrapped@
  02f99	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02f9e	83 c4 08	 add	 esp, 8

; 2367 :             ImGui::Checkbox("Columns", &show_columns);          // Will use contents size

  02fa1	68 00 00 00 00	 push	 OFFSET ?show_columns@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02fa6	68 00 00 00 00	 push	 OFFSET ??_C@_07IBCCJKML@Columns@
  02fab	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02fb0	83 c4 08	 add	 esp, 8

; 2368 :             ImGui::Checkbox("Tab bar", &show_tab_bar);          // Will use contents size

  02fb3	68 00 00 00 00	 push	 OFFSET ?show_tab_bar@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02fb8	68 00 00 00 00	 push	 OFFSET ??_C@_07CHLOJOEF@Tab?5bar@
  02fbd	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02fc2	83 c4 08	 add	 esp, 8

; 2369 :             ImGui::Checkbox("Child", &show_child);              // Will grow and use contents size

  02fc5	68 00 00 00 00	 push	 OFFSET ?show_child@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02fca	68 00 00 00 00	 push	 OFFSET ??_C@_05GIMBDOHM@Child@
  02fcf	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02fd4	83 c4 08	 add	 esp, 8

; 2370 :             ImGui::Checkbox("Explicit content size", &explicit_content_size);

  02fd7	68 00 00 00 00	 push	 OFFSET ?explicit_content_size@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  02fdc	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GEDBKKBK@Explicit?5content?5size@
  02fe1	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02fe6	83 c4 08	 add	 esp, 8

; 2371 :             ImGui::Text("Scroll %.1f/%.1f %.1f/%.1f", ImGui::GetScrollX(), ImGui::GetScrollMaxX(), ImGui::GetScrollY(), ImGui::GetScrollMaxY());

  02fe9	e8 00 00 00 00	 call	 ?GetScrollMaxY@ImGui@@YAMXZ ; ImGui::GetScrollMaxY
  02fee	83 ec 08	 sub	 esp, 8
  02ff1	dd 1c 24	 fstp	 QWORD PTR [esp]
  02ff4	e8 00 00 00 00	 call	 ?GetScrollY@ImGui@@YAMXZ ; ImGui::GetScrollY
  02ff9	83 ec 08	 sub	 esp, 8
  02ffc	dd 1c 24	 fstp	 QWORD PTR [esp]
  02fff	e8 00 00 00 00	 call	 ?GetScrollMaxX@ImGui@@YAMXZ ; ImGui::GetScrollMaxX
  03004	83 ec 08	 sub	 esp, 8
  03007	dd 1c 24	 fstp	 QWORD PTR [esp]
  0300a	e8 00 00 00 00	 call	 ?GetScrollX@ImGui@@YAMXZ ; ImGui::GetScrollX
  0300f	83 ec 08	 sub	 esp, 8
  03012	dd 1c 24	 fstp	 QWORD PTR [esp]
  03015	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@EDCBBBDH@Scroll?5?$CF?41f?1?$CF?41f?5?$CF?41f?1?$CF?41f@
  0301a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0301f	83 c4 24	 add	 esp, 36			; 00000024H

; 2372 :             if (explicit_content_size)

  03022	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?explicit_content_size@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  03029	85 c0		 test	 eax, eax
  0302b	0f 84 95 01 00
	00		 je	 $LN104@ShowDemoWi

; 2373 :             {
; 2374 :                 ImGui::SameLine();

  03031	51		 push	 ecx
  03032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0303a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0303f	51		 push	 ecx
  03040	0f 57 c0	 xorps	 xmm0, xmm0
  03043	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03048	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0304d	83 c4 08	 add	 esp, 8

; 2375 :                 ImGui::SetNextItemWidth(100);

  03050	51		 push	 ecx
  03051	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  03059	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0305e	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  03063	83 c4 04	 add	 esp, 4

; 2376 :                 ImGui::DragFloat("##csx", &contents_size_x);

  03066	51		 push	 ecx
  03067	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0306f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03074	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  03079	51		 push	 ecx
  0307a	0f 57 c0	 xorps	 xmm0, xmm0
  0307d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03082	51		 push	 ecx
  03083	0f 57 c0	 xorps	 xmm0, xmm0
  03086	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0308b	51		 push	 ecx
  0308c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03099	68 00 00 00 00	 push	 OFFSET ?contents_size_x@?KF@??ShowDemoWindowLayout@@YAXXZ@4MA
  0309e	68 00 00 00 00	 push	 OFFSET ??_C@_05NBKGABAK@?$CD?$CDcsx@
  030a3	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  030a8	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2377 :                 ImVec2 p = ImGui::GetCursorScreenPos();

  030ab	8d 85 c4 fc ff
	ff		 lea	 eax, DWORD PTR _p$73[ebp]
  030b1	50		 push	 eax
  030b2	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  030b7	83 c4 04	 add	 esp, 4

; 2378 :                 ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x + 10, p.y + 10), IM_COL32_WHITE);

  030ba	6a 0f		 push	 15			; 0000000fH
  030bc	51		 push	 ecx
  030bd	0f 57 c0	 xorps	 xmm0, xmm0
  030c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030c5	6a ff		 push	 -1
  030c7	f3 0f 10 85 c8
	fc ff ff	 movss	 xmm0, DWORD PTR _p$73[ebp+4]
  030cf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  030d7	51		 push	 ecx
  030d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030dd	f3 0f 10 85 c4
	fc ff ff	 movss	 xmm0, DWORD PTR _p$73[ebp]
  030e5	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  030ed	51		 push	 ecx
  030ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  030f3	8d 8d b4 f4 ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  030f9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  030fe	50		 push	 eax
  030ff	8d 85 c4 fc ff
	ff		 lea	 eax, DWORD PTR _p$73[ebp]
  03105	50		 push	 eax
  03106	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  0310b	8b c8		 mov	 ecx, eax
  0310d	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 2379 :                 ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(p.x + contents_size_x - 10, p.y), ImVec2(p.x + contents_size_x, p.y + 10), IM_COL32_WHITE);

  03112	6a 0f		 push	 15			; 0000000fH
  03114	51		 push	 ecx
  03115	0f 57 c0	 xorps	 xmm0, xmm0
  03118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0311d	6a ff		 push	 -1
  0311f	f3 0f 10 85 c8
	fc ff ff	 movss	 xmm0, DWORD PTR _p$73[ebp+4]
  03127	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  0312f	51		 push	 ecx
  03130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03135	f3 0f 10 85 c4
	fc ff ff	 movss	 xmm0, DWORD PTR _p$73[ebp]
  0313d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?contents_size_x@?KF@??ShowDemoWindowLayout@@YAXXZ@4MA
  03145	51		 push	 ecx
  03146	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0314b	8d 8d a4 f4 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  03151	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03156	50		 push	 eax
  03157	51		 push	 ecx
  03158	f3 0f 10 85 c8
	fc ff ff	 movss	 xmm0, DWORD PTR _p$73[ebp+4]
  03160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03165	f3 0f 10 85 c4
	fc ff ff	 movss	 xmm0, DWORD PTR _p$73[ebp]
  0316d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?contents_size_x@?KF@??ShowDemoWindowLayout@@YAXXZ@4MA
  03175	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  0317d	51		 push	 ecx
  0317e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03183	8d 8d 94 f4 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  03189	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0318e	50		 push	 eax
  0318f	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  03194	8b c8		 mov	 ecx, eax
  03196	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 2380 :                 ImGui::Dummy(ImVec2(0, 10));

  0319b	51		 push	 ecx
  0319c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  031a4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031a9	51		 push	 ecx
  031aa	0f 57 c0	 xorps	 xmm0, xmm0
  031ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031b2	8d 8d 84 f4 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  031b8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  031bd	50		 push	 eax
  031be	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXABUImVec2@@@Z ; ImGui::Dummy
  031c3	83 c4 04	 add	 esp, 4
$LN104@ShowDemoWi:

; 2381 :             }
; 2382 :             ImGui::PopStyleVar(2);

  031c6	6a 02		 push	 2
  031c8	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  031cd	83 c4 04	 add	 esp, 4

; 2383 :             ImGui::Separator();

  031d0	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 2384 :             if (show_button)

  031d5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_button@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  031dc	85 c0		 test	 eax, eax
  031de	74 30		 je	 SHORT $LN105@ShowDemoWi

; 2385 :             {
; 2386 :                 ImGui::Button("this is a 300-wide button", ImVec2(300, 0));

  031e0	51		 push	 ecx
  031e1	0f 57 c0	 xorps	 xmm0, xmm0
  031e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031e9	51		 push	 ecx
  031ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  031f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  031f7	8d 8d 74 f4 ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  031fd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03202	50		 push	 eax
  03203	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@GGAJDBIL@this?5is?5a?5300?9wide?5button@
  03208	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0320d	83 c4 08	 add	 esp, 8
$LN105@ShowDemoWi:

; 2387 :             }
; 2388 :             if (show_tree_nodes)

  03210	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_tree_nodes@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  03217	85 c0		 test	 eax, eax
  03219	74 5c		 je	 SHORT $LN106@ShowDemoWi

; 2389 :             {
; 2390 :                 bool open = true;

  0321b	c6 85 bb fc ff
	ff 01		 mov	 BYTE PTR _open$72[ebp], 1

; 2391 :                 if (ImGui::TreeNode("this is a tree node"))

  03222	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HNGLJJLH@this?5is?5a?5tree?5node@
  03227	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0322c	83 c4 04	 add	 esp, 4
  0322f	0f b6 c0	 movzx	 eax, al
  03232	85 c0		 test	 eax, eax
  03234	74 2b		 je	 SHORT $LN107@ShowDemoWi

; 2392 :                 {
; 2393 :                     if (ImGui::TreeNode("another one of those tree node..."))

  03236	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FFNCLEGA@another?5one?5of?5those?5tree?5node?4@
  0323b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  03240	83 c4 04	 add	 esp, 4
  03243	0f b6 c0	 movzx	 eax, al
  03246	85 c0		 test	 eax, eax
  03248	74 12		 je	 SHORT $LN108@ShowDemoWi

; 2394 :                     {
; 2395 :                         ImGui::Text("Some tree contents");

  0324a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GOEDKDLO@Some?5tree?5contents@
  0324f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03254	83 c4 04	 add	 esp, 4

; 2396 :                         ImGui::TreePop();

  03257	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN108@ShowDemoWi:

; 2397 :                     }
; 2398 :                     ImGui::TreePop();

  0325c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN107@ShowDemoWi:

; 2399 :                 }
; 2400 :                 ImGui::CollapsingHeader("CollapsingHeader", &open);

  03261	6a 00		 push	 0
  03263	8d 85 bb fc ff
	ff		 lea	 eax, DWORD PTR _open$72[ebp]
  03269	50		 push	 eax
  0326a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LBMIMLJO@CollapsingHeader@
  0326f	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDPA_NH@Z ; ImGui::CollapsingHeader
  03274	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN106@ShowDemoWi:

; 2401 :             }
; 2402 :             if (show_text_wrapped)

  03277	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_text_wrapped@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  0327e	85 c0		 test	 eax, eax
  03280	74 0d		 je	 SHORT $LN109@ShowDemoWi

; 2403 :             {
; 2404 :                 ImGui::TextWrapped("This text should automatically wrap on the edge of the work rectangle.");

  03282	68 00 00 00 00	 push	 OFFSET ??_C@_0EH@ECONPGGJ@This?5text?5should?5automatically?5@
  03287	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  0328c	83 c4 04	 add	 esp, 4
$LN109@ShowDemoWi:

; 2405 :             }
; 2406 :             if (show_columns)

  0328f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_columns@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  03296	85 c0		 test	 eax, eax
  03298	74 61		 je	 SHORT $LN110@ShowDemoWi

; 2407 :             {
; 2408 :                 ImGui::Columns(4);

  0329a	6a 01		 push	 1
  0329c	6a 00		 push	 0
  0329e	6a 04		 push	 4
  032a0	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  032a5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2409 :                 for (int n = 0; n < 4; n++)

  032a8	c7 85 ac fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$71[ebp], 0
  032b2	eb 0f		 jmp	 SHORT $LN49@ShowDemoWi
$LN47@ShowDemoWi:
  032b4	8b 85 ac fc ff
	ff		 mov	 eax, DWORD PTR _n$71[ebp]
  032ba	83 c0 01	 add	 eax, 1
  032bd	89 85 ac fc ff
	ff		 mov	 DWORD PTR _n$71[ebp], eax
$LN49@ShowDemoWi:
  032c3	83 bd ac fc ff
	ff 04		 cmp	 DWORD PTR _n$71[ebp], 4
  032ca	7d 21		 jge	 SHORT $LN48@ShowDemoWi

; 2410 :                 {
; 2411 :                     ImGui::Text("Width %.2f", ImGui::GetColumnWidth());

  032cc	6a ff		 push	 -1
  032ce	e8 00 00 00 00	 call	 ?GetColumnWidth@ImGui@@YAMH@Z ; ImGui::GetColumnWidth
  032d3	83 c4 fc	 add	 esp, -4			; fffffffcH
  032d6	dd 1c 24	 fstp	 QWORD PTR [esp]
  032d9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CDOLGENO@Width?5?$CF?42f@
  032de	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  032e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 2412 :                     ImGui::NextColumn();

  032e6	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 2413 :                 }

  032eb	eb c7		 jmp	 SHORT $LN47@ShowDemoWi
$LN48@ShowDemoWi:

; 2414 :                 ImGui::Columns(1);

  032ed	6a 01		 push	 1
  032ef	6a 00		 push	 0
  032f1	6a 01		 push	 1
  032f3	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  032f8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN110@ShowDemoWi:

; 2415 :             }
; 2416 :             if (show_tab_bar && ImGui::BeginTabBar("Hello"))

  032fb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_tab_bar@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  03302	85 c0		 test	 eax, eax
  03304	0f 84 8f 00 00
	00		 je	 $LN111@ShowDemoWi
  0330a	6a 00		 push	 0
  0330c	68 00 00 00 00	 push	 OFFSET ??_C@_05COLMCDPH@Hello@
  03311	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  03316	83 c4 08	 add	 esp, 8
  03319	0f b6 c0	 movzx	 eax, al
  0331c	85 c0		 test	 eax, eax
  0331e	74 79		 je	 SHORT $LN111@ShowDemoWi

; 2417 :             {
; 2418 :                 if (ImGui::BeginTabItem("OneOneOne")) { ImGui::EndTabItem(); }

  03320	6a 00		 push	 0
  03322	6a 00		 push	 0
  03324	68 00 00 00 00	 push	 OFFSET ??_C@_09DHLFJNGJ@OneOneOne@
  03329	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  0332e	83 c4 0c	 add	 esp, 12			; 0000000cH
  03331	0f b6 c0	 movzx	 eax, al
  03334	85 c0		 test	 eax, eax
  03336	74 05		 je	 SHORT $LN112@ShowDemoWi
  03338	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN112@ShowDemoWi:

; 2419 :                 if (ImGui::BeginTabItem("TwoTwoTwo")) { ImGui::EndTabItem(); }

  0333d	6a 00		 push	 0
  0333f	6a 00		 push	 0
  03341	68 00 00 00 00	 push	 OFFSET ??_C@_09BMOICMLJ@TwoTwoTwo@
  03346	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  0334b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0334e	0f b6 c0	 movzx	 eax, al
  03351	85 c0		 test	 eax, eax
  03353	74 05		 je	 SHORT $LN113@ShowDemoWi
  03355	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN113@ShowDemoWi:

; 2420 :                 if (ImGui::BeginTabItem("ThreeThreeThree")) { ImGui::EndTabItem(); }

  0335a	6a 00		 push	 0
  0335c	6a 00		 push	 0
  0335e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BGMNPICP@ThreeThreeThree@
  03363	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  03368	83 c4 0c	 add	 esp, 12			; 0000000cH
  0336b	0f b6 c0	 movzx	 eax, al
  0336e	85 c0		 test	 eax, eax
  03370	74 05		 je	 SHORT $LN114@ShowDemoWi
  03372	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN114@ShowDemoWi:

; 2421 :                 if (ImGui::BeginTabItem("FourFourFour")) { ImGui::EndTabItem(); }

  03377	6a 00		 push	 0
  03379	6a 00		 push	 0
  0337b	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GNNAMPMJ@FourFourFour@
  03380	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  03385	83 c4 0c	 add	 esp, 12			; 0000000cH
  03388	0f b6 c0	 movzx	 eax, al
  0338b	85 c0		 test	 eax, eax
  0338d	74 05		 je	 SHORT $LN115@ShowDemoWi
  0338f	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN115@ShowDemoWi:

; 2422 :                 ImGui::EndTabBar();

  03394	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN111@ShowDemoWi:

; 2423 :             }
; 2424 :             if (show_child)

  03399	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_child@?KF@??ShowDemoWindowLayout@@YAXXZ@4_NA
  033a0	85 c0		 test	 eax, eax
  033a2	74 34		 je	 SHORT $LN116@ShowDemoWi

; 2425 :             {
; 2426 :                 ImGui::BeginChild("child", ImVec2(0,0), true);

  033a4	6a 00		 push	 0
  033a6	6a 01		 push	 1
  033a8	51		 push	 ecx
  033a9	0f 57 c0	 xorps	 xmm0, xmm0
  033ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033b1	51		 push	 ecx
  033b2	0f 57 c0	 xorps	 xmm0, xmm0
  033b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033ba	8d 8d 64 f4 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  033c0	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  033c5	50		 push	 eax
  033c6	68 00 00 00 00	 push	 OFFSET ??_C@_05GPGNDLEK@child@
  033cb	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  033d0	83 c4 10	 add	 esp, 16			; 00000010H

; 2427 :                 ImGui::EndChild();

  033d3	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild
$LN116@ShowDemoWi:

; 2428 :             }
; 2429 :             ImGui::End();

  033d8	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN102@ShowDemoWi:

; 2430 :         }
; 2431 : 
; 2432 :         ImGui::TreePop();

  033dd	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN82@ShowDemoWi:

; 2433 :     }
; 2434 : 
; 2435 :     if (ImGui::TreeNode("Clipping"))

  033e2	68 00 00 00 00	 push	 OFFSET ??_C@_08LLKICGJM@Clipping@
  033e7	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  033ec	83 c4 04	 add	 esp, 4
  033ef	0f b6 c0	 movzx	 eax, al
  033f2	85 c0		 test	 eax, eax
  033f4	0f 84 0c 03 00
	00		 je	 $LN117@ShowDemoWi

; 2436 :     {
; 2437 :         static ImVec2 size(100, 100), offset(50, 20);

  033fa	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  033ff	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  03406	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  03409	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  0340e	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  03414	7e 57		 jle	 SHORT $LN50@ShowDemoWi
  03416	68 00 00 00 00	 push	 OFFSET ?$TSS0@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  0341b	e8 00 00 00 00	 call	 __Init_thread_header
  03420	83 c4 04	 add	 esp, 4
  03423	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA, -1
  0342a	75 41		 jne	 SHORT $LN50@ShowDemoWi
  0342c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  03433	51		 push	 ecx
  03434	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0343c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03441	51		 push	 ecx
  03442	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0344a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0344f	b9 00 00 00 00	 mov	 ecx, OFFSET ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  03454	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03459	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03460	68 00 00 00 00	 push	 OFFSET ?$TSS0@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  03465	e8 00 00 00 00	 call	 __Init_thread_footer
  0346a	83 c4 04	 add	 esp, 4
$LN50@ShowDemoWi:
  0346d	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  03472	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  03479	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0347c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  03481	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  03487	7e 57		 jle	 SHORT $LN51@ShowDemoWi
  03489	68 00 00 00 00	 push	 OFFSET ?$TSS1@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  0348e	e8 00 00 00 00	 call	 __Init_thread_header
  03493	83 c4 04	 add	 esp, 4
  03496	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA, -1
  0349d	75 41		 jne	 SHORT $LN51@ShowDemoWi
  0349f	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  034a6	51		 push	 ecx
  034a7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  034af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034b4	51		 push	 ecx
  034b5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  034bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034c2	b9 00 00 00 00	 mov	 ecx, OFFSET ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  034c7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  034cc	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  034d3	68 00 00 00 00	 push	 OFFSET ?$TSS1@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  034d8	e8 00 00 00 00	 call	 __Init_thread_footer
  034dd	83 c4 04	 add	 esp, 4
$LN51@ShowDemoWi:

; 2438 :         ImGui::TextWrapped("On a per-widget basis we are occasionally clipping text CPU-side if it won't fit in its frame. Otherwise we are doing coarser clipping + passing a scissor rectangle to the renderer. The system is designed to try minimizing both execution and CPU/GPU rendering cost.");

  034e0	68 00 00 00 00	 push	 OFFSET ??_C@_0BAK@JJMCOOGK@On?5a?5per?9widget?5basis?5we?5are?5oc@
  034e5	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  034ea	83 c4 04	 add	 esp, 4

; 2439 :         ImGui::DragFloat2("size", (float*)&size, 0.5f, 1.0f, 200.0f, "%.0f");

  034ed	51		 push	 ecx
  034ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  034f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  034fb	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  03500	51		 push	 ecx
  03501	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  03509	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0350e	51		 push	 ecx
  0350f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03517	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0351c	51		 push	 ecx
  0351d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  03525	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0352a	68 00 00 00 00	 push	 OFFSET ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  0352f	68 00 00 00 00	 push	 OFFSET ??_C@_04IAGNFIBA@size@
  03534	e8 00 00 00 00	 call	 ?DragFloat2@ImGui@@YA_NPBDQAMMMM0M@Z ; ImGui::DragFloat2
  03539	83 c4 1c	 add	 esp, 28			; 0000001cH

; 2440 :         ImGui::TextWrapped("(Click and drag)");

  0353c	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@BLJLNCGP@?$CIClick?5and?5drag?$CJ@
  03541	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  03546	83 c4 04	 add	 esp, 4

; 2441 :         ImVec2 pos = ImGui::GetCursorScreenPos();

  03549	8d 85 9c fc ff
	ff		 lea	 eax, DWORD PTR _pos$70[ebp]
  0354f	50		 push	 eax
  03550	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  03555	83 c4 04	 add	 esp, 4

; 2442 :         ImVec4 clip_rect(pos.x, pos.y, pos.x + size.x, pos.y + size.y);

  03558	f3 0f 10 85 a0
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp+4]
  03560	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4
  03568	51		 push	 ecx
  03569	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0356e	f3 0f 10 85 9c
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp]
  03576	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  0357e	51		 push	 ecx
  0357f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03584	51		 push	 ecx
  03585	f3 0f 10 85 a0
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp+4]
  0358d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03592	51		 push	 ecx
  03593	f3 0f 10 85 9c
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp]
  0359b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035a0	8d 8d 84 fc ff
	ff		 lea	 ecx, DWORD PTR _clip_rect$69[ebp]
  035a6	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4

; 2443 :         ImGui::InvisibleButton("##dummy", size);

  035ab	68 00 00 00 00	 push	 OFFSET ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  035b0	68 00 00 00 00	 push	 OFFSET ??_C@_07MGJIPBMD@?$CD?$CDdummy@
  035b5	e8 00 00 00 00	 call	 ?InvisibleButton@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::InvisibleButton
  035ba	83 c4 08	 add	 esp, 8

; 2444 :         if (ImGui::IsItemActive() && ImGui::IsMouseDragging(0)) { offset.x += ImGui::GetIO().MouseDelta.x; offset.y += ImGui::GetIO().MouseDelta.y; }

  035bd	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  035c2	0f b6 c0	 movzx	 eax, al
  035c5	85 c0		 test	 eax, eax
  035c7	74 59		 je	 SHORT $LN118@ShowDemoWi
  035c9	51		 push	 ecx
  035ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  035d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035d7	6a 00		 push	 0
  035d9	e8 00 00 00 00	 call	 ?IsMouseDragging@ImGui@@YA_NHM@Z ; ImGui::IsMouseDragging
  035de	83 c4 08	 add	 esp, 8
  035e1	0f b6 c0	 movzx	 eax, al
  035e4	85 c0		 test	 eax, eax
  035e6	74 3a		 je	 SHORT $LN118@ShowDemoWi
  035e8	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  035ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  035f5	f3 0f 58 80 70
	03 00 00	 addss	 xmm0, DWORD PTR [eax+880]
  035fd	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A, xmm0
  03605	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  0360a	f3 0f 10 05 04
	00 00 00	 movss	 xmm0, DWORD PTR ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4
  03612	f3 0f 58 80 74
	03 00 00	 addss	 xmm0, DWORD PTR [eax+884]
  0361a	f3 0f 11 05 04
	00 00 00	 movss	 DWORD PTR ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4, xmm0
$LN118@ShowDemoWi:

; 2445 :         ImGui::GetWindowDrawList()->AddRectFilled(pos, ImVec2(pos.x + size.x, pos.y + size.y), IM_COL32(90, 90, 120, 255));

  03622	6a 0f		 push	 15			; 0000000fH
  03624	51		 push	 ecx
  03625	0f 57 c0	 xorps	 xmm0, xmm0
  03628	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0362d	68 5a 5a 78 ff	 push	 -8889766		; ff785a5aH
  03632	f3 0f 10 85 a0
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp+4]
  0363a	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4
  03642	51		 push	 ecx
  03643	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03648	f3 0f 10 85 9c
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp]
  03650	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?size@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  03658	51		 push	 ecx
  03659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0365e	8d 8d 54 f4 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  03664	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03669	50		 push	 eax
  0366a	8d 85 9c fc ff
	ff		 lea	 eax, DWORD PTR _pos$70[ebp]
  03670	50		 push	 eax
  03671	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  03676	8b c8		 mov	 ecx, eax
  03678	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 2446 :         ImGui::GetWindowDrawList()->AddText(ImGui::GetFont(), ImGui::GetFontSize()*2.0f, ImVec2(pos.x + offset.x, pos.y + offset.y), IM_COL32(255, 255, 255, 255), "Line 1 hello\nLine 2 clip me!", NULL, 0.0f, &clip_rect);

  0367d	8d 85 84 fc ff
	ff		 lea	 eax, DWORD PTR _clip_rect$69[ebp]
  03683	50		 push	 eax
  03684	51		 push	 ecx
  03685	0f 57 c0	 xorps	 xmm0, xmm0
  03688	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0368d	6a 00		 push	 0
  0368f	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MKAJBHJO@Line?51?5hello?6Line?52?5clip?5me?$CB@
  03694	6a ff		 push	 -1
  03696	f3 0f 10 85 a0
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp+4]
  0369e	f3 0f 58 05 04
	00 00 00	 addss	 xmm0, DWORD PTR ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A+4
  036a6	51		 push	 ecx
  036a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036ac	f3 0f 10 85 9c
	fc ff ff	 movss	 xmm0, DWORD PTR _pos$70[ebp]
  036b4	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?offset@?ND@??ShowDemoWindowLayout@@YAXXZ@4UImVec2@@A
  036bc	51		 push	 ecx
  036bd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036c2	8d 8d 44 f4 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  036c8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  036cd	50		 push	 eax
  036ce	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  036d3	d9 9d 3c f4 ff
	ff		 fstp	 DWORD PTR tv3112[ebp]
  036d9	f3 0f 10 85 3c
	f4 ff ff	 movss	 xmm0, DWORD PTR tv3112[ebp]
  036e1	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  036e9	51		 push	 ecx
  036ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036ef	e8 00 00 00 00	 call	 ?GetFont@ImGui@@YAPAUImFont@@XZ ; ImGui::GetFont
  036f4	50		 push	 eax
  036f5	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  036fa	8b c8		 mov	 ecx, eax
  036fc	e8 00 00 00 00	 call	 ?AddText@ImDrawList@@QAEXPBUImFont@@MABUImVec2@@IPBD2MPBUImVec4@@@Z ; ImDrawList::AddText

; 2447 :         ImGui::TreePop();

  03701	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN117@ShowDemoWi:
$LN1@ShowDemoWi:

; 2448 :     }
; 2449 : }

  03706	52		 push	 edx
  03707	8b cd		 mov	 ecx, ebp
  03709	50		 push	 eax
  0370a	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN159@ShowDemoWi
  03710	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  03715	58		 pop	 eax
  03716	5a		 pop	 edx
  03717	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0371a	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  03721	59		 pop	 ecx
  03722	5f		 pop	 edi
  03723	5e		 pop	 esi
  03724	5b		 pop	 ebx
  03725	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  03728	33 cd		 xor	 ecx, ebp
  0372a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0372f	81 c4 cc 0b 00
	00		 add	 esp, 3020		; 00000bccH
  03735	3b ec		 cmp	 ebp, esp
  03737	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0373c	8b e5		 mov	 esp, ebp
  0373e	5d		 pop	 ebp
  0373f	c3		 ret	 0
$LN159@ShowDemoWi:
  03740	0f 00 00 00	 DD	 15			; 0000000fH
  03744	00 00 00 00	 DD	 $LN158@ShowDemoWi
$LN158@ShowDemoWi:
  03748	90 ff ff ff	 DD	 -112			; ffffff90H
  0374c	20 00 00 00	 DD	 32			; 00000020H
  03750	00 00 00 00	 DD	 $LN142@ShowDemoWi
  03754	74 ff ff ff	 DD	 -140			; ffffff74H
  03758	08 00 00 00	 DD	 8
  0375c	00 00 00 00	 DD	 $LN143@ShowDemoWi
  03760	64 ff ff ff	 DD	 -156			; ffffff64H
  03764	08 00 00 00	 DD	 8
  03768	00 00 00 00	 DD	 $LN144@ShowDemoWi
  0376c	4c ff ff ff	 DD	 -180			; ffffff4cH
  03770	10 00 00 00	 DD	 16			; 00000010H
  03774	00 00 00 00	 DD	 $LN145@ShowDemoWi
  03778	30 ff ff ff	 DD	 -208			; ffffff30H
  0377c	08 00 00 00	 DD	 8
  03780	00 00 00 00	 DD	 $LN146@ShowDemoWi
  03784	c4 fe ff ff	 DD	 -316			; fffffec4H
  03788	10 00 00 00	 DD	 16			; 00000010H
  0378c	00 00 00 00	 DD	 $LN147@ShowDemoWi
  03790	9c fe ff ff	 DD	 -356			; fffffe9cH
  03794	08 00 00 00	 DD	 8
  03798	00 00 00 00	 DD	 $LN148@ShowDemoWi
  0379c	80 fe ff ff	 DD	 -384			; fffffe80H
  037a0	14 00 00 00	 DD	 20			; 00000014H
  037a4	00 00 00 00	 DD	 $LN149@ShowDemoWi
  037a8	f8 fd ff ff	 DD	 -520			; fffffdf8H
  037ac	14 00 00 00	 DD	 20			; 00000014H
  037b0	00 00 00 00	 DD	 $LN150@ShowDemoWi
  037b4	4c fd ff ff	 DD	 -692			; fffffd4cH
  037b8	14 00 00 00	 DD	 20			; 00000014H
  037bc	00 00 00 00	 DD	 $LN151@ShowDemoWi
  037c0	10 fd ff ff	 DD	 -752			; fffffd10H
  037c4	10 00 00 00	 DD	 16			; 00000010H
  037c8	00 00 00 00	 DD	 $LN152@ShowDemoWi
  037cc	c4 fc ff ff	 DD	 -828			; fffffcc4H
  037d0	08 00 00 00	 DD	 8
  037d4	00 00 00 00	 DD	 $LN153@ShowDemoWi
  037d8	bb fc ff ff	 DD	 -837			; fffffcbbH
  037dc	01 00 00 00	 DD	 1
  037e0	00 00 00 00	 DD	 $LN154@ShowDemoWi
  037e4	9c fc ff ff	 DD	 -868			; fffffc9cH
  037e8	08 00 00 00	 DD	 8
  037ec	00 00 00 00	 DD	 $LN155@ShowDemoWi
  037f0	84 fc ff ff	 DD	 -892			; fffffc84H
  037f4	10 00 00 00	 DD	 16			; 00000010H
  037f8	00 00 00 00	 DD	 $LN156@ShowDemoWi
$LN156@ShowDemoWi:
  037fc	63		 DB	 99			; 00000063H
  037fd	6c		 DB	 108			; 0000006cH
  037fe	69		 DB	 105			; 00000069H
  037ff	70		 DB	 112			; 00000070H
  03800	5f		 DB	 95			; 0000005fH
  03801	72		 DB	 114			; 00000072H
  03802	65		 DB	 101			; 00000065H
  03803	63		 DB	 99			; 00000063H
  03804	74		 DB	 116			; 00000074H
  03805	00		 DB	 0
$LN155@ShowDemoWi:
  03806	70		 DB	 112			; 00000070H
  03807	6f		 DB	 111			; 0000006fH
  03808	73		 DB	 115			; 00000073H
  03809	00		 DB	 0
$LN154@ShowDemoWi:
  0380a	6f		 DB	 111			; 0000006fH
  0380b	70		 DB	 112			; 00000070H
  0380c	65		 DB	 101			; 00000065H
  0380d	6e		 DB	 110			; 0000006eH
  0380e	00		 DB	 0
$LN153@ShowDemoWi:
  0380f	70		 DB	 112			; 00000070H
  03810	00		 DB	 0
$LN152@ShowDemoWi:
  03811	6e		 DB	 110			; 0000006eH
  03812	75		 DB	 117			; 00000075H
  03813	6d		 DB	 109			; 0000006dH
  03814	5f		 DB	 95			; 0000005fH
  03815	62		 DB	 98			; 00000062H
  03816	75		 DB	 117			; 00000075H
  03817	66		 DB	 102			; 00000066H
  03818	00		 DB	 0
$LN151@ShowDemoWi:
  03819	6e		 DB	 110			; 0000006eH
  0381a	61		 DB	 97			; 00000061H
  0381b	6d		 DB	 109			; 0000006dH
  0381c	65		 DB	 101			; 00000065H
  0381d	73		 DB	 115			; 00000073H
  0381e	00		 DB	 0
$LN150@ShowDemoWi:
  0381f	6e		 DB	 110			; 0000006eH
  03820	61		 DB	 97			; 00000061H
  03821	6d		 DB	 109			; 0000006dH
  03822	65		 DB	 101			; 00000065H
  03823	73		 DB	 115			; 00000073H
  03824	00		 DB	 0
$LN149@ShowDemoWi:
  03825	76		 DB	 118			; 00000076H
  03826	61		 DB	 97			; 00000061H
  03827	6c		 DB	 108			; 0000006cH
  03828	75		 DB	 117			; 00000075H
  03829	65		 DB	 101			; 00000065H
  0382a	73		 DB	 115			; 00000073H
  0382b	00		 DB	 0
$LN148@ShowDemoWi:
  0382c	73		 DB	 115			; 00000073H
  0382d	69		 DB	 105			; 00000069H
  0382e	7a		 DB	 122			; 0000007aH
  0382f	65		 DB	 101			; 00000065H
  03830	00		 DB	 0
$LN147@ShowDemoWi:
  03831	6e		 DB	 110			; 0000006eH
  03832	61		 DB	 97			; 00000061H
  03833	6d		 DB	 109			; 0000006dH
  03834	65		 DB	 101			; 00000065H
  03835	73		 DB	 115			; 00000073H
  03836	00		 DB	 0
$LN146@ShowDemoWi:
  03837	62		 DB	 98			; 00000062H
  03838	75		 DB	 117			; 00000075H
  03839	74		 DB	 116			; 00000074H
  0383a	74		 DB	 116			; 00000074H
  0383b	6f		 DB	 111			; 0000006fH
  0383c	6e		 DB	 110			; 0000006eH
  0383d	5f		 DB	 95			; 0000005fH
  0383e	73		 DB	 115			; 00000073H
  0383f	7a		 DB	 122			; 0000007aH
  03840	00		 DB	 0
$LN145@ShowDemoWi:
  03841	69		 DB	 105			; 00000069H
  03842	74		 DB	 116			; 00000074H
  03843	65		 DB	 101			; 00000065H
  03844	6d		 DB	 109			; 0000006dH
  03845	73		 DB	 115			; 00000073H
  03846	00		 DB	 0
$LN144@ShowDemoWi:
  03847	63		 DB	 99			; 00000063H
  03848	68		 DB	 104			; 00000068H
  03849	69		 DB	 105			; 00000069H
  0384a	6c		 DB	 108			; 0000006cH
  0384b	64		 DB	 100			; 00000064H
  0384c	5f		 DB	 95			; 0000005fH
  0384d	72		 DB	 114			; 00000072H
  0384e	65		 DB	 101			; 00000065H
  0384f	63		 DB	 99			; 00000063H
  03850	74		 DB	 116			; 00000074H
  03851	5f		 DB	 95			; 0000005fH
  03852	6d		 DB	 109			; 0000006dH
  03853	61		 DB	 97			; 00000061H
  03854	78		 DB	 120			; 00000078H
  03855	00		 DB	 0
$LN143@ShowDemoWi:
  03856	63		 DB	 99			; 00000063H
  03857	68		 DB	 104			; 00000068H
  03858	69		 DB	 105			; 00000069H
  03859	6c		 DB	 108			; 0000006cH
  0385a	64		 DB	 100			; 00000064H
  0385b	5f		 DB	 95			; 0000005fH
  0385c	72		 DB	 114			; 00000072H
  0385d	65		 DB	 101			; 00000065H
  0385e	63		 DB	 99			; 00000063H
  0385f	74		 DB	 116			; 00000074H
  03860	5f		 DB	 95			; 0000005fH
  03861	6d		 DB	 109			; 0000006dH
  03862	69		 DB	 105			; 00000069H
  03863	6e		 DB	 110			; 0000006eH
  03864	00		 DB	 0
$LN142@ShowDemoWi:
  03865	62		 DB	 98			; 00000062H
  03866	75		 DB	 117			; 00000075H
  03867	66		 DB	 102			; 00000066H
  03868	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowDemoWindowLayout@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?ShowDemoWindowLayout@@YAXXZ$1:
  0000c	68 00 00 00 00	 push	 OFFSET ?$TSS1@?ND@??ShowDemoWindowLayout@@YAXXZ@4HA
  00011	e8 00 00 00 00	 call	 __Init_thread_abort
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?ShowDemoWindowLayout@@YAXXZ:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 8a 30 f4 ff
	ff		 mov	 ecx, DWORD PTR [edx-3024]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowDemoWindowLayout@@YAXXZ
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowDemoWindowLayout@@YAXXZ ENDP			; ShowDemoWindowLayout
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindowWidgets@@YAXXZ
_TEXT	SEGMENT
tv2020 = -5208						; size = 4
tv1981 = -5204						; size = 4
tv2016 = -5200						; size = 4
tv4645 = -5196						; size = 8
tv2622 = -5196						; size = 4
tv2608 = -5196						; size = 4
tv2594 = -5196						; size = 4
tv2580 = -5196						; size = 4
tv2566 = -5196						; size = 4
tv2552 = -5196						; size = 4
tv2538 = -5196						; size = 4
tv2460 = -5196						; size = 4
tv1977 = -5196						; size = 4
tv1923 = -5196						; size = 4
tv5721 = -5192						; size = 4
tv5693 = -5192						; size = 4
tv4614 = -5192						; size = 4
tv4594 = -5192						; size = 4
tv4221 = -5192						; size = 4
tv4185 = -5192						; size = 4
tv3516 = -5192						; size = 4
tv3000 = -5192						; size = 4
tv2990 = -5192						; size = 4
tv2980 = -5192						; size = 4
tv2970 = -5192						; size = 4
tv2960 = -5192						; size = 4
tv2950 = -5192						; size = 4
tv2940 = -5192						; size = 4
tv2930 = -5192						; size = 4
tv2920 = -5192						; size = 4
tv2910 = -5192						; size = 4
tv2900 = -5192						; size = 4
tv2890 = -5192						; size = 4
tv2618 = -5192						; size = 4
tv2604 = -5192						; size = 4
tv2590 = -5192						; size = 4
tv2576 = -5192						; size = 4
tv2562 = -5192						; size = 4
tv2548 = -5192						; size = 4
tv2534 = -5192						; size = 4
tv2456 = -5192						; size = 4
tv2329 = -5192						; size = 4
tv1974 = -5192						; size = 4
tv1924 = -5192						; size = 4
tv1838 = -5192						; size = 4
tv1282 = -5192						; size = 4
tv1154 = -5192						; size = 4
tv452 = -5192						; size = 4
tv3374 = -5189						; size = 1
tv3365 = -5189						; size = 1
tv3356 = -5189						; size = 1
tv1301 = -5189						; size = 1
tv594 = -5189						; size = 1
$T2 = -5184						; size = 8
$T3 = -5168						; size = 8
$T4 = -5152						; size = 8
$T5 = -5136						; size = 8
$T6 = -5120						; size = 8
$T7 = -5104						; size = 8
$T8 = -5088						; size = 8
$T9 = -5072						; size = 8
$T10 = -5056						; size = 8
$T11 = -5040						; size = 8
$T12 = -5024						; size = 8
$T13 = -5008						; size = 8
$T14 = -4992						; size = 8
$T15 = -4976						; size = 8
$T16 = -4960						; size = 8
$T17 = -4944						; size = 16
$T18 = -4920						; size = 16
$T19 = -4896						; size = 16
$T20 = -4872						; size = 16
$T21 = -4848						; size = 16
$T22 = -4824						; size = 16
$T23 = -4800						; size = 16
$T24 = -4776						; size = 16
$T25 = -4752						; size = 8
$T26 = -4736						; size = 8
$T27 = -4720						; size = 8
$T28 = -4704						; size = 8
$T29 = -4688						; size = 8
$T30 = -4672						; size = 16
$T31 = -4648						; size = 8
$T32 = -4632						; size = 8
$T33 = -4616						; size = 8
$T34 = -4600						; size = 8
$T35 = -4584						; size = 8
$T36 = -4568						; size = 8
$T37 = -4552						; size = 8
$T38 = -4536						; size = 8
$T39 = -4520						; size = 8
$T40 = -4504						; size = 8
$T41 = -4488						; size = 8
$T42 = -4472						; size = 8
$T43 = -4456						; size = 8
$T44 = -4437						; size = 1
$T45 = -4428						; size = 8
$T46 = -4412						; size = 8
$T47 = -4396						; size = 8
$T48 = -4380						; size = 8
$T49 = -4364						; size = 8
$T50 = -4348						; size = 8
$T51 = -4332						; size = 8
$T52 = -4316						; size = 8
$T53 = -4300						; size = 8
$T54 = -4284						; size = 8
$T55 = -4268						; size = 8
$T56 = -4252						; size = 8
$T57 = -4236						; size = 8
$T58 = -4220						; size = 8
$T59 = -4204						; size = 8
$T60 = -4188						; size = 8
$T61 = -4172						; size = 8
$T62 = -4156						; size = 16
$T63 = -4132						; size = 16
$T64 = -4108						; size = 8
$T65 = -4092						; size = 16
$T66 = -4068						; size = 16
$T67 = -4044						; size = 8
$T68 = -4028						; size = 8
$T69 = -4012						; size = 8
$T70 = -3996						; size = 16
$T71 = -3972						; size = 16
$T72 = -3948						; size = 8
$T73 = -3932						; size = 8
$T74 = -3916						; size = 8
$T75 = -3900						; size = 8
$T76 = -3884						; size = 8
$T77 = -3868						; size = 8
$T78 = -3852						; size = 8
$T79 = -3836						; size = 8
$T80 = -3820						; size = 8
$T81 = -3804						; size = 8
$T82 = -3788						; size = 8
$T83 = -3772						; size = 16
$T84 = -3748						; size = 16
$T85 = -3724						; size = 8
$T86 = -3708						; size = 8
$T87 = -3692						; size = 16
$T88 = -3668						; size = 16
$T89 = -3644						; size = 16
$T90 = -3620						; size = 16
$T91 = -3596						; size = 16
$T92 = -3572						; size = 16
$T93 = -3548						; size = 8
_items$94 = -1996					; size = 16
_ret$95 = -1969						; size = 1
_n_next$96 = -1960					; size = 4
_item$97 = -1948					; size = 4
_n$98 = -1936						; size = 4
_tmp$99 = -1924						; size = 4
_payload_n$100 = -1912					; size = 4
_payload$101 = -1900					; size = 4
_n$102 = -1888						; size = 4
_i$103 = -1876						; size = 4
_ny$104 = -1864						; size = 4
_nx$105 = -1852						; size = 4
_small_slider_size$106 = -1840				; size = 8
_rows$107 = -1824					; size = 4
_i$108 = -1812						; size = 4
_spacing$109 = -1800					; size = 4
_drag_speed$110 = -1788					; size = 4
_f64_hi_a$111 = -1776					; size = 8
_f64_lo_a$112 = -1760					; size = 8
_f64_one$113 = -1744					; size = 8
_f64_zero$114 = -1728					; size = 8
_f32_hi_a$115 = -1712					; size = 4
_f32_lo_a$116 = -1700					; size = 4
_f32_one$117 = -1688					; size = 4
_f32_zero$118 = -1676					; size = 4
_u64_hi_b$119 = -1664					; size = 8
_u64_hi_a$120 = -1648					; size = 8
_u64_max$121 = -1632					; size = 8
_u64_min$122 = -1616					; size = 8
_u64_fifty$123 = -1600					; size = 8
_u64_one$124 = -1584					; size = 8
_u64_zero$125 = -1568					; size = 8
_s64_hi_b$126 = -1552					; size = 8
_s64_hi_a$127 = -1536					; size = 8
_s64_max$128 = -1520					; size = 8
_s64_min$129 = -1504					; size = 8
_s64_fifty$130 = -1488					; size = 8
_s64_one$131 = -1472					; size = 8
_s64_zero$132 = -1456					; size = 8
_u32_hi_b$133 = -1440					; size = 4
_u32_hi_a$134 = -1428					; size = 4
_u32_max$135 = -1416					; size = 4
_u32_min$136 = -1404					; size = 4
_u32_fifty$137 = -1392					; size = 4
_u32_one$138 = -1380					; size = 4
_u32_zero$139 = -1368					; size = 4
_s32_hi_b$140 = -1356					; size = 4
_s32_hi_a$141 = -1344					; size = 4
_s32_max$142 = -1332					; size = 4
_s32_min$143 = -1320					; size = 4
_s32_fifty$144 = -1308					; size = 4
_s32_one$145 = -1296					; size = 4
_s32_zero$146 = -1284					; size = 4
_u16_max$147 = -1272					; size = 2
_u16_min$148 = -1260					; size = 2
_u16_fifty$149 = -1248					; size = 2
_u16_one$150 = -1236					; size = 2
_u16_zero$151 = -1224					; size = 2
_s16_max$152 = -1212					; size = 2
_s16_min$153 = -1200					; size = 2
_s16_fifty$154 = -1188					; size = 2
_s16_one$155 = -1176					; size = 2
_s16_zero$156 = -1164					; size = 2
_u8_max$157 = -1149					; size = 1
_u8_min$158 = -1137					; size = 1
_u8_fifty$159 = -1125					; size = 1
_u8_one$160 = -1113					; size = 1
_u8_zero$161 = -1101					; size = 1
_s8_max$162 = -1089					; size = 1
_s8_min$163 = -1077					; size = 1
_s8_fifty$164 = -1065					; size = 1
_s8_one$165 = -1053					; size = 1
_s8_zero$166 = -1041					; size = 1
_flags$167 = -1032					; size = 4
_payload$168 = -1020					; size = 4
_payload$169 = -1008					; size = 4
_n$170 = -996						; size = 4
_open_popup$171 = -981					; size = 1
_n$172 = -972						; size = 4
_misc_flags$173 = -960					; size = 4
_buf$174 = -948						; size = 32
_progress_saturated$175 = -908				; size = 4
_func$176 = -896					; size = 4
_overlay$177 = -884					; size = 32
_n$178 = -844						; size = 4
_average$179 = -832					; size = 4
_name$180 = -820					; size = 32
_alignment$181 = -780					; size = 8
_x$182 = -764						; size = 4
_y$183 = -752						; size = 4
_y$184 = -740						; size = 4
_x$185 = -728						; size = 4
_i$186 = -716						; size = 4
_label$187 = -704					; size = 32
_i$188 = -664						; size = 4
_buf$189 = -652						; size = 32
_n$190 = -612						; size = 4
_buf$191 = -600						; size = 32
_n$192 = -560						; size = 4
_is_selected$193 = -545					; size = 1
_n$194 = -536						; size = 4
_items$195 = -524					; size = 56
_frame_padding$196 = -460				; size = 4
_i$197 = -448						; size = 4
_uv1$198 = -436						; size = 8
_uv0$199 = -420						; size = 8
_zoom$200 = -404					; size = 4
_region_y$201 = -392					; size = 4
_region_x$202 = -380					; size = 4
_region_sz$203 = -368					; size = 4
_pos$204 = -356						; size = 8
_my_tex_h$205 = -340					; size = 4
_my_tex_w$206 = -328					; size = 4
_my_tex_id$207 = -316					; size = 4
_io$208 = -304						; size = 4
_pos$209 = -292						; size = 8
_i$210 = -276						; size = 4
_i$211 = -264						; size = 4
_node_open$212 = -249					; size = 1
_is_selected$213 = -237					; size = 1
_node_flags$214 = -228					; size = 4
_i$215 = -216						; size = 4
_node_clicked$216 = -204				; size = 4
_i$217 = -192						; size = 4
_listbox_items$218 = -180				; size = 36
_current_element_name$219 = -136			; size = 4
_element_names$220 = -124				; size = 16
_items$221 = -100					; size = 56
_spacing$222 = -36					; size = 4
_i$223 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
?ShowDemoWindowWidgets@@YAXXZ PROC			; ShowDemoWindowWidgets, COMDAT

; 435  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowDemoWindowWidgets@@YAXXZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	b8 4c 14 00 00	 mov	 eax, 5196		; 0000144cH
  00016	e8 00 00 00 00	 call	 __chkstk
  0001b	53		 push	 ebx
  0001c	56		 push	 esi
  0001d	57		 push	 edi
  0001e	8d bd a8 eb ff
	ff		 lea	 edi, DWORD PTR [ebp-5208]
  00024	b9 13 05 00 00	 mov	 ecx, 1299		; 00000513H
  00029	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002e	f3 ab		 rep stosd
  00030	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00035	33 c5		 xor	 eax, ebp
  00037	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  0003a	50		 push	 eax
  0003b	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003e	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00044	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00049	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 436  :     if (!ImGui::CollapsingHeader("Widgets"))

  0004e	6a 00		 push	 0
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_07DIHFNIOG@Widgets@
  00055	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  0005a	83 c4 08	 add	 esp, 8
  0005d	0f b6 c0	 movzx	 eax, al
  00060	85 c0		 test	 eax, eax
  00062	75 05		 jne	 SHORT $LN77@ShowDemoWi

; 437  :         return;

  00064	e9 89 63 00 00	 jmp	 $LN1@ShowDemoWi
$LN77@ShowDemoWi:

; 438  : 
; 439  :     if (ImGui::TreeNode("Basic"))

  00069	68 00 00 00 00	 push	 OFFSET ??_C@_05NIKDGMHP@Basic@
  0006e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00073	83 c4 04	 add	 esp, 4
  00076	0f b6 c0	 movzx	 eax, al
  00079	85 c0		 test	 eax, eax
  0007b	0f 84 31 0a 00
	00		 je	 $LN78@ShowDemoWi

; 440  :     {
; 441  :         static int clicked = 0;
; 442  :         if (ImGui::Button("Button"))

  00081	51		 push	 ecx
  00082	0f 57 c0	 xorps	 xmm0, xmm0
  00085	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0008a	51		 push	 ecx
  0008b	0f 57 c0	 xorps	 xmm0, xmm0
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	8d 8d 24 f2 ff
	ff		 lea	 ecx, DWORD PTR $T93[ebp]
  00099	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0009e	50		 push	 eax
  0009f	68 00 00 00 00	 push	 OFFSET ??_C@_06LKBCGDFD@Button@
  000a4	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  000a9	83 c4 08	 add	 esp, 8
  000ac	0f b6 c0	 movzx	 eax, al
  000af	85 c0		 test	 eax, eax
  000b1	74 0d		 je	 SHORT $LN79@ShowDemoWi

; 443  :             clicked++;

  000b3	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clicked@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  000b8	83 c0 01	 add	 eax, 1
  000bb	a3 00 00 00 00	 mov	 DWORD PTR ?clicked@?6??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN79@ShowDemoWi:

; 444  :         if (clicked & 1)

  000c0	a1 00 00 00 00	 mov	 eax, DWORD PTR ?clicked@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  000c5	83 e0 01	 and	 eax, 1
  000c8	74 2c		 je	 SHORT $LN80@ShowDemoWi

; 445  :         {
; 446  :             ImGui::SameLine();

  000ca	51		 push	 ecx
  000cb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d8	51		 push	 ecx
  000d9	0f 57 c0	 xorps	 xmm0, xmm0
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  000e6	83 c4 08	 add	 esp, 8

; 447  :             ImGui::Text("Thanks for clicking me!");

  000e9	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@IPKGBENJ@Thanks?5for?5clicking?5me?$CB@
  000ee	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  000f3	83 c4 04	 add	 esp, 4
$LN80@ShowDemoWi:

; 448  :         }
; 449  : 
; 450  :         static bool check = true;
; 451  :         ImGui::Checkbox("checkbox", &check);

  000f6	68 00 00 00 00	 push	 OFFSET ?check@?6??ShowDemoWindowWidgets@@YAXXZ@4_NA
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_08PDFIPFLP@checkbox@
  00100	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00105	83 c4 08	 add	 esp, 8

; 452  : 
; 453  :         static int e = 0;
; 454  :         ImGui::RadioButton("radio a", &e, 0); ImGui::SameLine();

  00108	6a 00		 push	 0
  0010a	68 00 00 00 00	 push	 OFFSET ?e@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  0010f	68 00 00 00 00	 push	 OFFSET ??_C@_07HJMAFCAJ@radio?5a@
  00114	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBDPAHH@Z ; ImGui::RadioButton
  00119	83 c4 0c	 add	 esp, 12			; 0000000cH
  0011c	51		 push	 ecx
  0011d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00125	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0012a	51		 push	 ecx
  0012b	0f 57 c0	 xorps	 xmm0, xmm0
  0012e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00133	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00138	83 c4 08	 add	 esp, 8

; 455  :         ImGui::RadioButton("radio b", &e, 1); ImGui::SameLine();

  0013b	6a 01		 push	 1
  0013d	68 00 00 00 00	 push	 OFFSET ?e@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  00142	68 00 00 00 00	 push	 OFFSET ??_C@_07FCONABMK@radio?5b@
  00147	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBDPAHH@Z ; ImGui::RadioButton
  0014c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0014f	51		 push	 ecx
  00150	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00158	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015d	51		 push	 ecx
  0015e	0f 57 c0	 xorps	 xmm0, xmm0
  00161	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00166	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0016b	83 c4 08	 add	 esp, 8

; 456  :         ImGui::RadioButton("radio c", &e, 2);

  0016e	6a 02		 push	 2
  00170	68 00 00 00 00	 push	 OFFSET ?e@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  00175	68 00 00 00 00	 push	 OFFSET ??_C@_07ELPGDAIL@radio?5c@
  0017a	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBDPAHH@Z ; ImGui::RadioButton
  0017f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 457  : 
; 458  :         // Color buttons, demonstrate using PushID() to add unique identifier in the ID stack, and changing style.
; 459  :         for (int i = 0; i < 7; i++)

  00182	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$223[ebp], 0
  00189	eb 09		 jmp	 SHORT $LN4@ShowDemoWi
$LN2@ShowDemoWi:
  0018b	8b 45 e8	 mov	 eax, DWORD PTR _i$223[ebp]
  0018e	83 c0 01	 add	 eax, 1
  00191	89 45 e8	 mov	 DWORD PTR _i$223[ebp], eax
$LN4@ShowDemoWi:
  00194	83 7d e8 07	 cmp	 DWORD PTR _i$223[ebp], 7
  00198	0f 8d 9f 01 00
	00		 jge	 $LN3@ShowDemoWi

; 460  :         {
; 461  :             if (i > 0)

  0019e	83 7d e8 00	 cmp	 DWORD PTR _i$223[ebp], 0
  001a2	7e 1f		 jle	 SHORT $LN81@ShowDemoWi

; 462  :                 ImGui::SameLine();

  001a4	51		 push	 ecx
  001a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b2	51		 push	 ecx
  001b3	0f 57 c0	 xorps	 xmm0, xmm0
  001b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bb	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  001c0	83 c4 08	 add	 esp, 8
$LN81@ShowDemoWi:

; 463  :             ImGui::PushID(i);

  001c3	8b 45 e8	 mov	 eax, DWORD PTR _i$223[ebp]
  001c6	50		 push	 eax
  001c7	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  001cc	83 c4 04	 add	 esp, 4

; 464  :             ImGui::PushStyleColor(ImGuiCol_Button, (ImVec4)ImColor::HSV(i/7.0f, 0.6f, 0.6f));

  001cf	8d 85 f4 f1 ff
	ff		 lea	 eax, DWORD PTR $T91[ebp]
  001d5	50		 push	 eax
  001d6	51		 push	 ecx
  001d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e4	51		 push	 ecx
  001e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  001ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f2	51		 push	 ecx
  001f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  001fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00200	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _i$223[ebp]
  00205	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  0020d	51		 push	 ecx
  0020e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00213	8d 8d 0c f2 ff
	ff		 lea	 ecx, DWORD PTR $T92[ebp]
  00219	51		 push	 ecx
  0021a	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  0021f	83 c4 14	 add	 esp, 20			; 00000014H
  00222	8b c8		 mov	 ecx, eax
  00224	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  00229	50		 push	 eax
  0022a	6a 15		 push	 21			; 00000015H
  0022c	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  00231	83 c4 08	 add	 esp, 8

; 465  :             ImGui::PushStyleColor(ImGuiCol_ButtonHovered, (ImVec4)ImColor::HSV(i/7.0f, 0.7f, 0.7f));

  00234	8d 85 c4 f1 ff
	ff		 lea	 eax, DWORD PTR $T89[ebp]
  0023a	50		 push	 eax
  0023b	51		 push	 ecx
  0023c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00249	51		 push	 ecx
  0024a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00252	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00257	51		 push	 ecx
  00258	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  00260	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00265	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _i$223[ebp]
  0026a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  00272	51		 push	 ecx
  00273	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00278	8d 8d dc f1 ff
	ff		 lea	 ecx, DWORD PTR $T90[ebp]
  0027e	51		 push	 ecx
  0027f	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  00284	83 c4 14	 add	 esp, 20			; 00000014H
  00287	8b c8		 mov	 ecx, eax
  00289	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  0028e	50		 push	 eax
  0028f	6a 16		 push	 22			; 00000016H
  00291	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  00296	83 c4 08	 add	 esp, 8

; 466  :             ImGui::PushStyleColor(ImGuiCol_ButtonActive, (ImVec4)ImColor::HSV(i/7.0f, 0.8f, 0.8f));

  00299	8d 85 94 f1 ff
	ff		 lea	 eax, DWORD PTR $T87[ebp]
  0029f	50		 push	 eax
  002a0	51		 push	 ecx
  002a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	51		 push	 ecx
  002af	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  002b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002bc	51		 push	 ecx
  002bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  002c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ca	f3 0f 2a 45 e8	 cvtsi2ss xmm0, DWORD PTR _i$223[ebp]
  002cf	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  002d7	51		 push	 ecx
  002d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dd	8d 8d ac f1 ff
	ff		 lea	 ecx, DWORD PTR $T88[ebp]
  002e3	51		 push	 ecx
  002e4	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  002e9	83 c4 14	 add	 esp, 20			; 00000014H
  002ec	8b c8		 mov	 ecx, eax
  002ee	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  002f3	50		 push	 eax
  002f4	6a 17		 push	 23			; 00000017H
  002f6	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  002fb	83 c4 08	 add	 esp, 8

; 467  :             ImGui::Button("Click");

  002fe	51		 push	 ecx
  002ff	0f 57 c0	 xorps	 xmm0, xmm0
  00302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00307	51		 push	 ecx
  00308	0f 57 c0	 xorps	 xmm0, xmm0
  0030b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00310	8d 8d 84 f1 ff
	ff		 lea	 ecx, DWORD PTR $T86[ebp]
  00316	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0031b	50		 push	 eax
  0031c	68 00 00 00 00	 push	 OFFSET ??_C@_05BBIFMDEO@Click@
  00321	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00326	83 c4 08	 add	 esp, 8

; 468  :             ImGui::PopStyleColor(3);

  00329	6a 03		 push	 3
  0032b	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
  00330	83 c4 04	 add	 esp, 4

; 469  :             ImGui::PopID();

  00333	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 470  :         }

  00338	e9 4e fe ff ff	 jmp	 $LN2@ShowDemoWi
$LN3@ShowDemoWi:

; 471  : 
; 472  :         // Use AlignTextToFramePadding() to align text baseline to the baseline of framed elements (otherwise a Text+SameLine+Button sequence will have the text a little too high by default)
; 473  :         ImGui::AlignTextToFramePadding();

  0033d	e8 00 00 00 00	 call	 ?AlignTextToFramePadding@ImGui@@YAXXZ ; ImGui::AlignTextToFramePadding

; 474  :         ImGui::Text("Hold to repeat:");

  00342	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@FMOKFMLK@Hold?5to?5repeat?3@
  00347	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0034c	83 c4 04	 add	 esp, 4

; 475  :         ImGui::SameLine();

  0034f	51		 push	 ecx
  00350	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00358	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0035d	51		 push	 ecx
  0035e	0f 57 c0	 xorps	 xmm0, xmm0
  00361	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00366	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0036b	83 c4 08	 add	 esp, 8

; 476  : 
; 477  :         // Arrow buttons with Repeater
; 478  :         static int counter = 0;
; 479  :         float spacing = ImGui::GetStyle().ItemInnerSpacing.x;

  0036e	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  00373	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  00378	f3 0f 11 45 dc	 movss	 DWORD PTR _spacing$222[ebp], xmm0

; 480  :         ImGui::PushButtonRepeat(true);

  0037d	6a 01		 push	 1
  0037f	e8 00 00 00 00	 call	 ?PushButtonRepeat@ImGui@@YAX_N@Z ; ImGui::PushButtonRepeat
  00384	83 c4 04	 add	 esp, 4

; 481  :         if (ImGui::ArrowButton("##left", ImGuiDir_Left)) { counter--; }

  00387	6a 00		 push	 0
  00389	68 00 00 00 00	 push	 OFFSET ??_C@_06EKMNOCAF@?$CD?$CDleft@
  0038e	e8 00 00 00 00	 call	 ?ArrowButton@ImGui@@YA_NPBDH@Z ; ImGui::ArrowButton
  00393	83 c4 08	 add	 esp, 8
  00396	0f b6 c0	 movzx	 eax, al
  00399	85 c0		 test	 eax, eax
  0039b	74 0d		 je	 SHORT $LN82@ShowDemoWi
  0039d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?counter@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  003a2	83 e8 01	 sub	 eax, 1
  003a5	a3 00 00 00 00	 mov	 DWORD PTR ?counter@?6??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN82@ShowDemoWi:

; 482  :         ImGui::SameLine(0.0f, spacing);

  003aa	51		 push	 ecx
  003ab	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _spacing$222[ebp]
  003b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b5	51		 push	 ecx
  003b6	0f 57 c0	 xorps	 xmm0, xmm0
  003b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003be	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  003c3	83 c4 08	 add	 esp, 8

; 483  :         if (ImGui::ArrowButton("##right", ImGuiDir_Right)) { counter++; }

  003c6	6a 01		 push	 1
  003c8	68 00 00 00 00	 push	 OFFSET ??_C@_07GKNPDGAE@?$CD?$CDright@
  003cd	e8 00 00 00 00	 call	 ?ArrowButton@ImGui@@YA_NPBDH@Z ; ImGui::ArrowButton
  003d2	83 c4 08	 add	 esp, 8
  003d5	0f b6 c0	 movzx	 eax, al
  003d8	85 c0		 test	 eax, eax
  003da	74 0d		 je	 SHORT $LN83@ShowDemoWi
  003dc	a1 00 00 00 00	 mov	 eax, DWORD PTR ?counter@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  003e1	83 c0 01	 add	 eax, 1
  003e4	a3 00 00 00 00	 mov	 DWORD PTR ?counter@?6??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN83@ShowDemoWi:

; 484  :         ImGui::PopButtonRepeat();

  003e9	e8 00 00 00 00	 call	 ?PopButtonRepeat@ImGui@@YAXXZ ; ImGui::PopButtonRepeat

; 485  :         ImGui::SameLine();

  003ee	51		 push	 ecx
  003ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003fc	51		 push	 ecx
  003fd	0f 57 c0	 xorps	 xmm0, xmm0
  00400	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00405	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0040a	83 c4 08	 add	 esp, 8

; 486  :         ImGui::Text("%d", counter);

  0040d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?counter@?6??ShowDemoWindowWidgets@@YAXXZ@4HA
  00412	50		 push	 eax
  00413	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00418	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0041d	83 c4 08	 add	 esp, 8

; 487  : 
; 488  :         ImGui::Text("Hover over me");

  00420	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EKHBLLBD@Hover?5over?5me@
  00425	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0042a	83 c4 04	 add	 esp, 4

; 489  :         if (ImGui::IsItemHovered())

  0042d	6a 00		 push	 0
  0042f	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00434	83 c4 04	 add	 esp, 4
  00437	0f b6 c0	 movzx	 eax, al
  0043a	85 c0		 test	 eax, eax
  0043c	74 0d		 je	 SHORT $LN84@ShowDemoWi

; 490  :             ImGui::SetTooltip("I am a tooltip");

  0043e	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HKPBNOOC@I?5am?5a?5tooltip@
  00443	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPBDZZ ; ImGui::SetTooltip
  00448	83 c4 04	 add	 esp, 4
$LN84@ShowDemoWi:

; 491  : 
; 492  :         ImGui::SameLine();

  0044b	51		 push	 ecx
  0044c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00454	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00459	51		 push	 ecx
  0045a	0f 57 c0	 xorps	 xmm0, xmm0
  0045d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00462	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00467	83 c4 08	 add	 esp, 8

; 493  :         ImGui::Text("- or me");

  0046a	68 00 00 00 00	 push	 OFFSET ??_C@_07LFBEAIAC@?9?5or?5me@
  0046f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00474	83 c4 04	 add	 esp, 4

; 494  :         if (ImGui::IsItemHovered())

  00477	6a 00		 push	 0
  00479	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0047e	83 c4 04	 add	 esp, 4
  00481	0f b6 c0	 movzx	 eax, al
  00484	85 c0		 test	 eax, eax
  00486	74 71		 je	 SHORT $LN85@ShowDemoWi

; 495  :         {
; 496  :             ImGui::BeginTooltip();

  00488	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 497  :             ImGui::Text("I am a fancy tooltip");

  0048d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@CIONDOGG@I?5am?5a?5fancy?5tooltip@
  00492	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00497	83 c4 04	 add	 esp, 4

; 498  :             static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
; 499  :             ImGui::PlotLines("Curve", arr, IM_ARRAYSIZE(arr));

  0049a	6a 04		 push	 4
  0049c	51		 push	 ecx
  0049d	0f 57 c0	 xorps	 xmm0, xmm0
  004a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a5	51		 push	 ecx
  004a6	0f 57 c0	 xorps	 xmm0, xmm0
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	8d 8d 74 f1 ff
	ff		 lea	 ecx, DWORD PTR $T85[ebp]
  004b4	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  004b9	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  004bc	51		 push	 ecx
  004bd	8b 10		 mov	 edx, DWORD PTR [eax]
  004bf	52		 push	 edx
  004c0	51		 push	 ecx
  004c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  004c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ce	51		 push	 ecx
  004cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  004d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004dc	6a 00		 push	 0
  004de	6a 00		 push	 0
  004e0	6a 07		 push	 7
  004e2	68 00 00 00 00	 push	 OFFSET ?arr@?BL@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  004e7	68 00 00 00 00	 push	 OFFSET ??_C@_05HPADKKDG@Curve@
  004ec	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z ; ImGui::PlotLines
  004f1	83 c4 28	 add	 esp, 40			; 00000028H

; 500  :             ImGui::EndTooltip();

  004f4	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN85@ShowDemoWi:

; 501  :         }
; 502  : 
; 503  :         ImGui::Separator();

  004f9	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 504  : 
; 505  :         ImGui::LabelText("label", "Value");

  004fe	68 00 00 00 00	 push	 OFFSET ??_C@_05LPIJGKJ@Value@
  00503	68 00 00 00 00	 push	 OFFSET ??_C@_05IDCCNNGI@label@
  00508	e8 00 00 00 00	 call	 ?LabelText@ImGui@@YAXPBD0ZZ ; ImGui::LabelText
  0050d	83 c4 08	 add	 esp, 8

; 506  : 
; 507  :         {
; 508  :             // Using the _simplified_ one-liner Combo() api here
; 509  :             // See "Combo" section for examples of how to use the more complete BeginCombo()/EndCombo() api.
; 510  :             const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };

  00510	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp], OFFSET ??_C@_04OHNMNPPA@AAAA@
  00517	c7 45 a0 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+4], OFFSET ??_C@_04JLKCOHFE@BBBB@
  0051e	c7 45 a4 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+8], OFFSET ??_C@_04GKHPCPH@CCCC@
  00525	c7 45 a8 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+12], OFFSET ??_C@_04GDFOJGBM@DDDD@
  0052c	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+16], OFFSET ??_C@_04POFLIDLP@EEEE@
  00533	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+20], OFFSET ??_C@_04ICCFLLBL@FFFF@
  0053a	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+24], OFFSET ??_C@_04BPCAKOLI@GGGG@
  00541	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+28], OFFSET ??_C@_04EJNHHCMN@HHHH@
  00548	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+32], OFFSET ??_C@_04NENCGHGO@IIII@
  0054f	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+36], OFFSET ??_C@_04KIKMFPMK@JJJJ@
  00556	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+40], OFFSET ??_C@_04DFKJEKGJ@KKKK@
  0055d	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+44], OFFSET ??_C@_07HGFDAEEO@LLLLLLL@
  00564	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+48], OFFSET ??_C@_04MNFFDLCB@MMMM@
  0056b	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _items$221[ebp+52], OFFSET ??_C@_07DDNOFDDK@OOOOOOO@

; 511  :             static int item_current = 0;
; 512  :             ImGui::Combo("combo", &item_current, items, IM_ARRAYSIZE(items));

  00572	6a ff		 push	 -1
  00574	6a 0e		 push	 14			; 0000000eH
  00576	8d 45 9c	 lea	 eax, DWORD PTR _items$221[ebp]
  00579	50		 push	 eax
  0057a	68 00 00 00 00	 push	 OFFSET ?item_current@?BM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0057f	68 00 00 00 00	 push	 OFFSET ??_C@_05LLEFIEMM@combo@
  00584	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::Combo
  00589	83 c4 14	 add	 esp, 20			; 00000014H

; 513  :             ImGui::SameLine(); HelpMarker("Refer to the \"Combo\" section below for an explanation of the full BeginCombo/EndCombo API, and demonstration of various flags.\n");

  0058c	51		 push	 ecx
  0058d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00595	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0059a	51		 push	 ecx
  0059b	0f 57 c0	 xorps	 xmm0, xmm0
  0059e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  005a8	83 c4 08	 add	 esp, 8
  005ab	68 00 00 00 00	 push	 OFFSET ??_C@_0IA@DADAGMOI@Refer?5to?5the?5?$CCCombo?$CC?5section?5be@
  005b0	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  005b5	83 c4 04	 add	 esp, 4

; 514  :         }
; 515  : 
; 516  :         {
; 517  :             static char str0[128] = "Hello, world!";
; 518  :             ImGui::InputText("input text", str0, IM_ARRAYSIZE(str0));

  005b8	6a 00		 push	 0
  005ba	6a 00		 push	 0
  005bc	6a 00		 push	 0
  005be	68 80 00 00 00	 push	 128			; 00000080H
  005c3	68 00 00 00 00	 push	 OFFSET ?str0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  005c8	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GKEMLLGG@input?5text@
  005cd	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  005d2	83 c4 18	 add	 esp, 24			; 00000018H

; 519  :             ImGui::SameLine(); HelpMarker("USER:\nHold SHIFT or use mouse to select text.\n" "CTRL+Left/Right to word jump.\n" "CTRL+A or double-click to select all.\n" "CTRL+X,CTRL+C,CTRL+V clipboard.\n" "CTRL+Z,CTRL+Y undo/redo.\n" "ESCAPE to revert.\n\nPROGRAMMER:\nYou can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputText() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example (this is not demonstrated in imgui_demo.cpp).");

  005d5	51		 push	 ecx
  005d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  005de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e3	51		 push	 ecx
  005e4	0f 57 c0	 xorps	 xmm0, xmm0
  005e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005ec	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  005f1	83 c4 08	 add	 esp, 8
  005f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BJJ@FMHDKCMG@USER?3?6Hold?5SHIFT?5or?5use?5mouse?5t@
  005f9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  005fe	83 c4 04	 add	 esp, 4

; 520  : 
; 521  :             static char str1[128] = "";
; 522  :             ImGui::InputTextWithHint("input text (w/ hint)", "enter text here", str1, IM_ARRAYSIZE(str1));

  00601	6a 00		 push	 0
  00603	6a 00		 push	 0
  00605	6a 00		 push	 0
  00607	68 80 00 00 00	 push	 128			; 00000080H
  0060c	68 00 00 00 00	 push	 OFFSET ?str1@?BN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  00611	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DCMOPOEB@enter?5text?5here@
  00616	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FKMBICKL@input?5text?5?$CIw?1?5hint?$CJ@
  0061b	e8 00 00 00 00	 call	 ?InputTextWithHint@ImGui@@YA_NPBD0PADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputTextWithHint
  00620	83 c4 1c	 add	 esp, 28			; 0000001cH

; 523  : 
; 524  :             static int i0 = 123;
; 525  :             ImGui::InputInt("input int", &i0);

  00623	6a 00		 push	 0
  00625	6a 64		 push	 100			; 00000064H
  00627	6a 01		 push	 1
  00629	68 00 00 00 00	 push	 OFFSET ?i0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0062e	68 00 00 00 00	 push	 OFFSET ??_C@_09KJGAAOJL@input?5int@
  00633	e8 00 00 00 00	 call	 ?InputInt@ImGui@@YA_NPBDPAHHHH@Z ; ImGui::InputInt
  00638	83 c4 14	 add	 esp, 20			; 00000014H

; 526  :             ImGui::SameLine(); HelpMarker("You can apply arithmetic operators +,*,/ on numerical values.\n  e.g. [ 100 ], input \'*2\', result becomes [ 200 ]\nUse +- to subtract.\n");

  0063b	51		 push	 ecx
  0063c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00644	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00649	51		 push	 ecx
  0064a	0f 57 c0	 xorps	 xmm0, xmm0
  0064d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00652	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00657	83 c4 08	 add	 esp, 8
  0065a	68 00 00 00 00	 push	 OFFSET ??_C@_0IG@EBGMOFJG@You?5can?5apply?5arithmetic?5operat@
  0065f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00664	83 c4 04	 add	 esp, 4

; 527  : 
; 528  :             static float f0 = 0.001f;
; 529  :             ImGui::InputFloat("input float", &f0, 0.01f, 1.0f, "%.3f");

  00667	6a 00		 push	 0
  00669	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  0066e	51		 push	 ecx
  0066f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00677	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0067c	51		 push	 ecx
  0067d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  00685	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068a	68 00 00 00 00	 push	 OFFSET ?f0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4MA
  0068f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HLMFPLHI@input?5float@
  00694	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  00699	83 c4 18	 add	 esp, 24			; 00000018H

; 530  : 
; 531  :             static double d0 = 999999.00000001;
; 532  :             ImGui::InputDouble("input double", &d0, 0.01f, 1.0f, "%.8f");

  0069c	6a 00		 push	 0
  0069e	68 00 00 00 00	 push	 OFFSET ??_C@_04GJMOAIJC@?$CF?48f@
  006a3	83 ec 08	 sub	 esp, 8
  006a6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  006ae	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006b3	83 ec 08	 sub	 esp, 8
  006b6	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3f847ae140000000
  006be	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  006c3	68 00 00 00 00	 push	 OFFSET ?d0@?BN@??ShowDemoWindowWidgets@@YAXXZ@4NA
  006c8	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HNPEBCJF@input?5double@
  006cd	e8 00 00 00 00	 call	 ?InputDouble@ImGui@@YA_NPBDPANNN0H@Z ; ImGui::InputDouble
  006d2	83 c4 20	 add	 esp, 32			; 00000020H

; 533  : 
; 534  :             static float f1 = 1.e10f;
; 535  :             ImGui::InputFloat("input scientific", &f1, 0.0f, 0.0f, "%e");

  006d5	6a 00		 push	 0
  006d7	68 00 00 00 00	 push	 OFFSET ??_C@_02CGLCDNAE@?$CFe@
  006dc	51		 push	 ecx
  006dd	0f 57 c0	 xorps	 xmm0, xmm0
  006e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006e5	51		 push	 ecx
  006e6	0f 57 c0	 xorps	 xmm0, xmm0
  006e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ee	68 00 00 00 00	 push	 OFFSET ?f1@?BN@??ShowDemoWindowWidgets@@YAXXZ@4MA
  006f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MKDEHDDF@input?5scientific@
  006f8	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  006fd	83 c4 18	 add	 esp, 24			; 00000018H

; 536  :             ImGui::SameLine(); HelpMarker("You can input value using the scientific notation,\n  e.g. \"1e+8\" becomes \"100000000\".\n");

  00700	51		 push	 ecx
  00701	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00709	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070e	51		 push	 ecx
  0070f	0f 57 c0	 xorps	 xmm0, xmm0
  00712	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00717	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0071c	83 c4 08	 add	 esp, 8
  0071f	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@NIEHKNDF@You?5can?5input?5value?5using?5the?5s@
  00724	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00729	83 c4 04	 add	 esp, 4

; 537  : 
; 538  :             static float vec4a[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
; 539  :             ImGui::InputFloat3("input float3", vec4a);

  0072c	6a 00		 push	 0
  0072e	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  00733	68 00 00 00 00	 push	 OFFSET ?vec4a@?BN@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  00738	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KKMOFJMF@input?5float3@
  0073d	e8 00 00 00 00	 call	 ?InputFloat3@ImGui@@YA_NPBDQAM0H@Z ; ImGui::InputFloat3
  00742	83 c4 10	 add	 esp, 16			; 00000010H

; 540  :         }
; 541  : 
; 542  :         {
; 543  :             static int i1 = 50, i2 = 42;
; 544  :             ImGui::DragInt("drag int", &i1, 1);

  00745	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0074a	6a 00		 push	 0
  0074c	6a 00		 push	 0
  0074e	51		 push	 ecx
  0074f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00757	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0075c	68 00 00 00 00	 push	 OFFSET ?i1@?BO@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00761	68 00 00 00 00	 push	 OFFSET ??_C@_08EAMJBIPC@drag?5int@
  00766	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPBDPAHMHH0@Z ; ImGui::DragInt
  0076b	83 c4 18	 add	 esp, 24			; 00000018H

; 545  :             ImGui::SameLine(); HelpMarker("Click and drag to edit value.\nHold SHIFT/ALT for faster/slower edit.\nDouble-click or CTRL+click to input value.");

  0076e	51		 push	 ecx
  0076f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	51		 push	 ecx
  0077d	0f 57 c0	 xorps	 xmm0, xmm0
  00780	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00785	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0078a	83 c4 08	 add	 esp, 8
  0078d	68 00 00 00 00	 push	 OFFSET ??_C@_0HA@JJHPNEPM@Click?5and?5drag?5to?5edit?5value?4?6H@
  00792	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00797	83 c4 04	 add	 esp, 4

; 546  : 
; 547  :             ImGui::DragInt("drag int 0..100", &i2, 1, 0, 100, "%d%%");

  0079a	68 00 00 00 00	 push	 OFFSET ??_C@_04FCMNJMCO@?$CFd?$CF?$CF@
  0079f	6a 64		 push	 100			; 00000064H
  007a1	6a 00		 push	 0
  007a3	51		 push	 ecx
  007a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b1	68 00 00 00 00	 push	 OFFSET ?i2@?BO@??ShowDemoWindowWidgets@@YAXXZ@4HA
  007b6	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MCINAHBB@drag?5int?50?4?4100@
  007bb	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPBDPAHMHH0@Z ; ImGui::DragInt
  007c0	83 c4 18	 add	 esp, 24			; 00000018H

; 548  : 
; 549  :             static float f1=1.00f, f2=0.0067f;
; 550  :             ImGui::DragFloat("drag float", &f1, 0.005f);

  007c3	51		 push	 ecx
  007c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d1	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  007d6	51		 push	 ecx
  007d7	0f 57 c0	 xorps	 xmm0, xmm0
  007da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007df	51		 push	 ecx
  007e0	0f 57 c0	 xorps	 xmm0, xmm0
  007e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007e8	51		 push	 ecx
  007e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  007f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f6	68 00 00 00 00	 push	 OFFSET ?f1@?BO@??ShowDemoWindowWidgets@@YAXXZ@4MA
  007fb	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DLCOHHGO@drag?5float@
  00800	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00805	83 c4 1c	 add	 esp, 28			; 0000001cH

; 551  :             ImGui::DragFloat("drag small float", &f2, 0.0001f, 0.0f, 0.0f, "%.06f ns");

  00808	51		 push	 ecx
  00809	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00811	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00816	68 00 00 00 00	 push	 OFFSET ??_C@_08LHDHPMPH@?$CF?406f?5ns@
  0081b	51		 push	 ecx
  0081c	0f 57 c0	 xorps	 xmm0, xmm0
  0081f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00824	51		 push	 ecx
  00825	0f 57 c0	 xorps	 xmm0, xmm0
  00828	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082d	51		 push	 ecx
  0082e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@38d1b717
  00836	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0083b	68 00 00 00 00	 push	 OFFSET ?f2@?BO@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00840	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CIODINPI@drag?5small?5float@
  00845	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  0084a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 552  :         }
; 553  : 
; 554  :         {
; 555  :             static int i1=0;
; 556  :             ImGui::SliderInt("slider int", &i1, -1, 3);

  0084d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  00852	6a 03		 push	 3
  00854	6a ff		 push	 -1
  00856	68 00 00 00 00	 push	 OFFSET ?i1@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0085b	68 00 00 00 00	 push	 OFFSET ??_C@_0L@INJDAFHM@slider?5int@
  00860	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPBDPAHHH0@Z ; ImGui::SliderInt
  00865	83 c4 14	 add	 esp, 20			; 00000014H

; 557  :             ImGui::SameLine(); HelpMarker("CTRL+click to input value.");

  00868	51		 push	 ecx
  00869	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00871	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00876	51		 push	 ecx
  00877	0f 57 c0	 xorps	 xmm0, xmm0
  0087a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0087f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00884	83 c4 08	 add	 esp, 8
  00887	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@FBJLFMJ@CTRL?$CLclick?5to?5input?5value?4@
  0088c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00891	83 c4 04	 add	 esp, 4

; 558  : 
; 559  :             static float f1=0.123f, f2=0.0f;
; 560  :             ImGui::SliderFloat("slider float", &f1, 0.0f, 1.0f, "ratio = %.3f");

  00894	51		 push	 ecx
  00895	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0089d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a2	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BCCPFMAI@ratio?5?$DN?5?$CF?43f@
  008a7	51		 push	 ecx
  008a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b5	51		 push	 ecx
  008b6	0f 57 c0	 xorps	 xmm0, xmm0
  008b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008be	68 00 00 00 00	 push	 OFFSET ?f1@?BP@??ShowDemoWindowWidgets@@YAXXZ@4MA
  008c3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@PNCIGDCI@slider?5float@
  008c8	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  008cd	83 c4 18	 add	 esp, 24			; 00000018H

; 561  :             ImGui::SliderFloat("slider float (curve)", &f2, -10.0f, 10.0f, "%.4f", 2.0f);

  008d0	51		 push	 ecx
  008d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  008d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008de	68 00 00 00 00	 push	 OFFSET ??_C@_04GANEPBPG@?$CF?44f@
  008e3	51		 push	 ecx
  008e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  008ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008f1	51		 push	 ecx
  008f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1200000
  008fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ff	68 00 00 00 00	 push	 OFFSET ?f2@?BP@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00904	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EFFJNHKJ@slider?5float?5?$CIcurve?$CJ@
  00909	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  0090e	83 c4 18	 add	 esp, 24			; 00000018H

; 562  : 
; 563  :             static float angle = 0.0f;
; 564  :             ImGui::SliderAngle("slider angle", &angle);

  00911	68 00 00 00 00	 push	 OFFSET ??_C@_08FKIHKODH@?$CF?40f?5deg@
  00916	51		 push	 ecx
  00917	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43b40000
  0091f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00924	51		 push	 ecx
  00925	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c3b40000
  0092d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00932	68 00 00 00 00	 push	 OFFSET ?angle@?BP@??ShowDemoWindowWidgets@@YAXXZ@4MA
  00937	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EFIJIFM@slider?5angle@
  0093c	e8 00 00 00 00	 call	 ?SliderAngle@ImGui@@YA_NPBDPAMMM0@Z ; ImGui::SliderAngle
  00941	83 c4 14	 add	 esp, 20			; 00000014H

; 565  : 
; 566  :             // Using the format string to display a name instead of an integer.
; 567  :             // Here we completely omit '%d' from the format string, so it'll only display a name.
; 568  :             // This technique can also be used with DragInt().
; 569  :             enum Element { Element_Fire, Element_Earth, Element_Air, Element_Water, Element_COUNT };
; 570  :             const char* element_names[Element_COUNT] = { "Fire", "Earth", "Air", "Water" };

  00944	c7 45 84 00 00
	00 00		 mov	 DWORD PTR _element_names$220[ebp], OFFSET ??_C@_04OHLPDOFO@Fire@
  0094b	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _element_names$220[ebp+4], OFFSET ??_C@_05IKBANCEK@Earth@
  00952	c7 45 8c 00 00
	00 00		 mov	 DWORD PTR _element_names$220[ebp+8], OFFSET ??_C@_03KHBMPEGA@Air@
  00959	c7 45 90 00 00
	00 00		 mov	 DWORD PTR _element_names$220[ebp+12], OFFSET ??_C@_05EMKMBNJK@Water@

; 571  :             static int current_element = Element_Fire;
; 572  :             const char* current_element_name = (current_element >= 0 && current_element < Element_COUNT) ? element_names[current_element] : "Unknown";

  00960	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?current_element@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  00967	7c 1a		 jl	 SHORT $LN233@ShowDemoWi
  00969	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?current_element@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA, 4
  00970	7d 11		 jge	 SHORT $LN233@ShowDemoWi
  00972	a1 00 00 00 00	 mov	 eax, DWORD PTR ?current_element@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00977	8b 4c 85 84	 mov	 ecx, DWORD PTR _element_names$220[ebp+eax*4]
  0097b	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv452[ebp], ecx
  00981	eb 0a		 jmp	 SHORT $LN234@ShowDemoWi
$LN233@ShowDemoWi:
  00983	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv452[ebp], OFFSET ??_C@_07NBCGADJA@Unknown@
$LN234@ShowDemoWi:
  0098d	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv452[ebp]
  00993	89 95 78 ff ff
	ff		 mov	 DWORD PTR _current_element_name$219[ebp], edx

; 573  :             ImGui::SliderInt("slider enum", &current_element, 0, Element_COUNT - 1, current_element_name);

  00999	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _current_element_name$219[ebp]
  0099f	50		 push	 eax
  009a0	6a 03		 push	 3
  009a2	6a 00		 push	 0
  009a4	68 00 00 00 00	 push	 OFFSET ?current_element@?BP@??ShowDemoWindowWidgets@@YAXXZ@4HA
  009a9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@ENFPDMMO@slider?5enum@
  009ae	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPBDPAHHH0@Z ; ImGui::SliderInt
  009b3	83 c4 14	 add	 esp, 20			; 00000014H

; 574  :             ImGui::SameLine(); HelpMarker("Using the format string parameter to display a name instead of the underlying integer.");

  009b6	51		 push	 ecx
  009b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c4	51		 push	 ecx
  009c5	0f 57 c0	 xorps	 xmm0, xmm0
  009c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009cd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  009d2	83 c4 08	 add	 esp, 8
  009d5	68 00 00 00 00	 push	 OFFSET ??_C@_0FH@BEBFOFKH@Using?5the?5format?5string?5paramet@
  009da	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  009df	83 c4 04	 add	 esp, 4

; 575  :         }
; 576  : 
; 577  :         {
; 578  :             static float col1[3] = { 1.0f,0.0f,0.2f };
; 579  :             static float col2[4] = { 0.4f,0.7f,0.0f,0.5f };
; 580  :             ImGui::ColorEdit3("color 1", col1);

  009e2	6a 00		 push	 0
  009e4	68 00 00 00 00	 push	 OFFSET ?col1@?CA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  009e9	68 00 00 00 00	 push	 OFFSET ??_C@_07OCDFLNDK@color?51@
  009ee	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit3
  009f3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 581  :             ImGui::SameLine(); HelpMarker("Click on the colored square to open a color picker.\nClick and hold to use drag and drop.\nRight-click on the colored square to show options.\nCTRL+click on individual component to input value.\n");

  009f6	51		 push	 ecx
  009f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  009ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a04	51		 push	 ecx
  00a05	0f 57 c0	 xorps	 xmm0, xmm0
  00a08	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a0d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a12	83 c4 08	 add	 esp, 8
  00a15	68 00 00 00 00	 push	 OFFSET ??_C@_0MA@GFIMMJPK@Click?5on?5the?5colored?5square?5to?5@
  00a1a	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00a1f	83 c4 04	 add	 esp, 4

; 582  : 
; 583  :             ImGui::ColorEdit4("color 2", col2);

  00a22	6a 00		 push	 0
  00a24	68 00 00 00 00	 push	 OFFSET ?col2@?CA@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  00a29	68 00 00 00 00	 push	 OFFSET ??_C@_07MJBIOOPJ@color?52@
  00a2e	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  00a33	83 c4 0c	 add	 esp, 12			; 0000000cH

; 584  :         }
; 585  : 
; 586  :         {
; 587  :             // List box
; 588  :             const char* listbox_items[] = { "Apple", "Banana", "Cherry", "Kiwi", "Mango", "Orange", "Pineapple", "Strawberry", "Watermelon" };

  00a36	c7 85 4c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp], OFFSET ??_C@_05EBJDGKGA@Apple@
  00a40	c7 85 50 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+4], OFFSET ??_C@_06OJJIHNKI@Banana@
  00a4a	c7 85 54 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+8], OFFSET ??_C@_06MKLLCMPJ@Cherry@
  00a54	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+12], OFFSET ??_C@_04LFFBHHAI@Kiwi@
  00a5e	c7 85 5c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+16], OFFSET ??_C@_05CNKNDDOO@Mango@
  00a68	c7 85 60 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+20], OFFSET ??_C@_06LMIDBFFB@Orange@
  00a72	c7 85 64 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+24], OFFSET ??_C@_09EBEMMGPP@Pineapple@
  00a7c	c7 85 68 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+28], OFFSET ??_C@_0L@BNANDFPN@Strawberry@
  00a86	c7 85 6c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _listbox_items$218[ebp+32], OFFSET ??_C@_0L@JJNGHCMI@Watermelon@

; 589  :             static int listbox_item_current = 1;
; 590  :             ImGui::ListBox("listbox\n(single select)", &listbox_item_current, listbox_items, IM_ARRAYSIZE(listbox_items), 4);

  00a90	6a 04		 push	 4
  00a92	6a 09		 push	 9
  00a94	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _listbox_items$218[ebp]
  00a9a	50		 push	 eax
  00a9b	68 00 00 00 00	 push	 OFFSET ?listbox_item_current@?CB@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00aa0	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@JHEMJDIG@listbox?6?$CIsingle?5select?$CJ@
  00aa5	e8 00 00 00 00	 call	 ?ListBox@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::ListBox
  00aaa	83 c4 14	 add	 esp, 20			; 00000014H

; 591  : 
; 592  :             //static int listbox_item_current2 = 2;
; 593  :             //ImGui::SetNextItemWidth(-1);
; 594  :             //ImGui::ListBox("##listbox2", &listbox_item_current2, listbox_items, IM_ARRAYSIZE(listbox_items), 4);
; 595  :         }
; 596  : 
; 597  :         ImGui::TreePop();

  00aad	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN78@ShowDemoWi:

; 598  :     }
; 599  : 
; 600  :     // Testing ImGuiOnceUponAFrame helper.
; 601  :     //static ImGuiOnceUponAFrame once;
; 602  :     //for (int i = 0; i < 5; i++)
; 603  :     //    if (once)
; 604  :     //        ImGui::Text("This will be displayed only once.");
; 605  : 
; 606  :     if (ImGui::TreeNode("Trees"))

  00ab2	68 00 00 00 00	 push	 OFFSET ??_C@_05BMMGIDNN@Trees@
  00ab7	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00abc	83 c4 04	 add	 esp, 4
  00abf	0f b6 c0	 movzx	 eax, al
  00ac2	85 c0		 test	 eax, eax
  00ac4	0f 84 29 03 00
	00		 je	 $LN86@ShowDemoWi

; 607  :     {
; 608  :         if (ImGui::TreeNode("Basic trees"))

  00aca	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OABIBGBA@Basic?5trees@
  00acf	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00ad4	83 c4 04	 add	 esp, 4
  00ad7	0f b6 c0	 movzx	 eax, al
  00ada	85 c0		 test	 eax, eax
  00adc	0f 84 a3 00 00
	00		 je	 $LN87@ShowDemoWi

; 609  :         {
; 610  :             for (int i = 0; i < 5; i++)

  00ae2	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$217[ebp], 0
  00aec	eb 0f		 jmp	 SHORT $LN7@ShowDemoWi
$LN5@ShowDemoWi:
  00aee	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$217[ebp]
  00af4	83 c0 01	 add	 eax, 1
  00af7	89 85 40 ff ff
	ff		 mov	 DWORD PTR _i$217[ebp], eax
$LN7@ShowDemoWi:
  00afd	83 bd 40 ff ff
	ff 05		 cmp	 DWORD PTR _i$217[ebp], 5
  00b04	7d 7a		 jge	 SHORT $LN6@ShowDemoWi

; 611  :             {
; 612  :                 // Use SetNextItemOpen() so set the default state of a node to be open.
; 613  :                 // We could also use TreeNodeEx() with the ImGuiTreeNodeFlags_DefaultOpen flag to achieve the same thing!
; 614  :                 if (i == 0)

  00b06	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _i$217[ebp], 0
  00b0d	75 0c		 jne	 SHORT $LN88@ShowDemoWi

; 615  :                     ImGui::SetNextItemOpen(true, ImGuiCond_Once);

  00b0f	6a 02		 push	 2
  00b11	6a 01		 push	 1
  00b13	e8 00 00 00 00	 call	 ?SetNextItemOpen@ImGui@@YAX_NH@Z ; ImGui::SetNextItemOpen
  00b18	83 c4 08	 add	 esp, 8
$LN88@ShowDemoWi:

; 616  : 
; 617  :                 if (ImGui::TreeNode((void*)(intptr_t)i, "Child %d", i))

  00b1b	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _i$217[ebp]
  00b21	50		 push	 eax
  00b22	68 00 00 00 00	 push	 OFFSET ??_C@_08GPGIPNJB@Child?5?$CFd@
  00b27	8b 8d 40 ff ff
	ff		 mov	 ecx, DWORD PTR _i$217[ebp]
  00b2d	51		 push	 ecx
  00b2e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBXPBDZZ ; ImGui::TreeNode
  00b33	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b36	0f b6 d0	 movzx	 edx, al
  00b39	85 d2		 test	 edx, edx
  00b3b	74 3e		 je	 SHORT $LN89@ShowDemoWi

; 618  :                 {
; 619  :                     ImGui::Text("blah blah");

  00b3d	68 00 00 00 00	 push	 OFFSET ??_C@_09KGLHLKML@blah?5blah@
  00b42	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00b47	83 c4 04	 add	 esp, 4

; 620  :                     ImGui::SameLine();

  00b4a	51		 push	 ecx
  00b4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b58	51		 push	 ecx
  00b59	0f 57 c0	 xorps	 xmm0, xmm0
  00b5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b61	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b66	83 c4 08	 add	 esp, 8

; 621  :                     if (ImGui::SmallButton("button")) {};

  00b69	68 00 00 00 00	 push	 OFFSET ??_C@_06HFKPFKMP@button@
  00b6e	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  00b73	83 c4 04	 add	 esp, 4

; 622  :                     ImGui::TreePop();

  00b76	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN89@ShowDemoWi:

; 623  :                 }
; 624  :             }

  00b7b	e9 6e ff ff ff	 jmp	 $LN5@ShowDemoWi
$LN6@ShowDemoWi:

; 625  :             ImGui::TreePop();

  00b80	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN87@ShowDemoWi:

; 626  :         }
; 627  : 
; 628  :         if (ImGui::TreeNode("Advanced, with Selectable nodes"))

  00b85	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@LDNIBPC@Advanced?0?5with?5Selectable?5nodes@
  00b8a	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00b8f	83 c4 04	 add	 esp, 4
  00b92	0f b6 c0	 movzx	 eax, al
  00b95	85 c0		 test	 eax, eax
  00b97	0f 84 51 02 00
	00		 je	 $LN91@ShowDemoWi

; 629  :         {
; 630  :             HelpMarker("This is a more typical looking tree with selectable nodes.\nClick to select, CTRL+Click to toggle, click on arrows or double-click to open.");

  00b9d	68 00 00 00 00	 push	 OFFSET ??_C@_0IL@PMAJKNJG@This?5is?5a?5more?5typical?5looking?5@
  00ba2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00ba7	83 c4 04	 add	 esp, 4

; 631  :             static ImGuiTreeNodeFlags base_flags = ImGuiTreeNodeFlags_OpenOnArrow | ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_SpanAvailWidth;
; 632  :             static bool align_label_with_current_x_position = false;
; 633  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnArrow", (unsigned int*)&base_flags, ImGuiTreeNodeFlags_OpenOnArrow);

  00baa	68 80 00 00 00	 push	 128			; 00000080H
  00baf	68 00 00 00 00	 push	 OFFSET ?base_flags@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00bb4	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JJAJNCOF@ImGuiTreeNodeFlags_OpenOnArrow@
  00bb9	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00bbe	83 c4 0c	 add	 esp, 12			; 0000000cH

; 634  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_OpenOnDoubleClick", (unsigned int*)&base_flags, ImGuiTreeNodeFlags_OpenOnDoubleClick);

  00bc1	6a 40		 push	 64			; 00000040H
  00bc3	68 00 00 00 00	 push	 OFFSET ?base_flags@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00bc8	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@HDMDLLCC@ImGuiTreeNodeFlags_OpenOnDouble@
  00bcd	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00bd2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 635  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanAvailWidth", (unsigned int*)&base_flags, ImGuiTreeNodeFlags_SpanAvailWidth);

  00bd5	68 00 08 00 00	 push	 2048			; 00000800H
  00bda	68 00 00 00 00	 push	 OFFSET ?base_flags@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00bdf	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@CLHKBONF@ImGuiTreeNodeFlags_SpanAvailWid@
  00be4	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00be9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 636  :             ImGui::CheckboxFlags("ImGuiTreeNodeFlags_SpanFullWidth", (unsigned int*)&base_flags, ImGuiTreeNodeFlags_SpanFullWidth);

  00bec	68 00 10 00 00	 push	 4096			; 00001000H
  00bf1	68 00 00 00 00	 push	 OFFSET ?base_flags@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00bf6	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OHNGGEGD@ImGuiTreeNodeFlags_SpanFullWidt@
  00bfb	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00c00	83 c4 0c	 add	 esp, 12			; 0000000cH

; 637  :             ImGui::Checkbox("Align label with current X position)", &align_label_with_current_x_position);

  00c03	68 00 00 00 00	 push	 OFFSET ?align_label_with_current_x_position@?DE@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  00c08	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BINADAGB@Align?5label?5with?5current?5X?5posi@
  00c0d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00c12	83 c4 08	 add	 esp, 8

; 638  :             ImGui::Text("Hello!");

  00c15	68 00 00 00 00	 push	 OFFSET ??_C@_06KPGIMOHP@Hello?$CB@
  00c1a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00c1f	83 c4 04	 add	 esp, 4

; 639  :             if (align_label_with_current_x_position)

  00c22	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?align_label_with_current_x_position@?DE@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  00c29	85 c0		 test	 eax, eax
  00c2b	74 11		 je	 SHORT $LN92@ShowDemoWi

; 640  :                 ImGui::Unindent(ImGui::GetTreeNodeToLabelSpacing());

  00c2d	e8 00 00 00 00	 call	 ?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ ; ImGui::GetTreeNodeToLabelSpacing
  00c32	51		 push	 ecx
  00c33	d9 1c 24	 fstp	 DWORD PTR [esp]
  00c36	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
  00c3b	83 c4 04	 add	 esp, 4
$LN92@ShowDemoWi:

; 641  : 
; 642  :             static int selection_mask = (1 << 2); // Dumb representation of what may be user-side selection state. You may carry selection state inside or outside your objects in whatever format you see fit.
; 643  :             int node_clicked = -1;                // Temporary storage of what node we have clicked to process selection at the end of the loop. May be a pointer to your own node type, etc.

  00c3e	c7 85 34 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR _node_clicked$216[ebp], -1

; 644  :             for (int i = 0; i < 6; i++)

  00c48	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$215[ebp], 0
  00c52	eb 0f		 jmp	 SHORT $LN10@ShowDemoWi
$LN8@ShowDemoWi:
  00c54	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$215[ebp]
  00c5a	83 c0 01	 add	 eax, 1
  00c5d	89 85 28 ff ff
	ff		 mov	 DWORD PTR _i$215[ebp], eax
$LN10@ShowDemoWi:
  00c63	83 bd 28 ff ff
	ff 06		 cmp	 DWORD PTR _i$215[ebp], 6
  00c6a	0f 8d 18 01 00
	00		 jge	 $LN9@ShowDemoWi

; 645  :             {
; 646  :                 // Disable the default open on single-click behavior and pass in Selected flag according to our selection state.
; 647  :                 ImGuiTreeNodeFlags node_flags = base_flags;

  00c70	a1 00 00 00 00	 mov	 eax, DWORD PTR ?base_flags@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00c75	89 85 1c ff ff
	ff		 mov	 DWORD PTR _node_flags$214[ebp], eax

; 648  :                 const bool is_selected = (selection_mask & (1 << i)) != 0;

  00c7b	b8 01 00 00 00	 mov	 eax, 1
  00c80	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _i$215[ebp]
  00c86	d3 e0		 shl	 eax, cl
  00c88	23 05 00 00 00
	00		 and	 eax, DWORD PTR ?selection_mask@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00c8e	74 09		 je	 SHORT $LN235@ShowDemoWi
  00c90	c6 85 bb eb ff
	ff 01		 mov	 BYTE PTR tv594[ebp], 1
  00c97	eb 07		 jmp	 SHORT $LN236@ShowDemoWi
$LN235@ShowDemoWi:
  00c99	c6 85 bb eb ff
	ff 00		 mov	 BYTE PTR tv594[ebp], 0
$LN236@ShowDemoWi:
  00ca0	8a 8d bb eb ff
	ff		 mov	 cl, BYTE PTR tv594[ebp]
  00ca6	88 8d 13 ff ff
	ff		 mov	 BYTE PTR _is_selected$213[ebp], cl

; 649  :                 if (is_selected)

  00cac	0f b6 85 13 ff
	ff ff		 movzx	 eax, BYTE PTR _is_selected$213[ebp]
  00cb3	85 c0		 test	 eax, eax
  00cb5	74 0f		 je	 SHORT $LN93@ShowDemoWi

; 650  :                     node_flags |= ImGuiTreeNodeFlags_Selected;

  00cb7	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _node_flags$214[ebp]
  00cbd	83 c8 01	 or	 eax, 1
  00cc0	89 85 1c ff ff
	ff		 mov	 DWORD PTR _node_flags$214[ebp], eax
$LN93@ShowDemoWi:

; 651  :                 if (i < 3)

  00cc6	83 bd 28 ff ff
	ff 03		 cmp	 DWORD PTR _i$215[ebp], 3
  00ccd	7d 64		 jge	 SHORT $LN94@ShowDemoWi

; 652  :                 {
; 653  :                     // Items 0..2 are Tree Node
; 654  :                     bool node_open = ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Node %d", i);

  00ccf	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$215[ebp]
  00cd5	50		 push	 eax
  00cd6	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DKDJNGLG@Selectable?5Node?5?$CFd@
  00cdb	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _node_flags$214[ebp]
  00ce1	51		 push	 ecx
  00ce2	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _i$215[ebp]
  00ce8	52		 push	 edx
  00ce9	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPBXHPBDZZ ; ImGui::TreeNodeEx
  00cee	83 c4 10	 add	 esp, 16			; 00000010H
  00cf1	88 85 07 ff ff
	ff		 mov	 BYTE PTR _node_open$212[ebp], al

; 655  :                     if (ImGui::IsItemClicked())

  00cf7	6a 00		 push	 0
  00cf9	e8 00 00 00 00	 call	 ?IsItemClicked@ImGui@@YA_NH@Z ; ImGui::IsItemClicked
  00cfe	83 c4 04	 add	 esp, 4
  00d01	0f b6 c0	 movzx	 eax, al
  00d04	85 c0		 test	 eax, eax
  00d06	74 0c		 je	 SHORT $LN96@ShowDemoWi

; 656  :                         node_clicked = i;

  00d08	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$215[ebp]
  00d0e	89 85 34 ff ff
	ff		 mov	 DWORD PTR _node_clicked$216[ebp], eax
$LN96@ShowDemoWi:

; 657  :                     if (node_open)

  00d14	0f b6 85 07 ff
	ff ff		 movzx	 eax, BYTE PTR _node_open$212[ebp]
  00d1b	85 c0		 test	 eax, eax
  00d1d	74 12		 je	 SHORT $LN97@ShowDemoWi

; 658  :                     {
; 659  :                         ImGui::BulletText("Blah blah\nBlah Blah");

  00d1f	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@GJFAIPKG@Blah?5blah?6Blah?5Blah@
  00d24	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00d29	83 c4 04	 add	 esp, 4

; 660  :                         ImGui::TreePop();

  00d2c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN97@ShowDemoWi:

; 661  :                     }
; 662  :                 }

  00d31	eb 50		 jmp	 SHORT $LN98@ShowDemoWi
$LN94@ShowDemoWi:

; 663  :                 else
; 664  :                 {
; 665  :                     // Items 3..5 are Tree Leaves
; 666  :                     // The only reason we use TreeNode at all is to allow selection of the leaf.
; 667  :                     // Otherwise we can use BulletText() or advance the cursor by GetTreeNodeToLabelSpacing() and call Text().
; 668  :                     node_flags |= ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen; // ImGuiTreeNodeFlags_Bullet

  00d33	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _node_flags$214[ebp]
  00d39	0d 08 01 00 00	 or	 eax, 264		; 00000108H
  00d3e	89 85 1c ff ff
	ff		 mov	 DWORD PTR _node_flags$214[ebp], eax

; 669  :                     ImGui::TreeNodeEx((void*)(intptr_t)i, node_flags, "Selectable Leaf %d", i);

  00d44	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$215[ebp]
  00d4a	50		 push	 eax
  00d4b	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@MLABGFOG@Selectable?5Leaf?5?$CFd@
  00d50	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _node_flags$214[ebp]
  00d56	51		 push	 ecx
  00d57	8b 95 28 ff ff
	ff		 mov	 edx, DWORD PTR _i$215[ebp]
  00d5d	52		 push	 edx
  00d5e	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPBXHPBDZZ ; ImGui::TreeNodeEx
  00d63	83 c4 10	 add	 esp, 16			; 00000010H

; 670  :                     if (ImGui::IsItemClicked())

  00d66	6a 00		 push	 0
  00d68	e8 00 00 00 00	 call	 ?IsItemClicked@ImGui@@YA_NH@Z ; ImGui::IsItemClicked
  00d6d	83 c4 04	 add	 esp, 4
  00d70	0f b6 c0	 movzx	 eax, al
  00d73	85 c0		 test	 eax, eax
  00d75	74 0c		 je	 SHORT $LN98@ShowDemoWi

; 671  :                         node_clicked = i;

  00d77	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _i$215[ebp]
  00d7d	89 85 34 ff ff
	ff		 mov	 DWORD PTR _node_clicked$216[ebp], eax
$LN98@ShowDemoWi:

; 672  :                 }
; 673  :             }

  00d83	e9 cc fe ff ff	 jmp	 $LN8@ShowDemoWi
$LN9@ShowDemoWi:

; 674  :             if (node_clicked != -1)

  00d88	83 bd 34 ff ff
	ff ff		 cmp	 DWORD PTR _node_clicked$216[ebp], -1
  00d8f	74 3c		 je	 SHORT $LN101@ShowDemoWi

; 675  :             {
; 676  :                 // Update selection state. Process outside of tree loop to avoid visual inconsistencies during the clicking-frame.
; 677  :                 if (ImGui::GetIO().KeyCtrl)

  00d91	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  00d96	0f b6 80 f8 00
	00 00		 movzx	 eax, BYTE PTR [eax+248]
  00d9d	85 c0		 test	 eax, eax
  00d9f	74 1a		 je	 SHORT $LN100@ShowDemoWi

; 678  :                     selection_mask ^= (1 << node_clicked);          // CTRL+click to toggle

  00da1	b8 01 00 00 00	 mov	 eax, 1
  00da6	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _node_clicked$216[ebp]
  00dac	d3 e0		 shl	 eax, cl
  00dae	33 05 00 00 00
	00		 xor	 eax, DWORD PTR ?selection_mask@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00db4	a3 00 00 00 00	 mov	 DWORD PTR ?selection_mask@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
  00db9	eb 12		 jmp	 SHORT $LN101@ShowDemoWi
$LN100@ShowDemoWi:

; 679  :                 else //if (!(selection_mask & (1 << node_clicked))) // Depending on selection behavior you want, this commented bit preserve selection when clicking on item that is part of the selection
; 680  :                     selection_mask = (1 << node_clicked);           // Click to single-select

  00dbb	b8 01 00 00 00	 mov	 eax, 1
  00dc0	8b 8d 34 ff ff
	ff		 mov	 ecx, DWORD PTR _node_clicked$216[ebp]
  00dc6	d3 e0		 shl	 eax, cl
  00dc8	a3 00 00 00 00	 mov	 DWORD PTR ?selection_mask@?DE@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN101@ShowDemoWi:

; 681  :             }
; 682  :             if (align_label_with_current_x_position)

  00dcd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?align_label_with_current_x_position@?DE@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  00dd4	85 c0		 test	 eax, eax
  00dd6	74 11		 je	 SHORT $LN102@ShowDemoWi

; 683  :                 ImGui::Indent(ImGui::GetTreeNodeToLabelSpacing());

  00dd8	e8 00 00 00 00	 call	 ?GetTreeNodeToLabelSpacing@ImGui@@YAMXZ ; ImGui::GetTreeNodeToLabelSpacing
  00ddd	51		 push	 ecx
  00dde	d9 1c 24	 fstp	 DWORD PTR [esp]
  00de1	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
  00de6	83 c4 04	 add	 esp, 4
$LN102@ShowDemoWi:

; 684  :             ImGui::TreePop();

  00de9	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN91@ShowDemoWi:

; 685  :         }
; 686  :         ImGui::TreePop();

  00dee	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN86@ShowDemoWi:

; 687  :     }
; 688  : 
; 689  :     if (ImGui::TreeNode("Collapsing Headers"))

  00df3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GBPHDMGC@Collapsing?5Headers@
  00df8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00dfd	83 c4 04	 add	 esp, 4
  00e00	0f b6 c0	 movzx	 eax, al
  00e03	85 c0		 test	 eax, eax
  00e05	0f 84 f2 00 00
	00		 je	 $LN103@ShowDemoWi

; 690  :     {
; 691  :         static bool closable_group = true;
; 692  :         ImGui::Checkbox("Show 2nd header", &closable_group);

  00e0b	68 00 00 00 00	 push	 OFFSET ?closable_group@?FB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  00e10	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@JOCPBPDO@Show?52nd?5header@
  00e15	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00e1a	83 c4 08	 add	 esp, 8

; 693  :         if (ImGui::CollapsingHeader("Header", ImGuiTreeNodeFlags_None))

  00e1d	6a 00		 push	 0
  00e1f	68 00 00 00 00	 push	 OFFSET ??_C@_06OENKJGA@Header@
  00e24	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00e29	83 c4 08	 add	 esp, 8
  00e2c	0f b6 c0	 movzx	 eax, al
  00e2f	85 c0		 test	 eax, eax
  00e31	74 55		 je	 SHORT $LN12@ShowDemoWi

; 694  :         {
; 695  :             ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());

  00e33	6a 00		 push	 0
  00e35	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00e3a	83 c4 04	 add	 esp, 4
  00e3d	0f b6 c0	 movzx	 eax, al
  00e40	50		 push	 eax
  00e41	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd@
  00e46	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00e4b	83 c4 08	 add	 esp, 8

; 696  :             for (int i = 0; i < 5; i++)

  00e4e	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$211[ebp], 0
  00e58	eb 0f		 jmp	 SHORT $LN13@ShowDemoWi
$LN11@ShowDemoWi:
  00e5a	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$211[ebp]
  00e60	83 c0 01	 add	 eax, 1
  00e63	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _i$211[ebp], eax
$LN13@ShowDemoWi:
  00e69	83 bd f8 fe ff
	ff 05		 cmp	 DWORD PTR _i$211[ebp], 5
  00e70	7d 16		 jge	 SHORT $LN12@ShowDemoWi

; 697  :                 ImGui::Text("Some content %d", i);

  00e72	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _i$211[ebp]
  00e78	50		 push	 eax
  00e79	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PJMPKHOM@Some?5content?5?$CFd@
  00e7e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00e83	83 c4 08	 add	 esp, 8
  00e86	eb d2		 jmp	 SHORT $LN11@ShowDemoWi
$LN12@ShowDemoWi:

; 698  :         }
; 699  :         if (ImGui::CollapsingHeader("Header with a close button", &closable_group))

  00e88	6a 00		 push	 0
  00e8a	68 00 00 00 00	 push	 OFFSET ?closable_group@?FB@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  00e8f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@IHHHIKPE@Header?5with?5a?5close?5button@
  00e94	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDPA_NH@Z ; ImGui::CollapsingHeader
  00e99	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e9c	0f b6 c0	 movzx	 eax, al
  00e9f	85 c0		 test	 eax, eax
  00ea1	74 55		 je	 SHORT $LN15@ShowDemoWi

; 700  :         {
; 701  :             ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());

  00ea3	6a 00		 push	 0
  00ea5	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  00eaa	83 c4 04	 add	 esp, 4
  00ead	0f b6 c0	 movzx	 eax, al
  00eb0	50		 push	 eax
  00eb1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@BLAKNONB@IsItemHovered?3?5?$CFd@
  00eb6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00ebb	83 c4 08	 add	 esp, 8

; 702  :             for (int i = 0; i < 5; i++)

  00ebe	c7 85 ec fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$210[ebp], 0
  00ec8	eb 0f		 jmp	 SHORT $LN16@ShowDemoWi
$LN14@ShowDemoWi:
  00eca	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _i$210[ebp]
  00ed0	83 c0 01	 add	 eax, 1
  00ed3	89 85 ec fe ff
	ff		 mov	 DWORD PTR _i$210[ebp], eax
$LN16@ShowDemoWi:
  00ed9	83 bd ec fe ff
	ff 05		 cmp	 DWORD PTR _i$210[ebp], 5
  00ee0	7d 16		 jge	 SHORT $LN15@ShowDemoWi

; 703  :                 ImGui::Text("More content %d", i);

  00ee2	8b 85 ec fe ff
	ff		 mov	 eax, DWORD PTR _i$210[ebp]
  00ee8	50		 push	 eax
  00ee9	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PEMOHED@More?5content?5?$CFd@
  00eee	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00ef3	83 c4 08	 add	 esp, 8
  00ef6	eb d2		 jmp	 SHORT $LN14@ShowDemoWi
$LN15@ShowDemoWi:

; 704  :         }
; 705  :         /*
; 706  :         if (ImGui::CollapsingHeader("Header with a bullet", ImGuiTreeNodeFlags_Bullet))
; 707  :             ImGui::Text("IsItemHovered: %d", ImGui::IsItemHovered());
; 708  :         */
; 709  :         ImGui::TreePop();

  00ef8	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN103@ShowDemoWi:

; 710  :     }
; 711  : 
; 712  :     if (ImGui::TreeNode("Bullets"))

  00efd	68 00 00 00 00	 push	 OFFSET ??_C@_07DHNDKCGP@Bullets@
  00f02	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00f07	83 c4 04	 add	 esp, 4
  00f0a	0f b6 c0	 movzx	 eax, al
  00f0d	85 c0		 test	 eax, eax
  00f0f	74 69		 je	 SHORT $LN106@ShowDemoWi

; 713  :     {
; 714  :         ImGui::BulletText("Bullet point 1");

  00f11	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DEGHIHA@Bullet?5point?51@
  00f16	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00f1b	83 c4 04	 add	 esp, 4

; 715  :         ImGui::BulletText("Bullet point 2\nOn multiple lines");

  00f1e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@LFMFDEHN@Bullet?5point?52?6On?5multiple?5line@
  00f23	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00f28	83 c4 04	 add	 esp, 4

; 716  :         if (ImGui::TreeNode("Tree node"))

  00f2b	68 00 00 00 00	 push	 OFFSET ??_C@_09CGOFEACE@Tree?5node@
  00f30	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00f35	83 c4 04	 add	 esp, 4
  00f38	0f b6 c0	 movzx	 eax, al
  00f3b	85 c0		 test	 eax, eax
  00f3d	74 12		 je	 SHORT $LN107@ShowDemoWi

; 717  :         {
; 718  :             ImGui::BulletText("Another bullet point");

  00f3f	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@FBMIEPNI@Another?5bullet?5point@
  00f44	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00f49	83 c4 04	 add	 esp, 4

; 719  :             ImGui::TreePop();

  00f4c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN107@ShowDemoWi:

; 720  :         }
; 721  :         ImGui::Bullet(); ImGui::Text("Bullet point 3 (two calls)");

  00f51	e8 00 00 00 00	 call	 ?Bullet@ImGui@@YAXXZ	; ImGui::Bullet
  00f56	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@OAFINJBP@Bullet?5point?53?5?$CItwo?5calls?$CJ@
  00f5b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00f60	83 c4 04	 add	 esp, 4

; 722  :         ImGui::Bullet(); ImGui::SmallButton("Button");

  00f63	e8 00 00 00 00	 call	 ?Bullet@ImGui@@YAXXZ	; ImGui::Bullet
  00f68	68 00 00 00 00	 push	 OFFSET ??_C@_06LKBCGDFD@Button@
  00f6d	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  00f72	83 c4 04	 add	 esp, 4

; 723  :         ImGui::TreePop();

  00f75	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN106@ShowDemoWi:

; 724  :     }
; 725  : 
; 726  :     if (ImGui::TreeNode("Text"))

  00f7a	68 00 00 00 00	 push	 OFFSET ??_C@_04OJAHODMC@Text@
  00f7f	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00f84	83 c4 04	 add	 esp, 4
  00f87	0f b6 c0	 movzx	 eax, al
  00f8a	85 c0		 test	 eax, eax
  00f8c	0f 84 4e 04 00
	00		 je	 $LN108@ShowDemoWi

; 727  :     {
; 728  :         if (ImGui::TreeNode("Colored Text"))

  00f92	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DOPJCPAP@Colored?5Text@
  00f97	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00f9c	83 c4 04	 add	 esp, 4
  00f9f	0f b6 c0	 movzx	 eax, al
  00fa2	85 c0		 test	 eax, eax
  00fa4	0f 84 d6 00 00
	00		 je	 $LN109@ShowDemoWi

; 729  :         {
; 730  :             // Using shortcut. You can use PushStyleColor()/PopStyleColor() for more flexibility.
; 731  :             ImGui::TextColored(ImVec4(1.0f,0.0f,1.0f,1.0f), "Pink");

  00faa	68 00 00 00 00	 push	 OFFSET ??_C@_04IDKACLOG@Pink@
  00faf	51		 push	 ecx
  00fb0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fb8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fbd	51		 push	 ecx
  00fbe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fc6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fcb	51		 push	 ecx
  00fcc	0f 57 c0	 xorps	 xmm0, xmm0
  00fcf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fd4	51		 push	 ecx
  00fd5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00fdd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fe2	8d 8d 5c f1 ff
	ff		 lea	 ecx, DWORD PTR $T84[ebp]
  00fe8	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  00fed	50		 push	 eax
  00fee	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXABUImVec4@@PBDZZ ; ImGui::TextColored
  00ff3	83 c4 08	 add	 esp, 8

; 732  :             ImGui::TextColored(ImVec4(1.0f,1.0f,0.0f,1.0f), "Yellow");

  00ff6	68 00 00 00 00	 push	 OFFSET ??_C@_06ICCAKDNH@Yellow@
  00ffb	51		 push	 ecx
  00ffc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01004	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01009	51		 push	 ecx
  0100a	0f 57 c0	 xorps	 xmm0, xmm0
  0100d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01012	51		 push	 ecx
  01013	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0101b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01020	51		 push	 ecx
  01021	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01029	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0102e	8d 8d 44 f1 ff
	ff		 lea	 ecx, DWORD PTR $T83[ebp]
  01034	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  01039	50		 push	 eax
  0103a	e8 00 00 00 00	 call	 ?TextColored@ImGui@@YAXABUImVec4@@PBDZZ ; ImGui::TextColored
  0103f	83 c4 08	 add	 esp, 8

; 733  :             ImGui::TextDisabled("Disabled");

  01042	68 00 00 00 00	 push	 OFFSET ??_C@_08JGILNPHN@Disabled@
  01047	e8 00 00 00 00	 call	 ?TextDisabled@ImGui@@YAXPBDZZ ; ImGui::TextDisabled
  0104c	83 c4 04	 add	 esp, 4

; 734  :             ImGui::SameLine(); HelpMarker("The TextDisabled color is stored in ImGuiStyle.");

  0104f	51		 push	 ecx
  01050	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01058	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0105d	51		 push	 ecx
  0105e	0f 57 c0	 xorps	 xmm0, xmm0
  01061	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01066	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0106b	83 c4 08	 add	 esp, 8
  0106e	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@EPJPAHDI@The?5TextDisabled?5color?5is?5store@
  01073	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01078	83 c4 04	 add	 esp, 4

; 735  :             ImGui::TreePop();

  0107b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN109@ShowDemoWi:

; 736  :         }
; 737  : 
; 738  :         if (ImGui::TreeNode("Word Wrapping"))

  01080	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CLIMKCMB@Word?5Wrapping@
  01085	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0108a	83 c4 04	 add	 esp, 4
  0108d	0f b6 c0	 movzx	 eax, al
  01090	85 c0		 test	 eax, eax
  01092	0f 84 e9 02 00
	00		 je	 $LN110@ShowDemoWi

; 739  :         {
; 740  :             // Using shortcut. You can use PushTextWrapPos()/PopTextWrapPos() for more flexibility.
; 741  :             ImGui::TextWrapped("This text should automatically wrap on the edge of the window. The current implementation for text wrapping follows simple rules suitable for English and possibly other languages.");

  01098	68 00 00 00 00	 push	 OFFSET ??_C@_0LE@LBABKNFA@This?5text?5should?5automatically?5@
  0109d	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  010a2	83 c4 04	 add	 esp, 4

; 742  :             ImGui::Spacing();

  010a5	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 743  : 
; 744  :             static float wrap_width = 200.0f;
; 745  :             ImGui::SliderFloat("Wrap width", &wrap_width, -20, 600, "%.0f");

  010aa	51		 push	 ecx
  010ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  010b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010b8	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  010bd	51		 push	 ecx
  010be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44160000
  010c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010cb	51		 push	 ecx
  010cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c1a00000
  010d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010d9	68 00 00 00 00	 push	 OFFSET ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  010de	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NHCJIHMI@Wrap?5width@
  010e3	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  010e8	83 c4 18	 add	 esp, 24			; 00000018H

; 746  : 
; 747  :             ImGui::Text("Test paragraph 1:");

  010eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FPEPJKFB@Test?5paragraph?51?3@
  010f0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  010f5	83 c4 04	 add	 esp, 4

; 748  :             ImVec2 pos = ImGui::GetCursorScreenPos();

  010f8	8d 85 dc fe ff
	ff		 lea	 eax, DWORD PTR _pos$209[ebp]
  010fe	50		 push	 eax
  010ff	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  01104	83 c4 04	 add	 esp, 4

; 749  :             ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(pos.x + wrap_width, pos.y), ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight()), IM_COL32(255,0,255,255));

  01107	6a 0f		 push	 15			; 0000000fH
  01109	51		 push	 ecx
  0110a	0f 57 c0	 xorps	 xmm0, xmm0
  0110d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01112	68 ff 00 ff ff	 push	 -65281			; ffff00ffH
  01117	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  0111c	d9 9d b8 eb ff
	ff		 fstp	 DWORD PTR tv4185[ebp]
  01122	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv4185[ebp]
  0112a	f3 0f 58 85 e0
	fe ff ff	 addss	 xmm0, DWORD PTR _pos$209[ebp+4]
  01132	51		 push	 ecx
  01133	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01138	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _pos$209[ebp]
  01140	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  01148	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  01150	51		 push	 ecx
  01151	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01156	8d 8d 34 f1 ff
	ff		 lea	 ecx, DWORD PTR $T82[ebp]
  0115c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01161	50		 push	 eax
  01162	51		 push	 ecx
  01163	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _pos$209[ebp+4]
  0116b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01170	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _pos$209[ebp]
  01178	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  01180	51		 push	 ecx
  01181	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01186	8d 8d 24 f1 ff
	ff		 lea	 ecx, DWORD PTR $T81[ebp]
  0118c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01191	50		 push	 eax
  01192	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  01197	8b c8		 mov	 ecx, eax
  01199	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 750  :             ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);

  0119e	8d 85 14 f1 ff
	ff		 lea	 eax, DWORD PTR $T80[ebp]
  011a4	50		 push	 eax
  011a5	e8 00 00 00 00	 call	 ?GetCursorPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorPos
  011aa	83 c4 04	 add	 esp, 4
  011ad	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  011b1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  011b9	51		 push	 ecx
  011ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011bf	e8 00 00 00 00	 call	 ?PushTextWrapPos@ImGui@@YAXM@Z ; ImGui::PushTextWrapPos
  011c4	83 c4 04	 add	 esp, 4

; 751  :             ImGui::Text("The lazy dog is a good dog. This paragraph is made to fit within %.0f pixels. Testing a 1 character word. The quick brown fox jumps over the lazy dog.", wrap_width);

  011c7	f3 0f 5a 05 00
	00 00 00	 cvtss2sd xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  011cf	83 ec 08	 sub	 esp, 8
  011d2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  011d7	68 00 00 00 00	 push	 OFFSET ??_C@_0JH@KIIFCPNC@The?5lazy?5dog?5is?5a?5good?5dog?4?5Thi@
  011dc	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  011e1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 752  :             ImGui::GetWindowDrawList()->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255,255,0,255));

  011e4	51		 push	 ecx
  011e5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  011ed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011f2	6a 0f		 push	 15			; 0000000fH
  011f4	51		 push	 ecx
  011f5	0f 57 c0	 xorps	 xmm0, xmm0
  011f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  011fd	68 ff ff 00 ff	 push	 -16711681		; ff00ffffH
  01202	8d 85 04 f1 ff
	ff		 lea	 eax, DWORD PTR $T79[ebp]
  01208	50		 push	 eax
  01209	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  0120e	83 c4 04	 add	 esp, 4
  01211	50		 push	 eax
  01212	8d 8d f4 f0 ff
	ff		 lea	 ecx, DWORD PTR $T78[ebp]
  01218	51		 push	 ecx
  01219	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  0121e	83 c4 04	 add	 esp, 4
  01221	50		 push	 eax
  01222	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  01227	8b c8		 mov	 ecx, eax
  01229	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect

; 753  :             ImGui::PopTextWrapPos();

  0122e	e8 00 00 00 00	 call	 ?PopTextWrapPos@ImGui@@YAXXZ ; ImGui::PopTextWrapPos

; 754  : 
; 755  :             ImGui::Text("Test paragraph 2:");

  01233	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FNAJCEAI@Test?5paragraph?52?3@
  01238	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0123d	83 c4 04	 add	 esp, 4

; 756  :             pos = ImGui::GetCursorScreenPos();

  01240	8d 85 e4 f0 ff
	ff		 lea	 eax, DWORD PTR $T77[ebp]
  01246	50		 push	 eax
  01247	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  0124c	83 c4 04	 add	 esp, 4
  0124f	8b 08		 mov	 ecx, DWORD PTR [eax]
  01251	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  01254	89 8d dc fe ff
	ff		 mov	 DWORD PTR _pos$209[ebp], ecx
  0125a	89 95 e0 fe ff
	ff		 mov	 DWORD PTR _pos$209[ebp+4], edx

; 757  :             ImGui::GetWindowDrawList()->AddRectFilled(ImVec2(pos.x + wrap_width, pos.y), ImVec2(pos.x + wrap_width + 10, pos.y + ImGui::GetTextLineHeight()), IM_COL32(255,0,255,255));

  01260	6a 0f		 push	 15			; 0000000fH
  01262	51		 push	 ecx
  01263	0f 57 c0	 xorps	 xmm0, xmm0
  01266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0126b	68 ff 00 ff ff	 push	 -65281			; ffff00ffH
  01270	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  01275	d9 9d b8 eb ff
	ff		 fstp	 DWORD PTR tv4221[ebp]
  0127b	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv4221[ebp]
  01283	f3 0f 58 85 e0
	fe ff ff	 addss	 xmm0, DWORD PTR _pos$209[ebp+4]
  0128b	51		 push	 ecx
  0128c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01291	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _pos$209[ebp]
  01299	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  012a1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@41200000
  012a9	51		 push	 ecx
  012aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012af	8d 8d d4 f0 ff
	ff		 lea	 ecx, DWORD PTR $T76[ebp]
  012b5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  012ba	50		 push	 eax
  012bb	51		 push	 ecx
  012bc	f3 0f 10 85 e0
	fe ff ff	 movss	 xmm0, DWORD PTR _pos$209[ebp+4]
  012c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012c9	f3 0f 10 85 dc
	fe ff ff	 movss	 xmm0, DWORD PTR _pos$209[ebp]
  012d1	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  012d9	51		 push	 ecx
  012da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012df	8d 8d c4 f0 ff
	ff		 lea	 ecx, DWORD PTR $T75[ebp]
  012e5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  012ea	50		 push	 eax
  012eb	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  012f0	8b c8		 mov	 ecx, eax
  012f2	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 758  :             ImGui::PushTextWrapPos(ImGui::GetCursorPos().x + wrap_width);

  012f7	8d 85 b4 f0 ff
	ff		 lea	 eax, DWORD PTR $T74[ebp]
  012fd	50		 push	 eax
  012fe	e8 00 00 00 00	 call	 ?GetCursorPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorPos
  01303	83 c4 04	 add	 esp, 4
  01306	f3 0f 10 00	 movss	 xmm0, DWORD PTR [eax]
  0130a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?wrap_width@?GI@??ShowDemoWindowWidgets@@YAXXZ@4MA
  01312	51		 push	 ecx
  01313	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01318	e8 00 00 00 00	 call	 ?PushTextWrapPos@ImGui@@YAXM@Z ; ImGui::PushTextWrapPos
  0131d	83 c4 04	 add	 esp, 4

; 759  :             ImGui::Text("aaaaaaaa bbbbbbbb, c cccccccc,dddddddd. d eeeeeeee   ffffffff. gggggggg!hhhhhhhh");

  01320	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@BGHPBDIA@aaaaaaaa?5bbbbbbbb?0?5c?5cccccccc?0d@
  01325	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0132a	83 c4 04	 add	 esp, 4

; 760  :             ImGui::GetWindowDrawList()->AddRect(ImGui::GetItemRectMin(), ImGui::GetItemRectMax(), IM_COL32(255,255,0,255));

  0132d	51		 push	 ecx
  0132e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0133b	6a 0f		 push	 15			; 0000000fH
  0133d	51		 push	 ecx
  0133e	0f 57 c0	 xorps	 xmm0, xmm0
  01341	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01346	68 ff ff 00 ff	 push	 -16711681		; ff00ffffH
  0134b	8d 85 a4 f0 ff
	ff		 lea	 eax, DWORD PTR $T73[ebp]
  01351	50		 push	 eax
  01352	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  01357	83 c4 04	 add	 esp, 4
  0135a	50		 push	 eax
  0135b	8d 8d 94 f0 ff
	ff		 lea	 ecx, DWORD PTR $T72[ebp]
  01361	51		 push	 ecx
  01362	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  01367	83 c4 04	 add	 esp, 4
  0136a	50		 push	 eax
  0136b	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  01370	8b c8		 mov	 ecx, eax
  01372	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect

; 761  :             ImGui::PopTextWrapPos();

  01377	e8 00 00 00 00	 call	 ?PopTextWrapPos@ImGui@@YAXXZ ; ImGui::PopTextWrapPos

; 762  : 
; 763  :             ImGui::TreePop();

  0137c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN110@ShowDemoWi:

; 764  :         }
; 765  : 
; 766  :         if (ImGui::TreeNode("UTF-8 Text"))

  01381	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KOGPBBGO@UTF?98?5Text@
  01386	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0138b	83 c4 04	 add	 esp, 4
  0138e	0f b6 c0	 movzx	 eax, al
  01391	85 c0		 test	 eax, eax
  01393	74 46		 je	 SHORT $LN111@ShowDemoWi

; 767  :         {
; 768  :             // UTF-8 test with Japanese characters
; 769  :             // (Needs a suitable font, try Noto, or Arial Unicode, or M+ fonts. Read docs/FONTS.txt for details.)
; 770  :             // - From C++11 you can use the u8"my text" syntax to encode literal strings as UTF-8
; 771  :             // - For earlier compiler, you may be able to encode your sources as UTF-8 (e.g. Visual Studio save your file as 'UTF-8 without signature')
; 772  :             // - FOR THIS DEMO FILE ONLY, BECAUSE WE WANT TO SUPPORT OLD COMPILERS, WE ARE *NOT* INCLUDING RAW UTF-8 CHARACTERS IN THIS SOURCE FILE.
; 773  :             //   Instead we are encoding a few strings with hexadecimal constants. Don't do this in your application!
; 774  :             //   Please use u8"text in any language" in your application!
; 775  :             // Note that characters values are preserved even by InputText() if the font cannot be displayed, so you can safely copy & paste garbled characters into another application.
; 776  :             ImGui::TextWrapped("CJK text will only appears if the font was loaded with the appropriate CJK character ranges. Call io.Font->AddFontFromFileTTF() manually to load extra character ranges. Read docs/FONTS.txt for details.");

  01395	68 00 00 00 00	 push	 OFFSET ??_C@_0MK@EHHBBDNA@CJK?5text?5will?5only?5appears?5if?5t@
  0139a	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  0139f	83 c4 04	 add	 esp, 4

; 777  :             ImGui::Text("Hiragana: \xe3\x81\x8b\xe3\x81\x8d\xe3\x81\x8f\xe3\x81\x91\xe3\x81\x93 (kakikukeko)"); // Normally we would use u8"blah blah" with the proper characters directly in the string.

  013a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@EHCMNMLI@Hiragana?3?5?c?$IB?$IL?c?$IB?$IN?c?$IB?$IP?c?$IB?$JB?c?$IB?$JD?5?$CIkaki@
  013a7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  013ac	83 c4 04	 add	 esp, 4

; 778  :             ImGui::Text("Kanjis: \xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e (nihongo)");

  013af	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@BCACPCEP@Kanjis?3?5?f?$JH?$KF?f?$JM?$KM?h?$KK?$JO?5?$CInihongo?$CJ@
  013b4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  013b9	83 c4 04	 add	 esp, 4

; 779  :             static char buf[32] = "\xe6\x97\xa5\xe6\x9c\xac\xe8\xaa\x9e";
; 780  :             //static char buf[32] = u8"NIHONGO"; // <- this is how you would write it with C++11, using real kanjis
; 781  :             ImGui::InputText("UTF-8 input", buf, IM_ARRAYSIZE(buf));

  013bc	6a 00		 push	 0
  013be	6a 00		 push	 0
  013c0	6a 00		 push	 0
  013c2	6a 20		 push	 32			; 00000020H
  013c4	68 00 00 00 00	 push	 OFFSET ?buf@?GL@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  013c9	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OKLFPIAG@UTF?98?5input@
  013ce	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  013d3	83 c4 18	 add	 esp, 24			; 00000018H

; 782  :             ImGui::TreePop();

  013d6	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN111@ShowDemoWi:

; 783  :         }
; 784  :         ImGui::TreePop();

  013db	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN108@ShowDemoWi:

; 785  :     }
; 786  : 
; 787  :     if (ImGui::TreeNode("Images"))

  013e0	68 00 00 00 00	 push	 OFFSET ??_C@_06EPMHLOBG@Images@
  013e5	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  013ea	83 c4 04	 add	 esp, 4
  013ed	0f b6 c0	 movzx	 eax, al
  013f0	85 c0		 test	 eax, eax
  013f2	0f 84 66 06 00
	00		 je	 $LN112@ShowDemoWi

; 788  :     {
; 789  :         ImGuiIO& io = ImGui::GetIO();

  013f8	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  013fd	89 85 d0 fe ff
	ff		 mov	 DWORD PTR _io$208[ebp], eax

; 790  :         ImGui::TextWrapped("Below we are displaying the font texture (which is the only texture we have access to in this demo). Use the 'ImTextureID' type as storage to pass pointers or identifier to your own texture data. Hover the texture for a zoomed view!");

  01403	68 00 00 00 00	 push	 OFFSET ??_C@_0OJ@IGJPGIOP@Below?5we?5are?5displaying?5the?5fon@
  01408	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  0140d	83 c4 04	 add	 esp, 4

; 791  : 
; 792  :         // Here we are grabbing the font texture because that's the only one we have access to inside the demo code.
; 793  :         // Remember that ImTextureID is just storage for whatever you want it to be, it is essentially a value that will be passed to the render function inside the ImDrawCmd structure.
; 794  :         // If you use one of the default imgui_impl_XXXX.cpp renderer, they all have comments at the top of their file to specify what they expect to be stored in ImTextureID.
; 795  :         // (for example, the imgui_impl_dx11.cpp renderer expect a 'ID3D11ShaderResourceView*' pointer. The imgui_impl_opengl3.cpp renderer expect a GLuint OpenGL texture identifier etc.)
; 796  :         // If you decided that ImTextureID = MyEngineTexture*, then you can pass your MyEngineTexture* pointers to ImGui::Image(), and gather width/height through your own functions, etc.
; 797  :         // Using ShowMetricsWindow() as a "debugger" to inspect the draw data that are being passed to your render will help you debug issues if you are confused about this.
; 798  :         // Consider using the lower-level ImDrawList::AddImage() API, via ImGui::GetWindowDrawList()->AddImage().
; 799  :         ImTextureID my_tex_id = io.Fonts->TexID;

  01410	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _io$208[ebp]
  01416	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0141c	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  0141f	89 95 c4 fe ff
	ff		 mov	 DWORD PTR _my_tex_id$207[ebp], edx

; 800  :         float my_tex_w = (float)io.Fonts->TexWidth;

  01425	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _io$208[ebp]
  0142b	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  01431	f3 0f 2a 41 1c	 cvtsi2ss xmm0, DWORD PTR [ecx+28]
  01436	f3 0f 11 85 b8
	fe ff ff	 movss	 DWORD PTR _my_tex_w$206[ebp], xmm0

; 801  :         float my_tex_h = (float)io.Fonts->TexHeight;

  0143e	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _io$208[ebp]
  01444	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0144a	f3 0f 2a 41 20	 cvtsi2ss xmm0, DWORD PTR [ecx+32]
  0144f	f3 0f 11 85 ac
	fe ff ff	 movss	 DWORD PTR _my_tex_h$205[ebp], xmm0

; 802  : 
; 803  :         ImGui::Text("%.0fx%.0f", my_tex_w, my_tex_h);

  01457	f3 0f 5a 85 ac
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _my_tex_h$205[ebp]
  0145f	83 ec 08	 sub	 esp, 8
  01462	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01467	f3 0f 5a 85 b8
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _my_tex_w$206[ebp]
  0146f	83 ec 08	 sub	 esp, 8
  01472	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01477	68 00 00 00 00	 push	 OFFSET ??_C@_09CLOIPCOK@?$CF?40fx?$CF?40f@
  0147c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01481	83 c4 14	 add	 esp, 20			; 00000014H

; 804  :         ImVec2 pos = ImGui::GetCursorScreenPos();

  01484	8d 85 9c fe ff
	ff		 lea	 eax, DWORD PTR _pos$204[ebp]
  0148a	50		 push	 eax
  0148b	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  01490	83 c4 04	 add	 esp, 4

; 805  :         ImGui::Image(my_tex_id, ImVec2(my_tex_w, my_tex_h), ImVec2(0,0), ImVec2(1,1), ImVec4(1.0f,1.0f,1.0f,1.0f), ImVec4(1.0f,1.0f,1.0f,0.5f));

  01493	51		 push	 ecx
  01494	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0149c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014a1	51		 push	 ecx
  014a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014af	51		 push	 ecx
  014b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014bd	51		 push	 ecx
  014be	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014cb	8d 8d 7c f0 ff
	ff		 lea	 ecx, DWORD PTR $T71[ebp]
  014d1	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  014d6	50		 push	 eax
  014d7	51		 push	 ecx
  014d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e5	51		 push	 ecx
  014e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014f3	51		 push	 ecx
  014f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  014fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01501	51		 push	 ecx
  01502	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0150a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0150f	8d 8d 64 f0 ff
	ff		 lea	 ecx, DWORD PTR $T70[ebp]
  01515	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0151a	50		 push	 eax
  0151b	51		 push	 ecx
  0151c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01524	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01529	51		 push	 ecx
  0152a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01532	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01537	8d 8d 54 f0 ff
	ff		 lea	 ecx, DWORD PTR $T69[ebp]
  0153d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01542	50		 push	 eax
  01543	51		 push	 ecx
  01544	0f 57 c0	 xorps	 xmm0, xmm0
  01547	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0154c	51		 push	 ecx
  0154d	0f 57 c0	 xorps	 xmm0, xmm0
  01550	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01555	8d 8d 44 f0 ff
	ff		 lea	 ecx, DWORD PTR $T68[ebp]
  0155b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01560	50		 push	 eax
  01561	51		 push	 ecx
  01562	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _my_tex_h$205[ebp]
  0156a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0156f	51		 push	 ecx
  01570	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _my_tex_w$206[ebp]
  01578	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0157d	8d 8d 34 f0 ff
	ff		 lea	 ecx, DWORD PTR $T67[ebp]
  01583	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01588	50		 push	 eax
  01589	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _my_tex_id$207[ebp]
  0158f	50		 push	 eax
  01590	e8 00 00 00 00	 call	 ?Image@ImGui@@YAXPAXABUImVec2@@11ABUImVec4@@2@Z ; ImGui::Image
  01595	83 c4 18	 add	 esp, 24			; 00000018H

; 806  :         if (ImGui::IsItemHovered())

  01598	6a 00		 push	 0
  0159a	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0159f	83 c4 04	 add	 esp, 4
  015a2	0f b6 c0	 movzx	 eax, al
  015a5	85 c0		 test	 eax, eax
  015a7	0f 84 f7 02 00
	00		 je	 $LN113@ShowDemoWi

; 807  :         {
; 808  :             ImGui::BeginTooltip();

  015ad	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 809  :             float region_sz = 32.0f;

  015b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  015ba	f3 0f 11 85 90
	fe ff ff	 movss	 DWORD PTR _region_sz$203[ebp], xmm0

; 810  :             float region_x = io.MousePos.x - pos.x - region_sz * 0.5f; if (region_x < 0.0f) region_x = 0.0f; else if (region_x > my_tex_w - region_sz) region_x = my_tex_w - region_sz;

  015c2	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _io$208[ebp]
  015c8	f3 0f 10 80 e0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+224]
  015d0	f3 0f 5c 85 9c
	fe ff ff	 subss	 xmm0, DWORD PTR _pos$204[ebp]
  015d8	f3 0f 10 8d 90
	fe ff ff	 movss	 xmm1, DWORD PTR _region_sz$203[ebp]
  015e0	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  015e8	f3 0f 5c c1	 subss	 xmm0, xmm1
  015ec	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _region_x$202[ebp], xmm0
  015f4	0f 57 c0	 xorps	 xmm0, xmm0
  015f7	0f 2f 85 84 fe
	ff ff		 comiss	 xmm0, DWORD PTR _region_x$202[ebp]
  015fe	76 0d		 jbe	 SHORT $LN114@ShowDemoWi
  01600	0f 57 c0	 xorps	 xmm0, xmm0
  01603	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _region_x$202[ebp], xmm0
  0160b	eb 35		 jmp	 SHORT $LN116@ShowDemoWi
$LN114@ShowDemoWi:
  0160d	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _my_tex_w$206[ebp]
  01615	f3 0f 5c 85 90
	fe ff ff	 subss	 xmm0, DWORD PTR _region_sz$203[ebp]
  0161d	f3 0f 10 8d 84
	fe ff ff	 movss	 xmm1, DWORD PTR _region_x$202[ebp]
  01625	0f 2f c8	 comiss	 xmm1, xmm0
  01628	76 18		 jbe	 SHORT $LN116@ShowDemoWi
  0162a	f3 0f 10 85 b8
	fe ff ff	 movss	 xmm0, DWORD PTR _my_tex_w$206[ebp]
  01632	f3 0f 5c 85 90
	fe ff ff	 subss	 xmm0, DWORD PTR _region_sz$203[ebp]
  0163a	f3 0f 11 85 84
	fe ff ff	 movss	 DWORD PTR _region_x$202[ebp], xmm0
$LN116@ShowDemoWi:

; 811  :             float region_y = io.MousePos.y - pos.y - region_sz * 0.5f; if (region_y < 0.0f) region_y = 0.0f; else if (region_y > my_tex_h - region_sz) region_y = my_tex_h - region_sz;

  01642	8b 85 d0 fe ff
	ff		 mov	 eax, DWORD PTR _io$208[ebp]
  01648	f3 0f 10 80 e4
	00 00 00	 movss	 xmm0, DWORD PTR [eax+228]
  01650	f3 0f 5c 85 a0
	fe ff ff	 subss	 xmm0, DWORD PTR _pos$204[ebp+4]
  01658	f3 0f 10 8d 90
	fe ff ff	 movss	 xmm1, DWORD PTR _region_sz$203[ebp]
  01660	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3f000000
  01668	f3 0f 5c c1	 subss	 xmm0, xmm1
  0166c	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR _region_y$201[ebp], xmm0
  01674	0f 57 c0	 xorps	 xmm0, xmm0
  01677	0f 2f 85 78 fe
	ff ff		 comiss	 xmm0, DWORD PTR _region_y$201[ebp]
  0167e	76 0d		 jbe	 SHORT $LN117@ShowDemoWi
  01680	0f 57 c0	 xorps	 xmm0, xmm0
  01683	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR _region_y$201[ebp], xmm0
  0168b	eb 35		 jmp	 SHORT $LN119@ShowDemoWi
$LN117@ShowDemoWi:
  0168d	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _my_tex_h$205[ebp]
  01695	f3 0f 5c 85 90
	fe ff ff	 subss	 xmm0, DWORD PTR _region_sz$203[ebp]
  0169d	f3 0f 10 8d 78
	fe ff ff	 movss	 xmm1, DWORD PTR _region_y$201[ebp]
  016a5	0f 2f c8	 comiss	 xmm1, xmm0
  016a8	76 18		 jbe	 SHORT $LN119@ShowDemoWi
  016aa	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _my_tex_h$205[ebp]
  016b2	f3 0f 5c 85 90
	fe ff ff	 subss	 xmm0, DWORD PTR _region_sz$203[ebp]
  016ba	f3 0f 11 85 78
	fe ff ff	 movss	 DWORD PTR _region_y$201[ebp], xmm0
$LN119@ShowDemoWi:

; 812  :             float zoom = 4.0f;

  016c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  016ca	f3 0f 11 85 6c
	fe ff ff	 movss	 DWORD PTR _zoom$200[ebp], xmm0

; 813  :             ImGui::Text("Min: (%.2f, %.2f)", region_x, region_y);

  016d2	f3 0f 5a 85 78
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _region_y$201[ebp]
  016da	83 ec 08	 sub	 esp, 8
  016dd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  016e2	f3 0f 5a 85 84
	fe ff ff	 cvtss2sd xmm0, DWORD PTR _region_x$202[ebp]
  016ea	83 ec 08	 sub	 esp, 8
  016ed	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  016f2	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FICOOKGF@Min?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@
  016f7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  016fc	83 c4 14	 add	 esp, 20			; 00000014H

; 814  :             ImGui::Text("Max: (%.2f, %.2f)", region_x + region_sz, region_y + region_sz);

  016ff	f3 0f 10 85 78
	fe ff ff	 movss	 xmm0, DWORD PTR _region_y$201[ebp]
  01707	f3 0f 58 85 90
	fe ff ff	 addss	 xmm0, DWORD PTR _region_sz$203[ebp]
  0170f	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01713	83 ec 08	 sub	 esp, 8
  01716	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0171b	f3 0f 10 85 84
	fe ff ff	 movss	 xmm0, DWORD PTR _region_x$202[ebp]
  01723	f3 0f 58 85 90
	fe ff ff	 addss	 xmm0, DWORD PTR _region_sz$203[ebp]
  0172b	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  0172f	83 ec 08	 sub	 esp, 8
  01732	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01737	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@LIIPCIB@Max?3?5?$CI?$CF?42f?0?5?$CF?42f?$CJ@
  0173c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01741	83 c4 14	 add	 esp, 20			; 00000014H

; 815  :             ImVec2 uv0 = ImVec2((region_x) / my_tex_w, (region_y) / my_tex_h);

  01744	f3 0f 10 85 78
	fe ff ff	 movss	 xmm0, DWORD PTR _region_y$201[ebp]
  0174c	f3 0f 5e 85 ac
	fe ff ff	 divss	 xmm0, DWORD PTR _my_tex_h$205[ebp]
  01754	51		 push	 ecx
  01755	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0175a	f3 0f 10 85 84
	fe ff ff	 movss	 xmm0, DWORD PTR _region_x$202[ebp]
  01762	f3 0f 5e 85 b8
	fe ff ff	 divss	 xmm0, DWORD PTR _my_tex_w$206[ebp]
  0176a	51		 push	 ecx
  0176b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01770	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _uv0$199[ebp]
  01776	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 816  :             ImVec2 uv1 = ImVec2((region_x + region_sz) / my_tex_w, (region_y + region_sz) / my_tex_h);

  0177b	f3 0f 10 85 78
	fe ff ff	 movss	 xmm0, DWORD PTR _region_y$201[ebp]
  01783	f3 0f 58 85 90
	fe ff ff	 addss	 xmm0, DWORD PTR _region_sz$203[ebp]
  0178b	f3 0f 5e 85 ac
	fe ff ff	 divss	 xmm0, DWORD PTR _my_tex_h$205[ebp]
  01793	51		 push	 ecx
  01794	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01799	f3 0f 10 85 84
	fe ff ff	 movss	 xmm0, DWORD PTR _region_x$202[ebp]
  017a1	f3 0f 58 85 90
	fe ff ff	 addss	 xmm0, DWORD PTR _region_sz$203[ebp]
  017a9	f3 0f 5e 85 b8
	fe ff ff	 divss	 xmm0, DWORD PTR _my_tex_w$206[ebp]
  017b1	51		 push	 ecx
  017b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017b7	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR _uv1$198[ebp]
  017bd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 817  :             ImGui::Image(my_tex_id, ImVec2(region_sz * zoom, region_sz * zoom), uv0, uv1, ImVec4(1.0f, 1.0f, 1.0f, 1.0f), ImVec4(1.0f, 1.0f, 1.0f, 0.5f));

  017c2	51		 push	 ecx
  017c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  017cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d0	51		 push	 ecx
  017d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  017d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017de	51		 push	 ecx
  017df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  017e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017ec	51		 push	 ecx
  017ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  017f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fa	8d 8d 1c f0 ff
	ff		 lea	 ecx, DWORD PTR $T66[ebp]
  01800	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  01805	50		 push	 eax
  01806	51		 push	 ecx
  01807	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0180f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01814	51		 push	 ecx
  01815	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0181d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01822	51		 push	 ecx
  01823	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0182b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01830	51		 push	 ecx
  01831	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01839	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0183e	8d 8d 04 f0 ff
	ff		 lea	 ecx, DWORD PTR $T65[ebp]
  01844	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  01849	50		 push	 eax
  0184a	8d 85 4c fe ff
	ff		 lea	 eax, DWORD PTR _uv1$198[ebp]
  01850	50		 push	 eax
  01851	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _uv0$199[ebp]
  01857	51		 push	 ecx
  01858	f3 0f 10 85 90
	fe ff ff	 movss	 xmm0, DWORD PTR _region_sz$203[ebp]
  01860	f3 0f 59 85 6c
	fe ff ff	 mulss	 xmm0, DWORD PTR _zoom$200[ebp]
  01868	51		 push	 ecx
  01869	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0186e	f3 0f 10 85 90
	fe ff ff	 movss	 xmm0, DWORD PTR _region_sz$203[ebp]
  01876	f3 0f 59 85 6c
	fe ff ff	 mulss	 xmm0, DWORD PTR _zoom$200[ebp]
  0187e	51		 push	 ecx
  0187f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01884	8d 8d f4 ef ff
	ff		 lea	 ecx, DWORD PTR $T64[ebp]
  0188a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0188f	50		 push	 eax
  01890	8b 95 c4 fe ff
	ff		 mov	 edx, DWORD PTR _my_tex_id$207[ebp]
  01896	52		 push	 edx
  01897	e8 00 00 00 00	 call	 ?Image@ImGui@@YAXPAXABUImVec2@@11ABUImVec4@@2@Z ; ImGui::Image
  0189c	83 c4 18	 add	 esp, 24			; 00000018H

; 818  :             ImGui::EndTooltip();

  0189f	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN113@ShowDemoWi:

; 819  :         }
; 820  :         ImGui::TextWrapped("And now some textured buttons..");

  018a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@KAEHPGML@And?5now?5some?5textured?5buttons?4?4@
  018a9	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  018ae	83 c4 04	 add	 esp, 4

; 821  :         static int pressed_count = 0;
; 822  :         for (int i = 0; i < 8; i++)

  018b1	c7 85 40 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$197[ebp], 0
  018bb	eb 0f		 jmp	 SHORT $LN19@ShowDemoWi
$LN17@ShowDemoWi:
  018bd	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _i$197[ebp]
  018c3	83 c0 01	 add	 eax, 1
  018c6	89 85 40 fe ff
	ff		 mov	 DWORD PTR _i$197[ebp], eax
$LN19@ShowDemoWi:
  018cc	83 bd 40 fe ff
	ff 08		 cmp	 DWORD PTR _i$197[ebp], 8
  018d3	0f 8d 68 01 00
	00		 jge	 $LN18@ShowDemoWi

; 823  :         {
; 824  :             ImGui::PushID(i);

  018d9	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _i$197[ebp]
  018df	50		 push	 eax
  018e0	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  018e5	83 c4 04	 add	 esp, 4

; 825  :             int frame_padding = -1 + i;     // -1 = uses default padding

  018e8	8b 85 40 fe ff
	ff		 mov	 eax, DWORD PTR _i$197[ebp]
  018ee	83 e8 01	 sub	 eax, 1
  018f1	89 85 34 fe ff
	ff		 mov	 DWORD PTR _frame_padding$196[ebp], eax

; 826  :             if (ImGui::ImageButton(my_tex_id, ImVec2(32,32), ImVec2(0,0), ImVec2(32.0f/my_tex_w,32/my_tex_h), frame_padding, ImVec4(0.0f,0.0f,0.0f,1.0f)))

  018f7	51		 push	 ecx
  018f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01900	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01905	51		 push	 ecx
  01906	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0190e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01913	51		 push	 ecx
  01914	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0191c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01921	51		 push	 ecx
  01922	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0192a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0192f	8d 8d dc ef ff
	ff		 lea	 ecx, DWORD PTR $T63[ebp]
  01935	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0193a	50		 push	 eax
  0193b	51		 push	 ecx
  0193c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01944	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01949	51		 push	 ecx
  0194a	0f 57 c0	 xorps	 xmm0, xmm0
  0194d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01952	51		 push	 ecx
  01953	0f 57 c0	 xorps	 xmm0, xmm0
  01956	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0195b	51		 push	 ecx
  0195c	0f 57 c0	 xorps	 xmm0, xmm0
  0195f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01964	8d 8d c4 ef ff
	ff		 lea	 ecx, DWORD PTR $T62[ebp]
  0196a	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  0196f	50		 push	 eax
  01970	8b 85 34 fe ff
	ff		 mov	 eax, DWORD PTR _frame_padding$196[ebp]
  01976	50		 push	 eax
  01977	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  0197f	f3 0f 5e 85 ac
	fe ff ff	 divss	 xmm0, DWORD PTR _my_tex_h$205[ebp]
  01987	51		 push	 ecx
  01988	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0198d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  01995	f3 0f 5e 85 b8
	fe ff ff	 divss	 xmm0, DWORD PTR _my_tex_w$206[ebp]
  0199d	51		 push	 ecx
  0199e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019a3	8d 8d b4 ef ff
	ff		 lea	 ecx, DWORD PTR $T61[ebp]
  019a9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  019ae	50		 push	 eax
  019af	51		 push	 ecx
  019b0	0f 57 c0	 xorps	 xmm0, xmm0
  019b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019b8	51		 push	 ecx
  019b9	0f 57 c0	 xorps	 xmm0, xmm0
  019bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019c1	8d 8d a4 ef ff
	ff		 lea	 ecx, DWORD PTR $T60[ebp]
  019c7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  019cc	50		 push	 eax
  019cd	51		 push	 ecx
  019ce	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  019d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019db	51		 push	 ecx
  019dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42000000
  019e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e9	8d 8d 94 ef ff
	ff		 lea	 ecx, DWORD PTR $T59[ebp]
  019ef	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  019f4	50		 push	 eax
  019f5	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _my_tex_id$207[ebp]
  019fb	51		 push	 ecx
  019fc	e8 00 00 00 00	 call	 ?ImageButton@ImGui@@YA_NPAXABUImVec2@@11HABUImVec4@@2@Z ; ImGui::ImageButton
  01a01	83 c4 1c	 add	 esp, 28			; 0000001cH
  01a04	0f b6 d0	 movzx	 edx, al
  01a07	85 d2		 test	 edx, edx
  01a09	74 0d		 je	 SHORT $LN120@ShowDemoWi

; 827  :                 pressed_count += 1;

  01a0b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pressed_count@?GO@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01a10	83 c0 01	 add	 eax, 1
  01a13	a3 00 00 00 00	 mov	 DWORD PTR ?pressed_count@?GO@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN120@ShowDemoWi:

; 828  :             ImGui::PopID();

  01a18	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 829  :             ImGui::SameLine();

  01a1d	51		 push	 ecx
  01a1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2b	51		 push	 ecx
  01a2c	0f 57 c0	 xorps	 xmm0, xmm0
  01a2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a34	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01a39	83 c4 08	 add	 esp, 8

; 830  :         }

  01a3c	e9 7c fe ff ff	 jmp	 $LN17@ShowDemoWi
$LN18@ShowDemoWi:

; 831  :         ImGui::NewLine();

  01a41	e8 00 00 00 00	 call	 ?NewLine@ImGui@@YAXXZ	; ImGui::NewLine

; 832  :         ImGui::Text("Pressed %d times.", pressed_count);

  01a46	a1 00 00 00 00	 mov	 eax, DWORD PTR ?pressed_count@?GO@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01a4b	50		 push	 eax
  01a4c	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JGNKDOGB@Pressed?5?$CFd?5times?4@
  01a51	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01a56	83 c4 08	 add	 esp, 8

; 833  :         ImGui::TreePop();

  01a59	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN112@ShowDemoWi:

; 834  :     }
; 835  : 
; 836  :     if (ImGui::TreeNode("Combo"))

  01a5e	68 00 00 00 00	 push	 OFFSET ??_C@_05LMOJIBPK@Combo@
  01a63	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01a68	83 c4 04	 add	 esp, 4
  01a6b	0f b6 c0	 movzx	 eax, al
  01a6e	85 c0		 test	 eax, eax
  01a70	0f 84 c3 02 00
	00		 je	 $LN121@ShowDemoWi

; 837  :     {
; 838  :         // Expose flags as checkbox for the demo
; 839  :         static ImGuiComboFlags flags = 0;
; 840  :         ImGui::CheckboxFlags("ImGuiComboFlags_PopupAlignLeft", (unsigned int*)&flags, ImGuiComboFlags_PopupAlignLeft);

  01a76	6a 01		 push	 1
  01a78	68 00 00 00 00	 push	 OFFSET ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01a7d	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@KDFGPNLK@ImGuiComboFlags_PopupAlignLeft@
  01a82	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  01a87	83 c4 0c	 add	 esp, 12			; 0000000cH

; 841  :         ImGui::SameLine(); HelpMarker("Only makes a difference if the popup is larger than the combo");

  01a8a	51		 push	 ecx
  01a8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01a93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a98	51		 push	 ecx
  01a99	0f 57 c0	 xorps	 xmm0, xmm0
  01a9c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01aa6	83 c4 08	 add	 esp, 8
  01aa9	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@LDFFHHPN@Only?5makes?5a?5difference?5if?5the?5@
  01aae	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01ab3	83 c4 04	 add	 esp, 4

; 842  :         if (ImGui::CheckboxFlags("ImGuiComboFlags_NoArrowButton", (unsigned int*)&flags, ImGuiComboFlags_NoArrowButton))

  01ab6	6a 20		 push	 32			; 00000020H
  01ab8	68 00 00 00 00	 push	 OFFSET ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01abd	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@IADJEHHH@ImGuiComboFlags_NoArrowButton@
  01ac2	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  01ac7	83 c4 0c	 add	 esp, 12			; 0000000cH
  01aca	0f b6 c0	 movzx	 eax, al
  01acd	85 c0		 test	 eax, eax
  01acf	74 0d		 je	 SHORT $LN122@ShowDemoWi

; 843  :             flags &= ~ImGuiComboFlags_NoPreview;     // Clear the other flag, as we cannot combine both

  01ad1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01ad6	83 e0 bf	 and	 eax, -65		; ffffffbfH
  01ad9	a3 00 00 00 00	 mov	 DWORD PTR ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN122@ShowDemoWi:

; 844  :         if (ImGui::CheckboxFlags("ImGuiComboFlags_NoPreview", (unsigned int*)&flags, ImGuiComboFlags_NoPreview))

  01ade	6a 40		 push	 64			; 00000040H
  01ae0	68 00 00 00 00	 push	 OFFSET ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01ae5	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@CFAPHAND@ImGuiComboFlags_NoPreview@
  01aea	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  01aef	83 c4 0c	 add	 esp, 12			; 0000000cH
  01af2	0f b6 c0	 movzx	 eax, al
  01af5	85 c0		 test	 eax, eax
  01af7	74 0d		 je	 SHORT $LN123@ShowDemoWi

; 845  :             flags &= ~ImGuiComboFlags_NoArrowButton; // Clear the other flag, as we cannot combine both

  01af9	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01afe	83 e0 df	 and	 eax, -33		; ffffffdfH
  01b01	a3 00 00 00 00	 mov	 DWORD PTR ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN123@ShowDemoWi:

; 846  : 
; 847  :         // General BeginCombo() API, you have full control over your selection data and display type.
; 848  :         // (your selection data could be an index, a pointer to the object, an id for the object, a flag stored in the object itself, etc.)
; 849  :         const char* items[] = { "AAAA", "BBBB", "CCCC", "DDDD", "EEEE", "FFFF", "GGGG", "HHHH", "IIII", "JJJJ", "KKKK", "LLLLLLL", "MMMM", "OOOOOOO" };

  01b06	c7 85 f4 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp], OFFSET ??_C@_04OHNMNPPA@AAAA@
  01b10	c7 85 f8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+4], OFFSET ??_C@_04JLKCOHFE@BBBB@
  01b1a	c7 85 fc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+8], OFFSET ??_C@_04GKHPCPH@CCCC@
  01b24	c7 85 00 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+12], OFFSET ??_C@_04GDFOJGBM@DDDD@
  01b2e	c7 85 04 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+16], OFFSET ??_C@_04POFLIDLP@EEEE@
  01b38	c7 85 08 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+20], OFFSET ??_C@_04ICCFLLBL@FFFF@
  01b42	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+24], OFFSET ??_C@_04BPCAKOLI@GGGG@
  01b4c	c7 85 10 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+28], OFFSET ??_C@_04EJNHHCMN@HHHH@
  01b56	c7 85 14 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+32], OFFSET ??_C@_04NENCGHGO@IIII@
  01b60	c7 85 18 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+36], OFFSET ??_C@_04KIKMFPMK@JJJJ@
  01b6a	c7 85 1c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+40], OFFSET ??_C@_04DFKJEKGJ@KKKK@
  01b74	c7 85 20 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+44], OFFSET ??_C@_07HGFDAEEO@LLLLLLL@
  01b7e	c7 85 24 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+48], OFFSET ??_C@_04MNFFDLCB@MMMM@
  01b88	c7 85 28 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$195[ebp+52], OFFSET ??_C@_07DDNOFDDK@OOOOOOO@

; 850  :         static const char* item_current = items[0];            // Here our selection is a single pointer stored outside the object.

  01b92	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  01b97	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  01b9e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  01ba1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01ba6	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  01bac	7e 38		 jle	 SHORT $LN20@ShowDemoWi
  01bae	68 00 00 00 00	 push	 OFFSET ?$TSS0@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01bb3	e8 00 00 00 00	 call	 __Init_thread_header
  01bb8	83 c4 04	 add	 esp, 4
  01bbb	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  01bc2	75 22		 jne	 SHORT $LN20@ShowDemoWi
  01bc4	b8 04 00 00 00	 mov	 eax, 4
  01bc9	6b c8 00	 imul	 ecx, eax, 0
  01bcc	8b 94 0d f4 fd
	ff ff		 mov	 edx, DWORD PTR _items$195[ebp+ecx]
  01bd3	89 15 00 00 00
	00		 mov	 DWORD PTR ?item_current@?IC@??ShowDemoWindowWidgets@@YAXXZ@4PBDB, edx
  01bd9	68 00 00 00 00	 push	 OFFSET ?$TSS0@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01bde	e8 00 00 00 00	 call	 __Init_thread_footer
  01be3	83 c4 04	 add	 esp, 4
$LN20@ShowDemoWi:

; 851  :         if (ImGui::BeginCombo("combo 1", item_current, flags)) // The second parameter is the label previewed before opening the combo.

  01be6	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flags@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01beb	50		 push	 eax
  01bec	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?item_current@?IC@??ShowDemoWindowWidgets@@YAXXZ@4PBDB
  01bf2	51		 push	 ecx
  01bf3	68 00 00 00 00	 push	 OFFSET ??_C@_07HDIKCFGM@combo?51@
  01bf8	e8 00 00 00 00	 call	 ?BeginCombo@ImGui@@YA_NPBD0H@Z ; ImGui::BeginCombo
  01bfd	83 c4 0c	 add	 esp, 12			; 0000000cH
  01c00	0f b6 d0	 movzx	 edx, al
  01c03	85 d2		 test	 edx, edx
  01c05	0f 84 d1 00 00
	00		 je	 $LN124@ShowDemoWi

; 852  :         {
; 853  :             for (int n = 0; n < IM_ARRAYSIZE(items); n++)

  01c0b	c7 85 e8 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$194[ebp], 0
  01c15	eb 0f		 jmp	 SHORT $LN23@ShowDemoWi
$LN21@ShowDemoWi:
  01c17	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _n$194[ebp]
  01c1d	83 c0 01	 add	 eax, 1
  01c20	89 85 e8 fd ff
	ff		 mov	 DWORD PTR _n$194[ebp], eax
$LN23@ShowDemoWi:
  01c26	83 bd e8 fd ff
	ff 0e		 cmp	 DWORD PTR _n$194[ebp], 14 ; 0000000eH
  01c2d	0f 8d a4 00 00
	00		 jge	 $LN22@ShowDemoWi

; 854  :             {
; 855  :                 bool is_selected = (item_current == items[n]);

  01c33	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _n$194[ebp]
  01c39	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?item_current@?IC@??ShowDemoWindowWidgets@@YAXXZ@4PBDB
  01c3f	3b 8c 85 f4 fd
	ff ff		 cmp	 ecx, DWORD PTR _items$195[ebp+eax*4]
  01c46	75 0c		 jne	 SHORT $LN237@ShowDemoWi
  01c48	c7 85 b8 eb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1154[ebp], 1
  01c52	eb 0a		 jmp	 SHORT $LN238@ShowDemoWi
$LN237@ShowDemoWi:
  01c54	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1154[ebp], 0
$LN238@ShowDemoWi:
  01c5e	8a 95 b8 eb ff
	ff		 mov	 dl, BYTE PTR tv1154[ebp]
  01c64	88 95 df fd ff
	ff		 mov	 BYTE PTR _is_selected$193[ebp], dl

; 856  :                 if (ImGui::Selectable(items[n], is_selected))

  01c6a	51		 push	 ecx
  01c6b	0f 57 c0	 xorps	 xmm0, xmm0
  01c6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c73	51		 push	 ecx
  01c74	0f 57 c0	 xorps	 xmm0, xmm0
  01c77	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c7c	8d 8d 84 ef ff
	ff		 lea	 ecx, DWORD PTR $T58[ebp]
  01c82	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01c87	50		 push	 eax
  01c88	6a 00		 push	 0
  01c8a	0f b6 85 df fd
	ff ff		 movzx	 eax, BYTE PTR _is_selected$193[ebp]
  01c91	50		 push	 eax
  01c92	8b 8d e8 fd ff
	ff		 mov	 ecx, DWORD PTR _n$194[ebp]
  01c98	8b 94 8d f4 fd
	ff ff		 mov	 edx, DWORD PTR _items$195[ebp+ecx*4]
  01c9f	52		 push	 edx
  01ca0	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  01ca5	83 c4 10	 add	 esp, 16			; 00000010H
  01ca8	0f b6 c0	 movzx	 eax, al
  01cab	85 c0		 test	 eax, eax
  01cad	74 13		 je	 SHORT $LN125@ShowDemoWi

; 857  :                     item_current = items[n];

  01caf	8b 85 e8 fd ff
	ff		 mov	 eax, DWORD PTR _n$194[ebp]
  01cb5	8b 8c 85 f4 fd
	ff ff		 mov	 ecx, DWORD PTR _items$195[ebp+eax*4]
  01cbc	89 0d 00 00 00
	00		 mov	 DWORD PTR ?item_current@?IC@??ShowDemoWindowWidgets@@YAXXZ@4PBDB, ecx
$LN125@ShowDemoWi:

; 858  :                 if (is_selected)

  01cc2	0f b6 85 df fd
	ff ff		 movzx	 eax, BYTE PTR _is_selected$193[ebp]
  01cc9	85 c0		 test	 eax, eax
  01ccb	74 05		 je	 SHORT $LN126@ShowDemoWi

; 859  :                     ImGui::SetItemDefaultFocus();   // Set the initial focus when opening the combo (scrolling + for keyboard navigation support in the upcoming navigation branch)

  01ccd	e8 00 00 00 00	 call	 ?SetItemDefaultFocus@ImGui@@YAXXZ ; ImGui::SetItemDefaultFocus
$LN126@ShowDemoWi:

; 860  :             }

  01cd2	e9 40 ff ff ff	 jmp	 $LN21@ShowDemoWi
$LN22@ShowDemoWi:

; 861  :             ImGui::EndCombo();

  01cd7	e8 00 00 00 00	 call	 ?EndCombo@ImGui@@YAXXZ	; ImGui::EndCombo
$LN124@ShowDemoWi:

; 862  :         }
; 863  : 
; 864  :         // Simplified one-liner Combo() API, using values packed in a single constant string
; 865  :         static int item_current_2 = 0;
; 866  :         ImGui::Combo("combo 2 (one-liner)", &item_current_2, "aaaa\0bbbb\0cccc\0dddd\0eeee\0\0");

  01cdc	6a ff		 push	 -1
  01cde	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@ICCGGBKH@aaaa?$AAbbbb?$AAcccc?$AAdddd?$AAeeee?$AA?$AA@
  01ce3	68 00 00 00 00	 push	 OFFSET ?item_current_2@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01ce8	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BBBJNHHG@combo?52?5?$CIone?9liner?$CJ@
  01ced	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  01cf2	83 c4 10	 add	 esp, 16			; 00000010H

; 867  : 
; 868  :         // Simplified one-liner Combo() using an array of const char*
; 869  :         static int item_current_3 = -1; // If the selection isn't within 0..count, Combo won't display a preview
; 870  :         ImGui::Combo("combo 3 (array)", &item_current_3, items, IM_ARRAYSIZE(items));

  01cf5	6a ff		 push	 -1
  01cf7	6a 0e		 push	 14			; 0000000eH
  01cf9	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _items$195[ebp]
  01cff	50		 push	 eax
  01d00	68 00 00 00 00	 push	 OFFSET ?item_current_3@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01d05	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MDMKCBHF@combo?53?5?$CIarray?$CJ@
  01d0a	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::Combo
  01d0f	83 c4 14	 add	 esp, 20			; 00000014H

; 871  : 
; 872  :         // Simplified one-liner Combo() using an accessor function
; 873  :         struct FuncHolder { static bool ItemGetter(void* data, int idx, const char** out_str) { *out_str = ((const char**)data)[idx]; return true; } };
; 874  :         static int item_current_4 = 0;
; 875  :         ImGui::Combo("combo 4 (function)", &item_current_4, &FuncHolder::ItemGetter, items, IM_ARRAYSIZE(items));

  01d12	6a ff		 push	 -1
  01d14	6a 0e		 push	 14			; 0000000eH
  01d16	8d 85 f4 fd ff
	ff		 lea	 eax, DWORD PTR _items$195[ebp]
  01d1c	50		 push	 eax
  01d1d	68 00 00 00 00	 push	 OFFSET ?ItemGetter@FuncHolder@?IC@??ShowDemoWindowWidgets@@YAXXZ@SA_NPAXHPAPBD@Z ; `ShowDemoWindowWidgets'[::C]::FuncHolder::ItemGetter
  01d22	68 00 00 00 00	 push	 OFFSET ?item_current_4@?IC@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01d27	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GDHGAEJD@combo?54?5?$CIfunction?$CJ@
  01d2c	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAHP6A_NPAXHPAPBD@Z2HH@Z ; ImGui::Combo
  01d31	83 c4 18	 add	 esp, 24			; 00000018H

; 876  : 
; 877  :         ImGui::TreePop();

  01d34	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN121@ShowDemoWi:

; 878  :     }
; 879  : 
; 880  :     if (ImGui::TreeNode("Selectables"))

  01d39	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GOIEGLPE@Selectables@
  01d3e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01d43	83 c4 04	 add	 esp, 4
  01d46	0f b6 c0	 movzx	 eax, al
  01d49	85 c0		 test	 eax, eax
  01d4b	0f 84 8b 08 00
	00		 je	 $LN127@ShowDemoWi

; 881  :     {
; 882  :         // Selectable() has 2 overloads:
; 883  :         // - The one taking "bool selected" as a read-only selection information. When Selectable() has been clicked is returns true and you can alter selection state accordingly.
; 884  :         // - The one taking "bool* p_selected" as a read-write selection information (convenient in some cases)
; 885  :         // The earlier is more flexible, as in real application your selection may be stored in a different manner (in flags within objects, as an external list, etc).
; 886  :         if (ImGui::TreeNode("Basic"))

  01d51	68 00 00 00 00	 push	 OFFSET ??_C@_05NIKDGMHP@Basic@
  01d56	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01d5b	83 c4 04	 add	 esp, 4
  01d5e	0f b6 c0	 movzx	 eax, al
  01d61	85 c0		 test	 eax, eax
  01d63	0f 84 57 01 00
	00		 je	 $LN128@ShowDemoWi

; 887  :         {
; 888  :             static bool selection[5] = { false, true, false, false, false };
; 889  :             ImGui::Selectable("1. I am selectable", &selection[0]);

  01d69	51		 push	 ecx
  01d6a	0f 57 c0	 xorps	 xmm0, xmm0
  01d6d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d72	51		 push	 ecx
  01d73	0f 57 c0	 xorps	 xmm0, xmm0
  01d76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d7b	8d 8d 74 ef ff
	ff		 lea	 ecx, DWORD PTR $T57[ebp]
  01d81	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01d86	50		 push	 eax
  01d87	6a 00		 push	 0
  01d89	b8 01 00 00 00	 mov	 eax, 1
  01d8e	6b c8 00	 imul	 ecx, eax, 0
  01d91	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  01d97	51		 push	 ecx
  01d98	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KCGCFIHN@1?4?5I?5am?5selectable@
  01d9d	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  01da2	83 c4 10	 add	 esp, 16			; 00000010H

; 890  :             ImGui::Selectable("2. I am selectable", &selection[1]);

  01da5	51		 push	 ecx
  01da6	0f 57 c0	 xorps	 xmm0, xmm0
  01da9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dae	51		 push	 ecx
  01daf	0f 57 c0	 xorps	 xmm0, xmm0
  01db2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01db7	8d 8d 64 ef ff
	ff		 lea	 ecx, DWORD PTR $T56[ebp]
  01dbd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01dc2	50		 push	 eax
  01dc3	6a 00		 push	 0
  01dc5	b8 01 00 00 00	 mov	 eax, 1
  01dca	c1 e0 00	 shl	 eax, 0
  01dcd	05 00 00 00 00	 add	 eax, OFFSET ?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  01dd2	50		 push	 eax
  01dd3	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BDENONE@2?4?5I?5am?5selectable@
  01dd8	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  01ddd	83 c4 10	 add	 esp, 16			; 00000010H

; 891  :             ImGui::Text("3. I am not selectable");

  01de0	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@JKAIDAJJ@3?4?5I?5am?5not?5selectable@
  01de5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01dea	83 c4 04	 add	 esp, 4

; 892  :             ImGui::Selectable("4. I am selectable", &selection[3]);

  01ded	51		 push	 ecx
  01dee	0f 57 c0	 xorps	 xmm0, xmm0
  01df1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01df6	51		 push	 ecx
  01df7	0f 57 c0	 xorps	 xmm0, xmm0
  01dfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01dff	8d 8d 54 ef ff
	ff		 lea	 ecx, DWORD PTR $T55[ebp]
  01e05	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01e0a	50		 push	 eax
  01e0b	6a 00		 push	 0
  01e0d	b8 01 00 00 00	 mov	 eax, 1
  01e12	6b c8 03	 imul	 ecx, eax, 3
  01e15	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  01e1b	51		 push	 ecx
  01e1c	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@JMOINFMH@4?4?5I?5am?5selectable@
  01e21	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  01e26	83 c4 10	 add	 esp, 16			; 00000010H

; 893  :             if (ImGui::Selectable("5. I am double clickable", selection[4], ImGuiSelectableFlags_AllowDoubleClick))

  01e29	51		 push	 ecx
  01e2a	0f 57 c0	 xorps	 xmm0, xmm0
  01e2d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e32	51		 push	 ecx
  01e33	0f 57 c0	 xorps	 xmm0, xmm0
  01e36	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01e3b	8d 8d 44 ef ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  01e41	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01e46	50		 push	 eax
  01e47	6a 04		 push	 4
  01e49	b8 01 00 00 00	 mov	 eax, 1
  01e4e	c1 e0 02	 shl	 eax, 2
  01e51	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax]
  01e58	51		 push	 ecx
  01e59	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@DACNLCFI@5?4?5I?5am?5double?5clickable@
  01e5e	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  01e63	83 c4 10	 add	 esp, 16			; 00000010H
  01e66	0f b6 d0	 movzx	 edx, al
  01e69	85 d2		 test	 edx, edx
  01e6b	74 4e		 je	 SHORT $LN130@ShowDemoWi

; 894  :                 if (ImGui::IsMouseDoubleClicked(0))

  01e6d	6a 00		 push	 0
  01e6f	e8 00 00 00 00	 call	 ?IsMouseDoubleClicked@ImGui@@YA_NH@Z ; ImGui::IsMouseDoubleClicked
  01e74	83 c4 04	 add	 esp, 4
  01e77	0f b6 c0	 movzx	 eax, al
  01e7a	85 c0		 test	 eax, eax
  01e7c	74 3d		 je	 SHORT $LN130@ShowDemoWi

; 895  :                     selection[4] = !selection[4];

  01e7e	b8 01 00 00 00	 mov	 eax, 1
  01e83	c1 e0 02	 shl	 eax, 2
  01e86	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax]
  01e8d	85 c9		 test	 ecx, ecx
  01e8f	75 0c		 jne	 SHORT $LN239@ShowDemoWi
  01e91	c7 85 b8 eb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv1282[ebp], 1
  01e9b	eb 0a		 jmp	 SHORT $LN240@ShowDemoWi
$LN239@ShowDemoWi:
  01e9d	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1282[ebp], 0
$LN240@ShowDemoWi:
  01ea7	ba 01 00 00 00	 mov	 edx, 1
  01eac	c1 e2 02	 shl	 edx, 2
  01eaf	8a 85 b8 eb ff
	ff		 mov	 al, BYTE PTR tv1282[ebp]
  01eb5	88 82 00 00 00
	00		 mov	 BYTE PTR ?selection@?JF@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[edx], al
$LN130@ShowDemoWi:

; 896  :             ImGui::TreePop();

  01ebb	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN128@ShowDemoWi:

; 897  :         }
; 898  :         if (ImGui::TreeNode("Selection State: Single Selection"))

  01ec0	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@NGMIMNBC@Selection?5State?3?5Single?5Selecti@
  01ec5	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01eca	83 c4 04	 add	 esp, 4
  01ecd	0f b6 c0	 movzx	 eax, al
  01ed0	85 c0		 test	 eax, eax
  01ed2	0f 84 b3 00 00
	00		 je	 $LN131@ShowDemoWi

; 899  :         {
; 900  :             static int selected = -1;
; 901  :             for (int n = 0; n < 5; n++)

  01ed8	c7 85 d0 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$192[ebp], 0
  01ee2	eb 0f		 jmp	 SHORT $LN26@ShowDemoWi
$LN24@ShowDemoWi:
  01ee4	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _n$192[ebp]
  01eea	83 c0 01	 add	 eax, 1
  01eed	89 85 d0 fd ff
	ff		 mov	 DWORD PTR _n$192[ebp], eax
$LN26@ShowDemoWi:
  01ef3	83 bd d0 fd ff
	ff 05		 cmp	 DWORD PTR _n$192[ebp], 5
  01efa	0f 8d 86 00 00
	00		 jge	 $LN25@ShowDemoWi

; 902  :             {
; 903  :                 char buf[32];
; 904  :                 sprintf(buf, "Object %d", n);

  01f00	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _n$192[ebp]
  01f06	50		 push	 eax
  01f07	68 00 00 00 00	 push	 OFFSET ??_C@_09IEODADNK@Object?5?$CFd@
  01f0c	8d 8d a8 fd ff
	ff		 lea	 ecx, DWORD PTR _buf$191[ebp]
  01f12	51		 push	 ecx
  01f13	e8 00 00 00 00	 call	 _sprintf
  01f18	83 c4 0c	 add	 esp, 12			; 0000000cH

; 905  :                 if (ImGui::Selectable(buf, selected == n))

  01f1b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?selected@?JM@??ShowDemoWindowWidgets@@YAXXZ@4HA
  01f20	3b 85 d0 fd ff
	ff		 cmp	 eax, DWORD PTR _n$192[ebp]
  01f26	75 09		 jne	 SHORT $LN241@ShowDemoWi
  01f28	c6 85 bb eb ff
	ff 01		 mov	 BYTE PTR tv1301[ebp], 1
  01f2f	eb 07		 jmp	 SHORT $LN242@ShowDemoWi
$LN241@ShowDemoWi:
  01f31	c6 85 bb eb ff
	ff 00		 mov	 BYTE PTR tv1301[ebp], 0
$LN242@ShowDemoWi:
  01f38	51		 push	 ecx
  01f39	0f 57 c0	 xorps	 xmm0, xmm0
  01f3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f41	51		 push	 ecx
  01f42	0f 57 c0	 xorps	 xmm0, xmm0
  01f45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01f4a	8d 8d 34 ef ff
	ff		 lea	 ecx, DWORD PTR $T53[ebp]
  01f50	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01f55	50		 push	 eax
  01f56	6a 00		 push	 0
  01f58	0f b6 8d bb eb
	ff ff		 movzx	 ecx, BYTE PTR tv1301[ebp]
  01f5f	51		 push	 ecx
  01f60	8d 95 a8 fd ff
	ff		 lea	 edx, DWORD PTR _buf$191[ebp]
  01f66	52		 push	 edx
  01f67	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  01f6c	83 c4 10	 add	 esp, 16			; 00000010H
  01f6f	0f b6 c0	 movzx	 eax, al
  01f72	85 c0		 test	 eax, eax
  01f74	74 0b		 je	 SHORT $LN132@ShowDemoWi

; 906  :                     selected = n;

  01f76	8b 85 d0 fd ff
	ff		 mov	 eax, DWORD PTR _n$192[ebp]
  01f7c	a3 00 00 00 00	 mov	 DWORD PTR ?selected@?JM@??ShowDemoWindowWidgets@@YAXXZ@4HA, eax
$LN132@ShowDemoWi:

; 907  :             }

  01f81	e9 5e ff ff ff	 jmp	 $LN24@ShowDemoWi
$LN25@ShowDemoWi:

; 908  :             ImGui::TreePop();

  01f86	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN131@ShowDemoWi:

; 909  :         }
; 910  :         if (ImGui::TreeNode("Selection State: Multiple Selection"))

  01f8b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@ILMFMDLL@Selection?5State?3?5Multiple?5Selec@
  01f90	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  01f95	83 c4 04	 add	 esp, 4
  01f98	0f b6 c0	 movzx	 eax, al
  01f9b	85 c0		 test	 eax, eax
  01f9d	0f 84 db 00 00
	00		 je	 $LN133@ShowDemoWi

; 911  :         {
; 912  :             HelpMarker("Hold CTRL and click to select multiple items.");

  01fa3	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@HEGMKIIH@Hold?5CTRL?5and?5click?5to?5select?5m@
  01fa8	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01fad	83 c4 04	 add	 esp, 4

; 913  :             static bool selection[5] = { false, false, false, false, false };
; 914  :             for (int n = 0; n < 5; n++)

  01fb0	c7 85 9c fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$190[ebp], 0
  01fba	eb 0f		 jmp	 SHORT $LN29@ShowDemoWi
$LN27@ShowDemoWi:
  01fbc	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _n$190[ebp]
  01fc2	83 c0 01	 add	 eax, 1
  01fc5	89 85 9c fd ff
	ff		 mov	 DWORD PTR _n$190[ebp], eax
$LN29@ShowDemoWi:
  01fcb	83 bd 9c fd ff
	ff 05		 cmp	 DWORD PTR _n$190[ebp], 5
  01fd2	0f 8d a1 00 00
	00		 jge	 $LN28@ShowDemoWi

; 915  :             {
; 916  :                 char buf[32];
; 917  :                 sprintf(buf, "Object %d", n);

  01fd8	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _n$190[ebp]
  01fde	50		 push	 eax
  01fdf	68 00 00 00 00	 push	 OFFSET ??_C@_09IEODADNK@Object?5?$CFd@
  01fe4	8d 8d 74 fd ff
	ff		 lea	 ecx, DWORD PTR _buf$189[ebp]
  01fea	51		 push	 ecx
  01feb	e8 00 00 00 00	 call	 _sprintf
  01ff0	83 c4 0c	 add	 esp, 12			; 0000000cH

; 918  :                 if (ImGui::Selectable(buf, selection[n]))

  01ff3	51		 push	 ecx
  01ff4	0f 57 c0	 xorps	 xmm0, xmm0
  01ff7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ffc	51		 push	 ecx
  01ffd	0f 57 c0	 xorps	 xmm0, xmm0
  02000	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02005	8d 8d 24 ef ff
	ff		 lea	 ecx, DWORD PTR $T52[ebp]
  0200b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02010	50		 push	 eax
  02011	6a 00		 push	 0
  02013	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _n$190[ebp]
  02019	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?selection@?KD@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax]
  02020	51		 push	 ecx
  02021	8d 95 74 fd ff
	ff		 lea	 edx, DWORD PTR _buf$189[ebp]
  02027	52		 push	 edx
  02028	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  0202d	83 c4 10	 add	 esp, 16			; 00000010H
  02030	0f b6 c0	 movzx	 eax, al
  02033	85 c0		 test	 eax, eax
  02035	74 3d		 je	 SHORT $LN134@ShowDemoWi

; 919  :                 {
; 920  :                     if (!ImGui::GetIO().KeyCtrl)    // Clear selection when CTRL is not held

  02037	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  0203c	0f b6 80 f8 00
	00 00		 movzx	 eax, BYTE PTR [eax+248]
  02043	85 c0		 test	 eax, eax
  02045	75 11		 jne	 SHORT $LN135@ShowDemoWi

; 921  :                         memset(selection, 0, sizeof(selection));

  02047	6a 05		 push	 5
  02049	6a 00		 push	 0
  0204b	68 00 00 00 00	 push	 OFFSET ?selection@?KD@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02050	e8 00 00 00 00	 call	 _memset
  02055	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN135@ShowDemoWi:

; 922  :                     selection[n] ^= 1;

  02058	8b 85 9c fd ff
	ff		 mov	 eax, DWORD PTR _n$190[ebp]
  0205e	0f b6 88 00 00
	00 00		 movzx	 ecx, BYTE PTR ?selection@?KD@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax]
  02065	83 f1 01	 xor	 ecx, 1
  02068	8b 95 9c fd ff
	ff		 mov	 edx, DWORD PTR _n$190[ebp]
  0206e	88 8a 00 00 00
	00		 mov	 BYTE PTR ?selection@?KD@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[edx], cl
$LN134@ShowDemoWi:

; 923  :                 }
; 924  :             }

  02074	e9 43 ff ff ff	 jmp	 $LN27@ShowDemoWi
$LN28@ShowDemoWi:

; 925  :             ImGui::TreePop();

  02079	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN133@ShowDemoWi:

; 926  :         }
; 927  :         if (ImGui::TreeNode("Rendering more text into the same line"))

  0207e	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@PHBOMNNA@Rendering?5more?5text?5into?5the?5sa@
  02083	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  02088	83 c4 04	 add	 esp, 4
  0208b	0f b6 c0	 movzx	 eax, al
  0208e	85 c0		 test	 eax, eax
  02090	0f 84 49 01 00
	00		 je	 $LN136@ShowDemoWi

; 928  :         {
; 929  :             // Using the Selectable() override that takes "bool* p_selected" parameter and toggle your booleans automatically.
; 930  :             static bool selected[3] = { false, false, false };
; 931  :             ImGui::Selectable("main.c",    &selected[0]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");

  02096	51		 push	 ecx
  02097	0f 57 c0	 xorps	 xmm0, xmm0
  0209a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0209f	51		 push	 ecx
  020a0	0f 57 c0	 xorps	 xmm0, xmm0
  020a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020a8	8d 8d 14 ef ff
	ff		 lea	 ecx, DWORD PTR $T51[ebp]
  020ae	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  020b3	50		 push	 eax
  020b4	6a 00		 push	 0
  020b6	b8 01 00 00 00	 mov	 eax, 1
  020bb	6b c8 00	 imul	 ecx, eax, 0
  020be	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?selected@?KN@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  020c4	51		 push	 ecx
  020c5	68 00 00 00 00	 push	 OFFSET ??_C@_06HIICBHNJ@main?4c@
  020ca	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  020cf	83 c4 10	 add	 esp, 16			; 00000010H
  020d2	51		 push	 ecx
  020d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  020db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020e0	51		 push	 ecx
  020e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  020e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  020ee	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  020f3	83 c4 08	 add	 esp, 8
  020f6	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NKEFLDLJ@?52?0345?5bytes@
  020fb	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  02100	83 c4 04	 add	 esp, 4

; 932  :             ImGui::Selectable("Hello.cpp", &selected[1]); ImGui::SameLine(300); ImGui::Text("12,345 bytes");

  02103	51		 push	 ecx
  02104	0f 57 c0	 xorps	 xmm0, xmm0
  02107	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0210c	51		 push	 ecx
  0210d	0f 57 c0	 xorps	 xmm0, xmm0
  02110	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02115	8d 8d 04 ef ff
	ff		 lea	 ecx, DWORD PTR $T50[ebp]
  0211b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02120	50		 push	 eax
  02121	6a 00		 push	 0
  02123	b8 01 00 00 00	 mov	 eax, 1
  02128	c1 e0 00	 shl	 eax, 0
  0212b	05 00 00 00 00	 add	 eax, OFFSET ?selected@?KN@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  02130	50		 push	 eax
  02131	68 00 00 00 00	 push	 OFFSET ??_C@_09JJLAOCPC@Hello?4cpp@
  02136	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  0213b	83 c4 10	 add	 esp, 16			; 00000010H
  0213e	51		 push	 ecx
  0213f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0214c	51		 push	 ecx
  0214d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  02155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0215a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0215f	83 c4 08	 add	 esp, 8
  02162	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LDNEMMOG@12?0345?5bytes@
  02167	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0216c	83 c4 04	 add	 esp, 4

; 933  :             ImGui::Selectable("Hello.h",   &selected[2]); ImGui::SameLine(300); ImGui::Text(" 2,345 bytes");

  0216f	51		 push	 ecx
  02170	0f 57 c0	 xorps	 xmm0, xmm0
  02173	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02178	51		 push	 ecx
  02179	0f 57 c0	 xorps	 xmm0, xmm0
  0217c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02181	8d 8d f4 ee ff
	ff		 lea	 ecx, DWORD PTR $T49[ebp]
  02187	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0218c	50		 push	 eax
  0218d	6a 00		 push	 0
  0218f	b8 01 00 00 00	 mov	 eax, 1
  02194	d1 e0		 shl	 eax, 1
  02196	05 00 00 00 00	 add	 eax, OFFSET ?selected@?KN@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  0219b	50		 push	 eax
  0219c	68 00 00 00 00	 push	 OFFSET ??_C@_07GGGNKCPB@Hello?4h@
  021a1	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  021a6	83 c4 10	 add	 esp, 16			; 00000010H
  021a9	51		 push	 ecx
  021aa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  021b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021b7	51		 push	 ecx
  021b8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  021c0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  021c5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  021ca	83 c4 08	 add	 esp, 8
  021cd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NKEFLDLJ@?52?0345?5bytes@
  021d2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  021d7	83 c4 04	 add	 esp, 4

; 934  :             ImGui::TreePop();

  021da	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN136@ShowDemoWi:

; 935  :         }
; 936  :         if (ImGui::TreeNode("In columns"))

  021df	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JGCLAHBC@In?5columns@
  021e4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  021e9	83 c4 04	 add	 esp, 4
  021ec	0f b6 c0	 movzx	 eax, al
  021ef	85 c0		 test	 eax, eax
  021f1	0f 84 a2 00 00
	00		 je	 $LN137@ShowDemoWi

; 937  :         {
; 938  :             ImGui::Columns(3, NULL, false);

  021f7	6a 00		 push	 0
  021f9	6a 00		 push	 0
  021fb	6a 03		 push	 3
  021fd	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  02202	83 c4 0c	 add	 esp, 12			; 0000000cH

; 939  :             static bool selected[16] = {};
; 940  :             for (int i = 0; i < 16; i++)

  02205	c7 85 68 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$188[ebp], 0
  0220f	eb 0f		 jmp	 SHORT $LN32@ShowDemoWi
$LN30@ShowDemoWi:
  02211	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _i$188[ebp]
  02217	83 c0 01	 add	 eax, 1
  0221a	89 85 68 fd ff
	ff		 mov	 DWORD PTR _i$188[ebp], eax
$LN32@ShowDemoWi:
  02220	83 bd 68 fd ff
	ff 10		 cmp	 DWORD PTR _i$188[ebp], 16 ; 00000010H
  02227	7d 5d		 jge	 SHORT $LN31@ShowDemoWi

; 941  :             {
; 942  :                 char label[32]; sprintf(label, "Item %d", i);

  02229	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _i$188[ebp]
  0222f	50		 push	 eax
  02230	68 00 00 00 00	 push	 OFFSET ??_C@_07BCJGKFOL@Item?5?$CFd@
  02235	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR _label$187[ebp]
  0223b	51		 push	 ecx
  0223c	e8 00 00 00 00	 call	 _sprintf
  02241	83 c4 0c	 add	 esp, 12			; 0000000cH

; 943  :                 if (ImGui::Selectable(label, &selected[i])) {}

  02244	51		 push	 ecx
  02245	0f 57 c0	 xorps	 xmm0, xmm0
  02248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0224d	51		 push	 ecx
  0224e	0f 57 c0	 xorps	 xmm0, xmm0
  02251	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02256	8d 8d e4 ee ff
	ff		 lea	 ecx, DWORD PTR $T48[ebp]
  0225c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02261	50		 push	 eax
  02262	6a 00		 push	 0
  02264	8b 85 68 fd ff
	ff		 mov	 eax, DWORD PTR _i$188[ebp]
  0226a	05 00 00 00 00	 add	 eax, OFFSET ?selected@?LA@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  0226f	50		 push	 eax
  02270	8d 8d 40 fd ff
	ff		 lea	 ecx, DWORD PTR _label$187[ebp]
  02276	51		 push	 ecx
  02277	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  0227c	83 c4 10	 add	 esp, 16			; 00000010H

; 944  :                 ImGui::NextColumn();

  0227f	e8 00 00 00 00	 call	 ?NextColumn@ImGui@@YAXXZ ; ImGui::NextColumn

; 945  :             }

  02284	eb 8b		 jmp	 SHORT $LN30@ShowDemoWi
$LN31@ShowDemoWi:

; 946  :             ImGui::Columns(1);

  02286	6a 01		 push	 1
  02288	6a 00		 push	 0
  0228a	6a 01		 push	 1
  0228c	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  02291	83 c4 0c	 add	 esp, 12			; 0000000cH

; 947  :             ImGui::TreePop();

  02294	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN137@ShowDemoWi:

; 948  :         }
; 949  :         if (ImGui::TreeNode("Grid"))

  02299	68 00 00 00 00	 push	 OFFSET ??_C@_04FEKPLKKA@Grid@
  0229e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  022a3	83 c4 04	 add	 esp, 4
  022a6	0f b6 c0	 movzx	 eax, al
  022a9	85 c0		 test	 eax, eax
  022ab	0f 84 a6 01 00
	00		 je	 $LN139@ShowDemoWi

; 950  :         {
; 951  :             static bool selected[4*4] = { true, false, false, false, false, true, false, false, false, false, true, false, false, false, false, true };
; 952  :             for (int i = 0; i < 4*4; i++)

  022b1	c7 85 34 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$186[ebp], 0
  022bb	eb 0f		 jmp	 SHORT $LN35@ShowDemoWi
$LN33@ShowDemoWi:
  022bd	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  022c3	83 c0 01	 add	 eax, 1
  022c6	89 85 34 fd ff
	ff		 mov	 DWORD PTR _i$186[ebp], eax
$LN35@ShowDemoWi:
  022cc	83 bd 34 fd ff
	ff 10		 cmp	 DWORD PTR _i$186[ebp], 16 ; 00000010H
  022d3	0f 8d 79 01 00
	00		 jge	 $LN34@ShowDemoWi

; 953  :             {
; 954  :                 ImGui::PushID(i);

  022d9	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  022df	50		 push	 eax
  022e0	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  022e5	83 c4 04	 add	 esp, 4

; 955  :                 if (ImGui::Selectable("Sailor", &selected[i], 0, ImVec2(50,50)))

  022e8	51		 push	 ecx
  022e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  022f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  022f6	51		 push	 ecx
  022f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  022ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02304	8d 8d d4 ee ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  0230a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0230f	50		 push	 eax
  02310	6a 00		 push	 0
  02312	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  02318	05 00 00 00 00	 add	 eax, OFFSET ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA
  0231d	50		 push	 eax
  0231e	68 00 00 00 00	 push	 OFFSET ??_C@_06IFGMFLK@Sailor@
  02323	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  02328	83 c4 10	 add	 esp, 16			; 00000010H
  0232b	0f b6 c8	 movzx	 ecx, al
  0232e	85 c9		 test	 ecx, ecx
  02330	0f 84 dc 00 00
	00		 je	 $LN144@ShowDemoWi

; 956  :                 {
; 957  :                     // Note: We _unnecessarily_ test for both x/y and i here only to silence some static analyzer. The second part of each test is unnecessary.
; 958  :                     int x = i % 4;

  02336	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  0233c	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  02341	79 05		 jns	 SHORT $LN408@ShowDemoWi
  02343	48		 dec	 eax
  02344	83 c8 fc	 or	 eax, -4			; fffffffcH
  02347	40		 inc	 eax
$LN408@ShowDemoWi:
  02348	89 85 28 fd ff
	ff		 mov	 DWORD PTR _x$185[ebp], eax

; 959  :                     int y = i / 4;

  0234e	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  02354	99		 cdq
  02355	83 e2 03	 and	 edx, 3
  02358	03 c2		 add	 eax, edx
  0235a	c1 f8 02	 sar	 eax, 2
  0235d	89 85 1c fd ff
	ff		 mov	 DWORD PTR _y$184[ebp], eax

; 960  :                     if (x > 0)           { selected[i - 1] ^= 1; }

  02363	83 bd 28 fd ff
	ff 00		 cmp	 DWORD PTR _x$185[ebp], 0
  0236a	7e 1c		 jle	 SHORT $LN141@ShowDemoWi
  0236c	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  02372	0f b6 88 ff ff
	ff ff		 movzx	 ecx, BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax-1]
  02379	83 f1 01	 xor	 ecx, 1
  0237c	8b 95 34 fd ff
	ff		 mov	 edx, DWORD PTR _i$186[ebp]
  02382	88 8a ff ff ff
	ff		 mov	 BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[edx-1], cl
$LN141@ShowDemoWi:

; 961  :                     if (x < 3 && i < 15) { selected[i + 1] ^= 1; }

  02388	83 bd 28 fd ff
	ff 03		 cmp	 DWORD PTR _x$185[ebp], 3
  0238f	7d 25		 jge	 SHORT $LN142@ShowDemoWi
  02391	83 bd 34 fd ff
	ff 0f		 cmp	 DWORD PTR _i$186[ebp], 15 ; 0000000fH
  02398	7d 1c		 jge	 SHORT $LN142@ShowDemoWi
  0239a	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  023a0	0f b6 88 01 00
	00 00		 movzx	 ecx, BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax+1]
  023a7	83 f1 01	 xor	 ecx, 1
  023aa	8b 95 34 fd ff
	ff		 mov	 edx, DWORD PTR _i$186[ebp]
  023b0	88 8a 01 00 00
	00		 mov	 BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[edx+1], cl
$LN142@ShowDemoWi:

; 962  :                     if (y > 0 && i > 3)  { selected[i - 4] ^= 1; }

  023b6	83 bd 1c fd ff
	ff 00		 cmp	 DWORD PTR _y$184[ebp], 0
  023bd	7e 25		 jle	 SHORT $LN143@ShowDemoWi
  023bf	83 bd 34 fd ff
	ff 03		 cmp	 DWORD PTR _i$186[ebp], 3
  023c6	7e 1c		 jle	 SHORT $LN143@ShowDemoWi
  023c8	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  023ce	0f b6 88 fc ff
	ff ff		 movzx	 ecx, BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax-4]
  023d5	83 f1 01	 xor	 ecx, 1
  023d8	8b 95 34 fd ff
	ff		 mov	 edx, DWORD PTR _i$186[ebp]
  023de	88 8a fc ff ff
	ff		 mov	 BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[edx-4], cl
$LN143@ShowDemoWi:

; 963  :                     if (y < 3 && i < 12) { selected[i + 4] ^= 1; }

  023e4	83 bd 1c fd ff
	ff 03		 cmp	 DWORD PTR _y$184[ebp], 3
  023eb	7d 25		 jge	 SHORT $LN144@ShowDemoWi
  023ed	83 bd 34 fd ff
	ff 0c		 cmp	 DWORD PTR _i$186[ebp], 12 ; 0000000cH
  023f4	7d 1c		 jge	 SHORT $LN144@ShowDemoWi
  023f6	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  023fc	0f b6 88 04 00
	00 00		 movzx	 ecx, BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax+4]
  02403	83 f1 01	 xor	 ecx, 1
  02406	8b 95 34 fd ff
	ff		 mov	 edx, DWORD PTR _i$186[ebp]
  0240c	88 8a 04 00 00
	00		 mov	 BYTE PTR ?selected@?LI@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[edx+4], cl
$LN144@ShowDemoWi:

; 964  :                 }
; 965  :                 if ((i % 4) < 3) ImGui::SameLine();

  02412	8b 85 34 fd ff
	ff		 mov	 eax, DWORD PTR _i$186[ebp]
  02418	25 03 00 00 80	 and	 eax, -2147483645	; 80000003H
  0241d	79 05		 jns	 SHORT $LN409@ShowDemoWi
  0241f	48		 dec	 eax
  02420	83 c8 fc	 or	 eax, -4			; fffffffcH
  02423	40		 inc	 eax
$LN409@ShowDemoWi:
  02424	83 f8 03	 cmp	 eax, 3
  02427	7d 1f		 jge	 SHORT $LN145@ShowDemoWi
  02429	51		 push	 ecx
  0242a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02432	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02437	51		 push	 ecx
  02438	0f 57 c0	 xorps	 xmm0, xmm0
  0243b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02440	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02445	83 c4 08	 add	 esp, 8
$LN145@ShowDemoWi:

; 966  :                 ImGui::PopID();

  02448	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 967  :             }

  0244d	e9 6b fe ff ff	 jmp	 $LN33@ShowDemoWi
$LN34@ShowDemoWi:

; 968  :             ImGui::TreePop();

  02452	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN139@ShowDemoWi:

; 969  :         }
; 970  :         if (ImGui::TreeNode("Alignment"))

  02457	68 00 00 00 00	 push	 OFFSET ??_C@_09FBMAGD@Alignment@
  0245c	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  02461	83 c4 04	 add	 esp, 4
  02464	0f b6 c0	 movzx	 eax, al
  02467	85 c0		 test	 eax, eax
  02469	0f 84 68 01 00
	00		 je	 $LN146@ShowDemoWi

; 971  :         {
; 972  :             HelpMarker("Alignment applies when a selectable is larger than its text content.\nBy default, Selectables uses style.SelectableTextAlign but it can be overriden on a per-item basis using PushStyleVar().");

  0246f	68 00 00 00 00	 push	 OFFSET ??_C@_0LO@OMOMIFEB@Alignment?5applies?5when?5a?5select@
  02474	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  02479	83 c4 04	 add	 esp, 4

; 973  :             static bool selected[3*3] = { true, false, true, false, true, false, true, false, true };
; 974  :             for (int y = 0; y < 3; y++)

  0247c	c7 85 10 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _y$183[ebp], 0
  02486	eb 0f		 jmp	 SHORT $LN38@ShowDemoWi
$LN36@ShowDemoWi:
  02488	8b 85 10 fd ff
	ff		 mov	 eax, DWORD PTR _y$183[ebp]
  0248e	83 c0 01	 add	 eax, 1
  02491	89 85 10 fd ff
	ff		 mov	 DWORD PTR _y$183[ebp], eax
$LN38@ShowDemoWi:
  02497	83 bd 10 fd ff
	ff 03		 cmp	 DWORD PTR _y$183[ebp], 3
  0249e	0f 8d 2e 01 00
	00		 jge	 $LN37@ShowDemoWi

; 975  :             {
; 976  :                 for (int x = 0; x < 3; x++)

  024a4	c7 85 04 fd ff
	ff 00 00 00 00	 mov	 DWORD PTR _x$182[ebp], 0
  024ae	eb 0f		 jmp	 SHORT $LN41@ShowDemoWi
$LN39@ShowDemoWi:
  024b0	8b 85 04 fd ff
	ff		 mov	 eax, DWORD PTR _x$182[ebp]
  024b6	83 c0 01	 add	 eax, 1
  024b9	89 85 04 fd ff
	ff		 mov	 DWORD PTR _x$182[ebp], eax
$LN41@ShowDemoWi:
  024bf	83 bd 04 fd ff
	ff 03		 cmp	 DWORD PTR _x$182[ebp], 3
  024c6	0f 8d 01 01 00
	00		 jge	 $LN40@ShowDemoWi

; 977  :                 {
; 978  :                     ImVec2 alignment = ImVec2((float)x / 2.0f, (float)y / 2.0f);

  024cc	f3 0f 2a 85 10
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _y$183[ebp]
  024d4	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  024dc	51		 push	 ecx
  024dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024e2	f3 0f 2a 85 04
	fd ff ff	 cvtsi2ss xmm0, DWORD PTR _x$182[ebp]
  024ea	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40000000
  024f2	51		 push	 ecx
  024f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  024f8	8d 8d f4 fc ff
	ff		 lea	 ecx, DWORD PTR _alignment$181[ebp]
  024fe	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 979  :                     char name[32];
; 980  :                     sprintf(name, "(%.1f,%.1f)", alignment.x, alignment.y);

  02503	f3 0f 5a 85 f8
	fc ff ff	 cvtss2sd xmm0, DWORD PTR _alignment$181[ebp+4]
  0250b	83 ec 08	 sub	 esp, 8
  0250e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02513	f3 0f 5a 85 f4
	fc ff ff	 cvtss2sd xmm0, DWORD PTR _alignment$181[ebp]
  0251b	83 ec 08	 sub	 esp, 8
  0251e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02523	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HCIABIHI@?$CI?$CF?41f?0?$CF?41f?$CJ@
  02528	8d 85 cc fc ff
	ff		 lea	 eax, DWORD PTR _name$180[ebp]
  0252e	50		 push	 eax
  0252f	e8 00 00 00 00	 call	 _sprintf
  02534	83 c4 18	 add	 esp, 24			; 00000018H

; 981  :                     if (x > 0) ImGui::SameLine();

  02537	83 bd 04 fd ff
	ff 00		 cmp	 DWORD PTR _x$182[ebp], 0
  0253e	7e 1f		 jle	 SHORT $LN147@ShowDemoWi
  02540	51		 push	 ecx
  02541	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02549	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0254e	51		 push	 ecx
  0254f	0f 57 c0	 xorps	 xmm0, xmm0
  02552	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02557	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0255c	83 c4 08	 add	 esp, 8
$LN147@ShowDemoWi:

; 982  :                     ImGui::PushStyleVar(ImGuiStyleVar_SelectableTextAlign, alignment);

  0255f	8d 85 f4 fc ff
	ff		 lea	 eax, DWORD PTR _alignment$181[ebp]
  02565	50		 push	 eax
  02566	6a 16		 push	 22			; 00000016H
  02568	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  0256d	83 c4 08	 add	 esp, 8

; 983  :                     ImGui::Selectable(name, &selected[3*y+x], ImGuiSelectableFlags_None, ImVec2(80,80));

  02570	51		 push	 ecx
  02571	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  02579	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0257e	51		 push	 ecx
  0257f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  02587	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0258c	8d 8d c4 ee ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  02592	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02597	50		 push	 eax
  02598	6a 00		 push	 0
  0259a	6b 85 10 fd ff
	ff 03		 imul	 eax, DWORD PTR _y$183[ebp], 3
  025a1	8b 8d 04 fd ff
	ff		 mov	 ecx, DWORD PTR _x$182[ebp]
  025a7	8d 94 08 00 00
	00 00		 lea	 edx, DWORD PTR ?selected@?MO@??ShowDemoWindowWidgets@@YAXXZ@4PA_NA[eax+ecx]
  025ae	52		 push	 edx
  025af	8d 85 cc fc ff
	ff		 lea	 eax, DWORD PTR _name$180[ebp]
  025b5	50		 push	 eax
  025b6	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBDPA_NHABUImVec2@@@Z ; ImGui::Selectable
  025bb	83 c4 10	 add	 esp, 16			; 00000010H

; 984  :                     ImGui::PopStyleVar();

  025be	6a 01		 push	 1
  025c0	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  025c5	83 c4 04	 add	 esp, 4

; 985  :                 }

  025c8	e9 e3 fe ff ff	 jmp	 $LN39@ShowDemoWi
$LN40@ShowDemoWi:

; 986  :             }

  025cd	e9 b6 fe ff ff	 jmp	 $LN36@ShowDemoWi
$LN37@ShowDemoWi:

; 987  :             ImGui::TreePop();

  025d2	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN146@ShowDemoWi:

; 988  :         }
; 989  :         ImGui::TreePop();

  025d7	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN127@ShowDemoWi:

; 990  :     }
; 991  : 
; 992  :     if (ImGui::TreeNode("Text Input"))

  025dc	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LLAOMMOH@Text?5Input@
  025e1	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  025e6	83 c4 04	 add	 esp, 4
  025e9	0f b6 c0	 movzx	 eax, al
  025ec	85 c0		 test	 eax, eax
  025ee	0f 84 55 03 00
	00		 je	 $LN148@ShowDemoWi

; 993  :     {
; 994  :         if (ImGui::TreeNode("Multi-line Text Input"))

  025f4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@ENAPIHKE@Multi?9line?5Text?5Input@
  025f9	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  025fe	83 c4 04	 add	 esp, 4
  02601	0f b6 c0	 movzx	 eax, al
  02604	85 c0		 test	 eax, eax
  02606	0f 84 b3 00 00
	00		 je	 $LN149@ShowDemoWi

; 995  :         {
; 996  :             // Note: we are using a fixed-sized buffer for simplicity here. See ImGuiInputTextFlags_CallbackResize
; 997  :             // and the code in misc/cpp/imgui_stdlib.h for how to setup InputText() for dynamically resizing strings.
; 998  :             static char text[1024 * 16] =
; 999  :                 "/*\n"
; 1000 :                 " The Pentium F00F bug, shorthand for F0 0F C7 C8,\n"
; 1001 :                 " the hexadecimal encoding of one offending instruction,\n"
; 1002 :                 " more formally, the invalid operand with locked CMPXCHG8B\n"
; 1003 :                 " instruction bug, is a design flaw in the majority of\n"
; 1004 :                 " Intel Pentium, Pentium MMX, and Pentium OverDrive\n"
; 1005 :                 " processors (all in the P5 microarchitecture).\n"
; 1006 :                 "*/\n\n"
; 1007 :                 "label:\n"
; 1008 :                 "\tlock cmpxchg8b eax\n";
; 1009 : 
; 1010 :             static ImGuiInputTextFlags flags = ImGuiInputTextFlags_AllowTabInput;
; 1011 :             HelpMarker("You can use the ImGuiInputTextFlags_CallbackResize facility if you need to wire InputTextMultiline() to a dynamic string type. See misc/cpp/imgui_stdlib.h for an example. (This is not demonstrated in imgui_demo.cpp)");

  0260c	68 00 00 00 00	 push	 OFFSET ??_C@_0NI@PLBNAOOK@You?5can?5use?5the?5ImGuiInputTextF@
  02611	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  02616	83 c4 04	 add	 esp, 4

; 1012 :             ImGui::CheckboxFlags("ImGuiInputTextFlags_ReadOnly", (unsigned int*)&flags, ImGuiInputTextFlags_ReadOnly);

  02619	68 00 40 00 00	 push	 16384			; 00004000H
  0261e	68 00 00 00 00	 push	 OFFSET ?flags@?NK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02623	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@IHHKAKNM@ImGuiInputTextFlags_ReadOnly@
  02628	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  0262d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1013 :             ImGui::CheckboxFlags("ImGuiInputTextFlags_AllowTabInput", (unsigned int*)&flags, ImGuiInputTextFlags_AllowTabInput);

  02630	68 00 04 00 00	 push	 1024			; 00000400H
  02635	68 00 00 00 00	 push	 OFFSET ?flags@?NK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0263a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@GMDAHFPL@ImGuiInputTextFlags_AllowTabInp@
  0263f	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  02644	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1014 :             ImGui::CheckboxFlags("ImGuiInputTextFlags_CtrlEnterForNewLine", (unsigned int*)&flags, ImGuiInputTextFlags_CtrlEnterForNewLine);

  02647	68 00 08 00 00	 push	 2048			; 00000800H
  0264c	68 00 00 00 00	 push	 OFFSET ?flags@?NK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02651	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@LIKAMPDL@ImGuiInputTextFlags_CtrlEnterFo@
  02656	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  0265b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1015 :             ImGui::InputTextMultiline("##source", text, IM_ARRAYSIZE(text), ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16), flags);

  0265e	6a 00		 push	 0
  02660	6a 00		 push	 0
  02662	a1 00 00 00 00	 mov	 eax, DWORD PTR ?flags@?NK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02667	50		 push	 eax
  02668	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  0266d	d9 9d b8 eb ff
	ff		 fstp	 DWORD PTR tv4594[ebp]
  02673	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv4594[ebp]
  0267b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  02683	51		 push	 ecx
  02684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02689	51		 push	 ecx
  0268a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  02692	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02697	8d 8d b4 ee ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  0269d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  026a2	50		 push	 eax
  026a3	68 00 40 00 00	 push	 16384			; 00004000H
  026a8	68 00 00 00 00	 push	 OFFSET ?text@?NK@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  026ad	68 00 00 00 00	 push	 OFFSET ??_C@_08FDEOKKII@?$CD?$CDsource@
  026b2	e8 00 00 00 00	 call	 ?InputTextMultiline@ImGui@@YA_NPBDPADIABUImVec2@@HP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputTextMultiline
  026b7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1016 :             ImGui::TreePop();

  026ba	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN149@ShowDemoWi:

; 1017 :         }
; 1018 : 
; 1019 :         if (ImGui::TreeNode("Filtered Text Input"))

  026bf	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EABDFJK@Filtered?5Text?5Input@
  026c4	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  026c9	83 c4 04	 add	 esp, 4
  026cc	0f b6 c0	 movzx	 eax, al
  026cf	85 c0		 test	 eax, eax
  026d1	0f 84 39 01 00
	00		 je	 $LN150@ShowDemoWi

; 1020 :         {
; 1021 :             static char buf1[64] = ""; ImGui::InputText("default", buf1, 64);

  026d7	6a 00		 push	 0
  026d9	6a 00		 push	 0
  026db	6a 00		 push	 0
  026dd	6a 40		 push	 64			; 00000040H
  026df	68 00 00 00 00	 push	 OFFSET ?buf1@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  026e4	68 00 00 00 00	 push	 OFFSET ??_C@_07DLHCIBDH@default@
  026e9	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  026ee	83 c4 18	 add	 esp, 24			; 00000018H

; 1022 :             static char buf2[64] = ""; ImGui::InputText("decimal", buf2, 64, ImGuiInputTextFlags_CharsDecimal);

  026f1	6a 00		 push	 0
  026f3	6a 00		 push	 0
  026f5	6a 01		 push	 1
  026f7	6a 40		 push	 64			; 00000040H
  026f9	68 00 00 00 00	 push	 OFFSET ?buf2@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  026fe	68 00 00 00 00	 push	 OFFSET ??_C@_07EEKBCPDP@decimal@
  02703	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  02708	83 c4 18	 add	 esp, 24			; 00000018H

; 1023 :             static char buf3[64] = ""; ImGui::InputText("hexadecimal", buf3, 64, ImGuiInputTextFlags_CharsHexadecimal | ImGuiInputTextFlags_CharsUppercase);

  0270b	6a 00		 push	 0
  0270d	6a 00		 push	 0
  0270f	6a 06		 push	 6
  02711	6a 40		 push	 64			; 00000040H
  02713	68 00 00 00 00	 push	 OFFSET ?buf3@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  02718	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PLANEGDO@hexadecimal@
  0271d	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  02722	83 c4 18	 add	 esp, 24			; 00000018H

; 1024 :             static char buf4[64] = ""; ImGui::InputText("uppercase", buf4, 64, ImGuiInputTextFlags_CharsUppercase);

  02725	6a 00		 push	 0
  02727	6a 00		 push	 0
  02729	6a 04		 push	 4
  0272b	6a 40		 push	 64			; 00000040H
  0272d	68 00 00 00 00	 push	 OFFSET ?buf4@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  02732	68 00 00 00 00	 push	 OFFSET ??_C@_09NMLHJAII@uppercase@
  02737	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  0273c	83 c4 18	 add	 esp, 24			; 00000018H

; 1025 :             static char buf5[64] = ""; ImGui::InputText("no blank", buf5, 64, ImGuiInputTextFlags_CharsNoBlank);

  0273f	6a 00		 push	 0
  02741	6a 00		 push	 0
  02743	6a 08		 push	 8
  02745	6a 40		 push	 64			; 00000040H
  02747	68 00 00 00 00	 push	 OFFSET ?buf5@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0274c	68 00 00 00 00	 push	 OFFSET ??_C@_08BFAFMKNB@no?5blank@
  02751	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  02756	83 c4 18	 add	 esp, 24			; 00000018H

; 1026 :             struct TextFilters { static int FilterImGuiLetters(ImGuiInputTextCallbackData* data) { if (data->EventChar < 256 && strchr("imgui", (char)data->EventChar)) return 0; return 1; } };
; 1027 :             static char buf6[64] = ""; ImGui::InputText("\"imgui\" letters", buf6, 64, ImGuiInputTextFlags_CallbackCharFilter, TextFilters::FilterImGuiLetters);

  02759	6a 00		 push	 0
  0275b	68 00 00 00 00	 push	 OFFSET ?FilterImGuiLetters@TextFilters@?NN@??ShowDemoWindowWidgets@@YAXXZ@SAHPAUImGuiInputTextCallbackData@@@Z ; `ShowDemoWindowWidgets'::`221'::TextFilters::FilterImGuiLetters
  02760	68 00 02 00 00	 push	 512			; 00000200H
  02765	6a 40		 push	 64			; 00000040H
  02767	68 00 00 00 00	 push	 OFFSET ?buf6@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0276c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DMKNNKAP@?$CCimgui?$CC?5letters@
  02771	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  02776	83 c4 18	 add	 esp, 24			; 00000018H

; 1028 : 
; 1029 :             ImGui::Text("Password input");

  02779	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CKJOHAFD@Password?5input@
  0277e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  02783	83 c4 04	 add	 esp, 4

; 1030 :             static char bufpass[64] = "password123";
; 1031 :             ImGui::InputText("password", bufpass, 64, ImGuiInputTextFlags_Password | ImGuiInputTextFlags_CharsNoBlank);

  02786	6a 00		 push	 0
  02788	6a 00		 push	 0
  0278a	68 08 80 00 00	 push	 32776			; 00008008H
  0278f	6a 40		 push	 64			; 00000040H
  02791	68 00 00 00 00	 push	 OFFSET ?bufpass@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  02796	68 00 00 00 00	 push	 OFFSET ??_C@_08NLHBPEGP@password@
  0279b	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  027a0	83 c4 18	 add	 esp, 24			; 00000018H

; 1032 :             ImGui::SameLine(); HelpMarker("Display all characters as '*'.\nDisable clipboard cut and copy.\nDisable logging.\n");

  027a3	51		 push	 ecx
  027a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  027ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027b1	51		 push	 ecx
  027b2	0f 57 c0	 xorps	 xmm0, xmm0
  027b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  027ba	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  027bf	83 c4 08	 add	 esp, 8
  027c2	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@LAANLENK@Display?5all?5characters?5as?5?8?$CK?8?4?6@
  027c7	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  027cc	83 c4 04	 add	 esp, 4

; 1033 :             ImGui::InputTextWithHint("password (w/ hint)", "<password>", bufpass, 64, ImGuiInputTextFlags_Password | ImGuiInputTextFlags_CharsNoBlank);

  027cf	6a 00		 push	 0
  027d1	6a 00		 push	 0
  027d3	68 08 80 00 00	 push	 32776			; 00008008H
  027d8	6a 40		 push	 64			; 00000040H
  027da	68 00 00 00 00	 push	 OFFSET ?bufpass@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  027df	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DGGOBGAB@?$DMpassword?$DO@
  027e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DPDFGHAP@password?5?$CIw?1?5hint?$CJ@
  027e9	e8 00 00 00 00	 call	 ?InputTextWithHint@ImGui@@YA_NPBD0PADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputTextWithHint
  027ee	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1034 :             ImGui::InputText("password (clear)", bufpass, 64, ImGuiInputTextFlags_CharsNoBlank);

  027f1	6a 00		 push	 0
  027f3	6a 00		 push	 0
  027f5	6a 08		 push	 8
  027f7	6a 40		 push	 64			; 00000040H
  027f9	68 00 00 00 00	 push	 OFFSET ?bufpass@?NN@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  027fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LNABFGG@password?5?$CIclear?$CJ@
  02803	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  02808	83 c4 18	 add	 esp, 24			; 00000018H

; 1035 :             ImGui::TreePop();

  0280b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN150@ShowDemoWi:

; 1036 :         }
; 1037 : 
; 1038 :         if (ImGui::TreeNode("Resize Callback"))

  02810	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PGEBLBNL@Resize?5Callback@
  02815	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0281a	83 c4 04	 add	 esp, 4
  0281d	0f b6 c0	 movzx	 eax, al
  02820	85 c0		 test	 eax, eax
  02822	0f 84 1c 01 00
	00		 je	 $LN151@ShowDemoWi

; 1039 :         {
; 1040 :             // If you have a custom string type you would typically create a ImGui::InputText() wrapper than takes your type as input.
; 1041 :             // See misc/cpp/imgui_stdlib.h and .cpp for an implementation of this using std::string.
; 1042 :             HelpMarker("Demonstrate using ImGuiInputTextFlags_CallbackResize to wire your resizable string type to InputText().\n\nSee misc/cpp/imgui_stdlib.h for an implementation of this for std::string.");

  02828	68 00 00 00 00	 push	 OFFSET ??_C@_0LE@JOHBHMHP@Demonstrate?5using?5ImGuiInputTex@
  0282d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  02832	83 c4 04	 add	 esp, 4

; 1043 :             struct Funcs
; 1044 :             {
; 1045 :                 static int MyResizeCallback(ImGuiInputTextCallbackData* data)
; 1046 :                 {
; 1047 :                     if (data->EventFlag == ImGuiInputTextFlags_CallbackResize)
; 1048 :                     {
; 1049 :                         ImVector<char>* my_str = (ImVector<char>*)data->UserData;
; 1050 :                         IM_ASSERT(my_str->begin() == data->Buf);
; 1051 :                         my_str->resize(data->BufSize);  // NB: On resizing calls, generally data->BufSize == data->BufTextLen + 1
; 1052 :                         data->Buf = my_str->begin();
; 1053 :                     }
; 1054 :                     return 0;
; 1055 :                 }
; 1056 : 
; 1057 :                 // Tip: Because ImGui:: is a namespace you would typicall add your own function into the namespace in your own source files.
; 1058 :                 // For example, you may add a function called ImGui::InputText(const char* label, MyString* my_str).
; 1059 :                 static bool MyInputTextMultiline(const char* label, ImVector<char>* my_str, const ImVec2& size = ImVec2(0, 0), ImGuiInputTextFlags flags = 0)
; 1060 :                 {
; 1061 :                     IM_ASSERT((flags & ImGuiInputTextFlags_CallbackResize) == 0);
; 1062 :                     return ImGui::InputTextMultiline(label, my_str->begin(), (size_t)my_str->size(), size, flags | ImGuiInputTextFlags_CallbackResize, Funcs::MyResizeCallback, (void*)my_str);
; 1063 :                 }
; 1064 :             };
; 1065 : 
; 1066 :             // For this demo we are using ImVector as a string container.
; 1067 :             // Note that because we need to store a terminating zero character, our size/capacity are 1 more than usually reported by a typical string class.
; 1068 :             static ImVector<char> my_str;

  02835	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0283a	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  02841	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  02844	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?OA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02849	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0284f	7e 48		 jle	 SHORT $LN42@ShowDemoWi
  02851	68 00 00 00 00	 push	 OFFSET ?$TSS1@?OA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02856	e8 00 00 00 00	 call	 __Init_thread_header
  0285b	83 c4 04	 add	 esp, 4
  0285e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?OA@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  02865	75 32		 jne	 SHORT $LN42@ShowDemoWi
  02867	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0286e	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  02873	e8 00 00 00 00	 call	 ??0?$ImVector@D@@QAE@XZ	; ImVector<char>::ImVector<char>
  02878	68 00 00 00 00	 push	 OFFSET ??__Fmy_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@YAXXZ ; `ShowDemoWindowWidgets'::`224'::`dynamic atexit destructor for 'my_str''
  0287d	e8 00 00 00 00	 call	 _atexit
  02882	83 c4 04	 add	 esp, 4
  02885	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0288c	68 00 00 00 00	 push	 OFFSET ?$TSS1@?OA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02891	e8 00 00 00 00	 call	 __Init_thread_footer
  02896	83 c4 04	 add	 esp, 4
$LN42@ShowDemoWi:

; 1069 :             if (my_str.empty())

  02899	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  0289e	e8 00 00 00 00	 call	 ?empty@?$ImVector@D@@QBE_NXZ ; ImVector<char>::empty
  028a3	0f b6 c0	 movzx	 eax, al
  028a6	85 c0		 test	 eax, eax
  028a8	74 18		 je	 SHORT $LN152@ShowDemoWi

; 1070 :                 my_str.push_back(0);

  028aa	c6 85 ab ee ff
	ff 00		 mov	 BYTE PTR $T44[ebp], 0
  028b1	8d 85 ab ee ff
	ff		 lea	 eax, DWORD PTR $T44[ebp]
  028b7	50		 push	 eax
  028b8	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  028bd	e8 00 00 00 00	 call	 ?push_back@?$ImVector@D@@QAEXABD@Z ; ImVector<char>::push_back
$LN152@ShowDemoWi:

; 1071 :             Funcs::MyInputTextMultiline("##MyStr", &my_str, ImVec2(-FLT_MIN, ImGui::GetTextLineHeight() * 16));

  028c2	6a 00		 push	 0
  028c4	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  028c9	d9 9d b8 eb ff
	ff		 fstp	 DWORD PTR tv4614[ebp]
  028cf	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv4614[ebp]
  028d7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  028df	51		 push	 ecx
  028e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028e5	51		 push	 ecx
  028e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@80800000
  028ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  028f3	8d 8d 98 ee ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  028f9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  028fe	50		 push	 eax
  028ff	68 00 00 00 00	 push	 OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  02904	68 00 00 00 00	 push	 OFFSET ??_C@_07MDDMIGJK@?$CD?$CDMyStr@
  02909	e8 00 00 00 00	 call	 ?MyInputTextMultiline@Funcs@?OA@??ShowDemoWindowWidgets@@YAXXZ@SA_NPBDPAU?$ImVector@D@@ABUImVec2@@H@Z ; `ShowDemoWindowWidgets'::`224'::Funcs::MyInputTextMultiline
  0290e	83 c4 10	 add	 esp, 16			; 00000010H

; 1072 :             ImGui::Text("Data: %p\nSize: %d\nCapacity: %d", (void*)my_str.begin(), my_str.size(), my_str.capacity());

  02911	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  02916	e8 00 00 00 00	 call	 ?capacity@?$ImVector@D@@QBEHXZ ; ImVector<char>::capacity
  0291b	50		 push	 eax
  0291c	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  02921	e8 00 00 00 00	 call	 ?size@?$ImVector@D@@QBEHXZ ; ImVector<char>::size
  02926	50		 push	 eax
  02927	b9 00 00 00 00	 mov	 ecx, OFFSET ?my_str@?OA@??ShowDemoWindowWidgets@@YAXXZ@4U?$ImVector@D@@A
  0292c	e8 00 00 00 00	 call	 ?begin@?$ImVector@D@@QAEPADXZ ; ImVector<char>::begin
  02931	50		 push	 eax
  02932	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@HFIMENAP@Data?3?5?$CFp?6Size?3?5?$CFd?6Capacity?3?5?$CFd@
  02937	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0293c	83 c4 10	 add	 esp, 16			; 00000010H

; 1073 :             ImGui::TreePop();

  0293f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN151@ShowDemoWi:

; 1074 :         }
; 1075 : 
; 1076 :         ImGui::TreePop();

  02944	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN148@ShowDemoWi:

; 1077 :     }
; 1078 : 
; 1079 :     // Plot/Graph widgets are currently fairly limited.
; 1080 :     // Consider writing your own plotting widget, or using a third-party one (see "Wiki->Useful Widgets", or github.com/ocornut/imgui/issues/2747)
; 1081 :     if (ImGui::TreeNode("Plots Widgets"))

  02949	68 00 00 00 00	 push	 OFFSET ??_C@_0O@LEBMLIEA@Plots?5Widgets@
  0294e	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  02953	83 c4 04	 add	 esp, 4
  02956	0f b6 c0	 movzx	 eax, al
  02959	85 c0		 test	 eax, eax
  0295b	0f 84 dd 05 00
	00		 je	 $LN153@ShowDemoWi

; 1082 :     {
; 1083 :         static bool animate = true;
; 1084 :         ImGui::Checkbox("Animate", &animate);

  02961	68 00 00 00 00	 push	 OFFSET ?animate@?OF@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  02966	68 00 00 00 00	 push	 OFFSET ??_C@_07CCNCPHDL@Animate@
  0296b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02970	83 c4 08	 add	 esp, 8

; 1085 : 
; 1086 :         static float arr[] = { 0.6f, 0.1f, 1.0f, 0.5f, 0.92f, 0.1f, 0.2f };
; 1087 :         ImGui::PlotLines("Frame Times", arr, IM_ARRAYSIZE(arr));

  02973	6a 04		 push	 4
  02975	51		 push	 ecx
  02976	0f 57 c0	 xorps	 xmm0, xmm0
  02979	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0297e	51		 push	 ecx
  0297f	0f 57 c0	 xorps	 xmm0, xmm0
  02982	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02987	8d 8d 88 ee ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  0298d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02992	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02995	51		 push	 ecx
  02996	8b 10		 mov	 edx, DWORD PTR [eax]
  02998	52		 push	 edx
  02999	51		 push	 ecx
  0299a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  029a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029a7	51		 push	 ecx
  029a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  029b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  029b5	6a 00		 push	 0
  029b7	6a 00		 push	 0
  029b9	6a 07		 push	 7
  029bb	68 00 00 00 00	 push	 OFFSET ?arr@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  029c0	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LJPKANLB@Frame?5Times@
  029c5	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z ; ImGui::PlotLines
  029ca	83 c4 28	 add	 esp, 40			; 00000028H

; 1088 : 
; 1089 :         // Create a dummy array of contiguous float values to plot
; 1090 :         // Tip: If your float aren't contiguous but part of a structure, you can pass a pointer to your first float and the sizeof() of your structure in the Stride parameter.
; 1091 :         static float values[90] = {};
; 1092 :         static int values_offset = 0;
; 1093 :         static double refresh_time = 0.0;
; 1094 :         if (!animate || refresh_time == 0.0)

  029cd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?animate@?OF@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  029d4	85 c0		 test	 eax, eax
  029d6	74 16		 je	 SHORT $LN155@ShowDemoWi
  029d8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?refresh_time@?OF@??ShowDemoWindowWidgets@@YAXXZ@4NA
  029e0	66 0f 2e 05 00
	00 00 00	 ucomisd xmm0, QWORD PTR __real@0000000000000000
  029e8	9f		 lahf
  029e9	f6 c4 44	 test	 ah, 68			; 00000044H
  029ec	7a 0b		 jp	 SHORT $LN154@ShowDemoWi
$LN155@ShowDemoWi:

; 1095 :             refresh_time = ImGui::GetTime();

  029ee	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  029f3	dd 1d 00 00 00
	00		 fstp	 QWORD PTR ?refresh_time@?OF@??ShowDemoWindowWidgets@@YAXXZ@4NA
$LN154@ShowDemoWi:

; 1096 :         while (refresh_time < ImGui::GetTime()) // Create dummy data at fixed 60 hz rate for the demo

  029f9	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  029fe	dd 9d b4 eb ff
	ff		 fstp	 QWORD PTR tv4645[ebp]
  02a04	f2 0f 10 85 b4
	eb ff ff	 movsd	 xmm0, QWORD PTR tv4645[ebp]
  02a0c	66 0f 2f 05 00
	00 00 00	 comisd	 xmm0, QWORD PTR ?refresh_time@?OF@??ShowDemoWindowWidgets@@YAXXZ@4NA
  02a14	76 75		 jbe	 SHORT $LN44@ShowDemoWi

; 1097 :         {
; 1098 :             static float phase = 0.0f;
; 1099 :             values[values_offset] = cosf(phase);

  02a16	51		 push	 ecx
  02a17	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?phase@?OJ@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02a1f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02a24	e8 00 00 00 00	 call	 _cosf
  02a29	83 c4 04	 add	 esp, 4
  02a2c	a1 00 00 00 00	 mov	 eax, DWORD PTR ?values_offset@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02a31	d9 1c 85 00 00
	00 00		 fstp	 DWORD PTR ?values@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]

; 1100 :             values_offset = (values_offset+1) % IM_ARRAYSIZE(values);

  02a38	a1 00 00 00 00	 mov	 eax, DWORD PTR ?values_offset@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02a3d	83 c0 01	 add	 eax, 1
  02a40	99		 cdq
  02a41	b9 5a 00 00 00	 mov	 ecx, 90			; 0000005aH
  02a46	f7 f9		 idiv	 ecx
  02a48	89 15 00 00 00
	00		 mov	 DWORD PTR ?values_offset@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA, edx

; 1101 :             phase += 0.10f*values_offset;

  02a4e	f3 0f 2a 05 00
	00 00 00	 cvtsi2ss xmm0, DWORD PTR ?values_offset@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02a56	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3dcccccd
  02a5e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?phase@?OJ@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02a66	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?phase@?OJ@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0

; 1102 :             refresh_time += 1.0f/60.0f;

  02a6e	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR ?refresh_time@?OF@??ShowDemoWindowWidgets@@YAXXZ@4NA
  02a76	f2 0f 58 05 00
	00 00 00	 addsd	 xmm0, QWORD PTR __real@3f91111120000000
  02a7e	f2 0f 11 05 00
	00 00 00	 movsd	 QWORD PTR ?refresh_time@?OF@??ShowDemoWindowWidgets@@YAXXZ@4NA, xmm0

; 1103 :         }

  02a86	e9 6e ff ff ff	 jmp	 $LN154@ShowDemoWi
$LN44@ShowDemoWi:

; 1104 : 
; 1105 :         // Plots can display overlay texts
; 1106 :         // (in this example, we will display an average value)
; 1107 :         {
; 1108 :             float average = 0.0f;

  02a8b	0f 57 c0	 xorps	 xmm0, xmm0
  02a8e	f3 0f 11 85 c0
	fc ff ff	 movss	 DWORD PTR _average$179[ebp], xmm0

; 1109 :             for (int n = 0; n < IM_ARRAYSIZE(values); n++)

  02a96	c7 85 b4 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$178[ebp], 0
  02aa0	eb 0f		 jmp	 SHORT $LN47@ShowDemoWi
$LN45@ShowDemoWi:
  02aa2	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _n$178[ebp]
  02aa8	83 c0 01	 add	 eax, 1
  02aab	89 85 b4 fc ff
	ff		 mov	 DWORD PTR _n$178[ebp], eax
$LN47@ShowDemoWi:
  02ab1	83 bd b4 fc ff
	ff 5a		 cmp	 DWORD PTR _n$178[ebp], 90 ; 0000005aH
  02ab8	7d 21		 jge	 SHORT $LN46@ShowDemoWi

; 1110 :                 average += values[n];

  02aba	8b 85 b4 fc ff
	ff		 mov	 eax, DWORD PTR _n$178[ebp]
  02ac0	f3 0f 10 85 c0
	fc ff ff	 movss	 xmm0, DWORD PTR _average$179[ebp]
  02ac8	f3 0f 58 04 85
	00 00 00 00	 addss	 xmm0, DWORD PTR ?values@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]
  02ad1	f3 0f 11 85 c0
	fc ff ff	 movss	 DWORD PTR _average$179[ebp], xmm0
  02ad9	eb c7		 jmp	 SHORT $LN45@ShowDemoWi
$LN46@ShowDemoWi:

; 1111 :             average /= (float)IM_ARRAYSIZE(values);

  02adb	f3 0f 10 85 c0
	fc ff ff	 movss	 xmm0, DWORD PTR _average$179[ebp]
  02ae3	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@42b40000
  02aeb	f3 0f 11 85 c0
	fc ff ff	 movss	 DWORD PTR _average$179[ebp], xmm0

; 1112 :             char overlay[32];
; 1113 :             sprintf(overlay, "avg %f", average);

  02af3	f3 0f 5a 85 c0
	fc ff ff	 cvtss2sd xmm0, DWORD PTR _average$179[ebp]
  02afb	83 ec 08	 sub	 esp, 8
  02afe	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  02b03	68 00 00 00 00	 push	 OFFSET ??_C@_06BECIMFEF@avg?5?$CFf@
  02b08	8d 85 8c fc ff
	ff		 lea	 eax, DWORD PTR _overlay$177[ebp]
  02b0e	50		 push	 eax
  02b0f	e8 00 00 00 00	 call	 _sprintf
  02b14	83 c4 10	 add	 esp, 16			; 00000010H

; 1114 :             ImGui::PlotLines("Lines", values, IM_ARRAYSIZE(values), values_offset, overlay, -1.0f, 1.0f, ImVec2(0,80));

  02b17	6a 04		 push	 4
  02b19	51		 push	 ecx
  02b1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  02b22	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b27	51		 push	 ecx
  02b28	0f 57 c0	 xorps	 xmm0, xmm0
  02b2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b30	8d 8d 78 ee ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  02b36	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02b3b	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02b3e	51		 push	 ecx
  02b3f	8b 10		 mov	 edx, DWORD PTR [eax]
  02b41	52		 push	 edx
  02b42	51		 push	 ecx
  02b43	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02b4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b50	51		 push	 ecx
  02b51	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02b59	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b5e	8d 85 8c fc ff
	ff		 lea	 eax, DWORD PTR _overlay$177[ebp]
  02b64	50		 push	 eax
  02b65	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?values_offset@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02b6b	51		 push	 ecx
  02b6c	6a 5a		 push	 90			; 0000005aH
  02b6e	68 00 00 00 00	 push	 OFFSET ?values@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  02b73	68 00 00 00 00	 push	 OFFSET ??_C@_05DDHCCCLJ@Lines@
  02b78	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z ; ImGui::PlotLines
  02b7d	83 c4 28	 add	 esp, 40			; 00000028H

; 1115 :         }
; 1116 :         ImGui::PlotHistogram("Histogram", arr, IM_ARRAYSIZE(arr), 0, NULL, 0.0f, 1.0f, ImVec2(0,80));

  02b80	6a 04		 push	 4
  02b82	51		 push	 ecx
  02b83	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  02b8b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b90	51		 push	 ecx
  02b91	0f 57 c0	 xorps	 xmm0, xmm0
  02b94	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02b99	8d 8d 68 ee ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  02b9f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02ba4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02ba7	51		 push	 ecx
  02ba8	8b 10		 mov	 edx, DWORD PTR [eax]
  02baa	52		 push	 edx
  02bab	51		 push	 ecx
  02bac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02bb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bb9	51		 push	 ecx
  02bba	0f 57 c0	 xorps	 xmm0, xmm0
  02bbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bc2	6a 00		 push	 0
  02bc4	6a 00		 push	 0
  02bc6	6a 07		 push	 7
  02bc8	68 00 00 00 00	 push	 OFFSET ?arr@?OF@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  02bcd	68 00 00 00 00	 push	 OFFSET ??_C@_09NBOAEPFB@Histogram@
  02bd2	e8 00 00 00 00	 call	 ?PlotHistogram@ImGui@@YAXPBDPBMHH0MMUImVec2@@H@Z ; ImGui::PlotHistogram
  02bd7	83 c4 28	 add	 esp, 40			; 00000028H

; 1117 : 
; 1118 :         // Use functions to generate output
; 1119 :         // FIXME: This is rather awkward because current plot API only pass in indices. We probably want an API passing floats and user provide sample rate/count.
; 1120 :         struct Funcs
; 1121 :         {
; 1122 :             static float Sin(void*, int i) { return sinf(i * 0.1f); }
; 1123 :             static float Saw(void*, int i) { return (i & 1) ? 1.0f : -1.0f; }
; 1124 :         };
; 1125 :         static int func_type = 0, display_count = 70;
; 1126 :         ImGui::Separator();

  02bda	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1127 :         ImGui::SetNextItemWidth(100);

  02bdf	51		 push	 ecx
  02be0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  02be8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02bed	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  02bf2	83 c4 04	 add	 esp, 4

; 1128 :         ImGui::Combo("func", &func_type, "Sin\0Saw\0");

  02bf5	6a ff		 push	 -1
  02bf7	68 00 00 00 00	 push	 OFFSET ??_C@_08OLJDEBGC@Sin?$AASaw?$AA@
  02bfc	68 00 00 00 00	 push	 OFFSET ?func_type@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02c01	68 00 00 00 00	 push	 OFFSET ??_C@_04HPNHAEOP@func@
  02c06	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  02c0b	83 c4 10	 add	 esp, 16			; 00000010H

; 1129 :         ImGui::SameLine();

  02c0e	51		 push	 ecx
  02c0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c1c	51		 push	 ecx
  02c1d	0f 57 c0	 xorps	 xmm0, xmm0
  02c20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c25	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02c2a	83 c4 08	 add	 esp, 8

; 1130 :         ImGui::SliderInt("Sample count", &display_count, 1, 400);

  02c2d	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  02c32	68 90 01 00 00	 push	 400			; 00000190H
  02c37	6a 01		 push	 1
  02c39	68 00 00 00 00	 push	 OFFSET ?display_count@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02c3e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LHCNOOOP@Sample?5count@
  02c43	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPBDPAHHH0@Z ; ImGui::SliderInt
  02c48	83 c4 14	 add	 esp, 20			; 00000014H

; 1131 :         float (*func)(void*, int) = (func_type == 0) ? Funcs::Sin : Funcs::Saw;

  02c4b	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?func_type@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  02c52	75 0c		 jne	 SHORT $LN243@ShowDemoWi
  02c54	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1838[ebp], OFFSET ?Sin@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z ; `ShowDemoWindowWidgets'::`229'::Funcs::Sin
  02c5e	eb 0a		 jmp	 SHORT $LN244@ShowDemoWi
$LN243@ShowDemoWi:
  02c60	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1838[ebp], OFFSET ?Saw@Funcs@?OF@??ShowDemoWindowWidgets@@YAXXZ@SAMPAXH@Z ; `ShowDemoWindowWidgets'::`229'::Funcs::Saw
$LN244@ShowDemoWi:
  02c6a	8b 85 b8 eb ff
	ff		 mov	 eax, DWORD PTR tv1838[ebp]
  02c70	89 85 80 fc ff
	ff		 mov	 DWORD PTR _func$176[ebp], eax

; 1132 :         ImGui::PlotLines("Lines", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0,80));

  02c76	51		 push	 ecx
  02c77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  02c7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c84	51		 push	 ecx
  02c85	0f 57 c0	 xorps	 xmm0, xmm0
  02c88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02c8d	8d 8d 58 ee ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  02c93	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02c98	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02c9b	51		 push	 ecx
  02c9c	8b 10		 mov	 edx, DWORD PTR [eax]
  02c9e	52		 push	 edx
  02c9f	51		 push	 ecx
  02ca0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02ca8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cad	51		 push	 ecx
  02cae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02cb6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cbb	6a 00		 push	 0
  02cbd	6a 00		 push	 0
  02cbf	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_count@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02cc4	50		 push	 eax
  02cc5	6a 00		 push	 0
  02cc7	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR _func$176[ebp]
  02ccd	51		 push	 ecx
  02cce	68 00 00 00 00	 push	 OFFSET ??_C@_05DDHCCCLJ@Lines@
  02cd3	e8 00 00 00 00	 call	 ?PlotLines@ImGui@@YAXPBDP6AMPAXH@Z1HH0MMUImVec2@@@Z ; ImGui::PlotLines
  02cd8	83 c4 28	 add	 esp, 40			; 00000028H

; 1133 :         ImGui::PlotHistogram("Histogram", func, NULL, display_count, 0, NULL, -1.0f, 1.0f, ImVec2(0,80));

  02cdb	51		 push	 ecx
  02cdc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  02ce4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02ce9	51		 push	 ecx
  02cea	0f 57 c0	 xorps	 xmm0, xmm0
  02ced	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02cf2	8d 8d 48 ee ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  02cf8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02cfd	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  02d00	51		 push	 ecx
  02d01	8b 10		 mov	 edx, DWORD PTR [eax]
  02d03	52		 push	 edx
  02d04	51		 push	 ecx
  02d05	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02d0d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d12	51		 push	 ecx
  02d13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  02d1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02d20	6a 00		 push	 0
  02d22	6a 00		 push	 0
  02d24	a1 00 00 00 00	 mov	 eax, DWORD PTR ?display_count@?OF@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02d29	50		 push	 eax
  02d2a	6a 00		 push	 0
  02d2c	8b 8d 80 fc ff
	ff		 mov	 ecx, DWORD PTR _func$176[ebp]
  02d32	51		 push	 ecx
  02d33	68 00 00 00 00	 push	 OFFSET ??_C@_09NBOAEPFB@Histogram@
  02d38	e8 00 00 00 00	 call	 ?PlotHistogram@ImGui@@YAXPBDP6AMPAXH@Z1HH0MMUImVec2@@@Z ; ImGui::PlotHistogram
  02d3d	83 c4 28	 add	 esp, 40			; 00000028H

; 1134 :         ImGui::Separator();

  02d40	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1135 : 
; 1136 :         // Animate a simple progress bar
; 1137 :         static float progress = 0.0f, progress_dir = 1.0f;
; 1138 :         if (animate)

  02d45	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?animate@?OF@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  02d4c	85 c0		 test	 eax, eax
  02d4e	0f 84 ac 00 00
	00		 je	 $LN158@ShowDemoWi

; 1139 :         {
; 1140 :             progress += progress_dir * 0.4f * ImGui::GetIO().DeltaTime;

  02d54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress_dir@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02d5c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  02d64	f3 0f 11 85 b8
	eb ff ff	 movss	 DWORD PTR tv5721[ebp], xmm0
  02d6c	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  02d71	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv5721[ebp]
  02d79	f3 0f 59 40 10	 mulss	 xmm0, DWORD PTR [eax+16]
  02d7e	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02d86	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0

; 1141 :             if (progress >= +1.1f) { progress = +1.1f; progress_dir *= -1.0f; }

  02d8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02d96	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f8ccccd
  02d9d	72 28		 jb	 SHORT $LN157@ShowDemoWi
  02d9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f8ccccd
  02da7	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
  02daf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress_dir@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02db7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  02dbf	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress_dir@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
$LN157@ShowDemoWi:

; 1142 :             if (progress <= -0.1f) { progress = -0.1f; progress_dir *= -1.0f; }

  02dc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  02dcf	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02dd6	72 28		 jb	 SHORT $LN158@ShowDemoWi
  02dd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bdcccccd
  02de0	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
  02de8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress_dir@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02df0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@bf800000
  02df8	f3 0f 11 05 00
	00 00 00	 movss	 DWORD PTR ?progress_dir@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA, xmm0
$LN158@ShowDemoWi:

; 1143 :         }
; 1144 : 
; 1145 :         // Typically we would use ImVec2(-1.0f,0.0f) or ImVec2(-FLT_MIN,0.0f) to use all available width,
; 1146 :         // or ImVec2(width,0.0f) for a specified width. ImVec2(0.0f,0.0f) uses ItemWidth.
; 1147 :         ImGui::ProgressBar(progress, ImVec2(0.0f,0.0f));

  02e00	6a 00		 push	 0
  02e02	51		 push	 ecx
  02e03	0f 57 c0	 xorps	 xmm0, xmm0
  02e06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e0b	51		 push	 ecx
  02e0c	0f 57 c0	 xorps	 xmm0, xmm0
  02e0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e14	8d 8d 38 ee ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  02e1a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02e1f	50		 push	 eax
  02e20	51		 push	 ecx
  02e21	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02e29	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e2e	e8 00 00 00 00	 call	 ?ProgressBar@ImGui@@YAXMABUImVec2@@PBD@Z ; ImGui::ProgressBar
  02e33	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1148 :         ImGui::SameLine(0.0f, ImGui::GetStyle().ItemInnerSpacing.x);

  02e36	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  02e3b	51		 push	 ecx
  02e3c	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  02e41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e46	51		 push	 ecx
  02e47	0f 57 c0	 xorps	 xmm0, xmm0
  02e4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02e4f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  02e54	83 c4 08	 add	 esp, 8

; 1149 :         ImGui::Text("Progress Bar");

  02e57	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HDMPBJBE@Progress?5Bar@
  02e5c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  02e61	83 c4 04	 add	 esp, 4

; 1150 : 
; 1151 :         float progress_saturated = (progress < 0.0f) ? 0.0f : (progress > 1.0f) ? 1.0f : progress;

  02e64	0f 57 c0	 xorps	 xmm0, xmm0
  02e67	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02e6e	76 0d		 jbe	 SHORT $LN247@ShowDemoWi
  02e70	0f 57 c0	 xorps	 xmm0, xmm0
  02e73	f3 0f 11 85 b8
	eb ff ff	 movss	 DWORD PTR tv1924[ebp], xmm0
  02e7b	eb 43		 jmp	 SHORT $LN248@ShowDemoWi
$LN247@ShowDemoWi:
  02e7d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02e85	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@3f800000
  02e8c	76 12		 jbe	 SHORT $LN245@ShowDemoWi
  02e8e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  02e96	f3 0f 11 85 b4
	eb ff ff	 movss	 DWORD PTR tv1923[ebp], xmm0
  02e9e	eb 10		 jmp	 SHORT $LN246@ShowDemoWi
$LN245@ShowDemoWi:
  02ea0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02ea8	f3 0f 11 85 b4
	eb ff ff	 movss	 DWORD PTR tv1923[ebp], xmm0
$LN246@ShowDemoWi:
  02eb0	f3 0f 10 85 b4
	eb ff ff	 movss	 xmm0, DWORD PTR tv1923[ebp]
  02eb8	f3 0f 11 85 b8
	eb ff ff	 movss	 DWORD PTR tv1924[ebp], xmm0
$LN248@ShowDemoWi:
  02ec0	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv1924[ebp]
  02ec8	f3 0f 11 85 74
	fc ff ff	 movss	 DWORD PTR _progress_saturated$175[ebp], xmm0

; 1152 :         char buf[32];
; 1153 :         sprintf(buf, "%d/%d", (int)(progress_saturated*1753), 1753);

  02ed0	68 d9 06 00 00	 push	 1753			; 000006d9H
  02ed5	f3 0f 10 85 74
	fc ff ff	 movss	 xmm0, DWORD PTR _progress_saturated$175[ebp]
  02edd	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@44db2000
  02ee5	f3 0f 2c c0	 cvttss2si eax, xmm0
  02ee9	50		 push	 eax
  02eea	68 00 00 00 00	 push	 OFFSET ??_C@_05LCKIIOJE@?$CFd?1?$CFd@
  02eef	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR _buf$174[ebp]
  02ef5	51		 push	 ecx
  02ef6	e8 00 00 00 00	 call	 _sprintf
  02efb	83 c4 10	 add	 esp, 16			; 00000010H

; 1154 :         ImGui::ProgressBar(progress, ImVec2(0.f,0.f), buf);

  02efe	8d 85 4c fc ff
	ff		 lea	 eax, DWORD PTR _buf$174[ebp]
  02f04	50		 push	 eax
  02f05	51		 push	 ecx
  02f06	0f 57 c0	 xorps	 xmm0, xmm0
  02f09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f0e	51		 push	 ecx
  02f0f	0f 57 c0	 xorps	 xmm0, xmm0
  02f12	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f17	8d 8d 28 ee ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  02f1d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  02f22	50		 push	 eax
  02f23	51		 push	 ecx
  02f24	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?progress@?OF@??ShowDemoWindowWidgets@@YAXXZ@4MA
  02f2c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f31	e8 00 00 00 00	 call	 ?ProgressBar@ImGui@@YAXMABUImVec2@@PBD@Z ; ImGui::ProgressBar
  02f36	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1155 :         ImGui::TreePop();

  02f39	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN153@ShowDemoWi:

; 1156 :     }
; 1157 : 
; 1158 :     if (ImGui::TreeNode("Color/Picker Widgets"))

  02f3e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@GELOCOAL@Color?1Picker?5Widgets@
  02f43	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  02f48	83 c4 04	 add	 esp, 4
  02f4b	0f b6 c0	 movzx	 eax, al
  02f4e	85 c0		 test	 eax, eax
  02f50	0f 84 22 0e 00
	00		 je	 $LN159@ShowDemoWi

; 1159 :     {
; 1160 :         static ImVec4 color = ImVec4(114.0f/255.0f, 144.0f/255.0f, 154.0f/255.0f, 200.0f/255.0f);

  02f56	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  02f5b	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  02f62	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  02f65	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS2@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02f6a	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  02f70	7e 73		 jle	 SHORT $LN48@ShowDemoWi
  02f72	68 00 00 00 00	 push	 OFFSET ?$TSS2@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02f77	e8 00 00 00 00	 call	 __Init_thread_header
  02f7c	83 c4 04	 add	 esp, 4
  02f7f	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS2@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  02f86	75 5d		 jne	 SHORT $LN48@ShowDemoWi
  02f88	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  02f8f	51		 push	 ecx
  02f90	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f48c8c9
  02f98	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02f9d	51		 push	 ecx
  02f9e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f1a9a9b
  02fa6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fab	51		 push	 ecx
  02fac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f109091
  02fb4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fb9	51		 push	 ecx
  02fba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ee4e4e5
  02fc2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  02fc7	b9 00 00 00 00	 mov	 ecx, OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  02fcc	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  02fd1	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  02fd8	68 00 00 00 00	 push	 OFFSET ?$TSS2@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  02fdd	e8 00 00 00 00	 call	 __Init_thread_footer
  02fe2	83 c4 04	 add	 esp, 4
$LN48@ShowDemoWi:

; 1161 : 
; 1162 :         static bool alpha_preview = true;
; 1163 :         static bool alpha_half_preview = false;
; 1164 :         static bool drag_and_drop = true;
; 1165 :         static bool options_menu = true;
; 1166 :         static bool hdr = false;
; 1167 :         ImGui::Checkbox("With Alpha Preview", &alpha_preview);

  02fe5	68 00 00 00 00	 push	 OFFSET ?alpha_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  02fea	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KJCAPGNJ@With?5Alpha?5Preview@
  02fef	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  02ff4	83 c4 08	 add	 esp, 8

; 1168 :         ImGui::Checkbox("With Half Alpha Preview", &alpha_half_preview);

  02ff7	68 00 00 00 00	 push	 OFFSET ?alpha_half_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  02ffc	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FJEMIBKC@With?5Half?5Alpha?5Preview@
  03001	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  03006	83 c4 08	 add	 esp, 8

; 1169 :         ImGui::Checkbox("With Drag and Drop", &drag_and_drop);

  03009	68 00 00 00 00	 push	 OFFSET ?drag_and_drop@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0300e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@KEFEHFM@With?5Drag?5and?5Drop@
  03013	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  03018	83 c4 08	 add	 esp, 8

; 1170 :         ImGui::Checkbox("With Options Menu", &options_menu); ImGui::SameLine(); HelpMarker("Right-click on the individual color widget to show options.");

  0301b	68 00 00 00 00	 push	 OFFSET ?options_menu@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03020	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EJIAMDNC@With?5Options?5Menu@
  03025	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0302a	83 c4 08	 add	 esp, 8
  0302d	51		 push	 ecx
  0302e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0303b	51		 push	 ecx
  0303c	0f 57 c0	 xorps	 xmm0, xmm0
  0303f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03044	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03049	83 c4 08	 add	 esp, 8
  0304c	68 00 00 00 00	 push	 OFFSET ??_C@_0DM@KEMLELAP@Right?9click?5on?5the?5individual?5c@
  03051	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  03056	83 c4 04	 add	 esp, 4

; 1171 :         ImGui::Checkbox("With HDR", &hdr); ImGui::SameLine(); HelpMarker("Currently all this does is to lift the 0..1 limits on dragging widgets.");

  03059	68 00 00 00 00	 push	 OFFSET ?hdr@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0305e	68 00 00 00 00	 push	 OFFSET ??_C@_08FMJOEAGN@With?5HDR@
  03063	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  03068	83 c4 08	 add	 esp, 8
  0306b	51		 push	 ecx
  0306c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03074	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03079	51		 push	 ecx
  0307a	0f 57 c0	 xorps	 xmm0, xmm0
  0307d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03082	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03087	83 c4 08	 add	 esp, 8
  0308a	68 00 00 00 00	 push	 OFFSET ??_C@_0EI@FHFBEIHN@Currently?5all?5this?5does?5is?5to?5l@
  0308f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  03094	83 c4 04	 add	 esp, 4

; 1172 :         ImGuiColorEditFlags misc_flags = (hdr ? ImGuiColorEditFlags_HDR : 0) | (drag_and_drop ? 0 : ImGuiColorEditFlags_NoDragDrop) | (alpha_half_preview ? ImGuiColorEditFlags_AlphaPreviewHalf : (alpha_preview ? ImGuiColorEditFlags_AlphaPreview : 0)) | (options_menu ? 0 : ImGuiColorEditFlags_NoOptions);

  03097	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?hdr@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0309e	85 c0		 test	 eax, eax
  030a0	74 0c		 je	 SHORT $LN249@ShowDemoWi
  030a2	c7 85 b8 eb ff
	ff 00 00 08 00	 mov	 DWORD PTR tv1974[ebp], 524288 ; 00080000H
  030ac	eb 0a		 jmp	 SHORT $LN250@ShowDemoWi
$LN249@ShowDemoWi:
  030ae	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1974[ebp], 0
$LN250@ShowDemoWi:
  030b8	0f b6 0d 00 00
	00 00		 movzx	 ecx, BYTE PTR ?drag_and_drop@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  030bf	85 c9		 test	 ecx, ecx
  030c1	74 0c		 je	 SHORT $LN251@ShowDemoWi
  030c3	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1977[ebp], 0
  030cd	eb 0a		 jmp	 SHORT $LN252@ShowDemoWi
$LN251@ShowDemoWi:
  030cf	c7 85 b4 eb ff
	ff 00 02 00 00	 mov	 DWORD PTR tv1977[ebp], 512 ; 00000200H
$LN252@ShowDemoWi:
  030d9	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?alpha_half_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  030e0	85 d2		 test	 edx, edx
  030e2	74 0c		 je	 SHORT $LN255@ShowDemoWi
  030e4	c7 85 b0 eb ff
	ff 00 00 04 00	 mov	 DWORD PTR tv2016[ebp], 262144 ; 00040000H
  030ee	eb 2d		 jmp	 SHORT $LN256@ShowDemoWi
$LN255@ShowDemoWi:
  030f0	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  030f7	85 c0		 test	 eax, eax
  030f9	74 0c		 je	 SHORT $LN253@ShowDemoWi
  030fb	c7 85 ac eb ff
	ff 00 00 02 00	 mov	 DWORD PTR tv1981[ebp], 131072 ; 00020000H
  03105	eb 0a		 jmp	 SHORT $LN254@ShowDemoWi
$LN253@ShowDemoWi:
  03107	c7 85 ac eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv1981[ebp], 0
$LN254@ShowDemoWi:
  03111	8b 8d ac eb ff
	ff		 mov	 ecx, DWORD PTR tv1981[ebp]
  03117	89 8d b0 eb ff
	ff		 mov	 DWORD PTR tv2016[ebp], ecx
$LN256@ShowDemoWi:
  0311d	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?options_menu@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03124	85 d2		 test	 edx, edx
  03126	74 0c		 je	 SHORT $LN257@ShowDemoWi
  03128	c7 85 a8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2020[ebp], 0
  03132	eb 0a		 jmp	 SHORT $LN258@ShowDemoWi
$LN257@ShowDemoWi:
  03134	c7 85 a8 eb ff
	ff 08 00 00 00	 mov	 DWORD PTR tv2020[ebp], 8
$LN258@ShowDemoWi:
  0313e	8b 85 b8 eb ff
	ff		 mov	 eax, DWORD PTR tv1974[ebp]
  03144	0b 85 b4 eb ff
	ff		 or	 eax, DWORD PTR tv1977[ebp]
  0314a	0b 85 b0 eb ff
	ff		 or	 eax, DWORD PTR tv2016[ebp]
  03150	0b 85 a8 eb ff
	ff		 or	 eax, DWORD PTR tv2020[ebp]
  03156	89 85 40 fc ff
	ff		 mov	 DWORD PTR _misc_flags$173[ebp], eax

; 1173 : 
; 1174 :         ImGui::Text("Color widget:");

  0315c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NOEDKBGC@Color?5widget?3@
  03161	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03166	83 c4 04	 add	 esp, 4

; 1175 :         ImGui::SameLine(); HelpMarker("Click on the colored square to open a color picker.\nCTRL+click on individual component to input value.\n");

  03169	51		 push	 ecx
  0316a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03172	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03177	51		 push	 ecx
  03178	0f 57 c0	 xorps	 xmm0, xmm0
  0317b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03180	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03185	83 c4 08	 add	 esp, 8
  03188	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@PMPMCJLF@Click?5on?5the?5colored?5square?5to?5@
  0318d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  03192	83 c4 04	 add	 esp, 4

; 1176 :         ImGui::ColorEdit3("MyColor##1", (float*)&color, misc_flags);

  03195	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  0319b	50		 push	 eax
  0319c	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  031a1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@BFFLOOBG@MyColor?$CD?$CD1@
  031a6	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit3
  031ab	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1177 : 
; 1178 :         ImGui::Text("Color widget HSV with Alpha:");

  031ae	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@GLLLKGMC@Color?5widget?5HSV?5with?5Alpha?3@
  031b3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  031b8	83 c4 04	 add	 esp, 4

; 1179 :         ImGui::ColorEdit4("MyColor##2", (float*)&color, ImGuiColorEditFlags_DisplayHSV | misc_flags);

  031bb	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  031c1	0d 00 00 20 00	 or	 eax, 2097152		; 00200000H
  031c6	50		 push	 eax
  031c7	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  031cc	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DOHGLNNF@MyColor?$CD?$CD2@
  031d1	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  031d6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1180 : 
; 1181 :         ImGui::Text("Color widget with Float Display:");

  031d9	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@GHOEMJO@Color?5widget?5with?5Float?5Display@
  031de	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  031e3	83 c4 04	 add	 esp, 4

; 1182 :         ImGui::ColorEdit4("MyColor##2f", (float*)&color, ImGuiColorEditFlags_Float | misc_flags);

  031e6	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  031ec	0d 00 00 00 01	 or	 eax, 16777216		; 01000000H
  031f1	50		 push	 eax
  031f2	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  031f7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MFCAJMMH@MyColor?$CD?$CD2f@
  031fc	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  03201	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1183 : 
; 1184 :         ImGui::Text("Color button with Picker:");

  03204	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EFMOKOBO@Color?5button?5with?5Picker?3@
  03209	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0320e	83 c4 04	 add	 esp, 4

; 1185 :         ImGui::SameLine(); HelpMarker("With the ImGuiColorEditFlags_NoInputs flag you can hide all the slider/text inputs.\nWith the ImGuiColorEditFlags_NoLabel flag you can pass a non-empty label which will only be used for the tooltip and picker popup.");

  03211	51		 push	 ecx
  03212	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0321a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0321f	51		 push	 ecx
  03220	0f 57 c0	 xorps	 xmm0, xmm0
  03223	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03228	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0322d	83 c4 08	 add	 esp, 8
  03230	68 00 00 00 00	 push	 OFFSET ??_C@_0NH@CMBOCHE@With?5the?5ImGuiColorEditFlags_No@
  03235	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  0323a	83 c4 04	 add	 esp, 4

; 1186 :         ImGui::ColorEdit4("MyColor##3", (float*)&color, ImGuiColorEditFlags_NoInputs | ImGuiColorEditFlags_NoLabel | misc_flags);

  0323d	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  03243	0d a0 00 00 00	 or	 eax, 160		; 000000a0H
  03248	50		 push	 eax
  03249	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  0324e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CHGNIMJE@MyColor?$CD?$CD3@
  03253	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  03258	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1187 : 
; 1188 :         ImGui::Text("Color button with Custom Picker Popup:");

  0325b	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@HJNHAHAP@Color?5button?5with?5Custom?5Picker@
  03260	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03265	83 c4 04	 add	 esp, 4

; 1189 : 
; 1190 :         // Generate a dummy default palette. The palette will persist and can be edited.
; 1191 :         static bool saved_palette_init = true;
; 1192 :         static ImVec4 saved_palette[32] = {};

  03268	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0326d	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  03274	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  03277	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS3@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0327c	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  03282	7e 32		 jle	 SHORT $LN49@ShowDemoWi
  03284	68 00 00 00 00	 push	 OFFSET ?$TSS3@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03289	e8 00 00 00 00	 call	 __Init_thread_header
  0328e	83 c4 04	 add	 esp, 4
  03291	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS3@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  03298	75 1c		 jne	 SHORT $LN49@ShowDemoWi
  0329a	6a 20		 push	 32			; 00000020H
  0329c	68 00 00 00 00	 push	 OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  032a1	e8 00 00 00 00	 call	 ??$__builtin_array_init_helper@UImVec4@@@@YAXPAUImVec4@@I@Z ; __builtin_array_init_helper<ImVec4>
  032a6	83 c4 08	 add	 esp, 8
  032a9	68 00 00 00 00	 push	 OFFSET ?$TSS3@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  032ae	e8 00 00 00 00	 call	 __Init_thread_footer
  032b3	83 c4 04	 add	 esp, 4
$LN49@ShowDemoWi:

; 1193 :         if (saved_palette_init)

  032b6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?saved_palette_init@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  032bd	85 c0		 test	 eax, eax
  032bf	0f 84 b6 00 00
	00		 je	 $LN160@ShowDemoWi

; 1194 :         {
; 1195 :             for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)

  032c5	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$172[ebp], 0
  032cf	eb 0f		 jmp	 SHORT $LN52@ShowDemoWi
$LN50@ShowDemoWi:
  032d1	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR _n$172[ebp]
  032d7	83 c0 01	 add	 eax, 1
  032da	89 85 34 fc ff
	ff		 mov	 DWORD PTR _n$172[ebp], eax
$LN52@ShowDemoWi:
  032e0	83 bd 34 fc ff
	ff 20		 cmp	 DWORD PTR _n$172[ebp], 32 ; 00000020H
  032e7	0f 8d 87 00 00
	00		 jge	 $LN51@ShowDemoWi

; 1196 :             {
; 1197 :                 ImGui::ColorConvertHSVtoRGB(n / 31.0f, 0.8f, 0.8f, saved_palette[n].x, saved_palette[n].y, saved_palette[n].z);

  032ed	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR _n$172[ebp]
  032f3	c1 e0 04	 shl	 eax, 4
  032f6	05 08 00 00 00	 add	 eax, OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A+8
  032fb	50		 push	 eax
  032fc	8b 8d 34 fc ff
	ff		 mov	 ecx, DWORD PTR _n$172[ebp]
  03302	c1 e1 04	 shl	 ecx, 4
  03305	81 c1 04 00 00
	00		 add	 ecx, OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A+4
  0330b	51		 push	 ecx
  0330c	8b 95 34 fc ff
	ff		 mov	 edx, DWORD PTR _n$172[ebp]
  03312	c1 e2 04	 shl	 edx, 4
  03315	81 c2 00 00 00
	00		 add	 edx, OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  0331b	52		 push	 edx
  0331c	51		 push	 ecx
  0331d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  03325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0332a	51		 push	 ecx
  0332b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f4ccccd
  03333	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03338	f3 0f 2a 85 34
	fc ff ff	 cvtsi2ss xmm0, DWORD PTR _n$172[ebp]
  03340	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@41f80000
  03348	51		 push	 ecx
  03349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0334e	e8 00 00 00 00	 call	 ?ColorConvertHSVtoRGB@ImGui@@YAXMMMAAM00@Z ; ImGui::ColorConvertHSVtoRGB
  03353	83 c4 18	 add	 esp, 24			; 00000018H

; 1198 :                 saved_palette[n].w = 1.0f; // Alpha

  03356	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR _n$172[ebp]
  0335c	c1 e0 04	 shl	 eax, 4
  0335f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03367	f3 0f 11 80 0c
	00 00 00	 movss	 DWORD PTR ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A[eax+12], xmm0

; 1199 :             }

  0336f	e9 5d ff ff ff	 jmp	 $LN50@ShowDemoWi
$LN51@ShowDemoWi:

; 1200 :             saved_palette_init = false;

  03374	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?saved_palette_init@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA, 0
$LN160@ShowDemoWi:

; 1201 :         }
; 1202 : 
; 1203 :         static ImVec4 backup_color;

  0337b	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  03380	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  03387	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0338a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS4@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0338f	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  03395	7e 3b		 jle	 SHORT $LN53@ShowDemoWi
  03397	68 00 00 00 00	 push	 OFFSET ?$TSS4@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0339c	e8 00 00 00 00	 call	 __Init_thread_header
  033a1	83 c4 04	 add	 esp, 4
  033a4	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS4@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  033ab	75 25		 jne	 SHORT $LN53@ShowDemoWi
  033ad	c7 45 fc 02 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 2
  033b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  033b9	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@XZ	; ImVec4::ImVec4
  033be	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  033c5	68 00 00 00 00	 push	 OFFSET ?$TSS4@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  033ca	e8 00 00 00 00	 call	 __Init_thread_footer
  033cf	83 c4 04	 add	 esp, 4
$LN53@ShowDemoWi:

; 1204 :         bool open_popup = ImGui::ColorButton("MyColor##3b", color, misc_flags);

  033d2	51		 push	 ecx
  033d3	0f 57 c0	 xorps	 xmm0, xmm0
  033d6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033db	51		 push	 ecx
  033dc	0f 57 c0	 xorps	 xmm0, xmm0
  033df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  033e4	8d 8d 18 ee ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  033ea	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  033ef	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  033f2	51		 push	 ecx
  033f3	8b 10		 mov	 edx, DWORD PTR [eax]
  033f5	52		 push	 edx
  033f6	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  033fc	50		 push	 eax
  033fd	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03402	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KAIODDPE@MyColor?$CD?$CD3b@
  03407	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPBDABUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
  0340c	83 c4 14	 add	 esp, 20			; 00000014H
  0340f	88 85 2b fc ff
	ff		 mov	 BYTE PTR _open_popup$171[ebp], al

; 1205 :         ImGui::SameLine(0, ImGui::GetStyle().ItemInnerSpacing.x);

  03415	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  0341a	51		 push	 ecx
  0341b	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  03420	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03425	51		 push	 ecx
  03426	0f 57 c0	 xorps	 xmm0, xmm0
  03429	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0342e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03433	83 c4 08	 add	 esp, 8

; 1206 :         open_popup |= ImGui::Button("Palette");

  03436	0f b6 9d 2b fc
	ff ff		 movzx	 ebx, BYTE PTR _open_popup$171[ebp]
  0343d	51		 push	 ecx
  0343e	0f 57 c0	 xorps	 xmm0, xmm0
  03441	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03446	51		 push	 ecx
  03447	0f 57 c0	 xorps	 xmm0, xmm0
  0344a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0344f	8d 8d 08 ee ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  03455	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0345a	50		 push	 eax
  0345b	68 00 00 00 00	 push	 OFFSET ??_C@_07GDPBMLLI@Palette@
  03460	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  03465	83 c4 08	 add	 esp, 8
  03468	0f b6 c0	 movzx	 eax, al
  0346b	0b d8		 or	 ebx, eax
  0346d	88 9d 2b fc ff
	ff		 mov	 BYTE PTR _open_popup$171[ebp], bl

; 1207 :         if (open_popup)

  03473	0f b6 85 2b fc
	ff ff		 movzx	 eax, BYTE PTR _open_popup$171[ebp]
  0347a	85 c0		 test	 eax, eax
  0347c	74 39		 je	 SHORT $LN161@ShowDemoWi

; 1208 :         {
; 1209 :             ImGui::OpenPopup("mypicker");

  0347e	68 00 00 00 00	 push	 OFFSET ??_C@_08KFPGOGIA@mypicker@
  03483	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  03488	83 c4 04	 add	 esp, 4

; 1210 :             backup_color = color;

  0348b	a1 00 00 00 00	 mov	 eax, DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03490	a3 00 00 00 00	 mov	 DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A, eax
  03495	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+4
  0349b	89 0d 04 00 00
	00		 mov	 DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+4, ecx
  034a1	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+8
  034a7	89 15 08 00 00
	00		 mov	 DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+8, edx
  034ad	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12
  034b2	a3 0c 00 00 00	 mov	 DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12, eax
$LN161@ShowDemoWi:

; 1211 :         }
; 1212 :         if (ImGui::BeginPopup("mypicker"))

  034b7	6a 00		 push	 0
  034b9	68 00 00 00 00	 push	 OFFSET ??_C@_08KFPGOGIA@mypicker@
  034be	e8 00 00 00 00	 call	 ?BeginPopup@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopup
  034c3	83 c4 08	 add	 esp, 8
  034c6	0f b6 c0	 movzx	 eax, al
  034c9	85 c0		 test	 eax, eax
  034cb	0f 84 33 03 00
	00		 je	 $LN162@ShowDemoWi

; 1213 :         {
; 1214 :             ImGui::Text("MY CUSTOM COLOR PICKER WITH AN AMAZING PALETTE!");

  034d1	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@DKOICBGC@MY?5CUSTOM?5COLOR?5PICKER?5WITH?5AN?5@
  034d6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  034db	83 c4 04	 add	 esp, 4

; 1215 :             ImGui::Separator();

  034de	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1216 :             ImGui::ColorPicker4("##picker", (float*)&color, misc_flags | ImGuiColorEditFlags_NoSidePreview | ImGuiColorEditFlags_NoSmallPreview);

  034e3	6a 00		 push	 0
  034e5	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  034eb	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  034f0	83 c8 10	 or	 eax, 16			; 00000010H
  034f3	50		 push	 eax
  034f4	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  034f9	68 00 00 00 00	 push	 OFFSET ??_C@_08HHEANBBL@?$CD?$CDpicker@
  034fe	e8 00 00 00 00	 call	 ?ColorPicker4@ImGui@@YA_NPBDQAMHPBM@Z ; ImGui::ColorPicker4
  03503	83 c4 10	 add	 esp, 16			; 00000010H

; 1217 :             ImGui::SameLine();

  03506	51		 push	 ecx
  03507	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0350f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03514	51		 push	 ecx
  03515	0f 57 c0	 xorps	 xmm0, xmm0
  03518	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0351d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03522	83 c4 08	 add	 esp, 8

; 1218 : 
; 1219 :             ImGui::BeginGroup(); // Lock X position

  03525	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 1220 :             ImGui::Text("Current");

  0352a	68 00 00 00 00	 push	 OFFSET ??_C@_07EDIFFIJI@Current@
  0352f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03534	83 c4 04	 add	 esp, 4

; 1221 :             ImGui::ColorButton("##current", color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60,40));

  03537	51		 push	 ecx
  03538	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42200000
  03540	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03545	51		 push	 ecx
  03546	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  0354e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03553	8d 8d f8 ed ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  03559	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0355e	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  03561	51		 push	 ecx
  03562	8b 10		 mov	 edx, DWORD PTR [eax]
  03564	52		 push	 edx
  03565	68 04 00 04 00	 push	 262148			; 00040004H
  0356a	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  0356f	68 00 00 00 00	 push	 OFFSET ??_C@_09CDENILGE@?$CD?$CDcurrent@
  03574	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPBDABUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
  03579	83 c4 14	 add	 esp, 20			; 00000014H

; 1222 :             ImGui::Text("Previous");

  0357c	68 00 00 00 00	 push	 OFFSET ??_C@_08CAGLMDLD@Previous@
  03581	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03586	83 c4 04	 add	 esp, 4

; 1223 :             if (ImGui::ColorButton("##previous", backup_color, ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_AlphaPreviewHalf, ImVec2(60,40)))

  03589	51		 push	 ecx
  0358a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42200000
  03592	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03597	51		 push	 ecx
  03598	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  035a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  035a5	8d 8d e8 ed ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  035ab	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  035b0	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  035b3	51		 push	 ecx
  035b4	8b 10		 mov	 edx, DWORD PTR [eax]
  035b6	52		 push	 edx
  035b7	68 04 00 04 00	 push	 262148			; 00040004H
  035bc	68 00 00 00 00	 push	 OFFSET ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  035c1	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JEAALFFH@?$CD?$CDprevious@
  035c6	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPBDABUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
  035cb	83 c4 14	 add	 esp, 20			; 00000014H
  035ce	0f b6 c0	 movzx	 eax, al
  035d1	85 c0		 test	 eax, eax
  035d3	74 2c		 je	 SHORT $LN163@ShowDemoWi

; 1224 :                 color = backup_color;

  035d5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  035da	a3 00 00 00 00	 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A, eax
  035df	8b 0d 04 00 00
	00		 mov	 ecx, DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+4
  035e5	89 0d 04 00 00
	00		 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+4, ecx
  035eb	8b 15 08 00 00
	00		 mov	 edx, DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+8
  035f1	89 15 08 00 00
	00		 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+8, edx
  035f7	a1 0c 00 00 00	 mov	 eax, DWORD PTR ?backup_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12
  035fc	a3 0c 00 00 00	 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12, eax
$LN163@ShowDemoWi:

; 1225 :             ImGui::Separator();

  03601	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 1226 :             ImGui::Text("Palette");

  03606	68 00 00 00 00	 push	 OFFSET ??_C@_07GDPBMLLI@Palette@
  0360b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03610	83 c4 04	 add	 esp, 4

; 1227 :             for (int n = 0; n < IM_ARRAYSIZE(saved_palette); n++)

  03613	c7 85 1c fc ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$170[ebp], 0
  0361d	eb 0f		 jmp	 SHORT $LN56@ShowDemoWi
$LN54@ShowDemoWi:
  0361f	8b 85 1c fc ff
	ff		 mov	 eax, DWORD PTR _n$170[ebp]
  03625	83 c0 01	 add	 eax, 1
  03628	89 85 1c fc ff
	ff		 mov	 DWORD PTR _n$170[ebp], eax
$LN56@ShowDemoWi:
  0362e	83 bd 1c fc ff
	ff 20		 cmp	 DWORD PTR _n$170[ebp], 32 ; 00000020H
  03635	0f 8d bf 01 00
	00		 jge	 $LN55@ShowDemoWi

; 1228 :             {
; 1229 :                 ImGui::PushID(n);

  0363b	8b 85 1c fc ff
	ff		 mov	 eax, DWORD PTR _n$170[ebp]
  03641	50		 push	 eax
  03642	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  03647	83 c4 04	 add	 esp, 4

; 1230 :                 if ((n % 8) != 0)

  0364a	8b 85 1c fc ff
	ff		 mov	 eax, DWORD PTR _n$170[ebp]
  03650	25 07 00 00 80	 and	 eax, -2147483641	; 80000007H
  03655	79 05		 jns	 SHORT $LN410@ShowDemoWi
  03657	48		 dec	 eax
  03658	83 c8 f8	 or	 eax, -8			; fffffff8H
  0365b	40		 inc	 eax
$LN410@ShowDemoWi:
  0365c	85 c0		 test	 eax, eax
  0365e	74 21		 je	 SHORT $LN164@ShowDemoWi

; 1231 :                     ImGui::SameLine(0.0f, ImGui::GetStyle().ItemSpacing.y);

  03660	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  03665	51		 push	 ecx
  03666	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  0366b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03670	51		 push	 ecx
  03671	0f 57 c0	 xorps	 xmm0, xmm0
  03674	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03679	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0367e	83 c4 08	 add	 esp, 8
$LN164@ShowDemoWi:

; 1232 :                 if (ImGui::ColorButton("##palette", saved_palette[n], ImGuiColorEditFlags_NoAlpha | ImGuiColorEditFlags_NoPicker | ImGuiColorEditFlags_NoTooltip, ImVec2(20,20)))

  03681	51		 push	 ecx
  03682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  0368a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0368f	51		 push	 ecx
  03690	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  03698	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0369d	8d 8d d8 ed ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  036a3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  036a8	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  036ab	51		 push	 ecx
  036ac	8b 10		 mov	 edx, DWORD PTR [eax]
  036ae	52		 push	 edx
  036af	6a 46		 push	 70			; 00000046H
  036b1	8b 85 1c fc ff
	ff		 mov	 eax, DWORD PTR _n$170[ebp]
  036b7	c1 e0 04	 shl	 eax, 4
  036ba	05 00 00 00 00	 add	 eax, OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  036bf	50		 push	 eax
  036c0	68 00 00 00 00	 push	 OFFSET ??_C@_09DDJBIEE@?$CD?$CDpalette@
  036c5	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPBDABUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
  036ca	83 c4 14	 add	 esp, 20			; 00000014H
  036cd	0f b6 c8	 movzx	 ecx, al
  036d0	85 c9		 test	 ecx, ecx
  036d2	0f 84 81 00 00
	00		 je	 $LN165@ShowDemoWi

; 1233 :                     color = ImVec4(saved_palette[n].x, saved_palette[n].y, saved_palette[n].z, color.w); // Preserve alpha!

  036d8	51		 push	 ecx
  036d9	f3 0f 10 05 0c
	00 00 00	 movss	 xmm0, DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12
  036e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036e6	8b 85 1c fc ff
	ff		 mov	 eax, DWORD PTR _n$170[ebp]
  036ec	c1 e0 04	 shl	 eax, 4
  036ef	51		 push	 ecx
  036f0	f3 0f 10 80 08
	00 00 00	 movss	 xmm0, DWORD PTR ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A[eax+8]
  036f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  036fd	8b 8d 1c fc ff
	ff		 mov	 ecx, DWORD PTR _n$170[ebp]
  03703	c1 e1 04	 shl	 ecx, 4
  03706	51		 push	 ecx
  03707	f3 0f 10 81 04
	00 00 00	 movss	 xmm0, DWORD PTR ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A[ecx+4]
  0370f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03714	8b 95 1c fc ff
	ff		 mov	 edx, DWORD PTR _n$170[ebp]
  0371a	c1 e2 04	 shl	 edx, 4
  0371d	51		 push	 ecx
  0371e	f3 0f 10 82 00
	00 00 00	 movss	 xmm0, DWORD PTR ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A[edx]
  03726	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0372b	8d 8d c0 ed ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  03731	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  03736	8b 08		 mov	 ecx, DWORD PTR [eax]
  03738	89 0d 00 00 00
	00		 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A, ecx
  0373e	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  03741	89 15 04 00 00
	00		 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+4, edx
  03747	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0374a	89 0d 08 00 00
	00		 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+8, ecx
  03750	8b 50 0c	 mov	 edx, DWORD PTR [eax+12]
  03753	89 15 0c 00 00
	00		 mov	 DWORD PTR ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A+12, edx
$LN165@ShowDemoWi:

; 1234 : 
; 1235 :                 // Allow user to drop colors into each palette entry
; 1236 :                 // (Note that ColorButton is already a drag source by default, unless using ImGuiColorEditFlags_NoDragDrop)
; 1237 :                 if (ImGui::BeginDragDropTarget())

  03759	e8 00 00 00 00	 call	 ?BeginDragDropTarget@ImGui@@YA_NXZ ; ImGui::BeginDragDropTarget
  0375e	0f b6 c0	 movzx	 eax, al
  03761	85 c0		 test	 eax, eax
  03763	0f 84 87 00 00
	00		 je	 $LN166@ShowDemoWi

; 1238 :                 {
; 1239 :                     if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_3F))

  03769	6a 00		 push	 0
  0376b	68 00 00 00 00	 push	 OFFSET ??_C@_06LFKNFKEK@_COL3F@
  03770	e8 00 00 00 00	 call	 ?AcceptDragDropPayload@ImGui@@YAPBUImGuiPayload@@PBDH@Z ; ImGui::AcceptDragDropPayload
  03775	83 c4 08	 add	 esp, 8
  03778	89 85 10 fc ff
	ff		 mov	 DWORD PTR _payload$169[ebp], eax
  0377e	83 bd 10 fc ff
	ff 00		 cmp	 DWORD PTR _payload$169[ebp], 0
  03785	74 23		 je	 SHORT $LN167@ShowDemoWi

; 1240 :                         memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 3);

  03787	6a 0c		 push	 12			; 0000000cH
  03789	8b 85 10 fc ff
	ff		 mov	 eax, DWORD PTR _payload$169[ebp]
  0378f	8b 08		 mov	 ecx, DWORD PTR [eax]
  03791	51		 push	 ecx
  03792	8b 95 1c fc ff
	ff		 mov	 edx, DWORD PTR _n$170[ebp]
  03798	c1 e2 04	 shl	 edx, 4
  0379b	81 c2 00 00 00
	00		 add	 edx, OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  037a1	52		 push	 edx
  037a2	e8 00 00 00 00	 call	 _memcpy
  037a7	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN167@ShowDemoWi:

; 1241 :                     if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload(IMGUI_PAYLOAD_TYPE_COLOR_4F))

  037aa	6a 00		 push	 0
  037ac	68 00 00 00 00	 push	 OFFSET ??_C@_06LAOCEMMP@_COL4F@
  037b1	e8 00 00 00 00	 call	 ?AcceptDragDropPayload@ImGui@@YAPBUImGuiPayload@@PBDH@Z ; ImGui::AcceptDragDropPayload
  037b6	83 c4 08	 add	 esp, 8
  037b9	89 85 04 fc ff
	ff		 mov	 DWORD PTR _payload$168[ebp], eax
  037bf	83 bd 04 fc ff
	ff 00		 cmp	 DWORD PTR _payload$168[ebp], 0
  037c6	74 23		 je	 SHORT $LN168@ShowDemoWi

; 1242 :                         memcpy((float*)&saved_palette[n], payload->Data, sizeof(float) * 4);

  037c8	6a 10		 push	 16			; 00000010H
  037ca	8b 85 04 fc ff
	ff		 mov	 eax, DWORD PTR _payload$168[ebp]
  037d0	8b 08		 mov	 ecx, DWORD PTR [eax]
  037d2	51		 push	 ecx
  037d3	8b 95 1c fc ff
	ff		 mov	 edx, DWORD PTR _n$170[ebp]
  037d9	c1 e2 04	 shl	 edx, 4
  037dc	81 c2 00 00 00
	00		 add	 edx, OFFSET ?saved_palette@?PH@??ShowDemoWindowWidgets@@YAXXZ@4PAUImVec4@@A
  037e2	52		 push	 edx
  037e3	e8 00 00 00 00	 call	 _memcpy
  037e8	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN168@ShowDemoWi:

; 1243 :                     ImGui::EndDragDropTarget();

  037eb	e8 00 00 00 00	 call	 ?EndDragDropTarget@ImGui@@YAXXZ ; ImGui::EndDragDropTarget
$LN166@ShowDemoWi:

; 1244 :                 }
; 1245 : 
; 1246 :                 ImGui::PopID();

  037f0	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1247 :             }

  037f5	e9 25 fe ff ff	 jmp	 $LN54@ShowDemoWi
$LN55@ShowDemoWi:

; 1248 :             ImGui::EndGroup();

  037fa	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 1249 :             ImGui::EndPopup();

  037ff	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN162@ShowDemoWi:

; 1250 :         }
; 1251 : 
; 1252 :         ImGui::Text("Color button only:");

  03804	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@NCDFBPJC@Color?5button?5only?3@
  03809	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0380e	83 c4 04	 add	 esp, 4

; 1253 :         ImGui::ColorButton("MyColor##3c", *(ImVec4*)&color, misc_flags, ImVec2(80,80));

  03811	51		 push	 ecx
  03812	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  0381a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0381f	51		 push	 ecx
  03820	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  03828	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0382d	8d 8d b0 ed ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  03833	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03838	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  0383b	51		 push	 ecx
  0383c	8b 10		 mov	 edx, DWORD PTR [eax]
  0383e	52		 push	 edx
  0383f	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  03845	50		 push	 eax
  03846	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  0384b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LJJFACLF@MyColor?$CD?$CD3c@
  03850	e8 00 00 00 00	 call	 ?ColorButton@ImGui@@YA_NPBDABUImVec4@@HUImVec2@@@Z ; ImGui::ColorButton
  03855	83 c4 14	 add	 esp, 20			; 00000014H

; 1254 : 
; 1255 :         ImGui::Text("Color picker:");

  03858	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IPOAJHA@Color?5picker?3@
  0385d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03862	83 c4 04	 add	 esp, 4

; 1256 :         static bool alpha = true;
; 1257 :         static bool alpha_bar = true;
; 1258 :         static bool side_preview = true;
; 1259 :         static bool ref_color = false;
; 1260 :         static ImVec4 ref_color_v(1.0f,0.0f,1.0f,0.5f);

  03865	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0386a	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  03871	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  03874	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS5@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03879	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0387f	7e 6e		 jle	 SHORT $LN57@ShowDemoWi
  03881	68 00 00 00 00	 push	 OFFSET ?$TSS5@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03886	e8 00 00 00 00	 call	 __Init_thread_header
  0388b	83 c4 04	 add	 esp, 4
  0388e	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS5@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  03895	75 58		 jne	 SHORT $LN57@ShowDemoWi
  03897	c7 45 fc 03 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 3
  0389e	51		 push	 ecx
  0389f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  038a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038ac	51		 push	 ecx
  038ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  038b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038ba	51		 push	 ecx
  038bb	0f 57 c0	 xorps	 xmm0, xmm0
  038be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038c3	51		 push	 ecx
  038c4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  038cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  038d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?ref_color_v@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  038d6	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  038db	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  038e2	68 00 00 00 00	 push	 OFFSET ?$TSS5@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  038e7	e8 00 00 00 00	 call	 __Init_thread_footer
  038ec	83 c4 04	 add	 esp, 4
$LN57@ShowDemoWi:

; 1261 :         static int display_mode = 0;
; 1262 :         static int picker_mode = 0;
; 1263 :         ImGui::Checkbox("With Alpha", &alpha);

  038ef	68 00 00 00 00	 push	 OFFSET ?alpha@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  038f4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@EACIJKCC@With?5Alpha@
  038f9	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  038fe	83 c4 08	 add	 esp, 8

; 1264 :         ImGui::Checkbox("With Alpha Bar", &alpha_bar);

  03901	68 00 00 00 00	 push	 OFFSET ?alpha_bar@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03906	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HFPOLAHI@With?5Alpha?5Bar@
  0390b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  03910	83 c4 08	 add	 esp, 8

; 1265 :         ImGui::Checkbox("With Side Preview", &side_preview);

  03913	68 00 00 00 00	 push	 OFFSET ?side_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03918	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IIIMIJGF@With?5Side?5Preview@
  0391d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  03922	83 c4 08	 add	 esp, 8

; 1266 :         if (side_preview)

  03925	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?side_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0392c	85 c0		 test	 eax, eax
  0392e	74 77		 je	 SHORT $LN170@ShowDemoWi

; 1267 :         {
; 1268 :             ImGui::SameLine();

  03930	51		 push	 ecx
  03931	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03939	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0393e	51		 push	 ecx
  0393f	0f 57 c0	 xorps	 xmm0, xmm0
  03942	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03947	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0394c	83 c4 08	 add	 esp, 8

; 1269 :             ImGui::Checkbox("With Ref Color", &ref_color);

  0394f	68 00 00 00 00	 push	 OFFSET ?ref_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03954	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CEAKBNI@With?5Ref?5Color@
  03959	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0395e	83 c4 08	 add	 esp, 8

; 1270 :             if (ref_color)

  03961	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ref_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03968	85 c0		 test	 eax, eax
  0396a	74 3b		 je	 SHORT $LN170@ShowDemoWi

; 1271 :             {
; 1272 :                 ImGui::SameLine();

  0396c	51		 push	 ecx
  0396d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03975	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0397a	51		 push	 ecx
  0397b	0f 57 c0	 xorps	 xmm0, xmm0
  0397e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03983	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03988	83 c4 08	 add	 esp, 8

; 1273 :                 ImGui::ColorEdit4("##RefColor", &ref_color_v.x, ImGuiColorEditFlags_NoInputs | misc_flags);

  0398b	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  03991	83 c8 20	 or	 eax, 32			; 00000020H
  03994	50		 push	 eax
  03995	68 00 00 00 00	 push	 OFFSET ?ref_color_v@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  0399a	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LOHJOGGK@?$CD?$CDRefColor@
  0399f	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  039a4	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN170@ShowDemoWi:

; 1274 :             }
; 1275 :         }
; 1276 :         ImGui::Combo("Display Mode", &display_mode, "Auto/Current\0None\0RGB Only\0HSV Only\0Hex Only\0");

  039a7	6a ff		 push	 -1
  039a9	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@EADBOKOE@Auto?1Current?$AANone?$AARGB?5Only?$AAHSV?5@
  039ae	68 00 00 00 00	 push	 OFFSET ?display_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  039b3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OFPFGAFL@Display?5Mode@
  039b8	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  039bd	83 c4 10	 add	 esp, 16			; 00000010H

; 1277 :         ImGui::SameLine(); HelpMarker("ColorEdit defaults to displaying RGB inputs if you don't specify a display mode, but the user can change it with a right-click.\n\nColorPicker defaults to displaying RGB+HSV+Hex if you don't specify a display mode.\n\nYou can change the defaults using SetColorEditOptions().");

  039c0	51		 push	 ecx
  039c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  039c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039ce	51		 push	 ecx
  039cf	0f 57 c0	 xorps	 xmm0, xmm0
  039d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  039d7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  039dc	83 c4 08	 add	 esp, 8
  039df	68 00 00 00 00	 push	 OFFSET ??_C@_0BAP@CCFGMMGB@ColorEdit?5defaults?5to?5displayin@
  039e4	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  039e9	83 c4 04	 add	 esp, 4

; 1278 :         ImGui::Combo("Picker Mode", &picker_mode, "Auto/Current\0Hue bar + SV rect\0Hue wheel + SV triangle\0");

  039ec	6a ff		 push	 -1
  039ee	68 00 00 00 00	 push	 OFFSET ??_C@_0DI@OEJFDCPH@Auto?1Current?$AAHue?5bar?5?$CL?5SV?5rect?$AA@
  039f3	68 00 00 00 00	 push	 OFFSET ?picker_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  039f8	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HAMIGHD@Picker?5Mode@
  039fd	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  03a02	83 c4 10	 add	 esp, 16			; 00000010H

; 1279 :         ImGui::SameLine(); HelpMarker("User can right-click the picker to change mode.");

  03a05	51		 push	 ecx
  03a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03a0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a13	51		 push	 ecx
  03a14	0f 57 c0	 xorps	 xmm0, xmm0
  03a17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03a1c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03a21	83 c4 08	 add	 esp, 8
  03a24	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@NLCBNAAH@User?5can?5right?9click?5the?5picker@
  03a29	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  03a2e	83 c4 04	 add	 esp, 4

; 1280 :         ImGuiColorEditFlags flags = misc_flags;

  03a31	8b 85 40 fc ff
	ff		 mov	 eax, DWORD PTR _misc_flags$173[ebp]
  03a37	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax

; 1281 :         if (!alpha)            flags |= ImGuiColorEditFlags_NoAlpha;        // This is by default if you call ColorPicker3() instead of ColorPicker4()

  03a3d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03a44	85 c0		 test	 eax, eax
  03a46	75 0f		 jne	 SHORT $LN171@ShowDemoWi
  03a48	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03a4e	83 c8 02	 or	 eax, 2
  03a51	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN171@ShowDemoWi:

; 1282 :         if (alpha_bar)         flags |= ImGuiColorEditFlags_AlphaBar;

  03a57	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?alpha_bar@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03a5e	85 c0		 test	 eax, eax
  03a60	74 11		 je	 SHORT $LN172@ShowDemoWi
  03a62	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03a68	0d 00 00 01 00	 or	 eax, 65536		; 00010000H
  03a6d	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN172@ShowDemoWi:

; 1283 :         if (!side_preview)     flags |= ImGuiColorEditFlags_NoSidePreview;

  03a73	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?side_preview@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03a7a	85 c0		 test	 eax, eax
  03a7c	75 11		 jne	 SHORT $LN173@ShowDemoWi
  03a7e	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03a84	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  03a89	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN173@ShowDemoWi:

; 1284 :         if (picker_mode == 1)  flags |= ImGuiColorEditFlags_PickerHueBar;

  03a8f	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?picker_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  03a96	75 11		 jne	 SHORT $LN174@ShowDemoWi
  03a98	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03a9e	0d 00 00 00 02	 or	 eax, 33554432		; 02000000H
  03aa3	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN174@ShowDemoWi:

; 1285 :         if (picker_mode == 2)  flags |= ImGuiColorEditFlags_PickerHueWheel;

  03aa9	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?picker_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  03ab0	75 11		 jne	 SHORT $LN175@ShowDemoWi
  03ab2	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03ab8	0d 00 00 00 04	 or	 eax, 67108864		; 04000000H
  03abd	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN175@ShowDemoWi:

; 1286 :         if (display_mode == 1) flags |= ImGuiColorEditFlags_NoInputs;       // Disable all RGB/HSV/Hex displays

  03ac3	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?display_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  03aca	75 0f		 jne	 SHORT $LN176@ShowDemoWi
  03acc	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03ad2	83 c8 20	 or	 eax, 32			; 00000020H
  03ad5	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN176@ShowDemoWi:

; 1287 :         if (display_mode == 2) flags |= ImGuiColorEditFlags_DisplayRGB;     // Override display mode

  03adb	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?display_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  03ae2	75 11		 jne	 SHORT $LN177@ShowDemoWi
  03ae4	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03aea	0d 00 00 10 00	 or	 eax, 1048576		; 00100000H
  03aef	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN177@ShowDemoWi:

; 1288 :         if (display_mode == 3) flags |= ImGuiColorEditFlags_DisplayHSV;

  03af5	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?display_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, 3
  03afc	75 11		 jne	 SHORT $LN178@ShowDemoWi
  03afe	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03b04	0d 00 00 20 00	 or	 eax, 2097152		; 00200000H
  03b09	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN178@ShowDemoWi:

; 1289 :         if (display_mode == 4) flags |= ImGuiColorEditFlags_DisplayHex;

  03b0f	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?display_mode@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, 4
  03b16	75 11		 jne	 SHORT $LN179@ShowDemoWi
  03b18	8b 85 f8 fb ff
	ff		 mov	 eax, DWORD PTR _flags$167[ebp]
  03b1e	0d 00 00 40 00	 or	 eax, 4194304		; 00400000H
  03b23	89 85 f8 fb ff
	ff		 mov	 DWORD PTR _flags$167[ebp], eax
$LN179@ShowDemoWi:

; 1290 :         ImGui::ColorPicker4("MyColor##4", (float*)&color, flags, ref_color ? &ref_color_v.x : NULL);

  03b29	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?ref_color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  03b30	85 c0		 test	 eax, eax
  03b32	74 0c		 je	 SHORT $LN259@ShowDemoWi
  03b34	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2329[ebp], OFFSET ?ref_color_v@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03b3e	eb 0a		 jmp	 SHORT $LN260@ShowDemoWi
$LN259@ShowDemoWi:
  03b40	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2329[ebp], 0
$LN260@ShowDemoWi:
  03b4a	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2329[ebp]
  03b50	51		 push	 ecx
  03b51	8b 95 f8 fb ff
	ff		 mov	 edx, DWORD PTR _flags$167[ebp]
  03b57	52		 push	 edx
  03b58	68 00 00 00 00	 push	 OFFSET ?color@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03b5d	68 00 00 00 00	 push	 OFFSET ??_C@_0L@GICMBKFD@MyColor?$CD?$CD4@
  03b62	e8 00 00 00 00	 call	 ?ColorPicker4@ImGui@@YA_NPBDQAMHPBM@Z ; ImGui::ColorPicker4
  03b67	83 c4 10	 add	 esp, 16			; 00000010H

; 1291 : 
; 1292 :         ImGui::Text("Programmatically set defaults:");

  03b6a	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@JHHHIHGA@Programmatically?5set?5defaults?3@
  03b6f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03b74	83 c4 04	 add	 esp, 4

; 1293 :         ImGui::SameLine(); HelpMarker("SetColorEditOptions() is designed to allow you to set boot-time default.\nWe don't have Push/Pop functions because you can force options on a per-widget basis if needed, and the user can change non-forced ones with the options menu.\nWe don't have a getter to avoid encouraging you to persistently save values that aren't forward-compatible.");

  03b77	51		 push	 ecx
  03b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b85	51		 push	 ecx
  03b86	0f 57 c0	 xorps	 xmm0, xmm0
  03b89	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03b8e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03b93	83 c4 08	 add	 esp, 8
  03b96	68 00 00 00 00	 push	 OFFSET ??_C@_0BFE@MHBDKCN@SetColorEditOptions?$CI?$CJ?5is?5design@
  03b9b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  03ba0	83 c4 04	 add	 esp, 4

; 1294 :         if (ImGui::Button("Default: Uint8 + HSV + Hue Bar"))

  03ba3	51		 push	 ecx
  03ba4	0f 57 c0	 xorps	 xmm0, xmm0
  03ba7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bac	51		 push	 ecx
  03bad	0f 57 c0	 xorps	 xmm0, xmm0
  03bb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bb5	8d 8d a0 ed ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  03bbb	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03bc0	50		 push	 eax
  03bc1	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GBPCDFBG@Default?3?5Uint8?5?$CL?5HSV?5?$CL?5Hue?5Bar@
  03bc6	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  03bcb	83 c4 08	 add	 esp, 8
  03bce	0f b6 c0	 movzx	 eax, al
  03bd1	85 c0		 test	 eax, eax
  03bd3	74 0d		 je	 SHORT $LN180@ShowDemoWi

; 1295 :             ImGui::SetColorEditOptions(ImGuiColorEditFlags_Uint8 | ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_PickerHueBar);

  03bd5	68 00 00 a0 02	 push	 44040192		; 02a00000H
  03bda	e8 00 00 00 00	 call	 ?SetColorEditOptions@ImGui@@YAXH@Z ; ImGui::SetColorEditOptions
  03bdf	83 c4 04	 add	 esp, 4
$LN180@ShowDemoWi:

; 1296 :         if (ImGui::Button("Default: Float + HDR + Hue Wheel"))

  03be2	51		 push	 ecx
  03be3	0f 57 c0	 xorps	 xmm0, xmm0
  03be6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03beb	51		 push	 ecx
  03bec	0f 57 c0	 xorps	 xmm0, xmm0
  03bef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03bf4	8d 8d 90 ed ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  03bfa	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  03bff	50		 push	 eax
  03c00	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@BDAOENPB@Default?3?5Float?5?$CL?5HDR?5?$CL?5Hue?5Whee@
  03c05	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  03c0a	83 c4 08	 add	 esp, 8
  03c0d	0f b6 c0	 movzx	 eax, al
  03c10	85 c0		 test	 eax, eax
  03c12	74 0d		 je	 SHORT $LN181@ShowDemoWi

; 1297 :             ImGui::SetColorEditOptions(ImGuiColorEditFlags_Float | ImGuiColorEditFlags_HDR | ImGuiColorEditFlags_PickerHueWheel);

  03c14	68 00 00 08 05	 push	 84410368		; 05080000H
  03c19	e8 00 00 00 00	 call	 ?SetColorEditOptions@ImGui@@YAXH@Z ; ImGui::SetColorEditOptions
  03c1e	83 c4 04	 add	 esp, 4
$LN181@ShowDemoWi:

; 1298 : 
; 1299 :         // HSV encoded support (to avoid RGB<>HSV round trips and singularities when S==0 or V==0)
; 1300 :         static ImVec4 color_stored_as_hsv(0.23f, 1.0f, 1.0f, 1.0f);

  03c21	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  03c26	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  03c2d	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  03c30	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS6@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03c35	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  03c3b	7e 73		 jle	 SHORT $LN58@ShowDemoWi
  03c3d	68 00 00 00 00	 push	 OFFSET ?$TSS6@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03c42	e8 00 00 00 00	 call	 __Init_thread_header
  03c47	83 c4 04	 add	 esp, 4
  03c4a	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS6@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA, -1
  03c51	75 5d		 jne	 SHORT $LN58@ShowDemoWi
  03c53	c7 45 fc 04 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 4
  03c5a	51		 push	 ecx
  03c5b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03c63	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c68	51		 push	 ecx
  03c69	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03c71	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c76	51		 push	 ecx
  03c77	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03c7f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c84	51		 push	 ecx
  03c85	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e6b851f
  03c8d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03c92	b9 00 00 00 00	 mov	 ecx, OFFSET ?color_stored_as_hsv@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03c97	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  03c9c	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  03ca3	68 00 00 00 00	 push	 OFFSET ?$TSS6@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03ca8	e8 00 00 00 00	 call	 __Init_thread_footer
  03cad	83 c4 04	 add	 esp, 4
$LN58@ShowDemoWi:

; 1301 :         ImGui::Spacing();

  03cb0	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 1302 :         ImGui::Text("HSV encoded colors");

  03cb5	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DKMMPKGG@HSV?5encoded?5colors@
  03cba	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03cbf	83 c4 04	 add	 esp, 4

; 1303 :         ImGui::SameLine(); HelpMarker("By default, colors are given to ColorEdit and ColorPicker in RGB, but ImGuiColorEditFlags_InputHSV allows you to store colors as HSV and pass them to ColorEdit and ColorPicker as HSV. This comes with the added benefit that you can manipulate hue values with the picker even when saturation or value are zero.");

  03cc2	51		 push	 ecx
  03cc3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  03ccb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cd0	51		 push	 ecx
  03cd1	0f 57 c0	 xorps	 xmm0, xmm0
  03cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03cd9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  03cde	83 c4 08	 add	 esp, 8
  03ce1	68 00 00 00 00	 push	 OFFSET ??_C@_0BDF@MKEKOCPP@By?5default?0?5colors?5are?5given?5to@
  03ce6	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  03ceb	83 c4 04	 add	 esp, 4

; 1304 :         ImGui::Text("Color widget with InputHSV:");

  03cee	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@EODGJACI@Color?5widget?5with?5InputHSV?3@
  03cf3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  03cf8	83 c4 04	 add	 esp, 4

; 1305 :         ImGui::ColorEdit4("HSV shown as RGB##1", (float*)&color_stored_as_hsv, ImGuiColorEditFlags_DisplayRGB | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);

  03cfb	68 00 00 10 11	 push	 286261248		; 11100000H
  03d00	68 00 00 00 00	 push	 OFFSET ?color_stored_as_hsv@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03d05	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@PEEENKKH@HSV?5shown?5as?5RGB?$CD?$CD1@
  03d0a	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  03d0f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1306 :         ImGui::ColorEdit4("HSV shown as HSV##1", (float*)&color_stored_as_hsv, ImGuiColorEditFlags_DisplayHSV | ImGuiColorEditFlags_InputHSV | ImGuiColorEditFlags_Float);

  03d12	68 00 00 20 11	 push	 287309824		; 11200000H
  03d17	68 00 00 00 00	 push	 OFFSET ?color_stored_as_hsv@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03d1c	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@DKMNGIOI@HSV?5shown?5as?5HSV?$CD?$CD1@
  03d21	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  03d26	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1307 :         ImGui::DragFloat4("Raw HSV values", (float*)&color_stored_as_hsv, 0.01f, 0.0f, 1.0f);

  03d29	51		 push	 ecx
  03d2a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03d32	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d37	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  03d3c	51		 push	 ecx
  03d3d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03d45	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d4a	51		 push	 ecx
  03d4b	0f 57 c0	 xorps	 xmm0, xmm0
  03d4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d53	51		 push	 ecx
  03d54	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  03d5c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d61	68 00 00 00 00	 push	 OFFSET ?color_stored_as_hsv@?PH@??ShowDemoWindowWidgets@@YAXXZ@4UImVec4@@A
  03d66	68 00 00 00 00	 push	 OFFSET ??_C@_0P@PMCJHJ@Raw?5HSV?5values@
  03d6b	e8 00 00 00 00	 call	 ?DragFloat4@ImGui@@YA_NPBDQAMMMM0M@Z ; ImGui::DragFloat4
  03d70	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1308 : 
; 1309 :         ImGui::TreePop();

  03d73	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN159@ShowDemoWi:

; 1310 :     }
; 1311 : 
; 1312 :     if (ImGui::TreeNode("Range Widgets"))

  03d78	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JEFPADJJ@Range?5Widgets@
  03d7d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  03d82	83 c4 04	 add	 esp, 4
  03d85	0f b6 c0	 movzx	 eax, al
  03d88	85 c0		 test	 eax, eax
  03d8a	0f 84 8c 00 00
	00		 je	 $LN182@ShowDemoWi

; 1313 :     {
; 1314 :         static float begin = 10, end = 90;
; 1315 :         static int begin_i = 100, end_i = 1000;
; 1316 :         ImGui::DragFloatRange2("range", &begin, &end, 0.25f, 0.0f, 100.0f, "Min: %.1f %%", "Max: %.1f %%");

  03d90	51		 push	 ecx
  03d91	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  03d99	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03d9e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IBBLMIOP@Max?3?5?$CF?41f?5?$CF?$CF@
  03da3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MBFELAJJ@Min?3?5?$CF?41f?5?$CF?$CF@
  03da8	51		 push	 ecx
  03da9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  03db1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03db6	51		 push	 ecx
  03db7	0f 57 c0	 xorps	 xmm0, xmm0
  03dba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dbf	51		 push	 ecx
  03dc0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e800000
  03dc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03dcd	68 00 00 00 00	 push	 OFFSET ?end@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4MA
  03dd2	68 00 00 00 00	 push	 OFFSET ?begin@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4MA
  03dd7	68 00 00 00 00	 push	 OFFSET ??_C@_05CCGOGOBM@range@
  03ddc	e8 00 00 00 00	 call	 ?DragFloatRange2@ImGui@@YA_NPBDPAM1MMM00M@Z ; ImGui::DragFloatRange2
  03de1	83 c4 24	 add	 esp, 36			; 00000024H

; 1317 :         ImGui::DragIntRange2("range int (no bounds)", &begin_i, &end_i, 5, 0, 0, "Min: %d units", "Max: %d units");

  03de4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JDOPLCFE@Max?3?5?$CFd?5units@
  03de9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@CKMJCJCF@Min?3?5?$CFd?5units@
  03dee	6a 00		 push	 0
  03df0	6a 00		 push	 0
  03df2	51		 push	 ecx
  03df3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40a00000
  03dfb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  03e00	68 00 00 00 00	 push	 OFFSET ?end_i@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03e05	68 00 00 00 00	 push	 OFFSET ?begin_i@?BDA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  03e0a	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NFKPCFAN@range?5int?5?$CIno?5bounds?$CJ@
  03e0f	e8 00 00 00 00	 call	 ?DragIntRange2@ImGui@@YA_NPBDPAH1MHH00@Z ; ImGui::DragIntRange2
  03e14	83 c4 20	 add	 esp, 32			; 00000020H

; 1318 :         ImGui::TreePop();

  03e17	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN182@ShowDemoWi:

; 1319 :     }
; 1320 : 
; 1321 :     if (ImGui::TreeNode("Data Types"))

  03e1c	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PAJDALGN@Data?5Types@
  03e21	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  03e26	83 c4 04	 add	 esp, 4
  03e29	0f b6 c0	 movzx	 eax, al
  03e2c	85 c0		 test	 eax, eax
  03e2e	0f 84 7f 10 00
	00		 je	 $LN183@ShowDemoWi

; 1322 :     {
; 1323 :         // The DragScalar/InputScalar/SliderScalar functions allow various data types: signed/unsigned int/long long and float/double
; 1324 :         // To avoid polluting the public API with all possible combinations, we use the ImGuiDataType enum to pass the type,
; 1325 :         // and passing all arguments by address.
; 1326 :         // This is the reason the test code below creates local variables to hold "zero" "one" etc. for each types.
; 1327 :         // In practice, if you frequently use a given type that is not covered by the normal API entry points, you can wrap it
; 1328 :         // yourself inside a 1 line function which can take typed argument as value instead of void*, and then pass their address
; 1329 :         // to the generic function. For example:
; 1330 :         //   bool MySliderU64(const char *label, u64* value, u64 min = 0, u64 max = 0, const char* format = "%lld")
; 1331 :         //   {
; 1332 :         //      return SliderScalar(label, ImGuiDataType_U64, value, &min, &max, format);
; 1333 :         //   }
; 1334 : 
; 1335 :         // Limits (as helper variables that we can take the address of)
; 1336 :         // Note that the SliderScalar function has a maximum usable range of half the natural type maximum, hence the /2 below.
; 1337 :         #ifndef LLONG_MIN
; 1338 :         ImS64 LLONG_MIN = -9223372036854775807LL - 1;
; 1339 :         ImS64 LLONG_MAX = 9223372036854775807LL;
; 1340 :         ImU64 ULLONG_MAX = (2ULL * 9223372036854775807LL + 1);
; 1341 :         #endif
; 1342 :         const char    s8_zero  = 0,   s8_one  = 1,   s8_fifty  = 50, s8_min  = -128,        s8_max = 127;

  03e34	c6 85 ef fb ff
	ff 00		 mov	 BYTE PTR _s8_zero$166[ebp], 0
  03e3b	c6 85 e3 fb ff
	ff 01		 mov	 BYTE PTR _s8_one$165[ebp], 1
  03e42	c6 85 d7 fb ff
	ff 32		 mov	 BYTE PTR _s8_fifty$164[ebp], 50 ; 00000032H
  03e49	c6 85 cb fb ff
	ff 80		 mov	 BYTE PTR _s8_min$163[ebp], -128 ; ffffff80H
  03e50	c6 85 bf fb ff
	ff 7f		 mov	 BYTE PTR _s8_max$162[ebp], 127 ; 0000007fH

; 1343 :         const ImU8    u8_zero  = 0,   u8_one  = 1,   u8_fifty  = 50, u8_min  = 0,           u8_max = 255;

  03e57	c6 85 b3 fb ff
	ff 00		 mov	 BYTE PTR _u8_zero$161[ebp], 0
  03e5e	c6 85 a7 fb ff
	ff 01		 mov	 BYTE PTR _u8_one$160[ebp], 1
  03e65	c6 85 9b fb ff
	ff 32		 mov	 BYTE PTR _u8_fifty$159[ebp], 50 ; 00000032H
  03e6c	c6 85 8f fb ff
	ff 00		 mov	 BYTE PTR _u8_min$158[ebp], 0
  03e73	c6 85 83 fb ff
	ff ff		 mov	 BYTE PTR _u8_max$157[ebp], 255 ; 000000ffH

; 1344 :         const short   s16_zero = 0,   s16_one = 1,   s16_fifty = 50, s16_min = -32768,      s16_max = 32767;

  03e7a	33 c0		 xor	 eax, eax
  03e7c	66 89 85 74 fb
	ff ff		 mov	 WORD PTR _s16_zero$156[ebp], ax
  03e83	b8 01 00 00 00	 mov	 eax, 1
  03e88	66 89 85 68 fb
	ff ff		 mov	 WORD PTR _s16_one$155[ebp], ax
  03e8f	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  03e94	66 89 85 5c fb
	ff ff		 mov	 WORD PTR _s16_fifty$154[ebp], ax
  03e9b	b8 00 80 ff ff	 mov	 eax, -32768		; ffff8000H
  03ea0	66 89 85 50 fb
	ff ff		 mov	 WORD PTR _s16_min$153[ebp], ax
  03ea7	b8 ff 7f 00 00	 mov	 eax, 32767		; 00007fffH
  03eac	66 89 85 44 fb
	ff ff		 mov	 WORD PTR _s16_max$152[ebp], ax

; 1345 :         const ImU16   u16_zero = 0,   u16_one = 1,   u16_fifty = 50, u16_min = 0,           u16_max = 65535;

  03eb3	33 c0		 xor	 eax, eax
  03eb5	66 89 85 38 fb
	ff ff		 mov	 WORD PTR _u16_zero$151[ebp], ax
  03ebc	b8 01 00 00 00	 mov	 eax, 1
  03ec1	66 89 85 2c fb
	ff ff		 mov	 WORD PTR _u16_one$150[ebp], ax
  03ec8	b8 32 00 00 00	 mov	 eax, 50			; 00000032H
  03ecd	66 89 85 20 fb
	ff ff		 mov	 WORD PTR _u16_fifty$149[ebp], ax
  03ed4	33 c0		 xor	 eax, eax
  03ed6	66 89 85 14 fb
	ff ff		 mov	 WORD PTR _u16_min$148[ebp], ax
  03edd	b8 ff ff 00 00	 mov	 eax, 65535		; 0000ffffH
  03ee2	66 89 85 08 fb
	ff ff		 mov	 WORD PTR _u16_max$147[ebp], ax

; 1346 :         const ImS32   s32_zero = 0,   s32_one = 1,   s32_fifty = 50, s32_min = INT_MIN/2,   s32_max = INT_MAX/2,    s32_hi_a = INT_MAX/2 - 100,    s32_hi_b = INT_MAX/2;

  03ee9	c7 85 fc fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _s32_zero$146[ebp], 0
  03ef3	c7 85 f0 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _s32_one$145[ebp], 1
  03efd	c7 85 e4 fa ff
	ff 32 00 00 00	 mov	 DWORD PTR _s32_fifty$144[ebp], 50 ; 00000032H
  03f07	c7 85 d8 fa ff
	ff 00 00 00 c0	 mov	 DWORD PTR _s32_min$143[ebp], -1073741824 ; c0000000H
  03f11	c7 85 cc fa ff
	ff ff ff ff 3f	 mov	 DWORD PTR _s32_max$142[ebp], 1073741823 ; 3fffffffH
  03f1b	c7 85 c0 fa ff
	ff 9b ff ff 3f	 mov	 DWORD PTR _s32_hi_a$141[ebp], 1073741723 ; 3fffff9bH
  03f25	c7 85 b4 fa ff
	ff ff ff ff 3f	 mov	 DWORD PTR _s32_hi_b$140[ebp], 1073741823 ; 3fffffffH

; 1347 :         const ImU32   u32_zero = 0,   u32_one = 1,   u32_fifty = 50, u32_min = 0,           u32_max = UINT_MAX/2,   u32_hi_a = UINT_MAX/2 - 100,   u32_hi_b = UINT_MAX/2;

  03f2f	c7 85 a8 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _u32_zero$139[ebp], 0
  03f39	c7 85 9c fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _u32_one$138[ebp], 1
  03f43	c7 85 90 fa ff
	ff 32 00 00 00	 mov	 DWORD PTR _u32_fifty$137[ebp], 50 ; 00000032H
  03f4d	c7 85 84 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _u32_min$136[ebp], 0
  03f57	c7 85 78 fa ff
	ff ff ff ff 7f	 mov	 DWORD PTR _u32_max$135[ebp], 2147483647 ; 7fffffffH
  03f61	c7 85 6c fa ff
	ff 9b ff ff 7f	 mov	 DWORD PTR _u32_hi_a$134[ebp], 2147483547 ; 7fffff9bH
  03f6b	c7 85 60 fa ff
	ff ff ff ff 7f	 mov	 DWORD PTR _u32_hi_b$133[ebp], 2147483647 ; 7fffffffH

; 1348 :         const ImS64   s64_zero = 0,   s64_one = 1,   s64_fifty = 50, s64_min = LLONG_MIN/2, s64_max = LLONG_MAX/2,  s64_hi_a = LLONG_MAX/2 - 100,  s64_hi_b = LLONG_MAX/2;

  03f75	0f 57 c0	 xorps	 xmm0, xmm0
  03f78	66 0f 13 85 50
	fa ff ff	 movlpd	 QWORD PTR _s64_zero$132[ebp], xmm0
  03f80	c7 85 40 fa ff
	ff 01 00 00 00	 mov	 DWORD PTR _s64_one$131[ebp], 1
  03f8a	c7 85 44 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _s64_one$131[ebp+4], 0
  03f94	c7 85 30 fa ff
	ff 32 00 00 00	 mov	 DWORD PTR _s64_fifty$130[ebp], 50 ; 00000032H
  03f9e	c7 85 34 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _s64_fifty$130[ebp+4], 0
  03fa8	c7 85 20 fa ff
	ff 00 00 00 00	 mov	 DWORD PTR _s64_min$129[ebp], 0
  03fb2	c7 85 24 fa ff
	ff 00 00 00 c0	 mov	 DWORD PTR _s64_min$129[ebp+4], -1073741824 ; c0000000H
  03fbc	c7 85 10 fa ff
	ff ff ff ff ff	 mov	 DWORD PTR _s64_max$128[ebp], -1
  03fc6	c7 85 14 fa ff
	ff ff ff ff 3f	 mov	 DWORD PTR _s64_max$128[ebp+4], 1073741823 ; 3fffffffH
  03fd0	c7 85 00 fa ff
	ff 9b ff ff ff	 mov	 DWORD PTR _s64_hi_a$127[ebp], -101 ; ffffff9bH
  03fda	c7 85 04 fa ff
	ff ff ff ff 3f	 mov	 DWORD PTR _s64_hi_a$127[ebp+4], 1073741823 ; 3fffffffH
  03fe4	c7 85 f0 f9 ff
	ff ff ff ff ff	 mov	 DWORD PTR _s64_hi_b$126[ebp], -1
  03fee	c7 85 f4 f9 ff
	ff ff ff ff 3f	 mov	 DWORD PTR _s64_hi_b$126[ebp+4], 1073741823 ; 3fffffffH

; 1349 :         const ImU64   u64_zero = 0,   u64_one = 1,   u64_fifty = 50, u64_min = 0,           u64_max = ULLONG_MAX/2, u64_hi_a = ULLONG_MAX/2 - 100, u64_hi_b = ULLONG_MAX/2;

  03ff8	0f 57 c0	 xorps	 xmm0, xmm0
  03ffb	66 0f 13 85 e0
	f9 ff ff	 movlpd	 QWORD PTR _u64_zero$125[ebp], xmm0
  04003	c7 85 d0 f9 ff
	ff 01 00 00 00	 mov	 DWORD PTR _u64_one$124[ebp], 1
  0400d	c7 85 d4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _u64_one$124[ebp+4], 0
  04017	c7 85 c0 f9 ff
	ff 32 00 00 00	 mov	 DWORD PTR _u64_fifty$123[ebp], 50 ; 00000032H
  04021	c7 85 c4 f9 ff
	ff 00 00 00 00	 mov	 DWORD PTR _u64_fifty$123[ebp+4], 0
  0402b	0f 57 c0	 xorps	 xmm0, xmm0
  0402e	66 0f 13 85 b0
	f9 ff ff	 movlpd	 QWORD PTR _u64_min$122[ebp], xmm0
  04036	c7 85 a0 f9 ff
	ff ff ff ff ff	 mov	 DWORD PTR _u64_max$121[ebp], -1
  04040	c7 85 a4 f9 ff
	ff ff ff ff 7f	 mov	 DWORD PTR _u64_max$121[ebp+4], 2147483647 ; 7fffffffH
  0404a	c7 85 90 f9 ff
	ff 9b ff ff ff	 mov	 DWORD PTR _u64_hi_a$120[ebp], -101 ; ffffff9bH
  04054	c7 85 94 f9 ff
	ff ff ff ff 7f	 mov	 DWORD PTR _u64_hi_a$120[ebp+4], 2147483647 ; 7fffffffH
  0405e	c7 85 80 f9 ff
	ff ff ff ff ff	 mov	 DWORD PTR _u64_hi_b$119[ebp], -1
  04068	c7 85 84 f9 ff
	ff ff ff ff 7f	 mov	 DWORD PTR _u64_hi_b$119[ebp+4], 2147483647 ; 7fffffffH

; 1350 :         const float   f32_zero = 0.f, f32_one = 1.f, f32_lo_a = -10000000000.0f, f32_hi_a = +10000000000.0f;

  04072	0f 57 c0	 xorps	 xmm0, xmm0
  04075	f3 0f 11 85 74
	f9 ff ff	 movss	 DWORD PTR _f32_zero$118[ebp], xmm0
  0407d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04085	f3 0f 11 85 68
	f9 ff ff	 movss	 DWORD PTR _f32_one$117[ebp], xmm0
  0408d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@d01502f9
  04095	f3 0f 11 85 5c
	f9 ff ff	 movss	 DWORD PTR _f32_lo_a$116[ebp], xmm0
  0409d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@501502f9
  040a5	f3 0f 11 85 50
	f9 ff ff	 movss	 DWORD PTR _f32_hi_a$115[ebp], xmm0

; 1351 :         const double  f64_zero = 0.,  f64_one = 1.,  f64_lo_a = -1000000000000000.0, f64_hi_a = +1000000000000000.0;

  040ad	0f 57 c0	 xorps	 xmm0, xmm0
  040b0	f2 0f 11 85 40
	f9 ff ff	 movsd	 QWORD PTR _f64_zero$114[ebp], xmm0
  040b8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@3ff0000000000000
  040c0	f2 0f 11 85 30
	f9 ff ff	 movsd	 QWORD PTR _f64_one$113[ebp], xmm0
  040c8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@c30c6bf526340000
  040d0	f2 0f 11 85 20
	f9 ff ff	 movsd	 QWORD PTR _f64_lo_a$112[ebp], xmm0
  040d8	f2 0f 10 05 00
	00 00 00	 movsd	 xmm0, QWORD PTR __real@430c6bf526340000
  040e0	f2 0f 11 85 10
	f9 ff ff	 movsd	 QWORD PTR _f64_hi_a$111[ebp], xmm0

; 1352 : 
; 1353 :         // State
; 1354 :         static char   s8_v  = 127;
; 1355 :         static ImU8   u8_v  = 255;
; 1356 :         static short  s16_v = 32767;
; 1357 :         static ImU16  u16_v = 65535;
; 1358 :         static ImS32  s32_v = -1;
; 1359 :         static ImU32  u32_v = (ImU32)-1;
; 1360 :         static ImS64  s64_v = -1;
; 1361 :         static ImU64  u64_v = (ImU64)-1;
; 1362 :         static float  f32_v = 0.123f;
; 1363 :         static double f64_v = 90000.01234567890123456789;
; 1364 : 
; 1365 :         const float drag_speed = 0.2f;

  040e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  040f0	f3 0f 11 85 04
	f9 ff ff	 movss	 DWORD PTR _drag_speed$110[ebp], xmm0

; 1366 :         static bool drag_clamp = false;
; 1367 :         ImGui::Text("Drags:");

  040f8	68 00 00 00 00	 push	 OFFSET ??_C@_06OFIAEEBG@Drags?3@
  040fd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  04102	83 c4 04	 add	 esp, 4

; 1368 :         ImGui::Checkbox("Clamp integers to 0..50", &drag_clamp); ImGui::SameLine(); HelpMarker("As with every widgets in dear imgui, we never modify values unless there is a user interaction.\nYou can override the clamping limits by using CTRL+Click to input a value.");

  04105	68 00 00 00 00	 push	 OFFSET ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0410a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@LDAPNGOM@Clamp?5integers?5to?50?4?450@
  0410f	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  04114	83 c4 08	 add	 esp, 8
  04117	51		 push	 ecx
  04118	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  04120	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04125	51		 push	 ecx
  04126	0f 57 c0	 xorps	 xmm0, xmm0
  04129	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0412e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  04133	83 c4 08	 add	 esp, 8
  04136	68 00 00 00 00	 push	 OFFSET ??_C@_0KL@BPNBHIKN@As?5with?5every?5widgets?5in?5dear?5i@
  0413b	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  04140	83 c4 04	 add	 esp, 4

; 1369 :         ImGui::DragScalar("drag s8",        ImGuiDataType_S8,     &s8_v,  drag_speed, drag_clamp ? &s8_zero  : NULL, drag_clamp ? &s8_fifty  : NULL);

  04143	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0414a	85 c0		 test	 eax, eax
  0414c	74 0e		 je	 SHORT $LN261@ShowDemoWi
  0414e	8d 8d d7 fb ff
	ff		 lea	 ecx, DWORD PTR _s8_fifty$164[ebp]
  04154	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2456[ebp], ecx
  0415a	eb 0a		 jmp	 SHORT $LN262@ShowDemoWi
$LN261@ShowDemoWi:
  0415c	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2456[ebp], 0
$LN262@ShowDemoWi:
  04166	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0416d	85 d2		 test	 edx, edx
  0416f	74 0e		 je	 SHORT $LN263@ShowDemoWi
  04171	8d 85 ef fb ff
	ff		 lea	 eax, DWORD PTR _s8_zero$166[ebp]
  04177	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2460[ebp], eax
  0417d	eb 0a		 jmp	 SHORT $LN264@ShowDemoWi
$LN263@ShowDemoWi:
  0417f	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2460[ebp], 0
$LN264@ShowDemoWi:
  04189	51		 push	 ecx
  0418a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04192	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04197	6a 00		 push	 0
  04199	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2456[ebp]
  0419f	51		 push	 ecx
  041a0	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2460[ebp]
  041a6	52		 push	 edx
  041a7	51		 push	 ecx
  041a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  041b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  041b5	68 00 00 00 00	 push	 OFFSET ?s8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4DA
  041ba	6a 00		 push	 0
  041bc	68 00 00 00 00	 push	 OFFSET ??_C@_07LMCLPNLL@drag?5s8@
  041c1	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  041c6	83 c4 20	 add	 esp, 32			; 00000020H

; 1370 :         ImGui::DragScalar("drag u8",        ImGuiDataType_U8,     &u8_v,  drag_speed, drag_clamp ? &u8_zero  : NULL, drag_clamp ? &u8_fifty  : NULL, "%u ms");

  041c9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  041d0	85 c0		 test	 eax, eax
  041d2	74 0e		 je	 SHORT $LN265@ShowDemoWi
  041d4	8d 8d 9b fb ff
	ff		 lea	 ecx, DWORD PTR _u8_fifty$159[ebp]
  041da	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2534[ebp], ecx
  041e0	eb 0a		 jmp	 SHORT $LN266@ShowDemoWi
$LN265@ShowDemoWi:
  041e2	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2534[ebp], 0
$LN266@ShowDemoWi:
  041ec	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  041f3	85 d2		 test	 edx, edx
  041f5	74 0e		 je	 SHORT $LN267@ShowDemoWi
  041f7	8d 85 b3 fb ff
	ff		 lea	 eax, DWORD PTR _u8_zero$161[ebp]
  041fd	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2538[ebp], eax
  04203	eb 0a		 jmp	 SHORT $LN268@ShowDemoWi
$LN267@ShowDemoWi:
  04205	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2538[ebp], 0
$LN268@ShowDemoWi:
  0420f	51		 push	 ecx
  04210	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04218	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0421d	68 00 00 00 00	 push	 OFFSET ??_C@_05MMEBHIBO@?$CFu?5ms@
  04222	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2534[ebp]
  04228	51		 push	 ecx
  04229	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2538[ebp]
  0422f	52		 push	 edx
  04230	51		 push	 ecx
  04231	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  04239	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0423e	68 00 00 00 00	 push	 OFFSET ?u8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4EA
  04243	6a 01		 push	 1
  04245	68 00 00 00 00	 push	 OFFSET ??_C@_07LIKGIBAJ@drag?5u8@
  0424a	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  0424f	83 c4 20	 add	 esp, 32			; 00000020H

; 1371 :         ImGui::DragScalar("drag s16",       ImGuiDataType_S16,    &s16_v, drag_speed, drag_clamp ? &s16_zero : NULL, drag_clamp ? &s16_fifty : NULL);

  04252	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04259	85 c0		 test	 eax, eax
  0425b	74 0e		 je	 SHORT $LN269@ShowDemoWi
  0425d	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR _s16_fifty$154[ebp]
  04263	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2548[ebp], ecx
  04269	eb 0a		 jmp	 SHORT $LN270@ShowDemoWi
$LN269@ShowDemoWi:
  0426b	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2548[ebp], 0
$LN270@ShowDemoWi:
  04275	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0427c	85 d2		 test	 edx, edx
  0427e	74 0e		 je	 SHORT $LN271@ShowDemoWi
  04280	8d 85 74 fb ff
	ff		 lea	 eax, DWORD PTR _s16_zero$156[ebp]
  04286	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2552[ebp], eax
  0428c	eb 0a		 jmp	 SHORT $LN272@ShowDemoWi
$LN271@ShowDemoWi:
  0428e	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2552[ebp], 0
$LN272@ShowDemoWi:
  04298	51		 push	 ecx
  04299	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  042a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  042a6	6a 00		 push	 0
  042a8	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2548[ebp]
  042ae	51		 push	 ecx
  042af	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2552[ebp]
  042b5	52		 push	 edx
  042b6	51		 push	 ecx
  042b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  042bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  042c4	68 00 00 00 00	 push	 OFFSET ?s16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4FA
  042c9	6a 02		 push	 2
  042cb	68 00 00 00 00	 push	 OFFSET ??_C@_08NKMCOLAD@drag?5s16@
  042d0	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  042d5	83 c4 20	 add	 esp, 32			; 00000020H

; 1372 :         ImGui::DragScalar("drag u16",       ImGuiDataType_U16,    &u16_v, drag_speed, drag_clamp ? &u16_zero : NULL, drag_clamp ? &u16_fifty : NULL, "%u ms");

  042d8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  042df	85 c0		 test	 eax, eax
  042e1	74 0e		 je	 SHORT $LN273@ShowDemoWi
  042e3	8d 8d 20 fb ff
	ff		 lea	 ecx, DWORD PTR _u16_fifty$149[ebp]
  042e9	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2562[ebp], ecx
  042ef	eb 0a		 jmp	 SHORT $LN274@ShowDemoWi
$LN273@ShowDemoWi:
  042f1	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2562[ebp], 0
$LN274@ShowDemoWi:
  042fb	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04302	85 d2		 test	 edx, edx
  04304	74 0e		 je	 SHORT $LN275@ShowDemoWi
  04306	8d 85 38 fb ff
	ff		 lea	 eax, DWORD PTR _u16_zero$151[ebp]
  0430c	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2566[ebp], eax
  04312	eb 0a		 jmp	 SHORT $LN276@ShowDemoWi
$LN275@ShowDemoWi:
  04314	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2566[ebp], 0
$LN276@ShowDemoWi:
  0431e	51		 push	 ecx
  0431f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04327	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0432c	68 00 00 00 00	 push	 OFFSET ??_C@_05MMEBHIBO@?$CFu?5ms@
  04331	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2562[ebp]
  04337	51		 push	 ecx
  04338	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2566[ebp]
  0433e	52		 push	 edx
  0433f	51		 push	 ecx
  04340	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  04348	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0434d	68 00 00 00 00	 push	 OFFSET ?u16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4GA
  04352	6a 03		 push	 3
  04354	68 00 00 00 00	 push	 OFFSET ??_C@_08PPKJLENP@drag?5u16@
  04359	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  0435e	83 c4 20	 add	 esp, 32			; 00000020H

; 1373 :         ImGui::DragScalar("drag s32",       ImGuiDataType_S32,    &s32_v, drag_speed, drag_clamp ? &s32_zero : NULL, drag_clamp ? &s32_fifty : NULL);

  04361	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04368	85 c0		 test	 eax, eax
  0436a	74 0e		 je	 SHORT $LN277@ShowDemoWi
  0436c	8d 8d e4 fa ff
	ff		 lea	 ecx, DWORD PTR _s32_fifty$144[ebp]
  04372	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2576[ebp], ecx
  04378	eb 0a		 jmp	 SHORT $LN278@ShowDemoWi
$LN277@ShowDemoWi:
  0437a	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2576[ebp], 0
$LN278@ShowDemoWi:
  04384	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0438b	85 d2		 test	 edx, edx
  0438d	74 0e		 je	 SHORT $LN279@ShowDemoWi
  0438f	8d 85 fc fa ff
	ff		 lea	 eax, DWORD PTR _s32_zero$146[ebp]
  04395	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2580[ebp], eax
  0439b	eb 0a		 jmp	 SHORT $LN280@ShowDemoWi
$LN279@ShowDemoWi:
  0439d	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2580[ebp], 0
$LN280@ShowDemoWi:
  043a7	51		 push	 ecx
  043a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  043b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  043b5	6a 00		 push	 0
  043b7	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2576[ebp]
  043bd	51		 push	 ecx
  043be	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2580[ebp]
  043c4	52		 push	 edx
  043c5	51		 push	 ecx
  043c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  043ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  043d3	68 00 00 00 00	 push	 OFFSET ?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  043d8	6a 04		 push	 4
  043da	68 00 00 00 00	 push	 OFFSET ??_C@_08LNCKPKGJ@drag?5s32@
  043df	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  043e4	83 c4 20	 add	 esp, 32			; 00000020H

; 1374 :         ImGui::DragScalar("drag u32",       ImGuiDataType_U32,    &u32_v, drag_speed, drag_clamp ? &u32_zero : NULL, drag_clamp ? &u32_fifty : NULL, "%u ms");

  043e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  043ee	85 c0		 test	 eax, eax
  043f0	74 0e		 je	 SHORT $LN281@ShowDemoWi
  043f2	8d 8d 90 fa ff
	ff		 lea	 ecx, DWORD PTR _u32_fifty$137[ebp]
  043f8	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2590[ebp], ecx
  043fe	eb 0a		 jmp	 SHORT $LN282@ShowDemoWi
$LN281@ShowDemoWi:
  04400	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2590[ebp], 0
$LN282@ShowDemoWi:
  0440a	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04411	85 d2		 test	 edx, edx
  04413	74 0e		 je	 SHORT $LN283@ShowDemoWi
  04415	8d 85 a8 fa ff
	ff		 lea	 eax, DWORD PTR _u32_zero$139[ebp]
  0441b	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2594[ebp], eax
  04421	eb 0a		 jmp	 SHORT $LN284@ShowDemoWi
$LN283@ShowDemoWi:
  04423	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2594[ebp], 0
$LN284@ShowDemoWi:
  0442d	51		 push	 ecx
  0442e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04436	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0443b	68 00 00 00 00	 push	 OFFSET ??_C@_05MMEBHIBO@?$CFu?5ms@
  04440	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2590[ebp]
  04446	51		 push	 ecx
  04447	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2594[ebp]
  0444d	52		 push	 edx
  0444e	51		 push	 ecx
  0444f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  04457	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0445c	68 00 00 00 00	 push	 OFFSET ?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA
  04461	6a 05		 push	 5
  04463	68 00 00 00 00	 push	 OFFSET ??_C@_08JIEBKFLF@drag?5u32@
  04468	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  0446d	83 c4 20	 add	 esp, 32			; 00000020H

; 1375 :         ImGui::DragScalar("drag s64",       ImGuiDataType_S64,    &s64_v, drag_speed, drag_clamp ? &s64_zero : NULL, drag_clamp ? &s64_fifty : NULL);

  04470	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04477	85 c0		 test	 eax, eax
  04479	74 0e		 je	 SHORT $LN285@ShowDemoWi
  0447b	8d 8d 30 fa ff
	ff		 lea	 ecx, DWORD PTR _s64_fifty$130[ebp]
  04481	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2604[ebp], ecx
  04487	eb 0a		 jmp	 SHORT $LN286@ShowDemoWi
$LN285@ShowDemoWi:
  04489	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2604[ebp], 0
$LN286@ShowDemoWi:
  04493	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0449a	85 d2		 test	 edx, edx
  0449c	74 0e		 je	 SHORT $LN287@ShowDemoWi
  0449e	8d 85 50 fa ff
	ff		 lea	 eax, DWORD PTR _s64_zero$132[ebp]
  044a4	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2608[ebp], eax
  044aa	eb 0a		 jmp	 SHORT $LN288@ShowDemoWi
$LN287@ShowDemoWi:
  044ac	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2608[ebp], 0
$LN288@ShowDemoWi:
  044b6	51		 push	 ecx
  044b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  044bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  044c4	6a 00		 push	 0
  044c6	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2604[ebp]
  044cc	51		 push	 ecx
  044cd	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2608[ebp]
  044d3	52		 push	 edx
  044d4	51		 push	 ecx
  044d5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  044dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  044e2	68 00 00 00 00	 push	 OFFSET ?s64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  044e7	6a 06		 push	 6
  044e9	68 00 00 00 00	 push	 OFFSET ??_C@_08ONLLJPAE@drag?5s64@
  044ee	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  044f3	83 c4 20	 add	 esp, 32			; 00000020H

; 1376 :         ImGui::DragScalar("drag u64",       ImGuiDataType_U64,    &u64_v, drag_speed, drag_clamp ? &u64_zero : NULL, drag_clamp ? &u64_fifty : NULL);

  044f6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  044fd	85 c0		 test	 eax, eax
  044ff	74 0e		 je	 SHORT $LN289@ShowDemoWi
  04501	8d 8d c0 f9 ff
	ff		 lea	 ecx, DWORD PTR _u64_fifty$123[ebp]
  04507	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2618[ebp], ecx
  0450d	eb 0a		 jmp	 SHORT $LN290@ShowDemoWi
$LN289@ShowDemoWi:
  0450f	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2618[ebp], 0
$LN290@ShowDemoWi:
  04519	0f b6 15 00 00
	00 00		 movzx	 edx, BYTE PTR ?drag_clamp@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04520	85 d2		 test	 edx, edx
  04522	74 0e		 je	 SHORT $LN291@ShowDemoWi
  04524	8d 85 e0 f9 ff
	ff		 lea	 eax, DWORD PTR _u64_zero$125[ebp]
  0452a	89 85 b4 eb ff
	ff		 mov	 DWORD PTR tv2622[ebp], eax
  04530	eb 0a		 jmp	 SHORT $LN292@ShowDemoWi
$LN291@ShowDemoWi:
  04532	c7 85 b4 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2622[ebp], 0
$LN292@ShowDemoWi:
  0453c	51		 push	 ecx
  0453d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04545	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0454a	6a 00		 push	 0
  0454c	8b 8d b8 eb ff
	ff		 mov	 ecx, DWORD PTR tv2618[ebp]
  04552	51		 push	 ecx
  04553	8b 95 b4 eb ff
	ff		 mov	 edx, DWORD PTR tv2622[ebp]
  04559	52		 push	 edx
  0455a	51		 push	 ecx
  0455b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  04563	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04568	68 00 00 00 00	 push	 OFFSET ?u64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  0456d	6a 07		 push	 7
  0456f	68 00 00 00 00	 push	 OFFSET ??_C@_08MINAMANI@drag?5u64@
  04574	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  04579	83 c4 20	 add	 esp, 32			; 00000020H

; 1377 :         ImGui::DragScalar("drag float",     ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", 1.0f);

  0457c	51		 push	 ecx
  0457d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04585	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0458a	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  0458f	8d 85 68 f9 ff
	ff		 lea	 eax, DWORD PTR _f32_one$117[ebp]
  04595	50		 push	 eax
  04596	8d 8d 74 f9 ff
	ff		 lea	 ecx, DWORD PTR _f32_zero$118[ebp]
  0459c	51		 push	 ecx
  0459d	51		 push	 ecx
  0459e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  045a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  045ab	68 00 00 00 00	 push	 OFFSET ?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  045b0	6a 08		 push	 8
  045b2	68 00 00 00 00	 push	 OFFSET ??_C@_0L@DLCOHHGO@drag?5float@
  045b7	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  045bc	83 c4 20	 add	 esp, 32			; 00000020H

; 1378 :         ImGui::DragScalar("drag float ^2",  ImGuiDataType_Float,  &f32_v, 0.005f,  &f32_zero, &f32_one, "%f", 2.0f); ImGui::SameLine(); HelpMarker("You can use the 'power' parameter to increase tweaking precision on one side of the range.");

  045bf	51		 push	 ecx
  045c0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  045c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  045cd	68 00 00 00 00	 push	 OFFSET ??_C@_02NJPGOMH@?$CFf@
  045d2	8d 85 68 f9 ff
	ff		 lea	 eax, DWORD PTR _f32_one$117[ebp]
  045d8	50		 push	 eax
  045d9	8d 8d 74 f9 ff
	ff		 lea	 ecx, DWORD PTR _f32_zero$118[ebp]
  045df	51		 push	 ecx
  045e0	51		 push	 ecx
  045e1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  045e9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  045ee	68 00 00 00 00	 push	 OFFSET ?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  045f3	6a 08		 push	 8
  045f5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NFIBPMBK@drag?5float?5?$FO2@
  045fa	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  045ff	83 c4 20	 add	 esp, 32			; 00000020H
  04602	51		 push	 ecx
  04603	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0460b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04610	51		 push	 ecx
  04611	0f 57 c0	 xorps	 xmm0, xmm0
  04614	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04619	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0461e	83 c4 08	 add	 esp, 8
  04621	68 00 00 00 00	 push	 OFFSET ??_C@_0FL@DBMGDFGC@You?5can?5use?5the?5?8power?8?5paramet@
  04626	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  0462b	83 c4 04	 add	 esp, 4

; 1379 :         ImGui::DragScalar("drag double",    ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, NULL,     "%.10f grams", 1.0f);

  0462e	51		 push	 ecx
  0462f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04637	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0463c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PBAPOGLA@?$CF?410f?5grams@
  04641	6a 00		 push	 0
  04643	8d 85 40 f9 ff
	ff		 lea	 eax, DWORD PTR _f64_zero$114[ebp]
  04649	50		 push	 eax
  0464a	51		 push	 ecx
  0464b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a03126f
  04653	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04658	68 00 00 00 00	 push	 OFFSET ?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA
  0465d	6a 09		 push	 9
  0465f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@IJGAEMEI@drag?5double@
  04664	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  04669	83 c4 20	 add	 esp, 32			; 00000020H

; 1380 :         ImGui::DragScalar("drag double ^2", ImGuiDataType_Double, &f64_v, 0.0005f, &f64_zero, &f64_one, "0 < %.10f < 1", 2.0f);

  0466c	51		 push	 ecx
  0466d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  04675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0467a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PIJBNPDH@0?5?$DM?5?$CF?410f?5?$DM?51@
  0467f	8d 85 30 f9 ff
	ff		 lea	 eax, DWORD PTR _f64_one$113[ebp]
  04685	50		 push	 eax
  04686	8d 8d 40 f9 ff
	ff		 lea	 ecx, DWORD PTR _f64_zero$114[ebp]
  0468c	51		 push	 ecx
  0468d	51		 push	 ecx
  0468e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3a03126f
  04696	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0469b	68 00 00 00 00	 push	 OFFSET ?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA
  046a0	6a 09		 push	 9
  046a2	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EEJHEFFF@drag?5double?5?$FO2@
  046a7	e8 00 00 00 00	 call	 ?DragScalar@ImGui@@YA_NPBDHPAXMPBX20M@Z ; ImGui::DragScalar
  046ac	83 c4 20	 add	 esp, 32			; 00000020H

; 1381 : 
; 1382 :         ImGui::Text("Sliders");

  046af	68 00 00 00 00	 push	 OFFSET ??_C@_07BBLEOMAH@Sliders@
  046b4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  046b9	83 c4 04	 add	 esp, 4

; 1383 :         ImGui::SliderScalar("slider s8 full",     ImGuiDataType_S8,     &s8_v,  &s8_min,   &s8_max,   "%d");

  046bc	51		 push	 ecx
  046bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  046c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  046ca	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  046cf	8d 85 bf fb ff
	ff		 lea	 eax, DWORD PTR _s8_max$162[ebp]
  046d5	50		 push	 eax
  046d6	8d 8d cb fb ff
	ff		 lea	 ecx, DWORD PTR _s8_min$163[ebp]
  046dc	51		 push	 ecx
  046dd	68 00 00 00 00	 push	 OFFSET ?s8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4DA
  046e2	6a 00		 push	 0
  046e4	68 00 00 00 00	 push	 OFFSET ??_C@_0P@BGDAIEKI@slider?5s8?5full@
  046e9	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  046ee	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1384 :         ImGui::SliderScalar("slider u8 full",     ImGuiDataType_U8,     &u8_v,  &u8_min,   &u8_max,   "%u");

  046f1	51		 push	 ecx
  046f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  046fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  046ff	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  04704	8d 85 83 fb ff
	ff		 lea	 eax, DWORD PTR _u8_max$157[ebp]
  0470a	50		 push	 eax
  0470b	8d 8d 8f fb ff
	ff		 lea	 ecx, DWORD PTR _u8_min$158[ebp]
  04711	51		 push	 ecx
  04712	68 00 00 00 00	 push	 OFFSET ?u8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4EA
  04717	6a 01		 push	 1
  04719	68 00 00 00 00	 push	 OFFSET ??_C@_0P@NAFPINCP@slider?5u8?5full@
  0471e	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04723	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1385 :         ImGui::SliderScalar("slider s16 full",    ImGuiDataType_S16,    &s16_v, &s16_min,  &s16_max,  "%d");

  04726	51		 push	 ecx
  04727	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0472f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04734	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  04739	8d 85 44 fb ff
	ff		 lea	 eax, DWORD PTR _s16_max$152[ebp]
  0473f	50		 push	 eax
  04740	8d 8d 50 fb ff
	ff		 lea	 ecx, DWORD PTR _s16_min$153[ebp]
  04746	51		 push	 ecx
  04747	68 00 00 00 00	 push	 OFFSET ?s16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4FA
  0474c	6a 02		 push	 2
  0474e	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NJECJBBM@slider?5s16?5full@
  04753	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04758	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1386 :         ImGui::SliderScalar("slider u16 full",    ImGuiDataType_U16,    &u16_v, &u16_min,  &u16_max,  "%u");

  0475b	51		 push	 ecx
  0475c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04764	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04769	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  0476e	8d 85 08 fb ff
	ff		 lea	 eax, DWORD PTR _u16_max$147[ebp]
  04774	50		 push	 eax
  04775	8d 8d 14 fb ff
	ff		 lea	 ecx, DWORD PTR _u16_min$148[ebp]
  0477b	51		 push	 ecx
  0477c	68 00 00 00 00	 push	 OFFSET ?u16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4GA
  04781	6a 03		 push	 3
  04783	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KKFIOIJG@slider?5u16?5full@
  04788	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  0478d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1387 :         ImGui::SliderScalar("slider s32 low",     ImGuiDataType_S32,    &s32_v, &s32_zero, &s32_fifty,"%d");

  04790	51		 push	 ecx
  04791	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04799	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0479e	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  047a3	8d 85 e4 fa ff
	ff		 lea	 eax, DWORD PTR _s32_fifty$144[ebp]
  047a9	50		 push	 eax
  047aa	8d 8d fc fa ff
	ff		 lea	 ecx, DWORD PTR _s32_zero$146[ebp]
  047b0	51		 push	 ecx
  047b1	68 00 00 00 00	 push	 OFFSET ?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  047b6	6a 04		 push	 4
  047b8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LPLLDPN@slider?5s32?5low@
  047bd	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  047c2	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1388 :         ImGui::SliderScalar("slider s32 high",    ImGuiDataType_S32,    &s32_v, &s32_hi_a, &s32_hi_b, "%d");

  047c5	51		 push	 ecx
  047c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  047ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  047d3	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  047d8	8d 85 b4 fa ff
	ff		 lea	 eax, DWORD PTR _s32_hi_b$140[ebp]
  047de	50		 push	 eax
  047df	8d 8d c0 fa ff
	ff		 lea	 ecx, DWORD PTR _s32_hi_a$141[ebp]
  047e5	51		 push	 ecx
  047e6	68 00 00 00 00	 push	 OFFSET ?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  047eb	6a 04		 push	 4
  047ed	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KCOOMONB@slider?5s32?5high@
  047f2	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  047f7	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1389 :         ImGui::SliderScalar("slider s32 full",    ImGuiDataType_S32,    &s32_v, &s32_min,  &s32_max,  "%d");

  047fa	51		 push	 ecx
  047fb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04803	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04808	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0480d	8d 85 cc fa ff
	ff		 lea	 eax, DWORD PTR _s32_max$142[ebp]
  04813	50		 push	 eax
  04814	8d 8d d8 fa ff
	ff		 lea	 ecx, DWORD PTR _s32_min$143[ebp]
  0481a	51		 push	 ecx
  0481b	68 00 00 00 00	 push	 OFFSET ?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04820	6a 04		 push	 4
  04822	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GPCILCHC@slider?5s32?5full@
  04827	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  0482c	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1390 :         ImGui::SliderScalar("slider u32 low",     ImGuiDataType_U32,    &u32_v, &u32_zero, &u32_fifty,"%u");

  0482f	51		 push	 ecx
  04830	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04838	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0483d	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  04842	8d 85 90 fa ff
	ff		 lea	 eax, DWORD PTR _u32_fifty$137[ebp]
  04848	50		 push	 eax
  04849	8d 8d a8 fa ff
	ff		 lea	 ecx, DWORD PTR _u32_zero$139[ebp]
  0484f	51		 push	 ecx
  04850	68 00 00 00 00	 push	 OFFSET ?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA
  04855	6a 05		 push	 5
  04857	68 00 00 00 00	 push	 OFFSET ??_C@_0P@MNJELKHK@slider?5u32?5low@
  0485c	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04861	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1391 :         ImGui::SliderScalar("slider u32 high",    ImGuiDataType_U32,    &u32_v, &u32_hi_a, &u32_hi_b, "%u");

  04864	51		 push	 ecx
  04865	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0486d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04872	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  04877	8d 85 60 fa ff
	ff		 lea	 eax, DWORD PTR _u32_hi_b$133[ebp]
  0487d	50		 push	 eax
  0487e	8d 8d 6c fa ff
	ff		 lea	 ecx, DWORD PTR _u32_hi_a$134[ebp]
  04884	51		 push	 ecx
  04885	68 00 00 00 00	 push	 OFFSET ?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA
  0488a	6a 05		 push	 5
  0488c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@NBPELHFL@slider?5u32?5high@
  04891	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04896	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1392 :         ImGui::SliderScalar("slider u32 full",    ImGuiDataType_U32,    &u32_v, &u32_min,  &u32_max,  "%u");

  04899	51		 push	 ecx
  0489a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  048a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  048a7	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  048ac	8d 85 78 fa ff
	ff		 lea	 eax, DWORD PTR _u32_max$135[ebp]
  048b2	50		 push	 eax
  048b3	8d 8d 84 fa ff
	ff		 lea	 ecx, DWORD PTR _u32_min$136[ebp]
  048b9	51		 push	 ecx
  048ba	68 00 00 00 00	 push	 OFFSET ?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA
  048bf	6a 05		 push	 5
  048c1	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BMDCMLPI@slider?5u32?5full@
  048c6	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  048cb	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1393 :         ImGui::SliderScalar("slider s64 low",     ImGuiDataType_S64,    &s64_v, &s64_zero, &s64_fifty,"%I64d");

  048ce	51		 push	 ecx
  048cf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  048d7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  048dc	68 00 00 00 00	 push	 OFFSET ??_C@_05LLAMLEHD@?$CFI64d@
  048e1	8d 85 30 fa ff
	ff		 lea	 eax, DWORD PTR _s64_fifty$130[ebp]
  048e7	50		 push	 eax
  048e8	8d 8d 50 fa ff
	ff		 lea	 ecx, DWORD PTR _s64_zero$132[ebp]
  048ee	51		 push	 ecx
  048ef	68 00 00 00 00	 push	 OFFSET ?s64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  048f4	6a 06		 push	 6
  048f6	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IPJKHPEH@slider?5s64?5low@
  048fb	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04900	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1394 :         ImGui::SliderScalar("slider s64 high",    ImGuiDataType_S64,    &s64_v, &s64_hi_a, &s64_hi_b, "%I64d");

  04903	51		 push	 ecx
  04904	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0490c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04911	68 00 00 00 00	 push	 OFFSET ??_C@_05LLAMLEHD@?$CFI64d@
  04916	8d 85 f0 f9 ff
	ff		 lea	 eax, DWORD PTR _s64_hi_b$126[ebp]
  0491c	50		 push	 eax
  0491d	8d 8d 00 fa ff
	ff		 lea	 ecx, DWORD PTR _s64_hi_a$127[ebp]
  04923	51		 push	 ecx
  04924	68 00 00 00 00	 push	 OFFSET ?s64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  04929	6a 06		 push	 6
  0492b	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IJNOPFIP@slider?5s64?5high@
  04930	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04935	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1395 :         ImGui::SliderScalar("slider s64 full",    ImGuiDataType_S64,    &s64_v, &s64_min,  &s64_max,  "%I64d");

  04938	51		 push	 ecx
  04939	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04946	68 00 00 00 00	 push	 OFFSET ??_C@_05LLAMLEHD@?$CFI64d@
  0494b	8d 85 10 fa ff
	ff		 lea	 eax, DWORD PTR _s64_max$128[ebp]
  04951	50		 push	 eax
  04952	8d 8d 20 fa ff
	ff		 lea	 ecx, DWORD PTR _s64_min$129[ebp]
  04958	51		 push	 ecx
  04959	68 00 00 00 00	 push	 OFFSET ?s64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  0495e	6a 06		 push	 6
  04960	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EEBIIJCM@slider?5s64?5full@
  04965	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  0496a	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1396 :         ImGui::SliderScalar("slider u64 low",     ImGuiDataType_U64,    &u64_v, &u64_zero, &u64_fifty,"%I64u ms");

  0496d	51		 push	 ecx
  0496e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04976	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0497b	68 00 00 00 00	 push	 OFFSET ??_C@_08GGAHJCGP@?$CFI64u?5ms@
  04980	8d 85 c0 f9 ff
	ff		 lea	 eax, DWORD PTR _u64_fifty$123[ebp]
  04986	50		 push	 eax
  04987	8d 8d e0 f9 ff
	ff		 lea	 ecx, DWORD PTR _u64_zero$125[ebp]
  0498d	51		 push	 ecx
  0498e	68 00 00 00 00	 push	 OFFSET ?u64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  04993	6a 07		 push	 7
  04995	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EJPFHGMA@slider?5u64?5low@
  0499a	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  0499f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1397 :         ImGui::SliderScalar("slider u64 high",    ImGuiDataType_U64,    &u64_v, &u64_hi_a, &u64_hi_b, "%I64u ms");

  049a2	51		 push	 ecx
  049a3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  049ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  049b0	68 00 00 00 00	 push	 OFFSET ??_C@_08GGAHJCGP@?$CFI64u?5ms@
  049b5	8d 85 80 f9 ff
	ff		 lea	 eax, DWORD PTR _u64_hi_b$119[ebp]
  049bb	50		 push	 eax
  049bc	8d 8d 90 f9 ff
	ff		 lea	 ecx, DWORD PTR _u64_hi_a$120[ebp]
  049c2	51		 push	 ecx
  049c3	68 00 00 00 00	 push	 OFFSET ?u64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  049c8	6a 07		 push	 7
  049ca	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PKMEIMAF@slider?5u64?5high@
  049cf	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  049d4	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1398 :         ImGui::SliderScalar("slider u64 full",    ImGuiDataType_U64,    &u64_v, &u64_min,  &u64_max,  "%I64u ms");

  049d7	51		 push	 ecx
  049d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  049e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  049e5	68 00 00 00 00	 push	 OFFSET ??_C@_08GGAHJCGP@?$CFI64u?5ms@
  049ea	8d 85 a0 f9 ff
	ff		 lea	 eax, DWORD PTR _u64_max$121[ebp]
  049f0	50		 push	 eax
  049f1	8d 8d b0 f9 ff
	ff		 lea	 ecx, DWORD PTR _u64_min$122[ebp]
  049f7	51		 push	 ecx
  049f8	68 00 00 00 00	 push	 OFFSET ?u64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  049fd	6a 07		 push	 7
  049ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DHACPAKG@slider?5u64?5full@
  04a04	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04a09	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1399 :         ImGui::SliderScalar("slider float low",   ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one);

  04a0c	51		 push	 ecx
  04a0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04a15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04a1a	6a 00		 push	 0
  04a1c	8d 85 68 f9 ff
	ff		 lea	 eax, DWORD PTR _f32_one$117[ebp]
  04a22	50		 push	 eax
  04a23	8d 8d 74 f9 ff
	ff		 lea	 ecx, DWORD PTR _f32_zero$118[ebp]
  04a29	51		 push	 ecx
  04a2a	68 00 00 00 00	 push	 OFFSET ?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04a2f	6a 08		 push	 8
  04a31	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CCICNGDA@slider?5float?5low@
  04a36	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04a3b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1400 :         ImGui::SliderScalar("slider float low^2", ImGuiDataType_Float,  &f32_v, &f32_zero, &f32_one,  "%.10f", 2.0f);

  04a3e	51		 push	 ecx
  04a3f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  04a47	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04a4c	68 00 00 00 00	 push	 OFFSET ??_C@_05DIPGONMJ@?$CF?410f@
  04a51	8d 85 68 f9 ff
	ff		 lea	 eax, DWORD PTR _f32_one$117[ebp]
  04a57	50		 push	 eax
  04a58	8d 8d 74 f9 ff
	ff		 lea	 ecx, DWORD PTR _f32_zero$118[ebp]
  04a5e	51		 push	 ecx
  04a5f	68 00 00 00 00	 push	 OFFSET ?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04a64	6a 08		 push	 8
  04a66	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DLKEDEFL@slider?5float?5low?$FO2@
  04a6b	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04a70	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1401 :         ImGui::SliderScalar("slider float high",  ImGuiDataType_Float,  &f32_v, &f32_lo_a, &f32_hi_a, "%e");

  04a73	51		 push	 ecx
  04a74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04a7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04a81	68 00 00 00 00	 push	 OFFSET ??_C@_02CGLCDNAE@?$CFe@
  04a86	8d 85 50 f9 ff
	ff		 lea	 eax, DWORD PTR _f32_hi_a$115[ebp]
  04a8c	50		 push	 eax
  04a8d	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR _f32_lo_a$116[ebp]
  04a93	51		 push	 ecx
  04a94	68 00 00 00 00	 push	 OFFSET ?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04a99	6a 08		 push	 8
  04a9b	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@EHBCAJLJ@slider?5float?5high@
  04aa0	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04aa5	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1402 :         ImGui::SliderScalar("slider double low",  ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f grams", 1.0f);

  04aa8	51		 push	 ecx
  04aa9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04ab1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04ab6	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PBAPOGLA@?$CF?410f?5grams@
  04abb	8d 85 30 f9 ff
	ff		 lea	 eax, DWORD PTR _f64_one$113[ebp]
  04ac1	50		 push	 eax
  04ac2	8d 8d 40 f9 ff
	ff		 lea	 ecx, DWORD PTR _f64_zero$114[ebp]
  04ac8	51		 push	 ecx
  04ac9	68 00 00 00 00	 push	 OFFSET ?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA
  04ace	6a 09		 push	 9
  04ad0	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@NEJIDBJN@slider?5double?5low@
  04ad5	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04ada	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1403 :         ImGui::SliderScalar("slider double low^2",ImGuiDataType_Double, &f64_v, &f64_zero, &f64_one,  "%.10f", 2.0f);

  04add	51		 push	 ecx
  04ade	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  04ae6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04aeb	68 00 00 00 00	 push	 OFFSET ??_C@_05DIPGONMJ@?$CF?410f@
  04af0	8d 85 30 f9 ff
	ff		 lea	 eax, DWORD PTR _f64_one$113[ebp]
  04af6	50		 push	 eax
  04af7	8d 8d 40 f9 ff
	ff		 lea	 ecx, DWORD PTR _f64_zero$114[ebp]
  04afd	51		 push	 ecx
  04afe	68 00 00 00 00	 push	 OFFSET ?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA
  04b03	6a 09		 push	 9
  04b05	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@BOGDHHDO@slider?5double?5low?$FO2@
  04b0a	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04b0f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1404 :         ImGui::SliderScalar("slider double high", ImGuiDataType_Double, &f64_v, &f64_lo_a, &f64_hi_a, "%e grams", 1.0f);

  04b12	51		 push	 ecx
  04b13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04b1b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04b20	68 00 00 00 00	 push	 OFFSET ??_C@_08NHECNFJD@?$CFe?5grams@
  04b25	8d 85 10 f9 ff
	ff		 lea	 eax, DWORD PTR _f64_hi_a$111[ebp]
  04b2b	50		 push	 eax
  04b2c	8d 8d 20 f9 ff
	ff		 lea	 ecx, DWORD PTR _f64_lo_a$112[ebp]
  04b32	51		 push	 ecx
  04b33	68 00 00 00 00	 push	 OFFSET ?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA
  04b38	6a 09		 push	 9
  04b3a	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@OPIDMMAL@slider?5double?5high@
  04b3f	e8 00 00 00 00	 call	 ?SliderScalar@ImGui@@YA_NPBDHPAXPBX20M@Z ; ImGui::SliderScalar
  04b44	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1405 : 
; 1406 :         static bool inputs_step = true;
; 1407 :         ImGui::Text("Inputs");

  04b47	68 00 00 00 00	 push	 OFFSET ??_C@_06HDCHCENJ@Inputs@
  04b4c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  04b51	83 c4 04	 add	 esp, 4

; 1408 :         ImGui::Checkbox("Show step buttons", &inputs_step);

  04b54	68 00 00 00 00	 push	 OFFSET ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04b59	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HEADHDLD@Show?5step?5buttons@
  04b5e	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  04b63	83 c4 08	 add	 esp, 8

; 1409 :         ImGui::InputScalar("input s8",      ImGuiDataType_S8,     &s8_v,  inputs_step ? &s8_one  : NULL, NULL, "%d");

  04b66	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04b6d	85 c0		 test	 eax, eax
  04b6f	74 0e		 je	 SHORT $LN293@ShowDemoWi
  04b71	8d 8d e3 fb ff
	ff		 lea	 ecx, DWORD PTR _s8_one$165[ebp]
  04b77	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2890[ebp], ecx
  04b7d	eb 0a		 jmp	 SHORT $LN294@ShowDemoWi
$LN293@ShowDemoWi:
  04b7f	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2890[ebp], 0
$LN294@ShowDemoWi:
  04b89	6a 00		 push	 0
  04b8b	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  04b90	6a 00		 push	 0
  04b92	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2890[ebp]
  04b98	52		 push	 edx
  04b99	68 00 00 00 00	 push	 OFFSET ?s8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4DA
  04b9e	6a 00		 push	 0
  04ba0	68 00 00 00 00	 push	 OFFSET ??_C@_08HGJIKBLN@input?5s8@
  04ba5	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04baa	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1410 :         ImGui::InputScalar("input u8",      ImGuiDataType_U8,     &u8_v,  inputs_step ? &u8_one  : NULL, NULL, "%u");

  04bad	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04bb4	85 c0		 test	 eax, eax
  04bb6	74 0e		 je	 SHORT $LN295@ShowDemoWi
  04bb8	8d 8d a7 fb ff
	ff		 lea	 ecx, DWORD PTR _u8_one$160[ebp]
  04bbe	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2900[ebp], ecx
  04bc4	eb 0a		 jmp	 SHORT $LN296@ShowDemoWi
$LN295@ShowDemoWi:
  04bc6	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2900[ebp], 0
$LN296@ShowDemoWi:
  04bd0	6a 00		 push	 0
  04bd2	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  04bd7	6a 00		 push	 0
  04bd9	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2900[ebp]
  04bdf	52		 push	 edx
  04be0	68 00 00 00 00	 push	 OFFSET ?u8_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4EA
  04be5	6a 01		 push	 1
  04be7	68 00 00 00 00	 push	 OFFSET ??_C@_08HCBFNNAP@input?5u8@
  04bec	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04bf1	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1411 :         ImGui::InputScalar("input s16",     ImGuiDataType_S16,    &s16_v, inputs_step ? &s16_one : NULL, NULL, "%d");

  04bf4	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04bfb	85 c0		 test	 eax, eax
  04bfd	74 0e		 je	 SHORT $LN297@ShowDemoWi
  04bff	8d 8d 68 fb ff
	ff		 lea	 ecx, DWORD PTR _s16_one$155[ebp]
  04c05	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2910[ebp], ecx
  04c0b	eb 0a		 jmp	 SHORT $LN298@ShowDemoWi
$LN297@ShowDemoWi:
  04c0d	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2910[ebp], 0
$LN298@ShowDemoWi:
  04c17	6a 00		 push	 0
  04c19	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  04c1e	6a 00		 push	 0
  04c20	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2910[ebp]
  04c26	52		 push	 edx
  04c27	68 00 00 00 00	 push	 OFFSET ?s16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4FA
  04c2c	6a 02		 push	 2
  04c2e	68 00 00 00 00	 push	 OFFSET ??_C@_09DDGLPNGK@input?5s16@
  04c33	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04c38	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1412 :         ImGui::InputScalar("input u16",     ImGuiDataType_U16,    &u16_v, inputs_step ? &u16_one : NULL, NULL, "%u");

  04c3b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04c42	85 c0		 test	 eax, eax
  04c44	74 0e		 je	 SHORT $LN299@ShowDemoWi
  04c46	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR _u16_one$150[ebp]
  04c4c	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2920[ebp], ecx
  04c52	eb 0a		 jmp	 SHORT $LN300@ShowDemoWi
$LN299@ShowDemoWi:
  04c54	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2920[ebp], 0
$LN300@ShowDemoWi:
  04c5e	6a 00		 push	 0
  04c60	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  04c65	6a 00		 push	 0
  04c67	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2920[ebp]
  04c6d	52		 push	 edx
  04c6e	68 00 00 00 00	 push	 OFFSET ?u16_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4GA
  04c73	6a 03		 push	 3
  04c75	68 00 00 00 00	 push	 OFFSET ??_C@_09BGAAKCLG@input?5u16@
  04c7a	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04c7f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1413 :         ImGui::InputScalar("input s32",     ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%d");

  04c82	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04c89	85 c0		 test	 eax, eax
  04c8b	74 0e		 je	 SHORT $LN301@ShowDemoWi
  04c8d	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _s32_one$145[ebp]
  04c93	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2930[ebp], ecx
  04c99	eb 0a		 jmp	 SHORT $LN302@ShowDemoWi
$LN301@ShowDemoWi:
  04c9b	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2930[ebp], 0
$LN302@ShowDemoWi:
  04ca5	6a 00		 push	 0
  04ca7	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  04cac	6a 00		 push	 0
  04cae	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2930[ebp]
  04cb4	52		 push	 edx
  04cb5	68 00 00 00 00	 push	 OFFSET ?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04cba	6a 04		 push	 4
  04cbc	68 00 00 00 00	 push	 OFFSET ??_C@_09FEIDOMAA@input?5s32@
  04cc1	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04cc6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1414 :         ImGui::InputScalar("input s32 hex", ImGuiDataType_S32,    &s32_v, inputs_step ? &s32_one : NULL, NULL, "%08X", ImGuiInputTextFlags_CharsHexadecimal);

  04cc9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04cd0	85 c0		 test	 eax, eax
  04cd2	74 0e		 je	 SHORT $LN303@ShowDemoWi
  04cd4	8d 8d f0 fa ff
	ff		 lea	 ecx, DWORD PTR _s32_one$145[ebp]
  04cda	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2940[ebp], ecx
  04ce0	eb 0a		 jmp	 SHORT $LN304@ShowDemoWi
$LN303@ShowDemoWi:
  04ce2	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2940[ebp], 0
$LN304@ShowDemoWi:
  04cec	6a 02		 push	 2
  04cee	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMNDDED@?$CF08X@
  04cf3	6a 00		 push	 0
  04cf5	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2940[ebp]
  04cfb	52		 push	 edx
  04cfc	68 00 00 00 00	 push	 OFFSET ?s32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  04d01	6a 04		 push	 4
  04d03	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EKPJHNHM@input?5s32?5hex@
  04d08	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04d0d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1415 :         ImGui::InputScalar("input u32",     ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%u");

  04d10	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04d17	85 c0		 test	 eax, eax
  04d19	74 0e		 je	 SHORT $LN305@ShowDemoWi
  04d1b	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _u32_one$138[ebp]
  04d21	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2950[ebp], ecx
  04d27	eb 0a		 jmp	 SHORT $LN306@ShowDemoWi
$LN305@ShowDemoWi:
  04d29	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2950[ebp], 0
$LN306@ShowDemoWi:
  04d33	6a 00		 push	 0
  04d35	68 00 00 00 00	 push	 OFFSET ??_C@_02GMHACPFF@?$CFu@
  04d3a	6a 00		 push	 0
  04d3c	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2950[ebp]
  04d42	52		 push	 edx
  04d43	68 00 00 00 00	 push	 OFFSET ?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA
  04d48	6a 05		 push	 5
  04d4a	68 00 00 00 00	 push	 OFFSET ??_C@_09HBOILDNM@input?5u32@
  04d4f	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04d54	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1416 :         ImGui::InputScalar("input u32 hex", ImGuiDataType_U32,    &u32_v, inputs_step ? &u32_one : NULL, NULL, "%08X", ImGuiInputTextFlags_CharsHexadecimal);

  04d57	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04d5e	85 c0		 test	 eax, eax
  04d60	74 0e		 je	 SHORT $LN307@ShowDemoWi
  04d62	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR _u32_one$138[ebp]
  04d68	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2960[ebp], ecx
  04d6e	eb 0a		 jmp	 SHORT $LN308@ShowDemoWi
$LN307@ShowDemoWi:
  04d70	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2960[ebp], 0
$LN308@ShowDemoWi:
  04d7a	6a 02		 push	 2
  04d7c	68 00 00 00 00	 push	 OFFSET ??_C@_04JIMNDDED@?$CF08X@
  04d81	6a 00		 push	 0
  04d83	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2960[ebp]
  04d89	52		 push	 edx
  04d8a	68 00 00 00 00	 push	 OFFSET ?u32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4IA
  04d8f	6a 05		 push	 5
  04d91	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IMJGHEPL@input?5u32?5hex@
  04d96	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04d9b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1417 :         ImGui::InputScalar("input s64",     ImGuiDataType_S64,    &s64_v, inputs_step ? &s64_one : NULL);

  04d9e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04da5	85 c0		 test	 eax, eax
  04da7	74 0e		 je	 SHORT $LN309@ShowDemoWi
  04da9	8d 8d 40 fa ff
	ff		 lea	 ecx, DWORD PTR _s64_one$131[ebp]
  04daf	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2970[ebp], ecx
  04db5	eb 0a		 jmp	 SHORT $LN310@ShowDemoWi
$LN309@ShowDemoWi:
  04db7	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2970[ebp], 0
$LN310@ShowDemoWi:
  04dc1	6a 00		 push	 0
  04dc3	6a 00		 push	 0
  04dc5	6a 00		 push	 0
  04dc7	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2970[ebp]
  04dcd	52		 push	 edx
  04dce	68 00 00 00 00	 push	 OFFSET ?s64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_JA
  04dd3	6a 06		 push	 6
  04dd5	68 00 00 00 00	 push	 OFFSET ??_C@_09EBCIJGN@input?5s64@
  04dda	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04ddf	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1418 :         ImGui::InputScalar("input u64",     ImGuiDataType_U64,    &u64_v, inputs_step ? &u64_one : NULL);

  04de2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04de9	85 c0		 test	 eax, eax
  04deb	74 0e		 je	 SHORT $LN311@ShowDemoWi
  04ded	8d 8d d0 f9 ff
	ff		 lea	 ecx, DWORD PTR _u64_one$124[ebp]
  04df3	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2980[ebp], ecx
  04df9	eb 0a		 jmp	 SHORT $LN312@ShowDemoWi
$LN311@ShowDemoWi:
  04dfb	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2980[ebp], 0
$LN312@ShowDemoWi:
  04e05	6a 00		 push	 0
  04e07	6a 00		 push	 0
  04e09	6a 00		 push	 0
  04e0b	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2980[ebp]
  04e11	52		 push	 edx
  04e12	68 00 00 00 00	 push	 OFFSET ?u64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_KA
  04e17	6a 07		 push	 7
  04e19	68 00 00 00 00	 push	 OFFSET ??_C@_09CBHJNGLB@input?5u64@
  04e1e	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04e23	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1419 :         ImGui::InputScalar("input float",   ImGuiDataType_Float,  &f32_v, inputs_step ? &f32_one : NULL);

  04e26	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04e2d	85 c0		 test	 eax, eax
  04e2f	74 0e		 je	 SHORT $LN313@ShowDemoWi
  04e31	8d 8d 68 f9 ff
	ff		 lea	 ecx, DWORD PTR _f32_one$117[ebp]
  04e37	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv2990[ebp], ecx
  04e3d	eb 0a		 jmp	 SHORT $LN314@ShowDemoWi
$LN313@ShowDemoWi:
  04e3f	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv2990[ebp], 0
$LN314@ShowDemoWi:
  04e49	6a 00		 push	 0
  04e4b	6a 00		 push	 0
  04e4d	6a 00		 push	 0
  04e4f	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv2990[ebp]
  04e55	52		 push	 edx
  04e56	68 00 00 00 00	 push	 OFFSET ?f32_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4MA
  04e5b	6a 08		 push	 8
  04e5d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@HLMFPLHI@input?5float@
  04e62	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04e67	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1420 :         ImGui::InputScalar("input double",  ImGuiDataType_Double, &f64_v, inputs_step ? &f64_one : NULL);

  04e6a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?inputs_step@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  04e71	85 c0		 test	 eax, eax
  04e73	74 0e		 je	 SHORT $LN315@ShowDemoWi
  04e75	8d 8d 30 f9 ff
	ff		 lea	 ecx, DWORD PTR _f64_one$113[ebp]
  04e7b	89 8d b8 eb ff
	ff		 mov	 DWORD PTR tv3000[ebp], ecx
  04e81	eb 0a		 jmp	 SHORT $LN316@ShowDemoWi
$LN315@ShowDemoWi:
  04e83	c7 85 b8 eb ff
	ff 00 00 00 00	 mov	 DWORD PTR tv3000[ebp], 0
$LN316@ShowDemoWi:
  04e8d	6a 00		 push	 0
  04e8f	6a 00		 push	 0
  04e91	6a 00		 push	 0
  04e93	8b 95 b8 eb ff
	ff		 mov	 edx, DWORD PTR tv3000[ebp]
  04e99	52		 push	 edx
  04e9a	68 00 00 00 00	 push	 OFFSET ?f64_v@?BDD@??ShowDemoWindowWidgets@@YAXXZ@4NA
  04e9f	6a 09		 push	 9
  04ea1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HNPEBCJF@input?5double@
  04ea6	e8 00 00 00 00	 call	 ?InputScalar@ImGui@@YA_NPBDHPAXPBX20H@Z ; ImGui::InputScalar
  04eab	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1421 : 
; 1422 :         ImGui::TreePop();

  04eae	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN183@ShowDemoWi:

; 1423 :     }
; 1424 : 
; 1425 :     if (ImGui::TreeNode("Multi-component Widgets"))

  04eb3	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@ELCHCBAK@Multi?9component?5Widgets@
  04eb8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  04ebd	83 c4 04	 add	 esp, 4
  04ec0	0f b6 c0	 movzx	 eax, al
  04ec3	85 c0		 test	 eax, eax
  04ec5	0f 84 06 03 00
	00		 je	 $LN184@ShowDemoWi

; 1426 :     {
; 1427 :         static float vec4f[4] = { 0.10f, 0.20f, 0.30f, 0.44f };
; 1428 :         static int vec4i[4] = { 1, 5, 100, 255 };
; 1429 : 
; 1430 :         ImGui::InputFloat2("input float2", vec4f);

  04ecb	6a 00		 push	 0
  04ecd	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  04ed2	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  04ed7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LDNFGIIE@input?5float2@
  04edc	e8 00 00 00 00	 call	 ?InputFloat2@ImGui@@YA_NPBDQAM0H@Z ; ImGui::InputFloat2
  04ee1	83 c4 10	 add	 esp, 16			; 00000010H

; 1431 :         ImGui::DragFloat2("drag float2", vec4f, 0.01f, 0.0f, 1.0f);

  04ee4	51		 push	 ecx
  04ee5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04eed	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04ef2	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  04ef7	51		 push	 ecx
  04ef8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04f00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f05	51		 push	 ecx
  04f06	0f 57 c0	 xorps	 xmm0, xmm0
  04f09	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f0e	51		 push	 ecx
  04f0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  04f17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f1c	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  04f21	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EHEBDGFJ@drag?5float2@
  04f26	e8 00 00 00 00	 call	 ?DragFloat2@ImGui@@YA_NPBDQAMMMM0M@Z ; ImGui::DragFloat2
  04f2b	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1432 :         ImGui::SliderFloat2("slider float2", vec4f, 0.0f, 1.0f);

  04f2e	51		 push	 ecx
  04f2f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04f37	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f3c	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  04f41	51		 push	 ecx
  04f42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04f4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f4f	51		 push	 ecx
  04f50	0f 57 c0	 xorps	 xmm0, xmm0
  04f53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f58	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  04f5d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NIDINEOI@slider?5float2@
  04f62	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  04f67	83 c4 18	 add	 esp, 24			; 00000018H

; 1433 :         ImGui::InputInt2("input int2", vec4i);

  04f6a	6a 00		 push	 0
  04f6c	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  04f71	68 00 00 00 00	 push	 OFFSET ??_C@_0L@IKAEHOLD@input?5int2@
  04f76	e8 00 00 00 00	 call	 ?InputInt2@ImGui@@YA_NPBDQAHH@Z ; ImGui::InputInt2
  04f7b	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1434 :         ImGui::DragInt2("drag int2", vec4i, 1, 0, 255);

  04f7e	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  04f83	68 ff 00 00 00	 push	 255			; 000000ffH
  04f88	6a 00		 push	 0
  04f8a	51		 push	 ecx
  04f8b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04f93	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04f98	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  04f9d	68 00 00 00 00	 push	 OFFSET ??_C@_09LOIDAOFJ@drag?5int2@
  04fa2	e8 00 00 00 00	 call	 ?DragInt2@ImGui@@YA_NPBDQAHMHH0@Z ; ImGui::DragInt2
  04fa7	83 c4 18	 add	 esp, 24			; 00000018H

; 1435 :         ImGui::SliderInt2("slider int2", vec4i, 0, 255);

  04faa	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  04faf	68 ff 00 00 00	 push	 255			; 000000ffH
  04fb4	6a 00		 push	 0
  04fb6	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  04fbb	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LEEOPKGD@slider?5int2@
  04fc0	e8 00 00 00 00	 call	 ?SliderInt2@ImGui@@YA_NPBDQAHHH0@Z ; ImGui::SliderInt2
  04fc5	83 c4 14	 add	 esp, 20			; 00000014H

; 1436 :         ImGui::Spacing();

  04fc8	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 1437 : 
; 1438 :         ImGui::InputFloat3("input float3", vec4f);

  04fcd	6a 00		 push	 0
  04fcf	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  04fd4	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  04fd9	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KKMOFJMF@input?5float3@
  04fde	e8 00 00 00 00	 call	 ?InputFloat3@ImGui@@YA_NPBDQAM0H@Z ; ImGui::InputFloat3
  04fe3	83 c4 10	 add	 esp, 16			; 00000010H

; 1439 :         ImGui::DragFloat3("drag float3", vec4f, 0.01f, 0.0f, 1.0f);

  04fe6	51		 push	 ecx
  04fe7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  04fef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  04ff4	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  04ff9	51		 push	 ecx
  04ffa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05002	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05007	51		 push	 ecx
  05008	0f 57 c0	 xorps	 xmm0, xmm0
  0500b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05010	51		 push	 ecx
  05011	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  05019	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0501e	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05023	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FOFKAHBI@drag?5float3@
  05028	e8 00 00 00 00	 call	 ?DragFloat3@ImGui@@YA_NPBDQAMMMM0M@Z ; ImGui::DragFloat3
  0502d	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1440 :         ImGui::SliderFloat3("slider float3", vec4f, 0.0f, 1.0f);

  05030	51		 push	 ecx
  05031	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0503e	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05043	51		 push	 ecx
  05044	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0504c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05051	51		 push	 ecx
  05052	0f 57 c0	 xorps	 xmm0, xmm0
  05055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0505a	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0505f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MBCDOFKJ@slider?5float3@
  05064	e8 00 00 00 00	 call	 ?SliderFloat3@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat3
  05069	83 c4 18	 add	 esp, 24			; 00000018H

; 1441 :         ImGui::InputInt3("input int3", vec4i);

  0506c	6a 00		 push	 0
  0506e	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  05073	68 00 00 00 00	 push	 OFFSET ??_C@_0L@JDBPEPPC@input?5int3@
  05078	e8 00 00 00 00	 call	 ?InputInt3@ImGui@@YA_NPBDQAHH@Z ; ImGui::InputInt3
  0507d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1442 :         ImGui::DragInt3("drag int3", vec4i, 1, 0, 255);

  05080	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  05085	68 ff 00 00 00	 push	 255			; 000000ffH
  0508a	6a 00		 push	 0
  0508c	51		 push	 ecx
  0508d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05095	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0509a	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  0509f	68 00 00 00 00	 push	 OFFSET ??_C@_09KHJIDPBI@drag?5int3@
  050a4	e8 00 00 00 00	 call	 ?DragInt3@ImGui@@YA_NPBDQAHMHH0@Z ; ImGui::DragInt3
  050a9	83 c4 18	 add	 esp, 24			; 00000018H

; 1443 :         ImGui::SliderInt3("slider int3", vec4i, 0, 255);

  050ac	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  050b1	68 ff 00 00 00	 push	 255			; 000000ffH
  050b6	6a 00		 push	 0
  050b8	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  050bd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KNFFMLCC@slider?5int3@
  050c2	e8 00 00 00 00	 call	 ?SliderInt3@ImGui@@YA_NPBDQAHHH0@Z ; ImGui::SliderInt3
  050c7	83 c4 14	 add	 esp, 20			; 00000014H

; 1444 :         ImGui::Spacing();

  050ca	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 1445 : 
; 1446 :         ImGui::InputFloat4("input float4", vec4f);

  050cf	6a 00		 push	 0
  050d1	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  050d6	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  050db	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OFIPMPAC@input?5float4@
  050e0	e8 00 00 00 00	 call	 ?InputFloat4@ImGui@@YA_NPBDQAM0H@Z ; ImGui::InputFloat4
  050e5	83 c4 10	 add	 esp, 16			; 00000010H

; 1447 :         ImGui::DragFloat4("drag float4", vec4f, 0.01f, 0.0f, 1.0f);

  050e8	51		 push	 ecx
  050e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  050f1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  050f6	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  050fb	51		 push	 ecx
  050fc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05109	51		 push	 ecx
  0510a	0f 57 c0	 xorps	 xmm0, xmm0
  0510d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05112	51		 push	 ecx
  05113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3c23d70a
  0511b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05120	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05125	68 00 00 00 00	 push	 OFFSET ??_C@_0M@BBBLJBNP@drag?5float4@
  0512a	e8 00 00 00 00	 call	 ?DragFloat4@ImGui@@YA_NPBDQAMMMM0M@Z ; ImGui::DragFloat4
  0512f	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1448 :         ImGui::SliderFloat4("slider float4", vec4f, 0.0f, 1.0f);

  05132	51		 push	 ecx
  05133	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0513b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05140	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05145	51		 push	 ecx
  05146	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0514e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05153	51		 push	 ecx
  05154	0f 57 c0	 xorps	 xmm0, xmm0
  05157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0515c	68 00 00 00 00	 push	 OFFSET ?vec4f@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05161	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IOGCHDGO@slider?5float4@
  05166	e8 00 00 00 00	 call	 ?SliderFloat4@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat4
  0516b	83 c4 18	 add	 esp, 24			; 00000018H

; 1449 :         ImGui::InputInt4("input int4", vec4i);

  0516e	6a 00		 push	 0
  05170	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  05175	68 00 00 00 00	 push	 OFFSET ??_C@_0L@NMFONJDF@input?5int4@
  0517a	e8 00 00 00 00	 call	 ?InputInt4@ImGui@@YA_NPBDQAHH@Z ; ImGui::InputInt4
  0517f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1450 :         ImGui::DragInt4("drag int4", vec4i, 1, 0, 255);

  05182	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  05187	68 ff 00 00 00	 push	 255			; 000000ffH
  0518c	6a 00		 push	 0
  0518e	51		 push	 ecx
  0518f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0519c	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  051a1	68 00 00 00 00	 push	 OFFSET ??_C@_09OINJKJNP@drag?5int4@
  051a6	e8 00 00 00 00	 call	 ?DragInt4@ImGui@@YA_NPBDQAHMHH0@Z ; ImGui::DragInt4
  051ab	83 c4 18	 add	 esp, 24			; 00000018H

; 1451 :         ImGui::SliderInt4("slider int4", vec4i, 0, 255);

  051ae	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  051b3	68 ff 00 00 00	 push	 255			; 000000ffH
  051b8	6a 00		 push	 0
  051ba	68 00 00 00 00	 push	 OFFSET ?vec4i@?BDG@??ShowDemoWindowWidgets@@YAXXZ@4PAHA
  051bf	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OCBEFNOF@slider?5int4@
  051c4	e8 00 00 00 00	 call	 ?SliderInt4@ImGui@@YA_NPBDQAHHH0@Z ; ImGui::SliderInt4
  051c9	83 c4 14	 add	 esp, 20			; 00000014H

; 1452 : 
; 1453 :         ImGui::TreePop();

  051cc	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN184@ShowDemoWi:

; 1454 :     }
; 1455 : 
; 1456 :     if (ImGui::TreeNode("Vertical Sliders"))

  051d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@EAIBMPEL@Vertical?5Sliders@
  051d6	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  051db	83 c4 04	 add	 esp, 4
  051de	0f b6 c0	 movzx	 eax, al
  051e1	85 c0		 test	 eax, eax
  051e3	0f 84 45 06 00
	00		 je	 $LN185@ShowDemoWi

; 1457 :     {
; 1458 :         const float spacing = 4;

  051e9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  051f1	f3 0f 11 85 f8
	f8 ff ff	 movss	 DWORD PTR _spacing$109[ebp], xmm0

; 1459 :         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(spacing, spacing));

  051f9	51		 push	 ecx
  051fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  05202	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05207	51		 push	 ecx
  05208	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40800000
  05210	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05215	8d 8d 80 ed ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  0521b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  05220	50		 push	 eax
  05221	6a 0d		 push	 13			; 0000000dH
  05223	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  05228	83 c4 08	 add	 esp, 8

; 1460 : 
; 1461 :         static int int_value = 0;
; 1462 :         ImGui::VSliderInt("##int", ImVec2(18,160), &int_value, 0, 5);

  0522b	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  05230	6a 05		 push	 5
  05232	6a 00		 push	 0
  05234	68 00 00 00 00	 push	 OFFSET ?int_value@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05239	51		 push	 ecx
  0523a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43200000
  05242	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05247	51		 push	 ecx
  05248	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  05250	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05255	8d 8d 70 ed ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  0525b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  05260	50		 push	 eax
  05261	68 00 00 00 00	 push	 OFFSET ??_C@_05GFAJOEB@?$CD?$CDint@
  05266	e8 00 00 00 00	 call	 ?VSliderInt@ImGui@@YA_NPBDABUImVec2@@PAHHH0@Z ; ImGui::VSliderInt
  0526b	83 c4 18	 add	 esp, 24			; 00000018H

; 1463 :         ImGui::SameLine();

  0526e	51		 push	 ecx
  0526f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  05277	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0527c	51		 push	 ecx
  0527d	0f 57 c0	 xorps	 xmm0, xmm0
  05280	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05285	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0528a	83 c4 08	 add	 esp, 8

; 1464 : 
; 1465 :         static float values[7] = { 0.0f, 0.60f, 0.35f, 0.9f, 0.70f, 0.20f, 0.0f };
; 1466 :         ImGui::PushID("set1");

  0528d	68 00 00 00 00	 push	 OFFSET ??_C@_04BOPCFCPC@set1@
  05292	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  05297	83 c4 04	 add	 esp, 4

; 1467 :         for (int i = 0; i < 7; i++)

  0529a	c7 85 ec f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$108[ebp], 0
  052a4	eb 0f		 jmp	 SHORT $LN61@ShowDemoWi
$LN59@ShowDemoWi:
  052a6	8b 85 ec f8 ff
	ff		 mov	 eax, DWORD PTR _i$108[ebp]
  052ac	83 c0 01	 add	 eax, 1
  052af	89 85 ec f8 ff
	ff		 mov	 DWORD PTR _i$108[ebp], eax
$LN61@ShowDemoWi:
  052b5	83 bd ec f8 ff
	ff 07		 cmp	 DWORD PTR _i$108[ebp], 7
  052bc	0f 8d 99 02 00
	00		 jge	 $LN60@ShowDemoWi

; 1468 :         {
; 1469 :             if (i > 0) ImGui::SameLine();

  052c2	83 bd ec f8 ff
	ff 00		 cmp	 DWORD PTR _i$108[ebp], 0
  052c9	7e 1f		 jle	 SHORT $LN186@ShowDemoWi
  052cb	51		 push	 ecx
  052cc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  052d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  052d9	51		 push	 ecx
  052da	0f 57 c0	 xorps	 xmm0, xmm0
  052dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  052e2	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  052e7	83 c4 08	 add	 esp, 8
$LN186@ShowDemoWi:

; 1470 :             ImGui::PushID(i);

  052ea	8b 85 ec f8 ff
	ff		 mov	 eax, DWORD PTR _i$108[ebp]
  052f0	50		 push	 eax
  052f1	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  052f6	83 c4 04	 add	 esp, 4

; 1471 :             ImGui::PushStyleColor(ImGuiCol_FrameBg, (ImVec4)ImColor::HSV(i/7.0f, 0.5f, 0.5f));

  052f9	8d 85 40 ed ff
	ff		 lea	 eax, DWORD PTR $T23[ebp]
  052ff	50		 push	 eax
  05300	51		 push	 ecx
  05301	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05309	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0530e	51		 push	 ecx
  0530f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  05317	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0531c	51		 push	 ecx
  0531d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  05325	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0532a	f3 0f 2a 85 ec
	f8 ff ff	 cvtsi2ss xmm0, DWORD PTR _i$108[ebp]
  05332	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  0533a	51		 push	 ecx
  0533b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05340	8d 8d 58 ed ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  05346	51		 push	 ecx
  05347	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  0534c	83 c4 14	 add	 esp, 20			; 00000014H
  0534f	8b c8		 mov	 ecx, eax
  05351	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  05356	50		 push	 eax
  05357	6a 07		 push	 7
  05359	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  0535e	83 c4 08	 add	 esp, 8

; 1472 :             ImGui::PushStyleColor(ImGuiCol_FrameBgHovered, (ImVec4)ImColor::HSV(i/7.0f, 0.6f, 0.5f));

  05361	8d 85 10 ed ff
	ff		 lea	 eax, DWORD PTR $T21[ebp]
  05367	50		 push	 eax
  05368	51		 push	 ecx
  05369	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05371	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05376	51		 push	 ecx
  05377	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  0537f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05384	51		 push	 ecx
  05385	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f19999a
  0538d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05392	f3 0f 2a 85 ec
	f8 ff ff	 cvtsi2ss xmm0, DWORD PTR _i$108[ebp]
  0539a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  053a2	51		 push	 ecx
  053a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  053a8	8d 8d 28 ed ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  053ae	51		 push	 ecx
  053af	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  053b4	83 c4 14	 add	 esp, 20			; 00000014H
  053b7	8b c8		 mov	 ecx, eax
  053b9	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  053be	50		 push	 eax
  053bf	6a 08		 push	 8
  053c1	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  053c6	83 c4 08	 add	 esp, 8

; 1473 :             ImGui::PushStyleColor(ImGuiCol_FrameBgActive, (ImVec4)ImColor::HSV(i/7.0f, 0.7f, 0.5f));

  053c9	8d 85 e0 ec ff
	ff		 lea	 eax, DWORD PTR $T19[ebp]
  053cf	50		 push	 eax
  053d0	51		 push	 ecx
  053d1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  053d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  053de	51		 push	 ecx
  053df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  053e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  053ec	51		 push	 ecx
  053ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f333333
  053f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  053fa	f3 0f 2a 85 ec
	f8 ff ff	 cvtsi2ss xmm0, DWORD PTR _i$108[ebp]
  05402	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  0540a	51		 push	 ecx
  0540b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05410	8d 8d f8 ec ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  05416	51		 push	 ecx
  05417	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  0541c	83 c4 14	 add	 esp, 20			; 00000014H
  0541f	8b c8		 mov	 ecx, eax
  05421	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  05426	50		 push	 eax
  05427	6a 09		 push	 9
  05429	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  0542e	83 c4 08	 add	 esp, 8

; 1474 :             ImGui::PushStyleColor(ImGuiCol_SliderGrab, (ImVec4)ImColor::HSV(i/7.0f, 0.9f, 0.9f));

  05431	8d 85 b0 ec ff
	ff		 lea	 eax, DWORD PTR $T17[ebp]
  05437	50		 push	 eax
  05438	51		 push	 ecx
  05439	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05441	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05446	51		 push	 ecx
  05447	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0544f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05454	51		 push	 ecx
  05455	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f666666
  0545d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05462	f3 0f 2a 85 ec
	f8 ff ff	 cvtsi2ss xmm0, DWORD PTR _i$108[ebp]
  0546a	f3 0f 5e 05 00
	00 00 00	 divss	 xmm0, DWORD PTR __real@40e00000
  05472	51		 push	 ecx
  05473	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05478	8d 8d c8 ec ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  0547e	51		 push	 ecx
  0547f	e8 00 00 00 00	 call	 ?HSV@ImColor@@SA?AU1@MMMM@Z ; ImColor::HSV
  05484	83 c4 14	 add	 esp, 20			; 00000014H
  05487	8b c8		 mov	 ecx, eax
  05489	e8 00 00 00 00	 call	 ??BImColor@@QBE?AUImVec4@@XZ ; ImColor::operator ImVec4
  0548e	50		 push	 eax
  0548f	6a 13		 push	 19			; 00000013H
  05491	e8 00 00 00 00	 call	 ?PushStyleColor@ImGui@@YAXHABUImVec4@@@Z ; ImGui::PushStyleColor
  05496	83 c4 08	 add	 esp, 8

; 1475 :             ImGui::VSliderFloat("##v", ImVec2(18,160), &values[i], 0.0f, 1.0f, "");

  05499	51		 push	 ecx
  0549a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  054a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  054a7	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  054ac	51		 push	 ecx
  054ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  054b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  054ba	51		 push	 ecx
  054bb	0f 57 c0	 xorps	 xmm0, xmm0
  054be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  054c3	8b 85 ec f8 ff
	ff		 mov	 eax, DWORD PTR _i$108[ebp]
  054c9	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?values@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]
  054d0	51		 push	 ecx
  054d1	51		 push	 ecx
  054d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43200000
  054da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  054df	51		 push	 ecx
  054e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  054e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  054ed	8d 8d a0 ec ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  054f3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  054f8	50		 push	 eax
  054f9	68 00 00 00 00	 push	 OFFSET ??_C@_03CPFCAGPK@?$CD?$CDv@
  054fe	e8 00 00 00 00	 call	 ?VSliderFloat@ImGui@@YA_NPBDABUImVec2@@PAMMM0M@Z ; ImGui::VSliderFloat
  05503	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1476 :             if (ImGui::IsItemActive() || ImGui::IsItemHovered())

  05506	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  0550b	0f b6 c0	 movzx	 eax, al
  0550e	85 c0		 test	 eax, eax
  05510	75 11		 jne	 SHORT $LN188@ShowDemoWi
  05512	6a 00		 push	 0
  05514	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  05519	83 c4 04	 add	 esp, 4
  0551c	0f b6 c0	 movzx	 eax, al
  0551f	85 c0		 test	 eax, eax
  05521	74 24		 je	 SHORT $LN187@ShowDemoWi
$LN188@ShowDemoWi:

; 1477 :                 ImGui::SetTooltip("%.3f", values[i]);

  05523	8b 85 ec f8 ff
	ff		 mov	 eax, DWORD PTR _i$108[ebp]
  05529	f3 0f 5a 04 85
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?values@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]
  05532	83 ec 08	 sub	 esp, 8
  05535	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0553a	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  0553f	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPBDZZ ; ImGui::SetTooltip
  05544	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN187@ShowDemoWi:

; 1478 :             ImGui::PopStyleColor(4);

  05547	6a 04		 push	 4
  05549	e8 00 00 00 00	 call	 ?PopStyleColor@ImGui@@YAXH@Z ; ImGui::PopStyleColor
  0554e	83 c4 04	 add	 esp, 4

; 1479 :             ImGui::PopID();

  05551	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1480 :         }

  05556	e9 4b fd ff ff	 jmp	 $LN59@ShowDemoWi
$LN60@ShowDemoWi:

; 1481 :         ImGui::PopID();

  0555b	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1482 : 
; 1483 :         ImGui::SameLine();

  05560	51		 push	 ecx
  05561	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  05569	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0556e	51		 push	 ecx
  0556f	0f 57 c0	 xorps	 xmm0, xmm0
  05572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05577	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0557c	83 c4 08	 add	 esp, 8

; 1484 :         ImGui::PushID("set2");

  0557f	68 00 00 00 00	 push	 OFFSET ??_C@_04DFNPABDB@set2@
  05584	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  05589	83 c4 04	 add	 esp, 4

; 1485 :         static float values2[4] = { 0.20f, 0.80f, 0.40f, 0.25f };
; 1486 :         const int rows = 3;

  0558c	c7 85 e0 f8 ff
	ff 03 00 00 00	 mov	 DWORD PTR _rows$107[ebp], 3

; 1487 :         const ImVec2 small_slider_size(18, (float)(int)((160.0f - (rows - 1) * spacing) / rows));

  05596	51		 push	 ecx
  05597	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  0559f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  055a4	51		 push	 ecx
  055a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41900000
  055ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  055b2	8d 8d d0 f8 ff
	ff		 lea	 ecx, DWORD PTR _small_slider_size$106[ebp]
  055b8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 1488 :         for (int nx = 0; nx < 4; nx++)

  055bd	c7 85 c4 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _nx$105[ebp], 0
  055c7	eb 0f		 jmp	 SHORT $LN64@ShowDemoWi
$LN62@ShowDemoWi:
  055c9	8b 85 c4 f8 ff
	ff		 mov	 eax, DWORD PTR _nx$105[ebp]
  055cf	83 c0 01	 add	 eax, 1
  055d2	89 85 c4 f8 ff
	ff		 mov	 DWORD PTR _nx$105[ebp], eax
$LN64@ShowDemoWi:
  055d8	83 bd c4 f8 ff
	ff 04		 cmp	 DWORD PTR _nx$105[ebp], 4
  055df	0f 8d 0c 01 00
	00		 jge	 $LN63@ShowDemoWi

; 1489 :         {
; 1490 :             if (nx > 0) ImGui::SameLine();

  055e5	83 bd c4 f8 ff
	ff 00		 cmp	 DWORD PTR _nx$105[ebp], 0
  055ec	7e 1f		 jle	 SHORT $LN189@ShowDemoWi
  055ee	51		 push	 ecx
  055ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  055f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  055fc	51		 push	 ecx
  055fd	0f 57 c0	 xorps	 xmm0, xmm0
  05600	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05605	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0560a	83 c4 08	 add	 esp, 8
$LN189@ShowDemoWi:

; 1491 :             ImGui::BeginGroup();

  0560d	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 1492 :             for (int ny = 0; ny < rows; ny++)

  05612	c7 85 b8 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _ny$104[ebp], 0
  0561c	eb 0f		 jmp	 SHORT $LN67@ShowDemoWi
$LN65@ShowDemoWi:
  0561e	8b 85 b8 f8 ff
	ff		 mov	 eax, DWORD PTR _ny$104[ebp]
  05624	83 c0 01	 add	 eax, 1
  05627	89 85 b8 f8 ff
	ff		 mov	 DWORD PTR _ny$104[ebp], eax
$LN67@ShowDemoWi:
  0562d	83 bd b8 f8 ff
	ff 03		 cmp	 DWORD PTR _ny$104[ebp], 3
  05634	0f 8d ad 00 00
	00		 jge	 $LN66@ShowDemoWi

; 1493 :             {
; 1494 :                 ImGui::PushID(nx*rows+ny);

  0563a	6b 85 c4 f8 ff
	ff 03		 imul	 eax, DWORD PTR _nx$105[ebp], 3
  05641	03 85 b8 f8 ff
	ff		 add	 eax, DWORD PTR _ny$104[ebp]
  05647	50		 push	 eax
  05648	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  0564d	83 c4 04	 add	 esp, 4

; 1495 :                 ImGui::VSliderFloat("##v", small_slider_size, &values2[nx], 0.0f, 1.0f, "");

  05650	51		 push	 ecx
  05651	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05659	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0565e	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  05663	51		 push	 ecx
  05664	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0566c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05671	51		 push	 ecx
  05672	0f 57 c0	 xorps	 xmm0, xmm0
  05675	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0567a	8b 85 c4 f8 ff
	ff		 mov	 eax, DWORD PTR _nx$105[ebp]
  05680	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?values2@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]
  05687	51		 push	 ecx
  05688	8d 95 d0 f8 ff
	ff		 lea	 edx, DWORD PTR _small_slider_size$106[ebp]
  0568e	52		 push	 edx
  0568f	68 00 00 00 00	 push	 OFFSET ??_C@_03CPFCAGPK@?$CD?$CDv@
  05694	e8 00 00 00 00	 call	 ?VSliderFloat@ImGui@@YA_NPBDABUImVec2@@PAMMM0M@Z ; ImGui::VSliderFloat
  05699	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1496 :                 if (ImGui::IsItemActive() || ImGui::IsItemHovered())

  0569c	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  056a1	0f b6 c0	 movzx	 eax, al
  056a4	85 c0		 test	 eax, eax
  056a6	75 11		 jne	 SHORT $LN191@ShowDemoWi
  056a8	6a 00		 push	 0
  056aa	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  056af	83 c4 04	 add	 esp, 4
  056b2	0f b6 c0	 movzx	 eax, al
  056b5	85 c0		 test	 eax, eax
  056b7	74 24		 je	 SHORT $LN190@ShowDemoWi
$LN191@ShowDemoWi:

; 1497 :                     ImGui::SetTooltip("%.3f", values2[nx]);

  056b9	8b 85 c4 f8 ff
	ff		 mov	 eax, DWORD PTR _nx$105[ebp]
  056bf	f3 0f 5a 04 85
	00 00 00 00	 cvtss2sd xmm0, DWORD PTR ?values2@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]
  056c8	83 ec 08	 sub	 esp, 8
  056cb	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  056d0	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  056d5	e8 00 00 00 00	 call	 ?SetTooltip@ImGui@@YAXPBDZZ ; ImGui::SetTooltip
  056da	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN190@ShowDemoWi:

; 1498 :                 ImGui::PopID();

  056dd	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1499 :             }

  056e2	e9 37 ff ff ff	 jmp	 $LN65@ShowDemoWi
$LN66@ShowDemoWi:

; 1500 :             ImGui::EndGroup();

  056e7	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup

; 1501 :         }

  056ec	e9 d8 fe ff ff	 jmp	 $LN62@ShowDemoWi
$LN63@ShowDemoWi:

; 1502 :         ImGui::PopID();

  056f1	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1503 : 
; 1504 :         ImGui::SameLine();

  056f6	51		 push	 ecx
  056f7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  056ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05704	51		 push	 ecx
  05705	0f 57 c0	 xorps	 xmm0, xmm0
  05708	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0570d	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05712	83 c4 08	 add	 esp, 8

; 1505 :         ImGui::PushID("set3");

  05715	68 00 00 00 00	 push	 OFFSET ??_C@_04CMMEDAHA@set3@
  0571a	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBD@Z	; ImGui::PushID
  0571f	83 c4 04	 add	 esp, 4

; 1506 :         for (int i = 0; i < 4; i++)

  05722	c7 85 ac f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$103[ebp], 0
  0572c	eb 0f		 jmp	 SHORT $LN70@ShowDemoWi
$LN68@ShowDemoWi:
  0572e	8b 85 ac f8 ff
	ff		 mov	 eax, DWORD PTR _i$103[ebp]
  05734	83 c0 01	 add	 eax, 1
  05737	89 85 ac f8 ff
	ff		 mov	 DWORD PTR _i$103[ebp], eax
$LN70@ShowDemoWi:
  0573d	83 bd ac f8 ff
	ff 04		 cmp	 DWORD PTR _i$103[ebp], 4
  05744	0f 8d d0 00 00
	00		 jge	 $LN69@ShowDemoWi

; 1507 :         {
; 1508 :             if (i > 0) ImGui::SameLine();

  0574a	83 bd ac f8 ff
	ff 00		 cmp	 DWORD PTR _i$103[ebp], 0
  05751	7e 1f		 jle	 SHORT $LN192@ShowDemoWi
  05753	51		 push	 ecx
  05754	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0575c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05761	51		 push	 ecx
  05762	0f 57 c0	 xorps	 xmm0, xmm0
  05765	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0576a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0576f	83 c4 08	 add	 esp, 8
$LN192@ShowDemoWi:

; 1509 :             ImGui::PushID(i);

  05772	8b 85 ac f8 ff
	ff		 mov	 eax, DWORD PTR _i$103[ebp]
  05778	50		 push	 eax
  05779	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  0577e	83 c4 04	 add	 esp, 4

; 1510 :             ImGui::PushStyleVar(ImGuiStyleVar_GrabMinSize, 40);

  05781	51		 push	 ecx
  05782	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42200000
  0578a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0578f	6a 12		 push	 18			; 00000012H
  05791	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHM@Z ; ImGui::PushStyleVar
  05796	83 c4 08	 add	 esp, 8

; 1511 :             ImGui::VSliderFloat("##v", ImVec2(40,160), &values[i], 0.0f, 1.0f, "%.2f\nsec");

  05799	51		 push	 ecx
  0579a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  057a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  057a7	68 00 00 00 00	 push	 OFFSET ??_C@_08OPMLCCJJ@?$CF?42f?6sec@
  057ac	51		 push	 ecx
  057ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  057b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  057ba	51		 push	 ecx
  057bb	0f 57 c0	 xorps	 xmm0, xmm0
  057be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  057c3	8b 85 ac f8 ff
	ff		 mov	 eax, DWORD PTR _i$103[ebp]
  057c9	8d 0c 85 00 00
	00 00		 lea	 ecx, DWORD PTR ?values@?BDJ@??ShowDemoWindowWidgets@@YAXXZ@4PAMA[eax*4]
  057d0	51		 push	 ecx
  057d1	51		 push	 ecx
  057d2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43200000
  057da	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  057df	51		 push	 ecx
  057e0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42200000
  057e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  057ed	8d 8d 90 ec ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  057f3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  057f8	50		 push	 eax
  057f9	68 00 00 00 00	 push	 OFFSET ??_C@_03CPFCAGPK@?$CD?$CDv@
  057fe	e8 00 00 00 00	 call	 ?VSliderFloat@ImGui@@YA_NPBDABUImVec2@@PAMMM0M@Z ; ImGui::VSliderFloat
  05803	83 c4 1c	 add	 esp, 28			; 0000001cH

; 1512 :             ImGui::PopStyleVar();

  05806	6a 01		 push	 1
  05808	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  0580d	83 c4 04	 add	 esp, 4

; 1513 :             ImGui::PopID();

  05810	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1514 :         }

  05815	e9 14 ff ff ff	 jmp	 $LN68@ShowDemoWi
$LN69@ShowDemoWi:

; 1515 :         ImGui::PopID();

  0581a	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1516 :         ImGui::PopStyleVar();

  0581f	6a 01		 push	 1
  05821	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  05826	83 c4 04	 add	 esp, 4

; 1517 :         ImGui::TreePop();

  05829	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN185@ShowDemoWi:

; 1518 :     }
; 1519 : 
; 1520 :     if (ImGui::TreeNode("Drag and Drop"))

  0582e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NPGBLOMK@Drag?5and?5Drop@
  05833	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  05838	83 c4 04	 add	 esp, 4
  0583b	0f b6 c0	 movzx	 eax, al
  0583e	85 c0		 test	 eax, eax
  05840	0f 84 27 05 00
	00		 je	 $LN193@ShowDemoWi

; 1521 :     {
; 1522 :         if (ImGui::TreeNode("Drag and drop in standard widgets"))

  05846	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@EPFBCHH@Drag?5and?5drop?5in?5standard?5widge@
  0584b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  05850	83 c4 04	 add	 esp, 4
  05853	0f b6 c0	 movzx	 eax, al
  05856	85 c0		 test	 eax, eax
  05858	74 3a		 je	 SHORT $LN194@ShowDemoWi

; 1523 :         {
; 1524 :             // ColorEdit widgets automatically act as drag source and drag target.
; 1525 :             // They are using standardized payload strings IMGUI_PAYLOAD_TYPE_COLOR_3F and IMGUI_PAYLOAD_TYPE_COLOR_4F to allow your own widgets
; 1526 :             // to use colors in their drag and drop interaction. Also see the demo in Color Picker -> Palette demo.
; 1527 :             HelpMarker("You can drag from the colored squares.");

  0585a	68 00 00 00 00	 push	 OFFSET ??_C@_0CH@FOFLCNFN@You?5can?5drag?5from?5the?5colored?5s@
  0585f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  05864	83 c4 04	 add	 esp, 4

; 1528 :             static float col1[3] = { 1.0f, 0.0f, 0.2f };
; 1529 :             static float col2[4] = { 0.4f, 0.7f, 0.0f, 0.5f };
; 1530 :             ImGui::ColorEdit3("color 1", col1);

  05867	6a 00		 push	 0
  05869	68 00 00 00 00	 push	 OFFSET ?col1@?BFB@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  0586e	68 00 00 00 00	 push	 OFFSET ??_C@_07OCDFLNDK@color?51@
  05873	e8 00 00 00 00	 call	 ?ColorEdit3@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit3
  05878	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1531 :             ImGui::ColorEdit4("color 2", col2);

  0587b	6a 00		 push	 0
  0587d	68 00 00 00 00	 push	 OFFSET ?col2@?BFB@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05882	68 00 00 00 00	 push	 OFFSET ??_C@_07MJBIOOPJ@color?52@
  05887	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  0588c	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1532 :             ImGui::TreePop();

  0588f	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN194@ShowDemoWi:

; 1533 :         }
; 1534 : 
; 1535 :         if (ImGui::TreeNode("Drag and drop to copy/swap items"))

  05894	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@EBEBHJBF@Drag?5and?5drop?5to?5copy?1swap?5item@
  05899	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0589e	83 c4 04	 add	 esp, 4
  058a1	0f b6 c0	 movzx	 eax, al
  058a4	85 c0		 test	 eax, eax
  058a6	0f 84 6a 03 00
	00		 je	 $LN195@ShowDemoWi

; 1536 :         {
; 1537 :             enum Mode
; 1538 :             {
; 1539 :                 Mode_Copy,
; 1540 :                 Mode_Move,
; 1541 :                 Mode_Swap
; 1542 :             };
; 1543 :             static int mode = 0;
; 1544 :             if (ImGui::RadioButton("Copy", mode == Mode_Copy)) { mode = Mode_Copy; } ImGui::SameLine();

  058ac	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  058b3	75 09		 jne	 SHORT $LN317@ShowDemoWi
  058b5	c6 85 bb eb ff
	ff 01		 mov	 BYTE PTR tv3356[ebp], 1
  058bc	eb 07		 jmp	 SHORT $LN318@ShowDemoWi
$LN317@ShowDemoWi:
  058be	c6 85 bb eb ff
	ff 00		 mov	 BYTE PTR tv3356[ebp], 0
$LN318@ShowDemoWi:
  058c5	0f b6 85 bb eb
	ff ff		 movzx	 eax, BYTE PTR tv3356[ebp]
  058cc	50		 push	 eax
  058cd	68 00 00 00 00	 push	 OFFSET ??_C@_04OPMHGHMB@Copy@
  058d2	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBD_N@Z ; ImGui::RadioButton
  058d7	83 c4 08	 add	 esp, 8
  058da	0f b6 c8	 movzx	 ecx, al
  058dd	85 c9		 test	 ecx, ecx
  058df	74 0a		 je	 SHORT $LN196@ShowDemoWi
  058e1	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
$LN196@ShowDemoWi:
  058eb	51		 push	 ecx
  058ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  058f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  058f9	51		 push	 ecx
  058fa	0f 57 c0	 xorps	 xmm0, xmm0
  058fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05902	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05907	83 c4 08	 add	 esp, 8

; 1545 :             if (ImGui::RadioButton("Move", mode == Mode_Move)) { mode = Mode_Move; } ImGui::SameLine();

  0590a	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  05911	75 09		 jne	 SHORT $LN319@ShowDemoWi
  05913	c6 85 bb eb ff
	ff 01		 mov	 BYTE PTR tv3365[ebp], 1
  0591a	eb 07		 jmp	 SHORT $LN320@ShowDemoWi
$LN319@ShowDemoWi:
  0591c	c6 85 bb eb ff
	ff 00		 mov	 BYTE PTR tv3365[ebp], 0
$LN320@ShowDemoWi:
  05923	0f b6 85 bb eb
	ff ff		 movzx	 eax, BYTE PTR tv3365[ebp]
  0592a	50		 push	 eax
  0592b	68 00 00 00 00	 push	 OFFSET ??_C@_04LCANPIEP@Move@
  05930	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBD_N@Z ; ImGui::RadioButton
  05935	83 c4 08	 add	 esp, 8
  05938	0f b6 c8	 movzx	 ecx, al
  0593b	85 c9		 test	 ecx, ecx
  0593d	74 0a		 je	 SHORT $LN197@ShowDemoWi
  0593f	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
$LN197@ShowDemoWi:
  05949	51		 push	 ecx
  0594a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  05952	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05957	51		 push	 ecx
  05958	0f 57 c0	 xorps	 xmm0, xmm0
  0595b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05960	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05965	83 c4 08	 add	 esp, 8

; 1546 :             if (ImGui::RadioButton("Swap", mode == Mode_Swap)) { mode = Mode_Swap; }

  05968	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  0596f	75 09		 jne	 SHORT $LN321@ShowDemoWi
  05971	c6 85 bb eb ff
	ff 01		 mov	 BYTE PTR tv3374[ebp], 1
  05978	eb 07		 jmp	 SHORT $LN322@ShowDemoWi
$LN321@ShowDemoWi:
  0597a	c6 85 bb eb ff
	ff 00		 mov	 BYTE PTR tv3374[ebp], 0
$LN322@ShowDemoWi:
  05981	0f b6 85 bb eb
	ff ff		 movzx	 eax, BYTE PTR tv3374[ebp]
  05988	50		 push	 eax
  05989	68 00 00 00 00	 push	 OFFSET ??_C@_04NGKMPNDN@Swap@
  0598e	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBD_N@Z ; ImGui::RadioButton
  05993	83 c4 08	 add	 esp, 8
  05996	0f b6 c8	 movzx	 ecx, al
  05999	85 c9		 test	 ecx, ecx
  0599b	74 0a		 je	 SHORT $LN198@ShowDemoWi
  0599d	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
$LN198@ShowDemoWi:

; 1547 :             static const char* names[9] = { "Bobby", "Beatrice", "Betty", "Brianna", "Barry", "Bernard", "Bibi", "Blaine", "Bryn" };
; 1548 :             for (int n = 0; n < IM_ARRAYSIZE(names); n++)

  059a7	c7 85 a0 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$102[ebp], 0
  059b1	eb 0f		 jmp	 SHORT $LN73@ShowDemoWi
$LN71@ShowDemoWi:
  059b3	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  059b9	83 c0 01	 add	 eax, 1
  059bc	89 85 a0 f8 ff
	ff		 mov	 DWORD PTR _n$102[ebp], eax
$LN73@ShowDemoWi:
  059c2	83 bd a0 f8 ff
	ff 09		 cmp	 DWORD PTR _n$102[ebp], 9
  059c9	0f 8d 42 02 00
	00		 jge	 $LN72@ShowDemoWi

; 1549 :             {
; 1550 :                 ImGui::PushID(n);

  059cf	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  059d5	50		 push	 eax
  059d6	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  059db	83 c4 04	 add	 esp, 4

; 1551 :                 if ((n % 3) != 0)

  059de	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  059e4	99		 cdq
  059e5	b9 03 00 00 00	 mov	 ecx, 3
  059ea	f7 f9		 idiv	 ecx
  059ec	85 d2		 test	 edx, edx
  059ee	74 1f		 je	 SHORT $LN199@ShowDemoWi

; 1552 :                     ImGui::SameLine();

  059f0	51		 push	 ecx
  059f1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  059f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  059fe	51		 push	 ecx
  059ff	0f 57 c0	 xorps	 xmm0, xmm0
  05a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05a07	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05a0c	83 c4 08	 add	 esp, 8
$LN199@ShowDemoWi:

; 1553 :                 ImGui::Button(names[n], ImVec2(60,60));

  05a0f	51		 push	 ecx
  05a10	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  05a18	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05a1d	51		 push	 ecx
  05a1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  05a26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05a2b	8d 8d 80 ec ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  05a31	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  05a36	50		 push	 eax
  05a37	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05a3d	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4]
  05a44	51		 push	 ecx
  05a45	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  05a4a	83 c4 08	 add	 esp, 8

; 1554 : 
; 1555 :                 // Our buttons are both drag sources and drag targets here!
; 1556 :                 if (ImGui::BeginDragDropSource(ImGuiDragDropFlags_None))

  05a4d	6a 00		 push	 0
  05a4f	e8 00 00 00 00	 call	 ?BeginDragDropSource@ImGui@@YA_NH@Z ; ImGui::BeginDragDropSource
  05a54	83 c4 04	 add	 esp, 4
  05a57	0f b6 c0	 movzx	 eax, al
  05a5a	85 c0		 test	 eax, eax
  05a5c	0f 84 89 00 00
	00		 je	 $LN200@ShowDemoWi

; 1557 :                 {
; 1558 :                     ImGui::SetDragDropPayload("DND_DEMO_CELL", &n, sizeof(int));    // Set payload to carry the index of our item (could be anything)

  05a62	6a 00		 push	 0
  05a64	6a 04		 push	 4
  05a66	8d 85 a0 f8 ff
	ff		 lea	 eax, DWORD PTR _n$102[ebp]
  05a6c	50		 push	 eax
  05a6d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IBJLLBID@DND_DEMO_CELL@
  05a72	e8 00 00 00 00	 call	 ?SetDragDropPayload@ImGui@@YA_NPBDPBXIH@Z ; ImGui::SetDragDropPayload
  05a77	83 c4 10	 add	 esp, 16			; 00000010H

; 1559 :                     if (mode == Mode_Copy) { ImGui::Text("Copy %s", names[n]); }    // Display preview (could be anything, e.g. when dragging an image we could decide to display the filename and a small preview of the image, etc.)

  05a7a	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  05a81	75 1b		 jne	 SHORT $LN201@ShowDemoWi
  05a83	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05a89	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4]
  05a90	51		 push	 ecx
  05a91	68 00 00 00 00	 push	 OFFSET ??_C@_07CFHHFHOL@Copy?5?$CFs@
  05a96	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  05a9b	83 c4 08	 add	 esp, 8
$LN201@ShowDemoWi:

; 1560 :                     if (mode == Mode_Move) { ImGui::Text("Move %s", names[n]); }

  05a9e	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  05aa5	75 1b		 jne	 SHORT $LN202@ShowDemoWi
  05aa7	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05aad	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4]
  05ab4	51		 push	 ecx
  05ab5	68 00 00 00 00	 push	 OFFSET ??_C@_07EDLENMEH@Move?5?$CFs@
  05aba	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  05abf	83 c4 08	 add	 esp, 8
$LN202@ShowDemoWi:

; 1561 :                     if (mode == Mode_Swap) { ImGui::Text("Swap %s", names[n]); }

  05ac2	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  05ac9	75 1b		 jne	 SHORT $LN203@ShowDemoWi
  05acb	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05ad1	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4]
  05ad8	51		 push	 ecx
  05ad9	68 00 00 00 00	 push	 OFFSET ??_C@_07MIGHAHCG@Swap?5?$CFs@
  05ade	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  05ae3	83 c4 08	 add	 esp, 8
$LN203@ShowDemoWi:

; 1562 :                     ImGui::EndDragDropSource();

  05ae6	e8 00 00 00 00	 call	 ?EndDragDropSource@ImGui@@YAXXZ ; ImGui::EndDragDropSource
$LN200@ShowDemoWi:

; 1563 :                 }
; 1564 :                 if (ImGui::BeginDragDropTarget())

  05aeb	e8 00 00 00 00	 call	 ?BeginDragDropTarget@ImGui@@YA_NXZ ; ImGui::BeginDragDropTarget
  05af0	0f b6 c0	 movzx	 eax, al
  05af3	85 c0		 test	 eax, eax
  05af5	0f 84 0c 01 00
	00		 je	 $LN204@ShowDemoWi

; 1565 :                 {
; 1566 :                     if (const ImGuiPayload* payload = ImGui::AcceptDragDropPayload("DND_DEMO_CELL"))

  05afb	6a 00		 push	 0
  05afd	68 00 00 00 00	 push	 OFFSET ??_C@_0O@IBJLLBID@DND_DEMO_CELL@
  05b02	e8 00 00 00 00	 call	 ?AcceptDragDropPayload@ImGui@@YAPBUImGuiPayload@@PBDH@Z ; ImGui::AcceptDragDropPayload
  05b07	83 c4 08	 add	 esp, 8
  05b0a	89 85 94 f8 ff
	ff		 mov	 DWORD PTR _payload$101[ebp], eax
  05b10	83 bd 94 f8 ff
	ff 00		 cmp	 DWORD PTR _payload$101[ebp], 0
  05b17	0f 84 e5 00 00
	00		 je	 $LN208@ShowDemoWi

; 1567 :                     {
; 1568 :                         IM_ASSERT(payload->DataSize == sizeof(int));

  05b1d	8b 85 94 f8 ff
	ff		 mov	 eax, DWORD PTR _payload$101[ebp]
  05b23	83 78 04 04	 cmp	 DWORD PTR [eax+4], 4
  05b27	74 29		 je	 SHORT $LN323@ShowDemoWi
  05b29	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ShowDemoWindowWidgets@@YAXXZ@4JA
  05b2f	81 c1 6d 04 00
	00		 add	 ecx, 1133		; 0000046dH
  05b35	8b f4		 mov	 esi, esp
  05b37	51		 push	 ecx
  05b38	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  05b3d	68 00 00 00 00	 push	 OFFSET ??_C@_1EC@PPPBDLLH@?$AAp?$AAa?$AAy?$AAl?$AAo?$AAa?$AAd?$AA?9?$AA?$DO?$AAD?$AAa?$AAt?$AAa?$AAS?$AAi@
  05b42	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  05b48	83 c4 0c	 add	 esp, 12			; 0000000cH
  05b4b	3b f4		 cmp	 esi, esp
  05b4d	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN323@ShowDemoWi:

; 1569 :                         int payload_n = *(const int*)payload->Data;

  05b52	8b 85 94 f8 ff
	ff		 mov	 eax, DWORD PTR _payload$101[ebp]
  05b58	8b 08		 mov	 ecx, DWORD PTR [eax]
  05b5a	8b 11		 mov	 edx, DWORD PTR [ecx]
  05b5c	89 95 88 f8 ff
	ff		 mov	 DWORD PTR _payload_n$100[ebp], edx

; 1570 :                         if (mode == Mode_Copy)

  05b62	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  05b69	75 1a		 jne	 SHORT $LN206@ShowDemoWi

; 1571 :                         {
; 1572 :                             names[n] = names[payload_n];

  05b6b	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05b71	8b 8d 88 f8 ff
	ff		 mov	 ecx, DWORD PTR _payload_n$100[ebp]
  05b77	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[ecx*4]
  05b7e	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], edx
$LN206@ShowDemoWi:

; 1573 :                         }
; 1574 :                         if (mode == Mode_Move)

  05b85	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  05b8c	75 2b		 jne	 SHORT $LN207@ShowDemoWi

; 1575 :                         {
; 1576 :                             names[n] = names[payload_n];

  05b8e	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05b94	8b 8d 88 f8 ff
	ff		 mov	 ecx, DWORD PTR _payload_n$100[ebp]
  05b9a	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[ecx*4]
  05ba1	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], edx

; 1577 :                             names[payload_n] = "";

  05ba8	8b 85 88 f8 ff
	ff		 mov	 eax, DWORD PTR _payload_n$100[ebp]
  05bae	c7 04 85 00 00
	00 00 00 00 00
	00		 mov	 DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], OFFSET ??_C@_00CNPNBAHC@@
$LN207@ShowDemoWi:

; 1578 :                         }
; 1579 :                         if (mode == Mode_Swap)

  05bb9	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?mode@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  05bc0	75 40		 jne	 SHORT $LN208@ShowDemoWi

; 1580 :                         {
; 1581 :                             const char* tmp = names[n];

  05bc2	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05bc8	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4]
  05bcf	89 8d 7c f8 ff
	ff		 mov	 DWORD PTR _tmp$99[ebp], ecx

; 1582 :                             names[n] = names[payload_n];

  05bd5	8b 85 a0 f8 ff
	ff		 mov	 eax, DWORD PTR _n$102[ebp]
  05bdb	8b 8d 88 f8 ff
	ff		 mov	 ecx, DWORD PTR _payload_n$100[ebp]
  05be1	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[ecx*4]
  05be8	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], edx

; 1583 :                             names[payload_n] = tmp;

  05bef	8b 85 88 f8 ff
	ff		 mov	 eax, DWORD PTR _payload_n$100[ebp]
  05bf5	8b 8d 7c f8 ff
	ff		 mov	 ecx, DWORD PTR _tmp$99[ebp]
  05bfb	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?names@?BFE@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], ecx
$LN208@ShowDemoWi:

; 1584 :                         }
; 1585 :                     }
; 1586 :                     ImGui::EndDragDropTarget();

  05c02	e8 00 00 00 00	 call	 ?EndDragDropTarget@ImGui@@YAXXZ ; ImGui::EndDragDropTarget
$LN204@ShowDemoWi:

; 1587 :                 }
; 1588 :                 ImGui::PopID();

  05c07	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 1589 :             }

  05c0c	e9 a2 fd ff ff	 jmp	 $LN71@ShowDemoWi
$LN72@ShowDemoWi:

; 1590 :             ImGui::TreePop();

  05c11	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN195@ShowDemoWi:

; 1591 :         }
; 1592 : 
; 1593 :         if (ImGui::TreeNode("Drag to reorder items (simple)"))

  05c16	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@DIEMEPOM@Drag?5to?5reorder?5items?5?$CIsimple?$CJ@
  05c1b	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  05c20	83 c4 04	 add	 esp, 4
  05c23	0f b6 c0	 movzx	 eax, al
  05c26	85 c0		 test	 eax, eax
  05c28	0f 84 3a 01 00
	00		 je	 $LN209@ShowDemoWi

; 1594 :         {
; 1595 :             // Simple reordering
; 1596 :             HelpMarker("We don't use the drag and drop api at all here! Instead we query when the item is held but not hovered, and order items accordingly.");

  05c2e	68 00 00 00 00	 push	 OFFSET ??_C@_0IF@PPHKDPML@We?5don?8t?5use?5the?5drag?5and?5drop?5@
  05c33	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  05c38	83 c4 04	 add	 esp, 4

; 1597 :             static const char* item_names[] = { "Item One", "Item Two", "Item Three", "Item Four", "Item Five" };
; 1598 :             for (int n = 0; n < IM_ARRAYSIZE(item_names); n++)

  05c3b	c7 85 70 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$98[ebp], 0
  05c45	eb 0f		 jmp	 SHORT $LN76@ShowDemoWi
$LN74@ShowDemoWi:
  05c47	8b 85 70 f8 ff
	ff		 mov	 eax, DWORD PTR _n$98[ebp]
  05c4d	83 c0 01	 add	 eax, 1
  05c50	89 85 70 f8 ff
	ff		 mov	 DWORD PTR _n$98[ebp], eax
$LN76@ShowDemoWi:
  05c56	83 bd 70 f8 ff
	ff 05		 cmp	 DWORD PTR _n$98[ebp], 5
  05c5d	0f 8d 00 01 00
	00		 jge	 $LN75@ShowDemoWi

; 1599 :             {
; 1600 :                 const char* item = item_names[n];

  05c63	8b 85 70 f8 ff
	ff		 mov	 eax, DWORD PTR _n$98[ebp]
  05c69	8b 0c 85 00 00
	00 00		 mov	 ecx, DWORD PTR ?item_names@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4]
  05c70	89 8d 64 f8 ff
	ff		 mov	 DWORD PTR _item$97[ebp], ecx

; 1601 :                 ImGui::Selectable(item);

  05c76	51		 push	 ecx
  05c77	0f 57 c0	 xorps	 xmm0, xmm0
  05c7a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05c7f	51		 push	 ecx
  05c80	0f 57 c0	 xorps	 xmm0, xmm0
  05c83	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05c88	8d 8d 70 ec ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  05c8e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  05c93	50		 push	 eax
  05c94	6a 00		 push	 0
  05c96	6a 00		 push	 0
  05c98	8b 85 64 f8 ff
	ff		 mov	 eax, DWORD PTR _item$97[ebp]
  05c9e	50		 push	 eax
  05c9f	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  05ca4	83 c4 10	 add	 esp, 16			; 00000010H

; 1602 : 
; 1603 :                 if (ImGui::IsItemActive() && !ImGui::IsItemHovered())

  05ca7	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  05cac	0f b6 c0	 movzx	 eax, al
  05caf	85 c0		 test	 eax, eax
  05cb1	0f 84 a7 00 00
	00		 je	 $LN211@ShowDemoWi
  05cb7	6a 00		 push	 0
  05cb9	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  05cbe	83 c4 04	 add	 esp, 4
  05cc1	0f b6 c0	 movzx	 eax, al
  05cc4	85 c0		 test	 eax, eax
  05cc6	0f 85 92 00 00
	00		 jne	 $LN211@ShowDemoWi

; 1604 :                 {
; 1605 :                     int n_next = n + (ImGui::GetMouseDragDelta(0).y < 0.f ? -1 : 1);

  05ccc	51		 push	 ecx
  05ccd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  05cd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05cda	6a 00		 push	 0
  05cdc	8d 85 60 ec ff
	ff		 lea	 eax, DWORD PTR $T12[ebp]
  05ce2	50		 push	 eax
  05ce3	e8 00 00 00 00	 call	 ?GetMouseDragDelta@ImGui@@YA?AUImVec2@@HM@Z ; ImGui::GetMouseDragDelta
  05ce8	83 c4 0c	 add	 esp, 12			; 0000000cH
  05ceb	0f 57 c0	 xorps	 xmm0, xmm0
  05cee	0f 2f 40 04	 comiss	 xmm0, DWORD PTR [eax+4]
  05cf2	76 0c		 jbe	 SHORT $LN324@ShowDemoWi
  05cf4	c7 85 b8 eb ff
	ff ff ff ff ff	 mov	 DWORD PTR tv3516[ebp], -1
  05cfe	eb 0a		 jmp	 SHORT $LN325@ShowDemoWi
$LN324@ShowDemoWi:
  05d00	c7 85 b8 eb ff
	ff 01 00 00 00	 mov	 DWORD PTR tv3516[ebp], 1
$LN325@ShowDemoWi:
  05d0a	8b 8d 70 f8 ff
	ff		 mov	 ecx, DWORD PTR _n$98[ebp]
  05d10	03 8d b8 eb ff
	ff		 add	 ecx, DWORD PTR tv3516[ebp]
  05d16	89 8d 58 f8 ff
	ff		 mov	 DWORD PTR _n_next$96[ebp], ecx

; 1606 :                     if (n_next >= 0 && n_next < IM_ARRAYSIZE(item_names))

  05d1c	78 40		 js	 SHORT $LN211@ShowDemoWi
  05d1e	83 bd 58 f8 ff
	ff 05		 cmp	 DWORD PTR _n_next$96[ebp], 5
  05d25	7d 37		 jge	 SHORT $LN211@ShowDemoWi

; 1607 :                     {
; 1608 :                         item_names[n] = item_names[n_next];

  05d27	8b 85 70 f8 ff
	ff		 mov	 eax, DWORD PTR _n$98[ebp]
  05d2d	8b 8d 58 f8 ff
	ff		 mov	 ecx, DWORD PTR _n_next$96[ebp]
  05d33	8b 14 8d 00 00
	00 00		 mov	 edx, DWORD PTR ?item_names@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[ecx*4]
  05d3a	89 14 85 00 00
	00 00		 mov	 DWORD PTR ?item_names@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], edx

; 1609 :                         item_names[n_next] = item;

  05d41	8b 85 58 f8 ff
	ff		 mov	 eax, DWORD PTR _n_next$96[ebp]
  05d47	8b 8d 64 f8 ff
	ff		 mov	 ecx, DWORD PTR _item$97[ebp]
  05d4d	89 0c 85 00 00
	00 00		 mov	 DWORD PTR ?item_names@?BHP@??ShowDemoWindowWidgets@@YAXXZ@4PAPBDA[eax*4], ecx

; 1610 :                         ImGui::ResetMouseDragDelta();

  05d54	6a 00		 push	 0
  05d56	e8 00 00 00 00	 call	 ?ResetMouseDragDelta@ImGui@@YAXH@Z ; ImGui::ResetMouseDragDelta
  05d5b	83 c4 04	 add	 esp, 4
$LN211@ShowDemoWi:

; 1611 :                     }
; 1612 :                 }
; 1613 :             }

  05d5e	e9 e4 fe ff ff	 jmp	 $LN74@ShowDemoWi
$LN75@ShowDemoWi:

; 1614 :             ImGui::TreePop();

  05d63	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN209@ShowDemoWi:

; 1615 :         }
; 1616 : 
; 1617 :         ImGui::TreePop();

  05d68	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN193@ShowDemoWi:

; 1618 :     }
; 1619 : 
; 1620 :     if (ImGui::TreeNode("Querying Status (Active/Focused/Hovered etc.)"))

  05d6d	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@NBHMOIFJ@Querying?5Status?5?$CIActive?1Focused@
  05d72	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  05d77	83 c4 04	 add	 esp, 4
  05d7a	0f b6 c0	 movzx	 eax, al
  05d7d	85 c0		 test	 eax, eax
  05d7f	0f 84 6d 06 00
	00		 je	 $LN212@ShowDemoWi

; 1621 :     {
; 1622 :         // Submit an item (various types available) so we can query their status in the following block.
; 1623 :         static int item_type = 1;
; 1624 :         ImGui::Combo("Item Type", &item_type, "Text\0Button\0Button (w/ repeat)\0Checkbox\0SliderFloat\0InputText\0InputFloat\0InputFloat3\0ColorEdit4\0MenuItem\0TreeNode\0TreeNode (w/ double-click)\0ListBox\0", 20);

  05d85	6a 14		 push	 20			; 00000014H
  05d87	68 00 00 00 00	 push	 OFFSET ??_C@_0JG@MDBHHAIF@Text?$AAButton?$AAButton?5?$CIw?1?5repeat?$CJ?$AA@
  05d8c	68 00 00 00 00	 push	 OFFSET ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA
  05d91	68 00 00 00 00	 push	 OFFSET ??_C@_09DBIMNOFJ@Item?5Type@
  05d96	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  05d9b	83 c4 10	 add	 esp, 16			; 00000010H

; 1625 :         ImGui::SameLine();

  05d9e	51		 push	 ecx
  05d9f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  05da7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05dac	51		 push	 ecx
  05dad	0f 57 c0	 xorps	 xmm0, xmm0
  05db0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05db5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  05dba	83 c4 08	 add	 esp, 8

; 1626 :         HelpMarker("Testing how various types of items are interacting with the IsItemXXX functions.");

  05dbd	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@PLFPNHBO@Testing?5how?5various?5types?5of?5it@
  05dc2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  05dc7	83 c4 04	 add	 esp, 4

; 1627 :         bool ret = false;

  05dca	c6 85 4f f8 ff
	ff 00		 mov	 BYTE PTR _ret$95[ebp], 0

; 1628 :         static bool b = false;
; 1629 :         static float col4f[4] = { 1.0f, 0.5, 0.0f, 1.0f };
; 1630 :         static char str[16] = {};
; 1631 :         if (item_type == 0) { ImGui::Text("ITEM: Text"); }                                              // Testing text items with no identifier/interaction

  05dd1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 0
  05dd8	75 0d		 jne	 SHORT $LN213@ShowDemoWi
  05dda	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HEHKMKDF@ITEM?3?5Text@
  05ddf	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  05de4	83 c4 04	 add	 esp, 4
$LN213@ShowDemoWi:

; 1632 :         if (item_type == 1) { ret = ImGui::Button("ITEM: Button"); }                                    // Testing button

  05de7	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 1
  05dee	75 31		 jne	 SHORT $LN214@ShowDemoWi
  05df0	51		 push	 ecx
  05df1	0f 57 c0	 xorps	 xmm0, xmm0
  05df4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05df9	51		 push	 ecx
  05dfa	0f 57 c0	 xorps	 xmm0, xmm0
  05dfd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05e02	8d 8d 50 ec ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  05e08	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  05e0d	50		 push	 eax
  05e0e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KDFNBBDI@ITEM?3?5Button@
  05e13	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  05e18	83 c4 08	 add	 esp, 8
  05e1b	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN214@ShowDemoWi:

; 1633 :         if (item_type == 2) { ImGui::PushButtonRepeat(true); ret = ImGui::Button("ITEM: Button"); ImGui::PopButtonRepeat(); } // Testing button (with repeater)

  05e21	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 2
  05e28	75 40		 jne	 SHORT $LN215@ShowDemoWi
  05e2a	6a 01		 push	 1
  05e2c	e8 00 00 00 00	 call	 ?PushButtonRepeat@ImGui@@YAX_N@Z ; ImGui::PushButtonRepeat
  05e31	83 c4 04	 add	 esp, 4
  05e34	51		 push	 ecx
  05e35	0f 57 c0	 xorps	 xmm0, xmm0
  05e38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05e3d	51		 push	 ecx
  05e3e	0f 57 c0	 xorps	 xmm0, xmm0
  05e41	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05e46	8d 8d 40 ec ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  05e4c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  05e51	50		 push	 eax
  05e52	68 00 00 00 00	 push	 OFFSET ??_C@_0N@KDFNBBDI@ITEM?3?5Button@
  05e57	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  05e5c	83 c4 08	 add	 esp, 8
  05e5f	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
  05e65	e8 00 00 00 00	 call	 ?PopButtonRepeat@ImGui@@YAXXZ ; ImGui::PopButtonRepeat
$LN215@ShowDemoWi:

; 1634 :         if (item_type == 3) { ret = ImGui::Checkbox("ITEM: Checkbox", &b); }                            // Testing checkbox

  05e6a	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 3
  05e71	75 18		 jne	 SHORT $LN216@ShowDemoWi
  05e73	68 00 00 00 00	 push	 OFFSET ?b@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  05e78	68 00 00 00 00	 push	 OFFSET ??_C@_0P@EJKLMMCP@ITEM?3?5Checkbox@
  05e7d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  05e82	83 c4 08	 add	 esp, 8
  05e85	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN216@ShowDemoWi:

; 1635 :         if (item_type == 4) { ret = ImGui::SliderFloat("ITEM: SliderFloat", &col4f[0], 0.0f, 1.0f); }   // Testing basic item

  05e8b	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 4
  05e92	75 4c		 jne	 SHORT $LN217@ShowDemoWi
  05e94	51		 push	 ecx
  05e95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05e9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05ea2	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05ea7	51		 push	 ecx
  05ea8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05eb0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05eb5	51		 push	 ecx
  05eb6	0f 57 c0	 xorps	 xmm0, xmm0
  05eb9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05ebe	b8 04 00 00 00	 mov	 eax, 4
  05ec3	6b c8 00	 imul	 ecx, eax, 0
  05ec6	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?col4f@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05ecc	51		 push	 ecx
  05ecd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@HBFCOBHP@ITEM?3?5SliderFloat@
  05ed2	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  05ed7	83 c4 18	 add	 esp, 24			; 00000018H
  05eda	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN217@ShowDemoWi:

; 1636 :         if (item_type == 5) { ret = ImGui::InputText("ITEM: InputText", &str[0], IM_ARRAYSIZE(str)); }  // Testing input text (which handles tabbing)

  05ee0	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 5
  05ee7	75 2a		 jne	 SHORT $LN218@ShowDemoWi
  05ee9	6a 00		 push	 0
  05eeb	6a 00		 push	 0
  05eed	6a 00		 push	 0
  05eef	6a 10		 push	 16			; 00000010H
  05ef1	b8 01 00 00 00	 mov	 eax, 1
  05ef6	6b c8 00	 imul	 ecx, eax, 0
  05ef9	81 c1 00 00 00
	00		 add	 ecx, OFFSET ?str@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  05eff	51		 push	 ecx
  05f00	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@HPKEIJD@ITEM?3?5InputText@
  05f05	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  05f0a	83 c4 18	 add	 esp, 24			; 00000018H
  05f0d	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN218@ShowDemoWi:

; 1637 :         if (item_type == 6) { ret = ImGui::InputFloat("ITEM: InputFloat", col4f, 1.0f); }               // Testing +/- buttons on scalar input

  05f13	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 6
  05f1a	75 36		 jne	 SHORT $LN219@ShowDemoWi
  05f1c	6a 00		 push	 0
  05f1e	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05f23	51		 push	 ecx
  05f24	0f 57 c0	 xorps	 xmm0, xmm0
  05f27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05f2c	51		 push	 ecx
  05f2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  05f35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  05f3a	68 00 00 00 00	 push	 OFFSET ?col4f@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05f3f	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LGHPELBI@ITEM?3?5InputFloat@
  05f44	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  05f49	83 c4 18	 add	 esp, 24			; 00000018H
  05f4c	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN219@ShowDemoWi:

; 1638 :         if (item_type == 7) { ret = ImGui::InputFloat3("ITEM: InputFloat3", col4f); }                   // Testing multi-component items (IsItemXXX flags are reported merged)

  05f52	83 3d 00 00 00
	00 07		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 7
  05f59	75 1f		 jne	 SHORT $LN220@ShowDemoWi
  05f5b	6a 00		 push	 0
  05f5d	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  05f62	68 00 00 00 00	 push	 OFFSET ?col4f@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05f67	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@OHLBICCN@ITEM?3?5InputFloat3@
  05f6c	e8 00 00 00 00	 call	 ?InputFloat3@ImGui@@YA_NPBDQAM0H@Z ; ImGui::InputFloat3
  05f71	83 c4 10	 add	 esp, 16			; 00000010H
  05f74	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN220@ShowDemoWi:

; 1639 :         if (item_type == 8) { ret = ImGui::ColorEdit4("ITEM: ColorEdit4", col4f); }                     // Testing multi-component items (IsItemXXX flags are reported merged)

  05f7a	83 3d 00 00 00
	00 08		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 8
  05f81	75 1a		 jne	 SHORT $LN221@ShowDemoWi
  05f83	6a 00		 push	 0
  05f85	68 00 00 00 00	 push	 OFFSET ?col4f@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PAMA
  05f8a	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@GFGJJDD@ITEM?3?5ColorEdit4@
  05f8f	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  05f94	83 c4 0c	 add	 esp, 12			; 0000000cH
  05f97	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN221@ShowDemoWi:

; 1640 :         if (item_type == 9) { ret = ImGui::MenuItem("ITEM: MenuItem"); }                                // Testing menu item (they use ImGuiButtonFlags_PressedOnRelease button policy)

  05f9d	83 3d 00 00 00
	00 09		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 9
  05fa4	75 19		 jne	 SHORT $LN222@ShowDemoWi
  05fa6	6a 01		 push	 1
  05fa8	6a 00		 push	 0
  05faa	6a 00		 push	 0
  05fac	68 00 00 00 00	 push	 OFFSET ??_C@_0P@DJLFKAPF@ITEM?3?5MenuItem@
  05fb1	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  05fb6	83 c4 10	 add	 esp, 16			; 00000010H
  05fb9	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN222@ShowDemoWi:

; 1641 :         if (item_type == 10){ ret = ImGui::TreeNode("ITEM: TreeNode"); if (ret) ImGui::TreePop(); }     // Testing tree node

  05fbf	83 3d 00 00 00
	00 0a		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 10 ; 0000000aH
  05fc6	75 23		 jne	 SHORT $LN224@ShowDemoWi
  05fc8	68 00 00 00 00	 push	 OFFSET ??_C@_0P@LCFKNGDN@ITEM?3?5TreeNode@
  05fcd	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  05fd2	83 c4 04	 add	 esp, 4
  05fd5	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
  05fdb	0f b6 85 4f f8
	ff ff		 movzx	 eax, BYTE PTR _ret$95[ebp]
  05fe2	85 c0		 test	 eax, eax
  05fe4	74 05		 je	 SHORT $LN224@ShowDemoWi
  05fe6	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN224@ShowDemoWi:

; 1642 :         if (item_type == 11){ ret = ImGui::TreeNodeEx("ITEM: TreeNode w/ ImGuiTreeNodeFlags_OpenOnDoubleClick", ImGuiTreeNodeFlags_OpenOnDoubleClick | ImGuiTreeNodeFlags_NoTreePushOnOpen); } // Testing tree node with ImGuiButtonFlags_PressedOnDoubleClick button policy.

  05feb	83 3d 00 00 00
	00 0b		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 11 ; 0000000bH
  05ff2	75 15		 jne	 SHORT $LN225@ShowDemoWi
  05ff4	6a 48		 push	 72			; 00000048H
  05ff6	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@BOEHHDDC@ITEM?3?5TreeNode?5w?1?5ImGuiTreeNode@
  05ffb	e8 00 00 00 00	 call	 ?TreeNodeEx@ImGui@@YA_NPBDH@Z ; ImGui::TreeNodeEx
  06000	83 c4 08	 add	 esp, 8
  06003	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN225@ShowDemoWi:

; 1643 :         if (item_type == 12){ const char* items[] = { "Apple", "Banana", "Cherry", "Kiwi" }; static int current = 1; ret = ImGui::ListBox("ITEM: ListBox", &current, items, IM_ARRAYSIZE(items), IM_ARRAYSIZE(items)); }

  06009	83 3d 00 00 00
	00 0c		 cmp	 DWORD PTR ?item_type@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4HA, 12 ; 0000000cH
  06010	75 4b		 jne	 SHORT $LN226@ShowDemoWi
  06012	c7 85 34 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$94[ebp], OFFSET ??_C@_05EBJDGKGA@Apple@
  0601c	c7 85 38 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$94[ebp+4], OFFSET ??_C@_06OJJIHNKI@Banana@
  06026	c7 85 3c f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$94[ebp+8], OFFSET ??_C@_06MKLLCMPJ@Cherry@
  06030	c7 85 40 f8 ff
	ff 00 00 00 00	 mov	 DWORD PTR _items$94[ebp+12], OFFSET ??_C@_04LFFBHHAI@Kiwi@
  0603a	6a 04		 push	 4
  0603c	6a 04		 push	 4
  0603e	8d 85 34 f8 ff
	ff		 lea	 eax, DWORD PTR _items$94[ebp]
  06044	50		 push	 eax
  06045	68 00 00 00 00	 push	 OFFSET ?current@?BLD@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0604a	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DECMNPJF@ITEM?3?5ListBox@
  0604f	e8 00 00 00 00	 call	 ?ListBox@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::ListBox
  06054	83 c4 14	 add	 esp, 20			; 00000014H
  06057	88 85 4f f8 ff
	ff		 mov	 BYTE PTR _ret$95[ebp], al
$LN226@ShowDemoWi:

; 1644 : 
; 1645 :         // Display the value of IsItemHovered() and other common item state functions.
; 1646 :         // Note that the ImGuiHoveredFlags_XXX flags can be combined.
; 1647 :         // Because BulletText is an item itself and that would affect the output of IsItemXXX functions,
; 1648 :         // we query every state in a single call to avoid storing them and to simplify the code
; 1649 :         ImGui::BulletText(

  0605d	8d 85 30 ec ff
	ff		 lea	 eax, DWORD PTR $T9[ebp]
  06063	50		 push	 eax
  06064	e8 00 00 00 00	 call	 ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectSize
  06069	83 c4 04	 add	 esp, 4
  0606c	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  06071	83 ec 08	 sub	 esp, 8
  06074	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  06079	8d 8d 20 ec ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0607f	51		 push	 ecx
  06080	e8 00 00 00 00	 call	 ?GetItemRectSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectSize
  06085	83 c4 04	 add	 esp, 4
  06088	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  0608c	83 ec 08	 sub	 esp, 8
  0608f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  06094	8d 95 10 ec ff
	ff		 lea	 edx, DWORD PTR $T7[ebp]
  0609a	52		 push	 edx
  0609b	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  060a0	83 c4 04	 add	 esp, 4
  060a3	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  060a8	83 ec 08	 sub	 esp, 8
  060ab	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  060b0	8d 85 00 ec ff
	ff		 lea	 eax, DWORD PTR $T6[ebp]
  060b6	50		 push	 eax
  060b7	e8 00 00 00 00	 call	 ?GetItemRectMax@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMax
  060bc	83 c4 04	 add	 esp, 4
  060bf	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  060c3	83 ec 08	 sub	 esp, 8
  060c6	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  060cb	8d 8d f0 eb ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  060d1	51		 push	 ecx
  060d2	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  060d7	83 c4 04	 add	 esp, 4
  060da	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  060df	83 ec 08	 sub	 esp, 8
  060e2	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  060e7	8d 95 e0 eb ff
	ff		 lea	 edx, DWORD PTR $T4[ebp]
  060ed	52		 push	 edx
  060ee	e8 00 00 00 00	 call	 ?GetItemRectMin@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetItemRectMin
  060f3	83 c4 04	 add	 esp, 4
  060f6	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  060fa	83 ec 08	 sub	 esp, 8
  060fd	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  06102	e8 00 00 00 00	 call	 ?IsItemToggledOpen@ImGui@@YA_NXZ ; ImGui::IsItemToggledOpen
  06107	0f b6 c0	 movzx	 eax, al
  0610a	50		 push	 eax
  0610b	6a 00		 push	 0
  0610d	e8 00 00 00 00	 call	 ?IsItemClicked@ImGui@@YA_NH@Z ; ImGui::IsItemClicked
  06112	83 c4 04	 add	 esp, 4
  06115	0f b6 c8	 movzx	 ecx, al
  06118	51		 push	 ecx
  06119	e8 00 00 00 00	 call	 ?IsItemVisible@ImGui@@YA_NXZ ; ImGui::IsItemVisible
  0611e	0f b6 d0	 movzx	 edx, al
  06121	52		 push	 edx
  06122	e8 00 00 00 00	 call	 ?IsItemDeactivatedAfterEdit@ImGui@@YA_NXZ ; ImGui::IsItemDeactivatedAfterEdit
  06127	0f b6 c0	 movzx	 eax, al
  0612a	50		 push	 eax
  0612b	e8 00 00 00 00	 call	 ?IsItemDeactivated@ImGui@@YA_NXZ ; ImGui::IsItemDeactivated
  06130	0f b6 c8	 movzx	 ecx, al
  06133	51		 push	 ecx
  06134	e8 00 00 00 00	 call	 ?IsItemActivated@ImGui@@YA_NXZ ; ImGui::IsItemActivated
  06139	0f b6 d0	 movzx	 edx, al
  0613c	52		 push	 edx
  0613d	e8 00 00 00 00	 call	 ?IsItemEdited@ImGui@@YA_NXZ ; ImGui::IsItemEdited
  06142	0f b6 c0	 movzx	 eax, al
  06145	50		 push	 eax
  06146	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  0614b	0f b6 c8	 movzx	 ecx, al
  0614e	51		 push	 ecx
  0614f	6a 68		 push	 104			; 00000068H
  06151	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  06156	83 c4 04	 add	 esp, 4
  06159	0f b6 d0	 movzx	 edx, al
  0615c	52		 push	 edx
  0615d	6a 40		 push	 64			; 00000040H
  0615f	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  06164	83 c4 04	 add	 esp, 4
  06167	0f b6 c0	 movzx	 eax, al
  0616a	50		 push	 eax
  0616b	6a 20		 push	 32			; 00000020H
  0616d	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  06172	83 c4 04	 add	 esp, 4
  06175	0f b6 c8	 movzx	 ecx, al
  06178	51		 push	 ecx
  06179	6a 08		 push	 8
  0617b	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  06180	83 c4 04	 add	 esp, 4
  06183	0f b6 d0	 movzx	 edx, al
  06186	52		 push	 edx
  06187	6a 00		 push	 0
  06189	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0618e	83 c4 04	 add	 esp, 4
  06191	0f b6 c0	 movzx	 eax, al
  06194	50		 push	 eax
  06195	e8 00 00 00 00	 call	 ?IsItemFocused@ImGui@@YA_NXZ ; ImGui::IsItemFocused
  0619a	0f b6 c8	 movzx	 ecx, al
  0619d	51		 push	 ecx
  0619e	0f b6 95 4f f8
	ff ff		 movzx	 edx, BYTE PTR _ret$95[ebp]
  061a5	52		 push	 edx
  061a6	68 00 00 00 00	 push	 OFFSET ??_C@_0CAA@CDNKPHBM@Return?5value?5?$DN?5?$CFd?6IsItemFocused@
  061ab	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  061b0	83 c4 70	 add	 esp, 112		; 00000070H

; 1650 :             "Return value = %d\n"
; 1651 :             "IsItemFocused() = %d\n"
; 1652 :             "IsItemHovered() = %d\n"
; 1653 :             "IsItemHovered(_AllowWhenBlockedByPopup) = %d\n"
; 1654 :             "IsItemHovered(_AllowWhenBlockedByActiveItem) = %d\n"
; 1655 :             "IsItemHovered(_AllowWhenOverlapped) = %d\n"
; 1656 :             "IsItemHovered(_RectOnly) = %d\n"
; 1657 :             "IsItemActive() = %d\n"
; 1658 :             "IsItemEdited() = %d\n"
; 1659 :             "IsItemActivated() = %d\n"
; 1660 :             "IsItemDeactivated() = %d\n"
; 1661 :             "IsItemDeactivatedAfterEdit() = %d\n"
; 1662 :             "IsItemVisible() = %d\n"
; 1663 :             "IsItemClicked() = %d\n"
; 1664 :             "IsItemToggledOpen() = %d\n"
; 1665 :             "GetItemRectMin() = (%.1f, %.1f)\n"
; 1666 :             "GetItemRectMax() = (%.1f, %.1f)\n"
; 1667 :             "GetItemRectSize() = (%.1f, %.1f)",
; 1668 :             ret,
; 1669 :             ImGui::IsItemFocused(),
; 1670 :             ImGui::IsItemHovered(),
; 1671 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
; 1672 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
; 1673 :             ImGui::IsItemHovered(ImGuiHoveredFlags_AllowWhenOverlapped),
; 1674 :             ImGui::IsItemHovered(ImGuiHoveredFlags_RectOnly),
; 1675 :             ImGui::IsItemActive(),
; 1676 :             ImGui::IsItemEdited(),
; 1677 :             ImGui::IsItemActivated(),
; 1678 :             ImGui::IsItemDeactivated(),
; 1679 :             ImGui::IsItemDeactivatedAfterEdit(),
; 1680 :             ImGui::IsItemVisible(),
; 1681 :             ImGui::IsItemClicked(),
; 1682 :             ImGui::IsItemToggledOpen(),
; 1683 :             ImGui::GetItemRectMin().x, ImGui::GetItemRectMin().y,
; 1684 :             ImGui::GetItemRectMax().x, ImGui::GetItemRectMax().y,
; 1685 :             ImGui::GetItemRectSize().x, ImGui::GetItemRectSize().y
; 1686 :         );
; 1687 : 
; 1688 :         static bool embed_all_inside_a_child_window = false;
; 1689 :         ImGui::Checkbox("Embed everything inside a child window (for additional testing)", &embed_all_inside_a_child_window);

  061b3	68 00 00 00 00	 push	 OFFSET ?embed_all_inside_a_child_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  061b8	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@FIPEGKJF@Embed?5everything?5inside?5a?5child@
  061bd	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  061c2	83 c4 08	 add	 esp, 8

; 1690 :         if (embed_all_inside_a_child_window)

  061c5	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?embed_all_inside_a_child_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  061cc	85 c0		 test	 eax, eax
  061ce	74 47		 je	 SHORT $LN227@ShowDemoWi

; 1691 :             ImGui::BeginChild("outer_child", ImVec2(0, ImGui::GetFontSize() * 20), true);

  061d0	6a 00		 push	 0
  061d2	6a 01		 push	 1
  061d4	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  061d9	d9 9d b8 eb ff
	ff		 fstp	 DWORD PTR tv5693[ebp]
  061df	f3 0f 10 85 b8
	eb ff ff	 movss	 xmm0, DWORD PTR tv5693[ebp]
  061e7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41a00000
  061ef	51		 push	 ecx
  061f0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  061f5	51		 push	 ecx
  061f6	0f 57 c0	 xorps	 xmm0, xmm0
  061f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  061fe	8d 8d d0 eb ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  06204	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  06209	50		 push	 eax
  0620a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@KCHHLPPE@outer_child@
  0620f	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  06214	83 c4 10	 add	 esp, 16			; 00000010H
$LN227@ShowDemoWi:

; 1692 : 
; 1693 :         // Testing IsWindowFocused() function with its various flags.
; 1694 :         // Note that the ImGuiFocusedFlags_XXX flags can be combined.
; 1695 :         ImGui::BulletText(

  06217	6a 04		 push	 4
  06219	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  0621e	83 c4 04	 add	 esp, 4
  06221	0f b6 c0	 movzx	 eax, al
  06224	50		 push	 eax
  06225	6a 02		 push	 2
  06227	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  0622c	83 c4 04	 add	 esp, 4
  0622f	0f b6 c8	 movzx	 ecx, al
  06232	51		 push	 ecx
  06233	6a 03		 push	 3
  06235	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  0623a	83 c4 04	 add	 esp, 4
  0623d	0f b6 d0	 movzx	 edx, al
  06240	52		 push	 edx
  06241	6a 01		 push	 1
  06243	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  06248	83 c4 04	 add	 esp, 4
  0624b	0f b6 c0	 movzx	 eax, al
  0624e	50		 push	 eax
  0624f	6a 00		 push	 0
  06251	e8 00 00 00 00	 call	 ?IsWindowFocused@ImGui@@YA_NH@Z ; ImGui::IsWindowFocused
  06256	83 c4 04	 add	 esp, 4
  06259	0f b6 c8	 movzx	 ecx, al
  0625c	51		 push	 ecx
  0625d	68 00 00 00 00	 push	 OFFSET ??_C@_0KP@HKEFGHBG@IsWindowFocused?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@
  06262	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  06267	83 c4 18	 add	 esp, 24			; 00000018H

; 1696 :             "IsWindowFocused() = %d\n"
; 1697 :             "IsWindowFocused(_ChildWindows) = %d\n"
; 1698 :             "IsWindowFocused(_ChildWindows|_RootWindow) = %d\n"
; 1699 :             "IsWindowFocused(_RootWindow) = %d\n"
; 1700 :             "IsWindowFocused(_AnyWindow) = %d\n",
; 1701 :             ImGui::IsWindowFocused(),
; 1702 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows),
; 1703 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_ChildWindows | ImGuiFocusedFlags_RootWindow),
; 1704 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_RootWindow),
; 1705 :             ImGui::IsWindowFocused(ImGuiFocusedFlags_AnyWindow));
; 1706 : 
; 1707 :         // Testing IsWindowHovered() function with its various flags.
; 1708 :         // Note that the ImGuiHoveredFlags_XXX flags can be combined.
; 1709 :         ImGui::BulletText(

  0626a	6a 04		 push	 4
  0626c	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  06271	83 c4 04	 add	 esp, 4
  06274	0f b6 c0	 movzx	 eax, al
  06277	50		 push	 eax
  06278	6a 02		 push	 2
  0627a	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  0627f	83 c4 04	 add	 esp, 4
  06282	0f b6 c8	 movzx	 ecx, al
  06285	51		 push	 ecx
  06286	6a 09		 push	 9
  06288	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  0628d	83 c4 04	 add	 esp, 4
  06290	0f b6 d0	 movzx	 edx, al
  06293	52		 push	 edx
  06294	6a 03		 push	 3
  06296	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  0629b	83 c4 04	 add	 esp, 4
  0629e	0f b6 c0	 movzx	 eax, al
  062a1	50		 push	 eax
  062a2	6a 01		 push	 1
  062a4	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  062a9	83 c4 04	 add	 esp, 4
  062ac	0f b6 c8	 movzx	 ecx, al
  062af	51		 push	 ecx
  062b0	6a 20		 push	 32			; 00000020H
  062b2	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  062b7	83 c4 04	 add	 esp, 4
  062ba	0f b6 d0	 movzx	 edx, al
  062bd	52		 push	 edx
  062be	6a 08		 push	 8
  062c0	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  062c5	83 c4 04	 add	 esp, 4
  062c8	0f b6 c0	 movzx	 eax, al
  062cb	50		 push	 eax
  062cc	6a 00		 push	 0
  062ce	e8 00 00 00 00	 call	 ?IsWindowHovered@ImGui@@YA_NH@Z ; ImGui::IsWindowHovered
  062d3	83 c4 04	 add	 esp, 4
  062d6	0f b6 c8	 movzx	 ecx, al
  062d9	51		 push	 ecx
  062da	68 00 00 00 00	 push	 OFFSET ??_C@_0BEP@BNECLKFC@IsWindowHovered?$CI?$CJ?5?$DN?5?$CFd?6IsWindow@
  062df	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  062e4	83 c4 24	 add	 esp, 36			; 00000024H

; 1710 :             "IsWindowHovered() = %d\n"
; 1711 :             "IsWindowHovered(_AllowWhenBlockedByPopup) = %d\n"
; 1712 :             "IsWindowHovered(_AllowWhenBlockedByActiveItem) = %d\n"
; 1713 :             "IsWindowHovered(_ChildWindows) = %d\n"
; 1714 :             "IsWindowHovered(_ChildWindows|_RootWindow) = %d\n"
; 1715 :             "IsWindowHovered(_ChildWindows|_AllowWhenBlockedByPopup) = %d\n"
; 1716 :             "IsWindowHovered(_RootWindow) = %d\n"
; 1717 :             "IsWindowHovered(_AnyWindow) = %d\n",
; 1718 :             ImGui::IsWindowHovered(),
; 1719 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByPopup),
; 1720 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_AllowWhenBlockedByActiveItem),
; 1721 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows),
; 1722 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_RootWindow),
; 1723 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_ChildWindows | ImGuiHoveredFlags_AllowWhenBlockedByPopup),
; 1724 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_RootWindow),
; 1725 :             ImGui::IsWindowHovered(ImGuiHoveredFlags_AnyWindow));
; 1726 : 
; 1727 :         ImGui::BeginChild("child", ImVec2(0, 50), true);

  062e7	6a 00		 push	 0
  062e9	6a 01		 push	 1
  062eb	51		 push	 ecx
  062ec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  062f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  062f9	51		 push	 ecx
  062fa	0f 57 c0	 xorps	 xmm0, xmm0
  062fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  06302	8d 8d c0 eb ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  06308	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0630d	50		 push	 eax
  0630e	68 00 00 00 00	 push	 OFFSET ??_C@_05GPGNDLEK@child@
  06313	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  06318	83 c4 10	 add	 esp, 16			; 00000010H

; 1728 :         ImGui::Text("This is another child window for testing the _ChildWindows flag.");

  0631b	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@JLFLAMNL@This?5is?5another?5child?5window?5fo@
  06320	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  06325	83 c4 04	 add	 esp, 4

; 1729 :         ImGui::EndChild();

  06328	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 1730 :         if (embed_all_inside_a_child_window)

  0632d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?embed_all_inside_a_child_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06334	85 c0		 test	 eax, eax
  06336	74 05		 je	 SHORT $LN228@ShowDemoWi

; 1731 :             ImGui::EndChild();

  06338	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild
$LN228@ShowDemoWi:

; 1732 : 
; 1733 :         static char dummy_str[] = "This is a dummy field to be able to tab-out of the widgets above.";
; 1734 :         ImGui::InputText("dummy", dummy_str, IM_ARRAYSIZE(dummy_str), ImGuiInputTextFlags_ReadOnly);

  0633d	6a 00		 push	 0
  0633f	6a 00		 push	 0
  06341	68 00 40 00 00	 push	 16384			; 00004000H
  06346	6a 42		 push	 66			; 00000042H
  06348	68 00 00 00 00	 push	 OFFSET ?dummy_str@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4PADA
  0634d	68 00 00 00 00	 push	 OFFSET ??_C@_05JLNEMJLN@dummy@
  06352	e8 00 00 00 00	 call	 ?InputText@ImGui@@YA_NPBDPADIHP6AHPAUImGuiInputTextCallbackData@@@ZPAX@Z ; ImGui::InputText
  06357	83 c4 18	 add	 esp, 24			; 00000018H

; 1735 : 
; 1736 :         // Calling IsItemHovered() after begin returns the hovered status of the title bar.
; 1737 :         // This is useful in particular if you want to create a context menu (with BeginPopupContextItem) associated to the title bar of a window.
; 1738 :         static bool test_window = false;
; 1739 :         ImGui::Checkbox("Hovered/Active tests after Begin() for title bar testing", &test_window);

  0635a	68 00 00 00 00	 push	 OFFSET ?test_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0635f	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@OKFMLKNH@Hovered?1Active?5tests?5after?5Begi@
  06364	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  06369	83 c4 08	 add	 esp, 8

; 1740 :         if (test_window)

  0636c	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?test_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  06373	85 c0		 test	 eax, eax
  06375	74 76		 je	 SHORT $LN229@ShowDemoWi

; 1741 :         {
; 1742 :             ImGui::Begin("Title bar Hovered/Active tests", &test_window);

  06377	6a 00		 push	 0
  06379	68 00 00 00 00	 push	 OFFSET ?test_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA
  0637e	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@MFKNMHP@Title?5bar?5Hovered?1Active?5tests@
  06383	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  06388	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1743 :             if (ImGui::BeginPopupContextItem()) // <-- This is using IsItemHovered()

  0638b	6a 01		 push	 1
  0638d	6a 00		 push	 0
  0638f	e8 00 00 00 00	 call	 ?BeginPopupContextItem@ImGui@@YA_NPBDH@Z ; ImGui::BeginPopupContextItem
  06394	83 c4 08	 add	 esp, 8
  06397	0f b6 c0	 movzx	 eax, al
  0639a	85 c0		 test	 eax, eax
  0639c	74 26		 je	 SHORT $LN230@ShowDemoWi

; 1744 :             {
; 1745 :                 if (ImGui::MenuItem("Close")) { test_window = false; }

  0639e	6a 01		 push	 1
  063a0	6a 00		 push	 0
  063a2	6a 00		 push	 0
  063a4	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  063a9	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  063ae	83 c4 10	 add	 esp, 16			; 00000010H
  063b1	0f b6 c0	 movzx	 eax, al
  063b4	85 c0		 test	 eax, eax
  063b6	74 07		 je	 SHORT $LN231@ShowDemoWi
  063b8	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?test_window@?BIK@??ShowDemoWindowWidgets@@YAXXZ@4_NA, 0
$LN231@ShowDemoWi:

; 1746 :                 ImGui::EndPopup();

  063bf	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN230@ShowDemoWi:

; 1747 :             }
; 1748 :             ImGui::Text(

  063c4	e8 00 00 00 00	 call	 ?IsItemActive@ImGui@@YA_NXZ ; ImGui::IsItemActive
  063c9	0f b6 c0	 movzx	 eax, al
  063cc	50		 push	 eax
  063cd	6a 00		 push	 0
  063cf	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  063d4	83 c4 04	 add	 esp, 4
  063d7	0f b6 c8	 movzx	 ecx, al
  063da	51		 push	 ecx
  063db	68 00 00 00 00	 push	 OFFSET ??_C@_0HP@CKBHJIAM@IsItemHovered?$CI?$CJ?5after?5begin?5?$DN?5?$CF@
  063e0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  063e5	83 c4 0c	 add	 esp, 12			; 0000000cH

; 1749 :                 "IsItemHovered() after begin = %d (== is title bar hovered)\n"
; 1750 :                 "IsItemActive() after begin = %d (== is window being clicked/moved)\n",
; 1751 :                 ImGui::IsItemHovered(), ImGui::IsItemActive());
; 1752 :             ImGui::End();

  063e8	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN229@ShowDemoWi:

; 1753 :         }
; 1754 : 
; 1755 :         ImGui::TreePop();

  063ed	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN212@ShowDemoWi:
$LN1@ShowDemoWi:

; 1756 :     }
; 1757 : }

  063f2	52		 push	 edx
  063f3	8b cd		 mov	 ecx, ebp
  063f5	50		 push	 eax
  063f6	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN407@ShowDemoWi
  063fc	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  06401	58		 pop	 eax
  06402	5a		 pop	 edx
  06403	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  06406	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0640d	59		 pop	 ecx
  0640e	5f		 pop	 edi
  0640f	5e		 pop	 esi
  06410	5b		 pop	 ebx
  06411	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  06414	33 cd		 xor	 ecx, ebp
  06416	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0641b	81 c4 58 14 00
	00		 add	 esp, 5208		; 00001458H
  06421	3b ec		 cmp	 ebp, esp
  06423	e8 00 00 00 00	 call	 __RTC_CheckEsp
  06428	8b e5		 mov	 esp, ebp
  0642a	5d		 pop	 ebp
  0642b	c3		 ret	 0
$LN407@ShowDemoWi:
  0642c	4a 00 00 00	 DD	 74			; 0000004aH
  06430	00 00 00 00	 DD	 $LN406@ShowDemoWi
$LN406@ShowDemoWi:
  06434	9c ff ff ff	 DD	 -100			; ffffff9cH
  06438	38 00 00 00	 DD	 56			; 00000038H
  0643c	00 00 00 00	 DD	 $LN331@ShowDemoWi
  06440	84 ff ff ff	 DD	 -124			; ffffff84H
  06444	10 00 00 00	 DD	 16			; 00000010H
  06448	00 00 00 00	 DD	 $LN332@ShowDemoWi
  0644c	4c ff ff ff	 DD	 -180			; ffffff4cH
  06450	24 00 00 00	 DD	 36			; 00000024H
  06454	00 00 00 00	 DD	 $LN333@ShowDemoWi
  06458	dc fe ff ff	 DD	 -292			; fffffedcH
  0645c	08 00 00 00	 DD	 8
  06460	00 00 00 00	 DD	 $LN334@ShowDemoWi
  06464	9c fe ff ff	 DD	 -356			; fffffe9cH
  06468	08 00 00 00	 DD	 8
  0646c	00 00 00 00	 DD	 $LN335@ShowDemoWi
  06470	5c fe ff ff	 DD	 -420			; fffffe5cH
  06474	08 00 00 00	 DD	 8
  06478	00 00 00 00	 DD	 $LN336@ShowDemoWi
  0647c	4c fe ff ff	 DD	 -436			; fffffe4cH
  06480	08 00 00 00	 DD	 8
  06484	00 00 00 00	 DD	 $LN337@ShowDemoWi
  06488	f4 fd ff ff	 DD	 -524			; fffffdf4H
  0648c	38 00 00 00	 DD	 56			; 00000038H
  06490	00 00 00 00	 DD	 $LN338@ShowDemoWi
  06494	a8 fd ff ff	 DD	 -600			; fffffda8H
  06498	20 00 00 00	 DD	 32			; 00000020H
  0649c	00 00 00 00	 DD	 $LN339@ShowDemoWi
  064a0	74 fd ff ff	 DD	 -652			; fffffd74H
  064a4	20 00 00 00	 DD	 32			; 00000020H
  064a8	00 00 00 00	 DD	 $LN340@ShowDemoWi
  064ac	40 fd ff ff	 DD	 -704			; fffffd40H
  064b0	20 00 00 00	 DD	 32			; 00000020H
  064b4	00 00 00 00	 DD	 $LN341@ShowDemoWi
  064b8	f4 fc ff ff	 DD	 -780			; fffffcf4H
  064bc	08 00 00 00	 DD	 8
  064c0	00 00 00 00	 DD	 $LN342@ShowDemoWi
  064c4	cc fc ff ff	 DD	 -820			; fffffcccH
  064c8	20 00 00 00	 DD	 32			; 00000020H
  064cc	00 00 00 00	 DD	 $LN343@ShowDemoWi
  064d0	8c fc ff ff	 DD	 -884			; fffffc8cH
  064d4	20 00 00 00	 DD	 32			; 00000020H
  064d8	00 00 00 00	 DD	 $LN344@ShowDemoWi
  064dc	4c fc ff ff	 DD	 -948			; fffffc4cH
  064e0	20 00 00 00	 DD	 32			; 00000020H
  064e4	00 00 00 00	 DD	 $LN345@ShowDemoWi
  064e8	ef fb ff ff	 DD	 -1041			; fffffbefH
  064ec	01 00 00 00	 DD	 1
  064f0	00 00 00 00	 DD	 $LN346@ShowDemoWi
  064f4	e3 fb ff ff	 DD	 -1053			; fffffbe3H
  064f8	01 00 00 00	 DD	 1
  064fc	00 00 00 00	 DD	 $LN347@ShowDemoWi
  06500	d7 fb ff ff	 DD	 -1065			; fffffbd7H
  06504	01 00 00 00	 DD	 1
  06508	00 00 00 00	 DD	 $LN348@ShowDemoWi
  0650c	cb fb ff ff	 DD	 -1077			; fffffbcbH
  06510	01 00 00 00	 DD	 1
  06514	00 00 00 00	 DD	 $LN349@ShowDemoWi
  06518	bf fb ff ff	 DD	 -1089			; fffffbbfH
  0651c	01 00 00 00	 DD	 1
  06520	00 00 00 00	 DD	 $LN350@ShowDemoWi
  06524	b3 fb ff ff	 DD	 -1101			; fffffbb3H
  06528	01 00 00 00	 DD	 1
  0652c	00 00 00 00	 DD	 $LN351@ShowDemoWi
  06530	a7 fb ff ff	 DD	 -1113			; fffffba7H
  06534	01 00 00 00	 DD	 1
  06538	00 00 00 00	 DD	 $LN352@ShowDemoWi
  0653c	9b fb ff ff	 DD	 -1125			; fffffb9bH
  06540	01 00 00 00	 DD	 1
  06544	00 00 00 00	 DD	 $LN353@ShowDemoWi
  06548	8f fb ff ff	 DD	 -1137			; fffffb8fH
  0654c	01 00 00 00	 DD	 1
  06550	00 00 00 00	 DD	 $LN354@ShowDemoWi
  06554	83 fb ff ff	 DD	 -1149			; fffffb83H
  06558	01 00 00 00	 DD	 1
  0655c	00 00 00 00	 DD	 $LN355@ShowDemoWi
  06560	74 fb ff ff	 DD	 -1164			; fffffb74H
  06564	02 00 00 00	 DD	 2
  06568	00 00 00 00	 DD	 $LN356@ShowDemoWi
  0656c	68 fb ff ff	 DD	 -1176			; fffffb68H
  06570	02 00 00 00	 DD	 2
  06574	00 00 00 00	 DD	 $LN357@ShowDemoWi
  06578	5c fb ff ff	 DD	 -1188			; fffffb5cH
  0657c	02 00 00 00	 DD	 2
  06580	00 00 00 00	 DD	 $LN358@ShowDemoWi
  06584	50 fb ff ff	 DD	 -1200			; fffffb50H
  06588	02 00 00 00	 DD	 2
  0658c	00 00 00 00	 DD	 $LN359@ShowDemoWi
  06590	44 fb ff ff	 DD	 -1212			; fffffb44H
  06594	02 00 00 00	 DD	 2
  06598	00 00 00 00	 DD	 $LN360@ShowDemoWi
  0659c	38 fb ff ff	 DD	 -1224			; fffffb38H
  065a0	02 00 00 00	 DD	 2
  065a4	00 00 00 00	 DD	 $LN361@ShowDemoWi
  065a8	2c fb ff ff	 DD	 -1236			; fffffb2cH
  065ac	02 00 00 00	 DD	 2
  065b0	00 00 00 00	 DD	 $LN362@ShowDemoWi
  065b4	20 fb ff ff	 DD	 -1248			; fffffb20H
  065b8	02 00 00 00	 DD	 2
  065bc	00 00 00 00	 DD	 $LN363@ShowDemoWi
  065c0	14 fb ff ff	 DD	 -1260			; fffffb14H
  065c4	02 00 00 00	 DD	 2
  065c8	00 00 00 00	 DD	 $LN364@ShowDemoWi
  065cc	08 fb ff ff	 DD	 -1272			; fffffb08H
  065d0	02 00 00 00	 DD	 2
  065d4	00 00 00 00	 DD	 $LN365@ShowDemoWi
  065d8	fc fa ff ff	 DD	 -1284			; fffffafcH
  065dc	04 00 00 00	 DD	 4
  065e0	00 00 00 00	 DD	 $LN366@ShowDemoWi
  065e4	f0 fa ff ff	 DD	 -1296			; fffffaf0H
  065e8	04 00 00 00	 DD	 4
  065ec	00 00 00 00	 DD	 $LN367@ShowDemoWi
  065f0	e4 fa ff ff	 DD	 -1308			; fffffae4H
  065f4	04 00 00 00	 DD	 4
  065f8	00 00 00 00	 DD	 $LN368@ShowDemoWi
  065fc	d8 fa ff ff	 DD	 -1320			; fffffad8H
  06600	04 00 00 00	 DD	 4
  06604	00 00 00 00	 DD	 $LN369@ShowDemoWi
  06608	cc fa ff ff	 DD	 -1332			; fffffaccH
  0660c	04 00 00 00	 DD	 4
  06610	00 00 00 00	 DD	 $LN370@ShowDemoWi
  06614	c0 fa ff ff	 DD	 -1344			; fffffac0H
  06618	04 00 00 00	 DD	 4
  0661c	00 00 00 00	 DD	 $LN371@ShowDemoWi
  06620	b4 fa ff ff	 DD	 -1356			; fffffab4H
  06624	04 00 00 00	 DD	 4
  06628	00 00 00 00	 DD	 $LN372@ShowDemoWi
  0662c	a8 fa ff ff	 DD	 -1368			; fffffaa8H
  06630	04 00 00 00	 DD	 4
  06634	00 00 00 00	 DD	 $LN373@ShowDemoWi
  06638	9c fa ff ff	 DD	 -1380			; fffffa9cH
  0663c	04 00 00 00	 DD	 4
  06640	00 00 00 00	 DD	 $LN374@ShowDemoWi
  06644	90 fa ff ff	 DD	 -1392			; fffffa90H
  06648	04 00 00 00	 DD	 4
  0664c	00 00 00 00	 DD	 $LN375@ShowDemoWi
  06650	84 fa ff ff	 DD	 -1404			; fffffa84H
  06654	04 00 00 00	 DD	 4
  06658	00 00 00 00	 DD	 $LN376@ShowDemoWi
  0665c	78 fa ff ff	 DD	 -1416			; fffffa78H
  06660	04 00 00 00	 DD	 4
  06664	00 00 00 00	 DD	 $LN377@ShowDemoWi
  06668	6c fa ff ff	 DD	 -1428			; fffffa6cH
  0666c	04 00 00 00	 DD	 4
  06670	00 00 00 00	 DD	 $LN378@ShowDemoWi
  06674	60 fa ff ff	 DD	 -1440			; fffffa60H
  06678	04 00 00 00	 DD	 4
  0667c	00 00 00 00	 DD	 $LN379@ShowDemoWi
  06680	50 fa ff ff	 DD	 -1456			; fffffa50H
  06684	08 00 00 00	 DD	 8
  06688	00 00 00 00	 DD	 $LN380@ShowDemoWi
  0668c	40 fa ff ff	 DD	 -1472			; fffffa40H
  06690	08 00 00 00	 DD	 8
  06694	00 00 00 00	 DD	 $LN381@ShowDemoWi
  06698	30 fa ff ff	 DD	 -1488			; fffffa30H
  0669c	08 00 00 00	 DD	 8
  066a0	00 00 00 00	 DD	 $LN382@ShowDemoWi
  066a4	20 fa ff ff	 DD	 -1504			; fffffa20H
  066a8	08 00 00 00	 DD	 8
  066ac	00 00 00 00	 DD	 $LN383@ShowDemoWi
  066b0	10 fa ff ff	 DD	 -1520			; fffffa10H
  066b4	08 00 00 00	 DD	 8
  066b8	00 00 00 00	 DD	 $LN384@ShowDemoWi
  066bc	00 fa ff ff	 DD	 -1536			; fffffa00H
  066c0	08 00 00 00	 DD	 8
  066c4	00 00 00 00	 DD	 $LN385@ShowDemoWi
  066c8	f0 f9 ff ff	 DD	 -1552			; fffff9f0H
  066cc	08 00 00 00	 DD	 8
  066d0	00 00 00 00	 DD	 $LN386@ShowDemoWi
  066d4	e0 f9 ff ff	 DD	 -1568			; fffff9e0H
  066d8	08 00 00 00	 DD	 8
  066dc	00 00 00 00	 DD	 $LN387@ShowDemoWi
  066e0	d0 f9 ff ff	 DD	 -1584			; fffff9d0H
  066e4	08 00 00 00	 DD	 8
  066e8	00 00 00 00	 DD	 $LN388@ShowDemoWi
  066ec	c0 f9 ff ff	 DD	 -1600			; fffff9c0H
  066f0	08 00 00 00	 DD	 8
  066f4	00 00 00 00	 DD	 $LN389@ShowDemoWi
  066f8	b0 f9 ff ff	 DD	 -1616			; fffff9b0H
  066fc	08 00 00 00	 DD	 8
  06700	00 00 00 00	 DD	 $LN390@ShowDemoWi
  06704	a0 f9 ff ff	 DD	 -1632			; fffff9a0H
  06708	08 00 00 00	 DD	 8
  0670c	00 00 00 00	 DD	 $LN391@ShowDemoWi
  06710	90 f9 ff ff	 DD	 -1648			; fffff990H
  06714	08 00 00 00	 DD	 8
  06718	00 00 00 00	 DD	 $LN392@ShowDemoWi
  0671c	80 f9 ff ff	 DD	 -1664			; fffff980H
  06720	08 00 00 00	 DD	 8
  06724	00 00 00 00	 DD	 $LN393@ShowDemoWi
  06728	74 f9 ff ff	 DD	 -1676			; fffff974H
  0672c	04 00 00 00	 DD	 4
  06730	00 00 00 00	 DD	 $LN394@ShowDemoWi
  06734	68 f9 ff ff	 DD	 -1688			; fffff968H
  06738	04 00 00 00	 DD	 4
  0673c	00 00 00 00	 DD	 $LN395@ShowDemoWi
  06740	5c f9 ff ff	 DD	 -1700			; fffff95cH
  06744	04 00 00 00	 DD	 4
  06748	00 00 00 00	 DD	 $LN396@ShowDemoWi
  0674c	50 f9 ff ff	 DD	 -1712			; fffff950H
  06750	04 00 00 00	 DD	 4
  06754	00 00 00 00	 DD	 $LN397@ShowDemoWi
  06758	40 f9 ff ff	 DD	 -1728			; fffff940H
  0675c	08 00 00 00	 DD	 8
  06760	00 00 00 00	 DD	 $LN398@ShowDemoWi
  06764	30 f9 ff ff	 DD	 -1744			; fffff930H
  06768	08 00 00 00	 DD	 8
  0676c	00 00 00 00	 DD	 $LN399@ShowDemoWi
  06770	20 f9 ff ff	 DD	 -1760			; fffff920H
  06774	08 00 00 00	 DD	 8
  06778	00 00 00 00	 DD	 $LN400@ShowDemoWi
  0677c	10 f9 ff ff	 DD	 -1776			; fffff910H
  06780	08 00 00 00	 DD	 8
  06784	00 00 00 00	 DD	 $LN401@ShowDemoWi
  06788	d0 f8 ff ff	 DD	 -1840			; fffff8d0H
  0678c	08 00 00 00	 DD	 8
  06790	00 00 00 00	 DD	 $LN402@ShowDemoWi
  06794	a0 f8 ff ff	 DD	 -1888			; fffff8a0H
  06798	04 00 00 00	 DD	 4
  0679c	00 00 00 00	 DD	 $LN403@ShowDemoWi
  067a0	34 f8 ff ff	 DD	 -1996			; fffff834H
  067a4	10 00 00 00	 DD	 16			; 00000010H
  067a8	00 00 00 00	 DD	 $LN404@ShowDemoWi
$LN404@ShowDemoWi:
  067ac	69		 DB	 105			; 00000069H
  067ad	74		 DB	 116			; 00000074H
  067ae	65		 DB	 101			; 00000065H
  067af	6d		 DB	 109			; 0000006dH
  067b0	73		 DB	 115			; 00000073H
  067b1	00		 DB	 0
$LN403@ShowDemoWi:
  067b2	6e		 DB	 110			; 0000006eH
  067b3	00		 DB	 0
$LN402@ShowDemoWi:
  067b4	73		 DB	 115			; 00000073H
  067b5	6d		 DB	 109			; 0000006dH
  067b6	61		 DB	 97			; 00000061H
  067b7	6c		 DB	 108			; 0000006cH
  067b8	6c		 DB	 108			; 0000006cH
  067b9	5f		 DB	 95			; 0000005fH
  067ba	73		 DB	 115			; 00000073H
  067bb	6c		 DB	 108			; 0000006cH
  067bc	69		 DB	 105			; 00000069H
  067bd	64		 DB	 100			; 00000064H
  067be	65		 DB	 101			; 00000065H
  067bf	72		 DB	 114			; 00000072H
  067c0	5f		 DB	 95			; 0000005fH
  067c1	73		 DB	 115			; 00000073H
  067c2	69		 DB	 105			; 00000069H
  067c3	7a		 DB	 122			; 0000007aH
  067c4	65		 DB	 101			; 00000065H
  067c5	00		 DB	 0
$LN401@ShowDemoWi:
  067c6	66		 DB	 102			; 00000066H
  067c7	36		 DB	 54			; 00000036H
  067c8	34		 DB	 52			; 00000034H
  067c9	5f		 DB	 95			; 0000005fH
  067ca	68		 DB	 104			; 00000068H
  067cb	69		 DB	 105			; 00000069H
  067cc	5f		 DB	 95			; 0000005fH
  067cd	61		 DB	 97			; 00000061H
  067ce	00		 DB	 0
$LN400@ShowDemoWi:
  067cf	66		 DB	 102			; 00000066H
  067d0	36		 DB	 54			; 00000036H
  067d1	34		 DB	 52			; 00000034H
  067d2	5f		 DB	 95			; 0000005fH
  067d3	6c		 DB	 108			; 0000006cH
  067d4	6f		 DB	 111			; 0000006fH
  067d5	5f		 DB	 95			; 0000005fH
  067d6	61		 DB	 97			; 00000061H
  067d7	00		 DB	 0
$LN399@ShowDemoWi:
  067d8	66		 DB	 102			; 00000066H
  067d9	36		 DB	 54			; 00000036H
  067da	34		 DB	 52			; 00000034H
  067db	5f		 DB	 95			; 0000005fH
  067dc	6f		 DB	 111			; 0000006fH
  067dd	6e		 DB	 110			; 0000006eH
  067de	65		 DB	 101			; 00000065H
  067df	00		 DB	 0
$LN398@ShowDemoWi:
  067e0	66		 DB	 102			; 00000066H
  067e1	36		 DB	 54			; 00000036H
  067e2	34		 DB	 52			; 00000034H
  067e3	5f		 DB	 95			; 0000005fH
  067e4	7a		 DB	 122			; 0000007aH
  067e5	65		 DB	 101			; 00000065H
  067e6	72		 DB	 114			; 00000072H
  067e7	6f		 DB	 111			; 0000006fH
  067e8	00		 DB	 0
$LN397@ShowDemoWi:
  067e9	66		 DB	 102			; 00000066H
  067ea	33		 DB	 51			; 00000033H
  067eb	32		 DB	 50			; 00000032H
  067ec	5f		 DB	 95			; 0000005fH
  067ed	68		 DB	 104			; 00000068H
  067ee	69		 DB	 105			; 00000069H
  067ef	5f		 DB	 95			; 0000005fH
  067f0	61		 DB	 97			; 00000061H
  067f1	00		 DB	 0
$LN396@ShowDemoWi:
  067f2	66		 DB	 102			; 00000066H
  067f3	33		 DB	 51			; 00000033H
  067f4	32		 DB	 50			; 00000032H
  067f5	5f		 DB	 95			; 0000005fH
  067f6	6c		 DB	 108			; 0000006cH
  067f7	6f		 DB	 111			; 0000006fH
  067f8	5f		 DB	 95			; 0000005fH
  067f9	61		 DB	 97			; 00000061H
  067fa	00		 DB	 0
$LN395@ShowDemoWi:
  067fb	66		 DB	 102			; 00000066H
  067fc	33		 DB	 51			; 00000033H
  067fd	32		 DB	 50			; 00000032H
  067fe	5f		 DB	 95			; 0000005fH
  067ff	6f		 DB	 111			; 0000006fH
  06800	6e		 DB	 110			; 0000006eH
  06801	65		 DB	 101			; 00000065H
  06802	00		 DB	 0
$LN394@ShowDemoWi:
  06803	66		 DB	 102			; 00000066H
  06804	33		 DB	 51			; 00000033H
  06805	32		 DB	 50			; 00000032H
  06806	5f		 DB	 95			; 0000005fH
  06807	7a		 DB	 122			; 0000007aH
  06808	65		 DB	 101			; 00000065H
  06809	72		 DB	 114			; 00000072H
  0680a	6f		 DB	 111			; 0000006fH
  0680b	00		 DB	 0
$LN393@ShowDemoWi:
  0680c	75		 DB	 117			; 00000075H
  0680d	36		 DB	 54			; 00000036H
  0680e	34		 DB	 52			; 00000034H
  0680f	5f		 DB	 95			; 0000005fH
  06810	68		 DB	 104			; 00000068H
  06811	69		 DB	 105			; 00000069H
  06812	5f		 DB	 95			; 0000005fH
  06813	62		 DB	 98			; 00000062H
  06814	00		 DB	 0
$LN392@ShowDemoWi:
  06815	75		 DB	 117			; 00000075H
  06816	36		 DB	 54			; 00000036H
  06817	34		 DB	 52			; 00000034H
  06818	5f		 DB	 95			; 0000005fH
  06819	68		 DB	 104			; 00000068H
  0681a	69		 DB	 105			; 00000069H
  0681b	5f		 DB	 95			; 0000005fH
  0681c	61		 DB	 97			; 00000061H
  0681d	00		 DB	 0
$LN391@ShowDemoWi:
  0681e	75		 DB	 117			; 00000075H
  0681f	36		 DB	 54			; 00000036H
  06820	34		 DB	 52			; 00000034H
  06821	5f		 DB	 95			; 0000005fH
  06822	6d		 DB	 109			; 0000006dH
  06823	61		 DB	 97			; 00000061H
  06824	78		 DB	 120			; 00000078H
  06825	00		 DB	 0
$LN390@ShowDemoWi:
  06826	75		 DB	 117			; 00000075H
  06827	36		 DB	 54			; 00000036H
  06828	34		 DB	 52			; 00000034H
  06829	5f		 DB	 95			; 0000005fH
  0682a	6d		 DB	 109			; 0000006dH
  0682b	69		 DB	 105			; 00000069H
  0682c	6e		 DB	 110			; 0000006eH
  0682d	00		 DB	 0
$LN389@ShowDemoWi:
  0682e	75		 DB	 117			; 00000075H
  0682f	36		 DB	 54			; 00000036H
  06830	34		 DB	 52			; 00000034H
  06831	5f		 DB	 95			; 0000005fH
  06832	66		 DB	 102			; 00000066H
  06833	69		 DB	 105			; 00000069H
  06834	66		 DB	 102			; 00000066H
  06835	74		 DB	 116			; 00000074H
  06836	79		 DB	 121			; 00000079H
  06837	00		 DB	 0
$LN388@ShowDemoWi:
  06838	75		 DB	 117			; 00000075H
  06839	36		 DB	 54			; 00000036H
  0683a	34		 DB	 52			; 00000034H
  0683b	5f		 DB	 95			; 0000005fH
  0683c	6f		 DB	 111			; 0000006fH
  0683d	6e		 DB	 110			; 0000006eH
  0683e	65		 DB	 101			; 00000065H
  0683f	00		 DB	 0
$LN387@ShowDemoWi:
  06840	75		 DB	 117			; 00000075H
  06841	36		 DB	 54			; 00000036H
  06842	34		 DB	 52			; 00000034H
  06843	5f		 DB	 95			; 0000005fH
  06844	7a		 DB	 122			; 0000007aH
  06845	65		 DB	 101			; 00000065H
  06846	72		 DB	 114			; 00000072H
  06847	6f		 DB	 111			; 0000006fH
  06848	00		 DB	 0
$LN386@ShowDemoWi:
  06849	73		 DB	 115			; 00000073H
  0684a	36		 DB	 54			; 00000036H
  0684b	34		 DB	 52			; 00000034H
  0684c	5f		 DB	 95			; 0000005fH
  0684d	68		 DB	 104			; 00000068H
  0684e	69		 DB	 105			; 00000069H
  0684f	5f		 DB	 95			; 0000005fH
  06850	62		 DB	 98			; 00000062H
  06851	00		 DB	 0
$LN385@ShowDemoWi:
  06852	73		 DB	 115			; 00000073H
  06853	36		 DB	 54			; 00000036H
  06854	34		 DB	 52			; 00000034H
  06855	5f		 DB	 95			; 0000005fH
  06856	68		 DB	 104			; 00000068H
  06857	69		 DB	 105			; 00000069H
  06858	5f		 DB	 95			; 0000005fH
  06859	61		 DB	 97			; 00000061H
  0685a	00		 DB	 0
$LN384@ShowDemoWi:
  0685b	73		 DB	 115			; 00000073H
  0685c	36		 DB	 54			; 00000036H
  0685d	34		 DB	 52			; 00000034H
  0685e	5f		 DB	 95			; 0000005fH
  0685f	6d		 DB	 109			; 0000006dH
  06860	61		 DB	 97			; 00000061H
  06861	78		 DB	 120			; 00000078H
  06862	00		 DB	 0
$LN383@ShowDemoWi:
  06863	73		 DB	 115			; 00000073H
  06864	36		 DB	 54			; 00000036H
  06865	34		 DB	 52			; 00000034H
  06866	5f		 DB	 95			; 0000005fH
  06867	6d		 DB	 109			; 0000006dH
  06868	69		 DB	 105			; 00000069H
  06869	6e		 DB	 110			; 0000006eH
  0686a	00		 DB	 0
$LN382@ShowDemoWi:
  0686b	73		 DB	 115			; 00000073H
  0686c	36		 DB	 54			; 00000036H
  0686d	34		 DB	 52			; 00000034H
  0686e	5f		 DB	 95			; 0000005fH
  0686f	66		 DB	 102			; 00000066H
  06870	69		 DB	 105			; 00000069H
  06871	66		 DB	 102			; 00000066H
  06872	74		 DB	 116			; 00000074H
  06873	79		 DB	 121			; 00000079H
  06874	00		 DB	 0
$LN381@ShowDemoWi:
  06875	73		 DB	 115			; 00000073H
  06876	36		 DB	 54			; 00000036H
  06877	34		 DB	 52			; 00000034H
  06878	5f		 DB	 95			; 0000005fH
  06879	6f		 DB	 111			; 0000006fH
  0687a	6e		 DB	 110			; 0000006eH
  0687b	65		 DB	 101			; 00000065H
  0687c	00		 DB	 0
$LN380@ShowDemoWi:
  0687d	73		 DB	 115			; 00000073H
  0687e	36		 DB	 54			; 00000036H
  0687f	34		 DB	 52			; 00000034H
  06880	5f		 DB	 95			; 0000005fH
  06881	7a		 DB	 122			; 0000007aH
  06882	65		 DB	 101			; 00000065H
  06883	72		 DB	 114			; 00000072H
  06884	6f		 DB	 111			; 0000006fH
  06885	00		 DB	 0
$LN379@ShowDemoWi:
  06886	75		 DB	 117			; 00000075H
  06887	33		 DB	 51			; 00000033H
  06888	32		 DB	 50			; 00000032H
  06889	5f		 DB	 95			; 0000005fH
  0688a	68		 DB	 104			; 00000068H
  0688b	69		 DB	 105			; 00000069H
  0688c	5f		 DB	 95			; 0000005fH
  0688d	62		 DB	 98			; 00000062H
  0688e	00		 DB	 0
$LN378@ShowDemoWi:
  0688f	75		 DB	 117			; 00000075H
  06890	33		 DB	 51			; 00000033H
  06891	32		 DB	 50			; 00000032H
  06892	5f		 DB	 95			; 0000005fH
  06893	68		 DB	 104			; 00000068H
  06894	69		 DB	 105			; 00000069H
  06895	5f		 DB	 95			; 0000005fH
  06896	61		 DB	 97			; 00000061H
  06897	00		 DB	 0
$LN377@ShowDemoWi:
  06898	75		 DB	 117			; 00000075H
  06899	33		 DB	 51			; 00000033H
  0689a	32		 DB	 50			; 00000032H
  0689b	5f		 DB	 95			; 0000005fH
  0689c	6d		 DB	 109			; 0000006dH
  0689d	61		 DB	 97			; 00000061H
  0689e	78		 DB	 120			; 00000078H
  0689f	00		 DB	 0
$LN376@ShowDemoWi:
  068a0	75		 DB	 117			; 00000075H
  068a1	33		 DB	 51			; 00000033H
  068a2	32		 DB	 50			; 00000032H
  068a3	5f		 DB	 95			; 0000005fH
  068a4	6d		 DB	 109			; 0000006dH
  068a5	69		 DB	 105			; 00000069H
  068a6	6e		 DB	 110			; 0000006eH
  068a7	00		 DB	 0
$LN375@ShowDemoWi:
  068a8	75		 DB	 117			; 00000075H
  068a9	33		 DB	 51			; 00000033H
  068aa	32		 DB	 50			; 00000032H
  068ab	5f		 DB	 95			; 0000005fH
  068ac	66		 DB	 102			; 00000066H
  068ad	69		 DB	 105			; 00000069H
  068ae	66		 DB	 102			; 00000066H
  068af	74		 DB	 116			; 00000074H
  068b0	79		 DB	 121			; 00000079H
  068b1	00		 DB	 0
$LN374@ShowDemoWi:
  068b2	75		 DB	 117			; 00000075H
  068b3	33		 DB	 51			; 00000033H
  068b4	32		 DB	 50			; 00000032H
  068b5	5f		 DB	 95			; 0000005fH
  068b6	6f		 DB	 111			; 0000006fH
  068b7	6e		 DB	 110			; 0000006eH
  068b8	65		 DB	 101			; 00000065H
  068b9	00		 DB	 0
$LN373@ShowDemoWi:
  068ba	75		 DB	 117			; 00000075H
  068bb	33		 DB	 51			; 00000033H
  068bc	32		 DB	 50			; 00000032H
  068bd	5f		 DB	 95			; 0000005fH
  068be	7a		 DB	 122			; 0000007aH
  068bf	65		 DB	 101			; 00000065H
  068c0	72		 DB	 114			; 00000072H
  068c1	6f		 DB	 111			; 0000006fH
  068c2	00		 DB	 0
$LN372@ShowDemoWi:
  068c3	73		 DB	 115			; 00000073H
  068c4	33		 DB	 51			; 00000033H
  068c5	32		 DB	 50			; 00000032H
  068c6	5f		 DB	 95			; 0000005fH
  068c7	68		 DB	 104			; 00000068H
  068c8	69		 DB	 105			; 00000069H
  068c9	5f		 DB	 95			; 0000005fH
  068ca	62		 DB	 98			; 00000062H
  068cb	00		 DB	 0
$LN371@ShowDemoWi:
  068cc	73		 DB	 115			; 00000073H
  068cd	33		 DB	 51			; 00000033H
  068ce	32		 DB	 50			; 00000032H
  068cf	5f		 DB	 95			; 0000005fH
  068d0	68		 DB	 104			; 00000068H
  068d1	69		 DB	 105			; 00000069H
  068d2	5f		 DB	 95			; 0000005fH
  068d3	61		 DB	 97			; 00000061H
  068d4	00		 DB	 0
$LN370@ShowDemoWi:
  068d5	73		 DB	 115			; 00000073H
  068d6	33		 DB	 51			; 00000033H
  068d7	32		 DB	 50			; 00000032H
  068d8	5f		 DB	 95			; 0000005fH
  068d9	6d		 DB	 109			; 0000006dH
  068da	61		 DB	 97			; 00000061H
  068db	78		 DB	 120			; 00000078H
  068dc	00		 DB	 0
$LN369@ShowDemoWi:
  068dd	73		 DB	 115			; 00000073H
  068de	33		 DB	 51			; 00000033H
  068df	32		 DB	 50			; 00000032H
  068e0	5f		 DB	 95			; 0000005fH
  068e1	6d		 DB	 109			; 0000006dH
  068e2	69		 DB	 105			; 00000069H
  068e3	6e		 DB	 110			; 0000006eH
  068e4	00		 DB	 0
$LN368@ShowDemoWi:
  068e5	73		 DB	 115			; 00000073H
  068e6	33		 DB	 51			; 00000033H
  068e7	32		 DB	 50			; 00000032H
  068e8	5f		 DB	 95			; 0000005fH
  068e9	66		 DB	 102			; 00000066H
  068ea	69		 DB	 105			; 00000069H
  068eb	66		 DB	 102			; 00000066H
  068ec	74		 DB	 116			; 00000074H
  068ed	79		 DB	 121			; 00000079H
  068ee	00		 DB	 0
$LN367@ShowDemoWi:
  068ef	73		 DB	 115			; 00000073H
  068f0	33		 DB	 51			; 00000033H
  068f1	32		 DB	 50			; 00000032H
  068f2	5f		 DB	 95			; 0000005fH
  068f3	6f		 DB	 111			; 0000006fH
  068f4	6e		 DB	 110			; 0000006eH
  068f5	65		 DB	 101			; 00000065H
  068f6	00		 DB	 0
$LN366@ShowDemoWi:
  068f7	73		 DB	 115			; 00000073H
  068f8	33		 DB	 51			; 00000033H
  068f9	32		 DB	 50			; 00000032H
  068fa	5f		 DB	 95			; 0000005fH
  068fb	7a		 DB	 122			; 0000007aH
  068fc	65		 DB	 101			; 00000065H
  068fd	72		 DB	 114			; 00000072H
  068fe	6f		 DB	 111			; 0000006fH
  068ff	00		 DB	 0
$LN365@ShowDemoWi:
  06900	75		 DB	 117			; 00000075H
  06901	31		 DB	 49			; 00000031H
  06902	36		 DB	 54			; 00000036H
  06903	5f		 DB	 95			; 0000005fH
  06904	6d		 DB	 109			; 0000006dH
  06905	61		 DB	 97			; 00000061H
  06906	78		 DB	 120			; 00000078H
  06907	00		 DB	 0
$LN364@ShowDemoWi:
  06908	75		 DB	 117			; 00000075H
  06909	31		 DB	 49			; 00000031H
  0690a	36		 DB	 54			; 00000036H
  0690b	5f		 DB	 95			; 0000005fH
  0690c	6d		 DB	 109			; 0000006dH
  0690d	69		 DB	 105			; 00000069H
  0690e	6e		 DB	 110			; 0000006eH
  0690f	00		 DB	 0
$LN363@ShowDemoWi:
  06910	75		 DB	 117			; 00000075H
  06911	31		 DB	 49			; 00000031H
  06912	36		 DB	 54			; 00000036H
  06913	5f		 DB	 95			; 0000005fH
  06914	66		 DB	 102			; 00000066H
  06915	69		 DB	 105			; 00000069H
  06916	66		 DB	 102			; 00000066H
  06917	74		 DB	 116			; 00000074H
  06918	79		 DB	 121			; 00000079H
  06919	00		 DB	 0
$LN362@ShowDemoWi:
  0691a	75		 DB	 117			; 00000075H
  0691b	31		 DB	 49			; 00000031H
  0691c	36		 DB	 54			; 00000036H
  0691d	5f		 DB	 95			; 0000005fH
  0691e	6f		 DB	 111			; 0000006fH
  0691f	6e		 DB	 110			; 0000006eH
  06920	65		 DB	 101			; 00000065H
  06921	00		 DB	 0
$LN361@ShowDemoWi:
  06922	75		 DB	 117			; 00000075H
  06923	31		 DB	 49			; 00000031H
  06924	36		 DB	 54			; 00000036H
  06925	5f		 DB	 95			; 0000005fH
  06926	7a		 DB	 122			; 0000007aH
  06927	65		 DB	 101			; 00000065H
  06928	72		 DB	 114			; 00000072H
  06929	6f		 DB	 111			; 0000006fH
  0692a	00		 DB	 0
$LN360@ShowDemoWi:
  0692b	73		 DB	 115			; 00000073H
  0692c	31		 DB	 49			; 00000031H
  0692d	36		 DB	 54			; 00000036H
  0692e	5f		 DB	 95			; 0000005fH
  0692f	6d		 DB	 109			; 0000006dH
  06930	61		 DB	 97			; 00000061H
  06931	78		 DB	 120			; 00000078H
  06932	00		 DB	 0
$LN359@ShowDemoWi:
  06933	73		 DB	 115			; 00000073H
  06934	31		 DB	 49			; 00000031H
  06935	36		 DB	 54			; 00000036H
  06936	5f		 DB	 95			; 0000005fH
  06937	6d		 DB	 109			; 0000006dH
  06938	69		 DB	 105			; 00000069H
  06939	6e		 DB	 110			; 0000006eH
  0693a	00		 DB	 0
$LN358@ShowDemoWi:
  0693b	73		 DB	 115			; 00000073H
  0693c	31		 DB	 49			; 00000031H
  0693d	36		 DB	 54			; 00000036H
  0693e	5f		 DB	 95			; 0000005fH
  0693f	66		 DB	 102			; 00000066H
  06940	69		 DB	 105			; 00000069H
  06941	66		 DB	 102			; 00000066H
  06942	74		 DB	 116			; 00000074H
  06943	79		 DB	 121			; 00000079H
  06944	00		 DB	 0
$LN357@ShowDemoWi:
  06945	73		 DB	 115			; 00000073H
  06946	31		 DB	 49			; 00000031H
  06947	36		 DB	 54			; 00000036H
  06948	5f		 DB	 95			; 0000005fH
  06949	6f		 DB	 111			; 0000006fH
  0694a	6e		 DB	 110			; 0000006eH
  0694b	65		 DB	 101			; 00000065H
  0694c	00		 DB	 0
$LN356@ShowDemoWi:
  0694d	73		 DB	 115			; 00000073H
  0694e	31		 DB	 49			; 00000031H
  0694f	36		 DB	 54			; 00000036H
  06950	5f		 DB	 95			; 0000005fH
  06951	7a		 DB	 122			; 0000007aH
  06952	65		 DB	 101			; 00000065H
  06953	72		 DB	 114			; 00000072H
  06954	6f		 DB	 111			; 0000006fH
  06955	00		 DB	 0
$LN355@ShowDemoWi:
  06956	75		 DB	 117			; 00000075H
  06957	38		 DB	 56			; 00000038H
  06958	5f		 DB	 95			; 0000005fH
  06959	6d		 DB	 109			; 0000006dH
  0695a	61		 DB	 97			; 00000061H
  0695b	78		 DB	 120			; 00000078H
  0695c	00		 DB	 0
$LN354@ShowDemoWi:
  0695d	75		 DB	 117			; 00000075H
  0695e	38		 DB	 56			; 00000038H
  0695f	5f		 DB	 95			; 0000005fH
  06960	6d		 DB	 109			; 0000006dH
  06961	69		 DB	 105			; 00000069H
  06962	6e		 DB	 110			; 0000006eH
  06963	00		 DB	 0
$LN353@ShowDemoWi:
  06964	75		 DB	 117			; 00000075H
  06965	38		 DB	 56			; 00000038H
  06966	5f		 DB	 95			; 0000005fH
  06967	66		 DB	 102			; 00000066H
  06968	69		 DB	 105			; 00000069H
  06969	66		 DB	 102			; 00000066H
  0696a	74		 DB	 116			; 00000074H
  0696b	79		 DB	 121			; 00000079H
  0696c	00		 DB	 0
$LN352@ShowDemoWi:
  0696d	75		 DB	 117			; 00000075H
  0696e	38		 DB	 56			; 00000038H
  0696f	5f		 DB	 95			; 0000005fH
  06970	6f		 DB	 111			; 0000006fH
  06971	6e		 DB	 110			; 0000006eH
  06972	65		 DB	 101			; 00000065H
  06973	00		 DB	 0
$LN351@ShowDemoWi:
  06974	75		 DB	 117			; 00000075H
  06975	38		 DB	 56			; 00000038H
  06976	5f		 DB	 95			; 0000005fH
  06977	7a		 DB	 122			; 0000007aH
  06978	65		 DB	 101			; 00000065H
  06979	72		 DB	 114			; 00000072H
  0697a	6f		 DB	 111			; 0000006fH
  0697b	00		 DB	 0
$LN350@ShowDemoWi:
  0697c	73		 DB	 115			; 00000073H
  0697d	38		 DB	 56			; 00000038H
  0697e	5f		 DB	 95			; 0000005fH
  0697f	6d		 DB	 109			; 0000006dH
  06980	61		 DB	 97			; 00000061H
  06981	78		 DB	 120			; 00000078H
  06982	00		 DB	 0
$LN349@ShowDemoWi:
  06983	73		 DB	 115			; 00000073H
  06984	38		 DB	 56			; 00000038H
  06985	5f		 DB	 95			; 0000005fH
  06986	6d		 DB	 109			; 0000006dH
  06987	69		 DB	 105			; 00000069H
  06988	6e		 DB	 110			; 0000006eH
  06989	00		 DB	 0
$LN348@ShowDemoWi:
  0698a	73		 DB	 115			; 00000073H
  0698b	38		 DB	 56			; 00000038H
  0698c	5f		 DB	 95			; 0000005fH
  0698d	66		 DB	 102			; 00000066H
  0698e	69		 DB	 105			; 00000069H
  0698f	66		 DB	 102			; 00000066H
  06990	74		 DB	 116			; 00000074H
  06991	79		 DB	 121			; 00000079H
  06992	00		 DB	 0
$LN347@ShowDemoWi:
  06993	73		 DB	 115			; 00000073H
  06994	38		 DB	 56			; 00000038H
  06995	5f		 DB	 95			; 0000005fH
  06996	6f		 DB	 111			; 0000006fH
  06997	6e		 DB	 110			; 0000006eH
  06998	65		 DB	 101			; 00000065H
  06999	00		 DB	 0
$LN346@ShowDemoWi:
  0699a	73		 DB	 115			; 00000073H
  0699b	38		 DB	 56			; 00000038H
  0699c	5f		 DB	 95			; 0000005fH
  0699d	7a		 DB	 122			; 0000007aH
  0699e	65		 DB	 101			; 00000065H
  0699f	72		 DB	 114			; 00000072H
  069a0	6f		 DB	 111			; 0000006fH
  069a1	00		 DB	 0
$LN345@ShowDemoWi:
  069a2	62		 DB	 98			; 00000062H
  069a3	75		 DB	 117			; 00000075H
  069a4	66		 DB	 102			; 00000066H
  069a5	00		 DB	 0
$LN344@ShowDemoWi:
  069a6	6f		 DB	 111			; 0000006fH
  069a7	76		 DB	 118			; 00000076H
  069a8	65		 DB	 101			; 00000065H
  069a9	72		 DB	 114			; 00000072H
  069aa	6c		 DB	 108			; 0000006cH
  069ab	61		 DB	 97			; 00000061H
  069ac	79		 DB	 121			; 00000079H
  069ad	00		 DB	 0
$LN343@ShowDemoWi:
  069ae	6e		 DB	 110			; 0000006eH
  069af	61		 DB	 97			; 00000061H
  069b0	6d		 DB	 109			; 0000006dH
  069b1	65		 DB	 101			; 00000065H
  069b2	00		 DB	 0
$LN342@ShowDemoWi:
  069b3	61		 DB	 97			; 00000061H
  069b4	6c		 DB	 108			; 0000006cH
  069b5	69		 DB	 105			; 00000069H
  069b6	67		 DB	 103			; 00000067H
  069b7	6e		 DB	 110			; 0000006eH
  069b8	6d		 DB	 109			; 0000006dH
  069b9	65		 DB	 101			; 00000065H
  069ba	6e		 DB	 110			; 0000006eH
  069bb	74		 DB	 116			; 00000074H
  069bc	00		 DB	 0
$LN341@ShowDemoWi:
  069bd	6c		 DB	 108			; 0000006cH
  069be	61		 DB	 97			; 00000061H
  069bf	62		 DB	 98			; 00000062H
  069c0	65		 DB	 101			; 00000065H
  069c1	6c		 DB	 108			; 0000006cH
  069c2	00		 DB	 0
$LN340@ShowDemoWi:
  069c3	62		 DB	 98			; 00000062H
  069c4	75		 DB	 117			; 00000075H
  069c5	66		 DB	 102			; 00000066H
  069c6	00		 DB	 0
$LN339@ShowDemoWi:
  069c7	62		 DB	 98			; 00000062H
  069c8	75		 DB	 117			; 00000075H
  069c9	66		 DB	 102			; 00000066H
  069ca	00		 DB	 0
$LN338@ShowDemoWi:
  069cb	69		 DB	 105			; 00000069H
  069cc	74		 DB	 116			; 00000074H
  069cd	65		 DB	 101			; 00000065H
  069ce	6d		 DB	 109			; 0000006dH
  069cf	73		 DB	 115			; 00000073H
  069d0	00		 DB	 0
$LN337@ShowDemoWi:
  069d1	75		 DB	 117			; 00000075H
  069d2	76		 DB	 118			; 00000076H
  069d3	31		 DB	 49			; 00000031H
  069d4	00		 DB	 0
$LN336@ShowDemoWi:
  069d5	75		 DB	 117			; 00000075H
  069d6	76		 DB	 118			; 00000076H
  069d7	30		 DB	 48			; 00000030H
  069d8	00		 DB	 0
$LN335@ShowDemoWi:
  069d9	70		 DB	 112			; 00000070H
  069da	6f		 DB	 111			; 0000006fH
  069db	73		 DB	 115			; 00000073H
  069dc	00		 DB	 0
$LN334@ShowDemoWi:
  069dd	70		 DB	 112			; 00000070H
  069de	6f		 DB	 111			; 0000006fH
  069df	73		 DB	 115			; 00000073H
  069e0	00		 DB	 0
$LN333@ShowDemoWi:
  069e1	6c		 DB	 108			; 0000006cH
  069e2	69		 DB	 105			; 00000069H
  069e3	73		 DB	 115			; 00000073H
  069e4	74		 DB	 116			; 00000074H
  069e5	62		 DB	 98			; 00000062H
  069e6	6f		 DB	 111			; 0000006fH
  069e7	78		 DB	 120			; 00000078H
  069e8	5f		 DB	 95			; 0000005fH
  069e9	69		 DB	 105			; 00000069H
  069ea	74		 DB	 116			; 00000074H
  069eb	65		 DB	 101			; 00000065H
  069ec	6d		 DB	 109			; 0000006dH
  069ed	73		 DB	 115			; 00000073H
  069ee	00		 DB	 0
$LN332@ShowDemoWi:
  069ef	65		 DB	 101			; 00000065H
  069f0	6c		 DB	 108			; 0000006cH
  069f1	65		 DB	 101			; 00000065H
  069f2	6d		 DB	 109			; 0000006dH
  069f3	65		 DB	 101			; 00000065H
  069f4	6e		 DB	 110			; 0000006eH
  069f5	74		 DB	 116			; 00000074H
  069f6	5f		 DB	 95			; 0000005fH
  069f7	6e		 DB	 110			; 0000006eH
  069f8	61		 DB	 97			; 00000061H
  069f9	6d		 DB	 109			; 0000006dH
  069fa	65		 DB	 101			; 00000065H
  069fb	73		 DB	 115			; 00000073H
  069fc	00		 DB	 0
$LN331@ShowDemoWi:
  069fd	69		 DB	 105			; 00000069H
  069fe	74		 DB	 116			; 00000074H
  069ff	65		 DB	 101			; 00000065H
  06a00	6d		 DB	 109			; 0000006dH
  06a01	73		 DB	 115			; 00000073H
  06a02	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS1@?OA@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$1:
  0000c	68 00 00 00 00	 push	 OFFSET ?$TSS2@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00011	e8 00 00 00 00	 call	 __Init_thread_abort
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$2:
  00018	68 00 00 00 00	 push	 OFFSET ?$TSS4@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  0001d	e8 00 00 00 00	 call	 __Init_thread_abort
  00022	59		 pop	 ecx
  00023	c3		 ret	 0
__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$3:
  00024	68 00 00 00 00	 push	 OFFSET ?$TSS5@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00029	e8 00 00 00 00	 call	 __Init_thread_abort
  0002e	59		 pop	 ecx
  0002f	c3		 ret	 0
__unwindfunclet$?ShowDemoWindowWidgets@@YAXXZ$4:
  00030	68 00 00 00 00	 push	 OFFSET ?$TSS6@?PH@??ShowDemoWindowWidgets@@YAXXZ@4HA
  00035	e8 00 00 00 00	 call	 __Init_thread_abort
  0003a	59		 pop	 ecx
  0003b	c3		 ret	 0
  0003c	cc		 int	 3
  0003d	cc		 int	 3
  0003e	cc		 int	 3
  0003f	cc		 int	 3
  00040	cc		 int	 3
__ehhandler$?ShowDemoWindowWidgets@@YAXXZ:
  00041	90		 npad	 1
  00042	90		 npad	 1
  00043	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00047	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0004a	8b 8a a4 eb ff
	ff		 mov	 ecx, DWORD PTR [edx-5212]
  00050	33 c8		 xor	 ecx, eax
  00052	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00057	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  0005a	33 c8		 xor	 ecx, eax
  0005c	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00061	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowDemoWindowWidgets@@YAXXZ
  00066	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowDemoWindowWidgets@@YAXXZ ENDP			; ShowDemoWindowWidgets
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?HelpMarker@@YAXPBD@Z
_TEXT	SEGMENT
tv79 = -196						; size = 4
_desc$ = 8						; size = 4
?HelpMarker@@YAXPBD@Z PROC				; HelpMarker, COMDAT

; 138  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 139  :     ImGui::TextDisabled("(?)");

  00028	68 00 00 00 00	 push	 OFFSET ??_C@_03NAEMJKHE@?$CI?$DP?$CJ@
  0002d	e8 00 00 00 00	 call	 ?TextDisabled@ImGui@@YAXPBDZZ ; ImGui::TextDisabled
  00032	83 c4 04	 add	 esp, 4

; 140  :     if (ImGui::IsItemHovered())

  00035	6a 00		 push	 0
  00037	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0003c	83 c4 04	 add	 esp, 4
  0003f	0f b6 c0	 movzx	 eax, al
  00042	85 c0		 test	 eax, eax
  00044	74 46		 je	 SHORT $LN2@HelpMarker

; 141  :     {
; 142  :         ImGui::BeginTooltip();

  00046	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 143  :         ImGui::PushTextWrapPos(ImGui::GetFontSize() * 35.0f);

  0004b	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00050	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv79[ebp]
  00056	f3 0f 10 85 3c
	ff ff ff	 movss	 xmm0, DWORD PTR tv79[ebp]
  0005e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@420c0000
  00066	51		 push	 ecx
  00067	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006c	e8 00 00 00 00	 call	 ?PushTextWrapPos@ImGui@@YAXM@Z ; ImGui::PushTextWrapPos
  00071	83 c4 04	 add	 esp, 4

; 144  :         ImGui::TextUnformatted(desc);

  00074	6a 00		 push	 0
  00076	8b 45 08	 mov	 eax, DWORD PTR _desc$[ebp]
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  0007f	83 c4 08	 add	 esp, 8

; 145  :         ImGui::PopTextWrapPos();

  00082	e8 00 00 00 00	 call	 ?PopTextWrapPos@ImGui@@YAXXZ ; ImGui::PopTextWrapPos

; 146  :         ImGui::EndTooltip();

  00087	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN2@HelpMarker:

; 147  :     }
; 148  : }

  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c3		 ret	 0
?HelpMarker@@YAXPBD@Z ENDP				; HelpMarker
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleMenuFile@@YAXXZ
_TEXT	SEGMENT
$T1 = -304						; size = 8
$T2 = -288						; size = 8
$T3 = -272						; size = 8
_p$4 = -64						; size = 8
_name$5 = -48						; size = 4
_i$6 = -36						; size = 4
_sz$7 = -24						; size = 4
_i$8 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
?ShowExampleMenuFile@@YAXXZ PROC			; ShowExampleMenuFile, COMDAT

; 3540 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 34 01 00
	00		 sub	 esp, 308		; 00000134H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd cc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-308]
  00012	b9 4d 00 00 00	 mov	 ecx, 77			; 0000004dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3541 :     ImGui::MenuItem("(dummy menu)", NULL, false, false);

  00032	6a 00		 push	 0
  00034	6a 00		 push	 0
  00036	6a 00		 push	 0
  00038	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GAHNIDOO@?$CIdummy?5menu?$CJ@
  0003d	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00042	83 c4 10	 add	 esp, 16			; 00000010H

; 3542 :     if (ImGui::MenuItem("New")) {}

  00045	6a 01		 push	 1
  00047	6a 00		 push	 0
  00049	6a 00		 push	 0
  0004b	68 00 00 00 00	 push	 OFFSET ??_C@_03ILBCOJBH@New@
  00050	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00055	83 c4 10	 add	 esp, 16			; 00000010H

; 3543 :     if (ImGui::MenuItem("Open", "Ctrl+O")) {}

  00058	6a 01		 push	 1
  0005a	6a 00		 push	 0
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_06DGNIABGN@Ctrl?$CLO@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_04DNCDCIAE@Open@
  00066	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0006b	83 c4 10	 add	 esp, 16			; 00000010H

; 3544 :     if (ImGui::BeginMenu("Open Recent"))

  0006e	6a 01		 push	 1
  00070	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FFOFICLF@Open?5Recent@
  00075	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  0007a	83 c4 08	 add	 esp, 8
  0007d	0f b6 c0	 movzx	 eax, al
  00080	85 c0		 test	 eax, eax
  00082	0f 84 9f 00 00
	00		 je	 $LN10@ShowExampl

; 3545 :     {
; 3546 :         ImGui::MenuItem("fish_hat.c");

  00088	6a 01		 push	 1
  0008a	6a 00		 push	 0
  0008c	6a 00		 push	 0
  0008e	68 00 00 00 00	 push	 OFFSET ??_C@_0L@MGPNFHBN@fish_hat?4c@
  00093	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00098	83 c4 10	 add	 esp, 16			; 00000010H

; 3547 :         ImGui::MenuItem("fish_hat.inl");

  0009b	6a 01		 push	 1
  0009d	6a 00		 push	 0
  0009f	6a 00		 push	 0
  000a1	68 00 00 00 00	 push	 OFFSET ??_C@_0N@OONPEMFD@fish_hat?4inl@
  000a6	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000ab	83 c4 10	 add	 esp, 16			; 00000010H

; 3548 :         ImGui::MenuItem("fish_hat.h");

  000ae	6a 01		 push	 1
  000b0	6a 00		 push	 0
  000b2	6a 00		 push	 0
  000b4	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CFAJIONG@fish_hat?4h@
  000b9	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000be	83 c4 10	 add	 esp, 16			; 00000010H

; 3549 :         if (ImGui::BeginMenu("More.."))

  000c1	6a 01		 push	 1
  000c3	68 00 00 00 00	 push	 OFFSET ??_C@_06INDFPOP@More?4?4@
  000c8	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  000cd	83 c4 08	 add	 esp, 8
  000d0	0f b6 c0	 movzx	 eax, al
  000d3	85 c0		 test	 eax, eax
  000d5	74 4b		 je	 SHORT $LN11@ShowExampl

; 3550 :         {
; 3551 :             ImGui::MenuItem("Hello");

  000d7	6a 01		 push	 1
  000d9	6a 00		 push	 0
  000db	6a 00		 push	 0
  000dd	68 00 00 00 00	 push	 OFFSET ??_C@_05COLMCDPH@Hello@
  000e2	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000e7	83 c4 10	 add	 esp, 16			; 00000010H

; 3552 :             ImGui::MenuItem("Sailor");

  000ea	6a 01		 push	 1
  000ec	6a 00		 push	 0
  000ee	6a 00		 push	 0
  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_06IFGMFLK@Sailor@
  000f5	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000fa	83 c4 10	 add	 esp, 16			; 00000010H

; 3553 :             if (ImGui::BeginMenu("Recurse.."))

  000fd	6a 01		 push	 1
  000ff	68 00 00 00 00	 push	 OFFSET ??_C@_09JKOAAOOB@Recurse?4?4@
  00104	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00109	83 c4 08	 add	 esp, 8
  0010c	0f b6 c0	 movzx	 eax, al
  0010f	85 c0		 test	 eax, eax
  00111	74 0a		 je	 SHORT $LN12@ShowExampl

; 3554 :             {
; 3555 :                 ShowExampleMenuFile();

  00113	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 3556 :                 ImGui::EndMenu();

  00118	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN12@ShowExampl:

; 3557 :             }
; 3558 :             ImGui::EndMenu();

  0011d	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN11@ShowExampl:

; 3559 :         }
; 3560 :         ImGui::EndMenu();

  00122	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN10@ShowExampl:

; 3561 :     }
; 3562 :     if (ImGui::MenuItem("Save", "Ctrl+S")) {}

  00127	6a 01		 push	 1
  00129	6a 00		 push	 0
  0012b	68 00 00 00 00	 push	 OFFSET ??_C@_06NAKPFMDA@Ctrl?$CLS@
  00130	68 00 00 00 00	 push	 OFFSET ??_C@_04INACKGJP@Save@
  00135	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0013a	83 c4 10	 add	 esp, 16			; 00000010H

; 3563 :     if (ImGui::MenuItem("Save As..")) {}

  0013d	6a 01		 push	 1
  0013f	6a 00		 push	 0
  00141	6a 00		 push	 0
  00143	68 00 00 00 00	 push	 OFFSET ??_C@_09JEJONNAL@Save?5As?4?4@
  00148	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0014d	83 c4 10	 add	 esp, 16			; 00000010H

; 3564 :     ImGui::Separator();

  00150	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3565 :     if (ImGui::BeginMenu("Options"))

  00155	6a 01		 push	 1
  00157	68 00 00 00 00	 push	 OFFSET ??_C@_07KHIHFBFN@Options@
  0015c	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00161	83 c4 08	 add	 esp, 8
  00164	0f b6 c0	 movzx	 eax, al
  00167	85 c0		 test	 eax, eax
  00169	0f 84 19 01 00
	00		 je	 $LN15@ShowExampl

; 3566 :     {
; 3567 :         static bool enabled = true;
; 3568 :         ImGui::MenuItem("Enabled", "", &enabled);

  0016f	6a 01		 push	 1
  00171	68 00 00 00 00	 push	 OFFSET ?enabled@?BK@??ShowExampleMenuFile@@YAXXZ@4_NA
  00176	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  0017b	68 00 00 00 00	 push	 OFFSET ??_C@_07DOAOMMKG@Enabled@
  00180	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00185	83 c4 10	 add	 esp, 16			; 00000010H

; 3569 :         ImGui::BeginChild("child", ImVec2(0, 60), true);

  00188	6a 00		 push	 0
  0018a	6a 01		 push	 1
  0018c	51		 push	 ecx
  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42700000
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	51		 push	 ecx
  0019b	0f 57 c0	 xorps	 xmm0, xmm0
  0019e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a3	8d 8d f0 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001a9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001ae	50		 push	 eax
  001af	68 00 00 00 00	 push	 OFFSET ??_C@_05GPGNDLEK@child@
  001b4	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  001b9	83 c4 10	 add	 esp, 16			; 00000010H

; 3570 :         for (int i = 0; i < 10; i++)

  001bc	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  001c3	eb 09		 jmp	 SHORT $LN4@ShowExampl
$LN2@ShowExampl:
  001c5	8b 45 f4	 mov	 eax, DWORD PTR _i$8[ebp]
  001c8	83 c0 01	 add	 eax, 1
  001cb	89 45 f4	 mov	 DWORD PTR _i$8[ebp], eax
$LN4@ShowExampl:
  001ce	83 7d f4 0a	 cmp	 DWORD PTR _i$8[ebp], 10	; 0000000aH
  001d2	7d 13		 jge	 SHORT $LN3@ShowExampl

; 3571 :             ImGui::Text("Scrolling Text %d", i);

  001d4	8b 45 f4	 mov	 eax, DWORD PTR _i$8[ebp]
  001d7	50		 push	 eax
  001d8	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@MAFFAEMB@Scrolling?5Text?5?$CFd@
  001dd	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001e2	83 c4 08	 add	 esp, 8
  001e5	eb de		 jmp	 SHORT $LN2@ShowExampl
$LN3@ShowExampl:

; 3572 :         ImGui::EndChild();

  001e7	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 3573 :         static float f = 0.5f;
; 3574 :         static int n = 0;
; 3575 :         static bool b = true;
; 3576 :         ImGui::SliderFloat("Value", &f, 0.0f, 1.0f);

  001ec	51		 push	 ecx
  001ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001fa	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	51		 push	 ecx
  0020e	0f 57 c0	 xorps	 xmm0, xmm0
  00211	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00216	68 00 00 00 00	 push	 OFFSET ?f@?BK@??ShowExampleMenuFile@@YAXXZ@4MA
  0021b	68 00 00 00 00	 push	 OFFSET ??_C@_05LPIJGKJ@Value@
  00220	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00225	83 c4 18	 add	 esp, 24			; 00000018H

; 3577 :         ImGui::InputFloat("Input", &f, 0.1f);

  00228	6a 00		 push	 0
  0022a	68 00 00 00 00	 push	 OFFSET ??_C@_04GFJLOHHD@?$CF?43f@
  0022f	51		 push	 ecx
  00230	0f 57 c0	 xorps	 xmm0, xmm0
  00233	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00238	51		 push	 ecx
  00239	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  00241	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00246	68 00 00 00 00	 push	 OFFSET ?f@?BK@??ShowExampleMenuFile@@YAXXZ@4MA
  0024b	68 00 00 00 00	 push	 OFFSET ??_C@_05DCDOHKAB@Input@
  00250	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  00255	83 c4 18	 add	 esp, 24			; 00000018H

; 3578 :         ImGui::Combo("Combo", &n, "Yes\0No\0Maybe\0\0");

  00258	6a ff		 push	 -1
  0025a	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CHCLHMCH@Yes?$AANo?$AAMaybe?$AA?$AA@
  0025f	68 00 00 00 00	 push	 OFFSET ?n@?BK@??ShowExampleMenuFile@@YAXXZ@4HA
  00264	68 00 00 00 00	 push	 OFFSET ??_C@_05LMOJIBPK@Combo@
  00269	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  0026e	83 c4 10	 add	 esp, 16			; 00000010H

; 3579 :         ImGui::Checkbox("Check", &b);

  00271	68 00 00 00 00	 push	 OFFSET ?b@?BK@??ShowExampleMenuFile@@YAXXZ@4_NA
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_05KONDNKDG@Check@
  0027b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00280	83 c4 08	 add	 esp, 8

; 3580 :         ImGui::EndMenu();

  00283	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN15@ShowExampl:

; 3581 :     }
; 3582 :     if (ImGui::BeginMenu("Colors"))

  00288	6a 01		 push	 1
  0028a	68 00 00 00 00	 push	 OFFSET ??_C@_06ICDCBJPI@Colors@
  0028f	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00294	83 c4 08	 add	 esp, 8
  00297	0f b6 c0	 movzx	 eax, al
  0029a	85 c0		 test	 eax, eax
  0029c	0f 84 06 01 00
	00		 je	 $LN16@ShowExampl

; 3583 :     {
; 3584 :         float sz = ImGui::GetTextLineHeight();

  002a2	e8 00 00 00 00	 call	 ?GetTextLineHeight@ImGui@@YAMXZ ; ImGui::GetTextLineHeight
  002a7	d9 5d e8	 fstp	 DWORD PTR _sz$7[ebp]

; 3585 :         for (int i = 0; i < ImGuiCol_COUNT; i++)

  002aa	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _i$6[ebp], 0
  002b1	eb 09		 jmp	 SHORT $LN7@ShowExampl
$LN5@ShowExampl:
  002b3	8b 45 dc	 mov	 eax, DWORD PTR _i$6[ebp]
  002b6	83 c0 01	 add	 eax, 1
  002b9	89 45 dc	 mov	 DWORD PTR _i$6[ebp], eax
$LN7@ShowExampl:
  002bc	83 7d dc 30	 cmp	 DWORD PTR _i$6[ebp], 48	; 00000030H
  002c0	0f 8d dd 00 00
	00		 jge	 $LN6@ShowExampl

; 3586 :         {
; 3587 :             const char* name = ImGui::GetStyleColorName((ImGuiCol)i);

  002c6	8b 45 dc	 mov	 eax, DWORD PTR _i$6[ebp]
  002c9	50		 push	 eax
  002ca	e8 00 00 00 00	 call	 ?GetStyleColorName@ImGui@@YAPBDH@Z ; ImGui::GetStyleColorName
  002cf	83 c4 04	 add	 esp, 4
  002d2	89 45 d0	 mov	 DWORD PTR _name$5[ebp], eax

; 3588 :             ImVec2 p = ImGui::GetCursorScreenPos();

  002d5	8d 45 c0	 lea	 eax, DWORD PTR _p$4[ebp]
  002d8	50		 push	 eax
  002d9	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  002de	83 c4 04	 add	 esp, 4

; 3589 :             ImGui::GetWindowDrawList()->AddRectFilled(p, ImVec2(p.x+sz, p.y+sz), ImGui::GetColorU32((ImGuiCol)i));

  002e1	6a 0f		 push	 15			; 0000000fH
  002e3	51		 push	 ecx
  002e4	0f 57 c0	 xorps	 xmm0, xmm0
  002e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ec	51		 push	 ecx
  002ed	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002fa	8b 45 dc	 mov	 eax, DWORD PTR _i$6[ebp]
  002fd	50		 push	 eax
  002fe	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIHM@Z ; ImGui::GetColorU32
  00303	83 c4 08	 add	 esp, 8
  00306	50		 push	 eax
  00307	f3 0f 10 45 c4	 movss	 xmm0, DWORD PTR _p$4[ebp+4]
  0030c	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sz$7[ebp]
  00311	51		 push	 ecx
  00312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00317	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _p$4[ebp]
  0031c	f3 0f 58 45 e8	 addss	 xmm0, DWORD PTR _sz$7[ebp]
  00321	51		 push	 ecx
  00322	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00327	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0032d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00332	50		 push	 eax
  00333	8d 4d c0	 lea	 ecx, DWORD PTR _p$4[ebp]
  00336	51		 push	 ecx
  00337	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  0033c	8b c8		 mov	 ecx, eax
  0033e	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled

; 3590 :             ImGui::Dummy(ImVec2(sz, sz));

  00343	51		 push	 ecx
  00344	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _sz$7[ebp]
  00349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034e	51		 push	 ecx
  0034f	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _sz$7[ebp]
  00354	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00359	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0035f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00364	50		 push	 eax
  00365	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXABUImVec2@@@Z ; ImGui::Dummy
  0036a	83 c4 04	 add	 esp, 4

; 3591 :             ImGui::SameLine();

  0036d	51		 push	 ecx
  0036e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00376	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037b	51		 push	 ecx
  0037c	0f 57 c0	 xorps	 xmm0, xmm0
  0037f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00384	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00389	83 c4 08	 add	 esp, 8

; 3592 :             ImGui::MenuItem(name);

  0038c	6a 01		 push	 1
  0038e	6a 00		 push	 0
  00390	6a 00		 push	 0
  00392	8b 45 d0	 mov	 eax, DWORD PTR _name$5[ebp]
  00395	50		 push	 eax
  00396	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0039b	83 c4 10	 add	 esp, 16			; 00000010H

; 3593 :         }

  0039e	e9 10 ff ff ff	 jmp	 $LN5@ShowExampl
$LN6@ShowExampl:

; 3594 :         ImGui::EndMenu();

  003a3	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN16@ShowExampl:

; 3595 :     }
; 3596 :     if (ImGui::BeginMenu("Disabled", false)) // Disabled

  003a8	6a 00		 push	 0
  003aa	68 00 00 00 00	 push	 OFFSET ??_C@_08JGILNPHN@Disabled@
  003af	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  003b4	83 c4 08	 add	 esp, 8
  003b7	0f b6 c0	 movzx	 eax, al
  003ba	85 c0		 test	 eax, eax
  003bc	74 2a		 je	 SHORT $LN21@ShowExampl

; 3597 :     {
; 3598 :         IM_ASSERT(0);

  003be	33 c0		 xor	 eax, eax
  003c0	75 26		 jne	 SHORT $LN21@ShowExampl
  003c2	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ShowExampleMenuFile@@YAXXZ@4JA
  003c8	83 c1 3a	 add	 ecx, 58			; 0000003aH
  003cb	8b f4		 mov	 esi, esp
  003cd	51		 push	 ecx
  003ce	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  003d3	68 00 00 00 00	 push	 OFFSET ??_C@_13COJANIEC@?$AA0@
  003d8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  003de	83 c4 0c	 add	 esp, 12			; 0000000cH
  003e1	3b f4		 cmp	 esi, esp
  003e3	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN21@ShowExampl:

; 3599 :     }
; 3600 :     if (ImGui::MenuItem("Checked", NULL, true)) {}

  003e8	6a 01		 push	 1
  003ea	6a 01		 push	 1
  003ec	6a 00		 push	 0
  003ee	68 00 00 00 00	 push	 OFFSET ??_C@_07KAJHKDAE@Checked@
  003f3	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  003f8	83 c4 10	 add	 esp, 16			; 00000010H

; 3601 :     if (ImGui::MenuItem("Quit", "Alt+F4")) {}

  003fb	6a 01		 push	 1
  003fd	6a 00		 push	 0
  003ff	68 00 00 00 00	 push	 OFFSET ??_C@_06ELIFPNNI@Alt?$CLF4@
  00404	68 00 00 00 00	 push	 OFFSET ??_C@_04GMBKPCGK@Quit@
  00409	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0040e	83 c4 10	 add	 esp, 16			; 00000010H

; 3602 : }

  00411	52		 push	 edx
  00412	8b cd		 mov	 ecx, ebp
  00414	50		 push	 eax
  00415	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN24@ShowExampl
  0041b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00420	58		 pop	 eax
  00421	5a		 pop	 edx
  00422	5f		 pop	 edi
  00423	5e		 pop	 esi
  00424	5b		 pop	 ebx
  00425	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00428	33 cd		 xor	 ecx, ebp
  0042a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0042f	81 c4 34 01 00
	00		 add	 esp, 308		; 00000134H
  00435	3b ec		 cmp	 ebp, esp
  00437	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0043c	8b e5		 mov	 esp, ebp
  0043e	5d		 pop	 ebp
  0043f	c3		 ret	 0
$LN24@ShowExampl:
  00440	01 00 00 00	 DD	 1
  00444	00 00 00 00	 DD	 $LN23@ShowExampl
$LN23@ShowExampl:
  00448	c0 ff ff ff	 DD	 -64			; ffffffc0H
  0044c	08 00 00 00	 DD	 8
  00450	00 00 00 00	 DD	 $LN22@ShowExampl
$LN22@ShowExampl:
  00454	70		 DB	 112			; 00000070H
  00455	00		 DB	 0
?ShowExampleMenuFile@@YAXXZ ENDP			; ShowExampleMenuFile
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppCustomRendering@@YAXPA_N@Z
_TEXT	SEGMENT
tv160 = -1740						; size = 4
$T2 = -1732						; size = 8
$T3 = -1716						; size = 8
$T4 = -1700						; size = 8
$T5 = -1684						; size = 8
$T6 = -1668						; size = 8
$T7 = -1652						; size = 8
$T8 = -1636						; size = 8
$T9 = -1620						; size = 8
$T10 = -1604						; size = 8
$T11 = -1588						; size = 8
$T12 = -1572						; size = 8
$T13 = -1556						; size = 8
$T14 = -1540						; size = 8
$T15 = -1524						; size = 8
$T16 = -1508						; size = 8
$T17 = -1492						; size = 8
$T18 = -1476						; size = 8
$T19 = -1460						; size = 8
$T20 = -1444						; size = 8
$T21 = -1428						; size = 8
$T22 = -1412						; size = 8
$T23 = -1396						; size = 8
$T24 = -1380						; size = 8
$T25 = -1364						; size = 8
$T26 = -1348						; size = 8
$T27 = -1332						; size = 8
$T28 = -1316						; size = 8
$T29 = -1300						; size = 8
$T30 = -1284						; size = 8
$T31 = -1268						; size = 8
$T32 = -1252						; size = 8
$T33 = -1236						; size = 8
$T34 = -1220						; size = 8
$T35 = -1204						; size = 8
$T36 = -1188						; size = 8
$T37 = -1172						; size = 8
$T38 = -1156						; size = 8
$T39 = -1140						; size = 8
$T40 = -1124						; size = 8
$T41 = -1108						; size = 8
$T42 = -1092						; size = 8
$T43 = -1076						; size = 8
$T44 = -1060						; size = 8
$T45 = -1044						; size = 8
$T46 = -1028						; size = 8
$T47 = -1012						; size = 8
$T48 = -996						; size = 8
$T49 = -980						; size = 8
$T50 = -964						; size = 8
$T51 = -948						; size = 8
$T52 = -932						; size = 8
$T53 = -916						; size = 8
$T54 = -900						; size = 8
$T55 = -884						; size = 8
$T56 = -868						; size = 16
_window_center$57 = -268				; size = 8
_window_size$58 = -252					; size = 8
_window_pos$59 = -236					; size = 8
_i$60 = -220						; size = 4
_mouse_pos_in_canvas$61 = -208				; size = 8
_adding_preview$62 = -189				; size = 1
_canvas_size$63 = -180					; size = 8
_canvas_pos$64 = -164					; size = 8
_th$65 = -148						; size = 4
_n$66 = -136						; size = 4
_corners_tl_br$67 = -124				; size = 4
_corners_all$68 = -112					; size = 4
_corners_none$69 = -100					; size = 4
_spacing$70 = -88					; size = 4
_y$71 = -76						; size = 4
_x$72 = -64						; size = 4
_col$73 = -52						; size = 4
_p$74 = -40						; size = 8
_draw_list$ = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p_open$ = 8						; size = 4
?ShowExampleAppCustomRendering@@YAXPA_N@Z PROC		; ShowExampleAppCustomRendering, COMDAT

; 4423 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowExampleAppCustomRendering@@YAXPA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 06 00
	00		 sub	 esp, 1728		; 000006c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 f9 ff
	ff		 lea	 edi, DWORD PTR [ebp-1740]
  00020	b9 b0 01 00 00	 mov	 ecx, 432		; 000001b0H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4424 :     if (!ImGui::Begin("Example: Custom rendering", p_open))

  0004a	6a 00		 push	 0
  0004c	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  0004f	50		 push	 eax
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@LABFKPJJ@Example?3?5Custom?5rendering@
  00055	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  0005a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0005d	0f b6 c8	 movzx	 ecx, al
  00060	85 c9		 test	 ecx, ecx
  00062	75 0a		 jne	 SHORT $LN10@ShowExampl

; 4425 :     {
; 4426 :         ImGui::End();

  00064	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4427 :         return;

  00069	e9 a0 16 00 00	 jmp	 $LN1@ShowExampl
$LN10@ShowExampl:

; 4428 :     }
; 4429 : 
; 4430 :     // Tip: If you do a lot of custom rendering, you probably want to use your own geometrical types and benefit of overloaded operators, etc.
; 4431 :     // Define IM_VEC2_CLASS_EXTRA in imconfig.h to create implicit conversions between your types and ImVec2/ImVec4.
; 4432 :     // ImGui defines overloaded operators but they are internal to imgui.cpp and not exposed outside (to avoid messing with your types)
; 4433 :     // In this example we are not using the maths operators!
; 4434 :     ImDrawList* draw_list = ImGui::GetWindowDrawList();

  0006e	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  00073	89 45 e8	 mov	 DWORD PTR _draw_list$[ebp], eax

; 4435 : 
; 4436 :     if (ImGui::BeginTabBar("##TabBar"))

  00076	6a 00		 push	 0
  00078	68 00 00 00 00	 push	 OFFSET ??_C@_08EHLCCPCB@?$CD?$CDTabBar@
  0007d	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  00082	83 c4 08	 add	 esp, 8
  00085	0f b6 c0	 movzx	 eax, al
  00088	85 c0		 test	 eax, eax
  0008a	0f 84 79 16 00
	00		 je	 $LN11@ShowExampl

; 4437 :     {
; 4438 :         // Primitives
; 4439 :         if (ImGui::BeginTabItem("Primitives"))

  00090	6a 00		 push	 0
  00092	6a 00		 push	 0
  00094	68 00 00 00 00	 push	 OFFSET ??_C@_0L@LLLBMLGE@Primitives@
  00099	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  0009e	83 c4 0c	 add	 esp, 12			; 0000000cH
  000a1	0f b6 c0	 movzx	 eax, al
  000a4	85 c0		 test	 eax, eax
  000a6	0f 84 c6 0f 00
	00		 je	 $LN12@ShowExampl

; 4440 :         {
; 4441 :             static float sz = 36.0f;
; 4442 :             static float thickness = 3.0f;
; 4443 :             static int ngon_sides = 6;
; 4444 :             static ImVec4 colf = ImVec4(1.0f, 1.0f, 0.4f, 1.0f);

  000ac	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  000b1	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  000b8	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000bb	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  000c0	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  000c6	7e 73		 jle	 SHORT $LN2@ShowExampl
  000c8	68 00 00 00 00	 push	 OFFSET ?$TSS0@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  000cd	e8 00 00 00 00	 call	 __Init_thread_header
  000d2	83 c4 04	 add	 esp, 4
  000d5	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA, -1
  000dc	75 5d		 jne	 SHORT $LN2@ShowExampl
  000de	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000e5	51		 push	 ecx
  000e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f3	51		 push	 ecx
  000f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  000fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00101	51		 push	 ecx
  00102	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0010a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010f	51		 push	 ecx
  00110	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00118	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011d	b9 00 00 00 00	 mov	 ecx, OFFSET ?colf@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4UImVec4@@A
  00122	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4
  00127	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0012e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  00133	e8 00 00 00 00	 call	 __Init_thread_footer
  00138	83 c4 04	 add	 esp, 4
$LN2@ShowExampl:

; 4445 :             ImGui::DragFloat("Size", &sz, 0.2f, 2.0f, 72.0f, "%.0f");

  0013b	51		 push	 ecx
  0013c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00144	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00149	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  0014e	51		 push	 ecx
  0014f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42900000
  00157	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015c	51		 push	 ecx
  0015d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00165	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016a	51		 push	 ecx
  0016b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00173	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00178	68 00 00 00 00	 push	 OFFSET ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0017d	68 00 00 00 00	 push	 OFFSET ??_C@_04EBKMHHBE@Size@
  00182	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  00187	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4446 :             ImGui::DragFloat("Thickness", &thickness, 0.05f, 1.0f, 8.0f, "%.02f");

  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	68 00 00 00 00	 push	 OFFSET ??_C@_05IDMOFOMC@?$CF?402f@
  0019d	51		 push	 ecx
  0019e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41000000
  001a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ab	51		 push	 ecx
  001ac	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b9	51		 push	 ecx
  001ba	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3d4ccccd
  001c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001c7	68 00 00 00 00	 push	 OFFSET ?thickness@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_09CEKHLCFH@Thickness@
  001d1	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  001d6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4447 :             ImGui::SliderInt("n-gon sides", &ngon_sides, 3, 12);

  001d9	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  001de	6a 0c		 push	 12			; 0000000cH
  001e0	6a 03		 push	 3
  001e2	68 00 00 00 00	 push	 OFFSET ?ngon_sides@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  001e7	68 00 00 00 00	 push	 OFFSET ??_C@_0M@FFKCLHMG@n?9gon?5sides@
  001ec	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPBDPAHHH0@Z ; ImGui::SliderInt
  001f1	83 c4 14	 add	 esp, 20			; 00000014H

; 4448 :             ImGui::ColorEdit4("Color", &colf.x);

  001f4	6a 00		 push	 0
  001f6	68 00 00 00 00	 push	 OFFSET ?colf@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4UImVec4@@A
  001fb	68 00 00 00 00	 push	 OFFSET ??_C@_05PDOBBJNA@Color@
  00200	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  00205	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4449 :             const ImVec2 p = ImGui::GetCursorScreenPos();

  00208	8d 45 d8	 lea	 eax, DWORD PTR _p$74[ebp]
  0020b	50		 push	 eax
  0020c	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  00211	83 c4 04	 add	 esp, 4

; 4450 :             const ImU32 col = ImColor(colf);

  00214	68 00 00 00 00	 push	 OFFSET ?colf@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4UImVec4@@A
  00219	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T56[ebp]
  0021f	e8 00 00 00 00	 call	 ??0ImColor@@QAE@ABUImVec4@@@Z ; ImColor::ImColor
  00224	8b c8		 mov	 ecx, eax
  00226	e8 00 00 00 00	 call	 ??BImColor@@QBEIXZ	; ImColor::operator unsigned int
  0022b	89 45 cc	 mov	 DWORD PTR _col$73[ebp], eax

; 4451 :             float x = p.x + 4.0f, y = p.y + 4.0f;

  0022e	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _p$74[ebp]
  00233	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  0023b	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0
  00240	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _p$74[ebp+4]
  00245	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  0024d	f3 0f 11 45 b4	 movss	 DWORD PTR _y$71[ebp], xmm0

; 4452 :             float spacing = 10.0f;

  00252	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0025a	f3 0f 11 45 a8	 movss	 DWORD PTR _spacing$70[ebp], xmm0

; 4453 :             ImDrawCornerFlags corners_none = 0;

  0025f	c7 45 9c 00 00
	00 00		 mov	 DWORD PTR _corners_none$69[ebp], 0

; 4454 :             ImDrawCornerFlags corners_all = ImDrawCornerFlags_All;

  00266	c7 45 90 0f 00
	00 00		 mov	 DWORD PTR _corners_all$68[ebp], 15 ; 0000000fH

; 4455 :             ImDrawCornerFlags corners_tl_br = ImDrawCornerFlags_TopLeft | ImDrawCornerFlags_BotRight;

  0026d	c7 45 84 09 00
	00 00		 mov	 DWORD PTR _corners_tl_br$67[ebp], 9

; 4456 :             for (int n = 0; n < 2; n++)

  00274	c7 85 78 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$66[ebp], 0
  0027e	eb 0f		 jmp	 SHORT $LN5@ShowExampl
$LN3@ShowExampl:
  00280	8b 85 78 ff ff
	ff		 mov	 eax, DWORD PTR _n$66[ebp]
  00286	83 c0 01	 add	 eax, 1
  00289	89 85 78 ff ff
	ff		 mov	 DWORD PTR _n$66[ebp], eax
$LN5@ShowExampl:
  0028f	83 bd 78 ff ff
	ff 02		 cmp	 DWORD PTR _n$66[ebp], 2
  00296	0f 8d 74 07 00
	00		 jge	 $LN4@ShowExampl

; 4457 :             {
; 4458 :                 // First line uses a thickness of 1.0f, second line uses the configurable thickness
; 4459 :                 float th = (n == 0) ? 1.0f : thickness;

  0029c	83 bd 78 ff ff
	ff 00		 cmp	 DWORD PTR _n$66[ebp], 0
  002a3	75 12		 jne	 SHORT $LN29@ShowExampl
  002a5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  002ad	f3 0f 11 85 34
	f9 ff ff	 movss	 DWORD PTR tv160[ebp], xmm0
  002b5	eb 10		 jmp	 SHORT $LN30@ShowExampl
$LN29@ShowExampl:
  002b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?thickness@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  002bf	f3 0f 11 85 34
	f9 ff ff	 movss	 DWORD PTR tv160[ebp], xmm0
$LN30@ShowExampl:
  002c7	f3 0f 10 85 34
	f9 ff ff	 movss	 xmm0, DWORD PTR tv160[ebp]
  002cf	f3 0f 11 85 6c
	ff ff ff	 movss	 DWORD PTR _th$65[ebp], xmm0

; 4460 :                 draw_list->AddNgon(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, ngon_sides, th);         x += sz + spacing;  // n-gon

  002d7	51		 push	 ecx
  002d8	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  002e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e5	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ngon_sides@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  002ea	50		 push	 eax
  002eb	8b 4d cc	 mov	 ecx, DWORD PTR _col$73[ebp]
  002ee	51		 push	 ecx
  002ef	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  002f7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  002ff	51		 push	 ecx
  00300	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00305	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0030d	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00315	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _y$71[ebp]
  0031a	51		 push	 ecx
  0031b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00320	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00328	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00330	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00335	51		 push	 ecx
  00336	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0033b	8d 8d 8c fc ff
	ff		 lea	 ecx, DWORD PTR $T55[ebp]
  00341	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00346	50		 push	 eax
  00347	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  0034a	e8 00 00 00 00	 call	 ?AddNgon@ImDrawList@@QAEXABUImVec2@@MIHM@Z ; ImDrawList::AddNgon
  0034f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00357	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  0035c	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00361	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4461 :                 draw_list->AddCircle(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, 20, th);               x += sz + spacing;  // Circle

  00366	51		 push	 ecx
  00367	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  0036f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00374	6a 14		 push	 20			; 00000014H
  00376	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00379	50		 push	 eax
  0037a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00382	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0038a	51		 push	 ecx
  0038b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00390	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00398	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  003a0	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _y$71[ebp]
  003a5	51		 push	 ecx
  003a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ab	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  003b3	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  003bb	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  003c0	51		 push	 ecx
  003c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003c6	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T54[ebp]
  003cc	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  003d1	50		 push	 eax
  003d2	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  003d5	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QAEXABUImVec2@@MIHM@Z ; ImDrawList::AddCircle
  003da	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  003e2	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  003e7	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  003ec	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4462 :                 draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 0.0f,  corners_none, th);     x += sz + spacing;  // Square

  003f1	51		 push	 ecx
  003f2	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  003fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ff	8b 45 9c	 mov	 eax, DWORD PTR _corners_none$69[ebp]
  00402	50		 push	 eax
  00403	51		 push	 ecx
  00404	0f 57 c0	 xorps	 xmm0, xmm0
  00407	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0040c	8b 4d cc	 mov	 ecx, DWORD PTR _col$73[ebp]
  0040f	51		 push	 ecx
  00410	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00415	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0041d	51		 push	 ecx
  0041e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00423	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00428	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00430	51		 push	 ecx
  00431	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00436	8d 8d 6c fc ff
	ff		 lea	 ecx, DWORD PTR $T53[ebp]
  0043c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00441	50		 push	 eax
  00442	51		 push	 ecx
  00443	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00448	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044d	51		 push	 ecx
  0044e	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00453	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00458	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T52[ebp]
  0045e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00463	50		 push	 eax
  00464	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00467	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect
  0046c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00474	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00479	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  0047e	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4463 :                 draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f, corners_all, th);      x += sz + spacing;  // Square with all rounded corners

  00483	51		 push	 ecx
  00484	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  0048c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00491	8b 45 90	 mov	 eax, DWORD PTR _corners_all$68[ebp]
  00494	50		 push	 eax
  00495	51		 push	 ecx
  00496	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0049e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a3	8b 4d cc	 mov	 ecx, DWORD PTR _col$73[ebp]
  004a6	51		 push	 ecx
  004a7	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  004ac	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  004b4	51		 push	 ecx
  004b5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ba	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  004bf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  004c7	51		 push	 ecx
  004c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004cd	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR $T51[ebp]
  004d3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  004d8	50		 push	 eax
  004d9	51		 push	 ecx
  004da	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  004df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e4	51		 push	 ecx
  004e5	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  004ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ef	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR $T50[ebp]
  004f5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  004fa	50		 push	 eax
  004fb	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  004fe	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect
  00503	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0050b	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00510	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00515	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4464 :                 draw_list->AddRect(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f, corners_tl_br, th);    x += sz + spacing;  // Square with two rounded corners

  0051a	51		 push	 ecx
  0051b	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  00523	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00528	8b 45 84	 mov	 eax, DWORD PTR _corners_tl_br$67[ebp]
  0052b	50		 push	 eax
  0052c	51		 push	 ecx
  0052d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00535	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0053a	8b 4d cc	 mov	 ecx, DWORD PTR _col$73[ebp]
  0053d	51		 push	 ecx
  0053e	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00543	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0054b	51		 push	 ecx
  0054c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00551	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00556	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0055e	51		 push	 ecx
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	8d 8d 2c fc ff
	ff		 lea	 ecx, DWORD PTR $T49[ebp]
  0056a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0056f	50		 push	 eax
  00570	51		 push	 ecx
  00571	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00576	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0057b	51		 push	 ecx
  0057c	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00581	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00586	8d 8d 1c fc ff
	ff		 lea	 ecx, DWORD PTR $T48[ebp]
  0058c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00591	50		 push	 eax
  00592	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00595	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect
  0059a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  005a2	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  005a7	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  005ac	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4465 :                 draw_list->AddTriangle(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col, th);      x += sz + spacing;      // Triangle

  005b1	51		 push	 ecx
  005b2	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  005ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005bf	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  005c2	50		 push	 eax
  005c3	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  005c8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  005d0	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  005d8	51		 push	 ecx
  005d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005de	51		 push	 ecx
  005df	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  005e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e9	8d 8d 0c fc ff
	ff		 lea	 ecx, DWORD PTR $T47[ebp]
  005ef	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  005f4	50		 push	 eax
  005f5	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  005fa	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00602	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  0060a	51		 push	 ecx
  0060b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00610	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00615	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0061d	51		 push	 ecx
  0061e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00623	8d 8d fc fb ff
	ff		 lea	 ecx, DWORD PTR $T46[ebp]
  00629	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0062e	50		 push	 eax
  0062f	51		 push	 ecx
  00630	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00635	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0063a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00642	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  0064a	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  0064f	51		 push	 ecx
  00650	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00655	8d 8d ec fb ff
	ff		 lea	 ecx, DWORD PTR $T45[ebp]
  0065b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00660	50		 push	 eax
  00661	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00664	e8 00 00 00 00	 call	 ?AddTriangle@ImDrawList@@QAEXABUImVec2@@00IM@Z ; ImDrawList::AddTriangle
  00669	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00671	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00676	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  0067b	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4466 :                 draw_list->AddTriangle(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col, th); x += sz*0.4f + spacing; // Thin triangle

  00680	51		 push	 ecx
  00681	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  00689	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068e	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00691	50		 push	 eax
  00692	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00697	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0069f	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  006a7	51		 push	 ecx
  006a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  006b5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  006bd	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  006c2	51		 push	 ecx
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	8d 8d dc fb ff
	ff		 lea	 ecx, DWORD PTR $T44[ebp]
  006ce	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  006d3	50		 push	 eax
  006d4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  006d9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  006e1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  006e9	51		 push	 ecx
  006ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ef	51		 push	 ecx
  006f0	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  006f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006fa	8d 8d cc fb ff
	ff		 lea	 ecx, DWORD PTR $T43[ebp]
  00700	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00705	50		 push	 eax
  00706	51		 push	 ecx
  00707	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  0070c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00711	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00719	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e4ccccd
  00721	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00726	51		 push	 ecx
  00727	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072c	8d 8d bc fb ff
	ff		 lea	 ecx, DWORD PTR $T42[ebp]
  00732	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00737	50		 push	 eax
  00738	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  0073b	e8 00 00 00 00	 call	 ?AddTriangle@ImDrawList@@QAEXABUImVec2@@00IM@Z ; ImDrawList::AddTriangle
  00740	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00748	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  00750	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00755	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  0075a	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4467 :                 draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y), col, th);                               x += sz + spacing;  // Horizontal line (note: drawing a filled rectangle will be faster!)

  0075f	51		 push	 ecx
  00760	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  00768	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076d	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00770	50		 push	 eax
  00771	51		 push	 ecx
  00772	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00777	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077c	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00781	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00789	51		 push	 ecx
  0078a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0078f	8d 8d ac fb ff
	ff		 lea	 ecx, DWORD PTR $T41[ebp]
  00795	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0079a	50		 push	 eax
  0079b	51		 push	 ecx
  0079c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  007a1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007a6	51		 push	 ecx
  007a7	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  007ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b1	8d 8d 9c fb ff
	ff		 lea	 ecx, DWORD PTR $T40[ebp]
  007b7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  007bc	50		 push	 eax
  007bd	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  007c0	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z ; ImDrawList::AddLine
  007c5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  007cd	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  007d2	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  007d7	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4468 :                 draw_list->AddLine(ImVec2(x, y), ImVec2(x, y + sz), col, th);                               x += spacing;       // Vertical line (note: drawing a filled rectangle will be faster!)

  007dc	51		 push	 ecx
  007dd	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  007e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007ea	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  007ed	50		 push	 eax
  007ee	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  007f3	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  007fb	51		 push	 ecx
  007fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00801	51		 push	 ecx
  00802	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00807	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080c	8d 8d 8c fb ff
	ff		 lea	 ecx, DWORD PTR $T39[ebp]
  00812	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00817	50		 push	 eax
  00818	51		 push	 ecx
  00819	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  0081e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00823	51		 push	 ecx
  00824	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00829	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0082e	8d 8d 7c fb ff
	ff		 lea	 ecx, DWORD PTR $T38[ebp]
  00834	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00839	50		 push	 eax
  0083a	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  0083d	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z ; ImDrawList::AddLine
  00842	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00847	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  0084c	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4469 :                 draw_list->AddLine(ImVec2(x, y), ImVec2(x + sz, y + sz), col, th);                          x += sz + spacing;  // Diagonal line

  00851	51		 push	 ecx
  00852	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  0085a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0085f	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00862	50		 push	 eax
  00863	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00868	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00870	51		 push	 ecx
  00871	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00876	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  0087b	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00883	51		 push	 ecx
  00884	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00889	8d 8d 6c fb ff
	ff		 lea	 ecx, DWORD PTR $T37[ebp]
  0088f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00894	50		 push	 eax
  00895	51		 push	 ecx
  00896	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  0089b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a0	51		 push	 ecx
  008a1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  008a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ab	8d 8d 5c fb ff
	ff		 lea	 ecx, DWORD PTR $T36[ebp]
  008b1	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  008b6	50		 push	 eax
  008b7	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  008ba	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z ; ImDrawList::AddLine
  008bf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  008c7	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  008cc	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  008d1	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4470 :                 draw_list->AddBezierCurve(ImVec2(x, y), ImVec2(x + sz*1.3f, y + sz*0.3f), ImVec2(x + sz - sz*1.3f, y + sz - sz*0.3f), ImVec2(x + sz, y + sz), col, th);

  008d6	6a 00		 push	 0
  008d8	51		 push	 ecx
  008d9	f3 0f 10 85 6c
	ff ff ff	 movss	 xmm0, DWORD PTR _th$65[ebp]
  008e1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008e6	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  008e9	50		 push	 eax
  008ea	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  008ef	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  008f7	51		 push	 ecx
  008f8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008fd	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00902	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0090a	51		 push	 ecx
  0090b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00910	8d 8d 4c fb ff
	ff		 lea	 ecx, DWORD PTR $T35[ebp]
  00916	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0091b	50		 push	 eax
  0091c	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00921	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00929	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00931	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3e99999a
  00939	f3 0f 5c c1	 subss	 xmm0, xmm1
  0093d	51		 push	 ecx
  0093e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00943	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00948	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00950	f3 0f 10 0d 00
	00 00 00	 movss	 xmm1, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00958	f3 0f 59 0d 00
	00 00 00	 mulss	 xmm1, DWORD PTR __real@3fa66666
  00960	f3 0f 5c c1	 subss	 xmm0, xmm1
  00964	51		 push	 ecx
  00965	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0096a	8d 8d 3c fb ff
	ff		 lea	 ecx, DWORD PTR $T34[ebp]
  00970	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00975	50		 push	 eax
  00976	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0097e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e99999a
  00986	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _y$71[ebp]
  0098b	51		 push	 ecx
  0098c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00991	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00999	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3fa66666
  009a1	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  009a6	51		 push	 ecx
  009a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ac	8d 8d 2c fb ff
	ff		 lea	 ecx, DWORD PTR $T33[ebp]
  009b2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  009b7	50		 push	 eax
  009b8	51		 push	 ecx
  009b9	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  009be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c3	51		 push	 ecx
  009c4	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  009c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ce	8d 8d 1c fb ff
	ff		 lea	 ecx, DWORD PTR $T32[ebp]
  009d4	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  009d9	50		 push	 eax
  009da	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  009dd	e8 00 00 00 00	 call	 ?AddBezierCurve@ImDrawList@@QAEXABUImVec2@@000IMH@Z ; ImDrawList::AddBezierCurve

; 4471 :                 x = p.x + 4;

  009e2	f3 0f 10 45 d8	 movss	 xmm0, DWORD PTR _p$74[ebp]
  009e7	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@40800000
  009ef	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4472 :                 y += sz + spacing;

  009f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  009fc	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00a01	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _y$71[ebp]
  00a06	f3 0f 11 45 b4	 movss	 DWORD PTR _y$71[ebp], xmm0

; 4473 :             }

  00a0b	e9 70 f8 ff ff	 jmp	 $LN3@ShowExampl
$LN4@ShowExampl:

; 4474 :             draw_list->AddNgonFilled(ImVec2(x + sz * 0.5f, y + sz * 0.5f), sz*0.5f, col, ngon_sides);   x += sz + spacing;  // n-gon

  00a10	a1 00 00 00 00	 mov	 eax, DWORD PTR ?ngon_sides@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  00a15	50		 push	 eax
  00a16	8b 4d cc	 mov	 ecx, DWORD PTR _col$73[ebp]
  00a19	51		 push	 ecx
  00a1a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00a22	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00a2a	51		 push	 ecx
  00a2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a30	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00a38	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00a40	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _y$71[ebp]
  00a45	51		 push	 ecx
  00a46	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a4b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00a53	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00a5b	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00a60	51		 push	 ecx
  00a61	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a66	8d 8d 0c fb ff
	ff		 lea	 ecx, DWORD PTR $T31[ebp]
  00a6c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00a71	50		 push	 eax
  00a72	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00a75	e8 00 00 00 00	 call	 ?AddNgonFilled@ImDrawList@@QAEXABUImVec2@@MIH@Z ; ImDrawList::AddNgonFilled
  00a7a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00a82	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00a87	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00a8c	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4475 :             draw_list->AddCircleFilled(ImVec2(x + sz*0.5f, y + sz*0.5f), sz*0.5f, col, 32);             x += sz + spacing;  // Circle

  00a91	6a 20		 push	 32			; 00000020H
  00a93	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00a96	50		 push	 eax
  00a97	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00a9f	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00aa7	51		 push	 ecx
  00aa8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00ab5	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00abd	f3 0f 58 45 b4	 addss	 xmm0, DWORD PTR _y$71[ebp]
  00ac2	51		 push	 ecx
  00ac3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00ad0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00ad8	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00add	51		 push	 ecx
  00ade	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ae3	8d 8d fc fa ff
	ff		 lea	 ecx, DWORD PTR $T30[ebp]
  00ae9	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00aee	50		 push	 eax
  00aef	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00af2	e8 00 00 00 00	 call	 ?AddCircleFilled@ImDrawList@@QAEXABUImVec2@@MIH@Z ; ImDrawList::AddCircleFilled
  00af7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00aff	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00b04	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00b09	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4476 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col);                        x += sz + spacing;  // Square

  00b0e	6a 0f		 push	 15			; 0000000fH
  00b10	51		 push	 ecx
  00b11	0f 57 c0	 xorps	 xmm0, xmm0
  00b14	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b19	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00b1c	50		 push	 eax
  00b1d	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00b22	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00b2a	51		 push	 ecx
  00b2b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b30	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00b35	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00b3d	51		 push	 ecx
  00b3e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b43	8d 8d ec fa ff
	ff		 lea	 ecx, DWORD PTR $T29[ebp]
  00b49	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00b4e	50		 push	 eax
  00b4f	51		 push	 ecx
  00b50	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00b55	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b5a	51		 push	 ecx
  00b5b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00b60	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b65	8d 8d dc fa ff
	ff		 lea	 ecx, DWORD PTR $T28[ebp]
  00b6b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00b70	50		 push	 eax
  00b71	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00b74	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  00b79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00b81	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00b86	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00b8b	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4477 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f);                 x += sz + spacing;  // Square with all rounded corners

  00b90	6a 0f		 push	 15			; 0000000fH
  00b92	51		 push	 ecx
  00b93	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00b9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ba0	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00ba3	50		 push	 eax
  00ba4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00ba9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00bb1	51		 push	 ecx
  00bb2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bb7	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00bbc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00bc4	51		 push	 ecx
  00bc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bca	8d 8d cc fa ff
	ff		 lea	 ecx, DWORD PTR $T27[ebp]
  00bd0	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00bd5	50		 push	 eax
  00bd6	51		 push	 ecx
  00bd7	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00bdc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00be1	51		 push	 ecx
  00be2	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00be7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00bec	8d 8d bc fa ff
	ff		 lea	 ecx, DWORD PTR $T26[ebp]
  00bf2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00bf7	50		 push	 eax
  00bf8	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00bfb	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  00c00	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00c08	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00c0d	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00c12	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4478 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + sz), col, 10.0f, corners_tl_br);  x += sz + spacing;  // Square with two rounded corners

  00c17	8b 45 84	 mov	 eax, DWORD PTR _corners_tl_br$67[ebp]
  00c1a	50		 push	 eax
  00c1b	51		 push	 ecx
  00c1c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00c24	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c29	8b 4d cc	 mov	 ecx, DWORD PTR _col$73[ebp]
  00c2c	51		 push	 ecx
  00c2d	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00c32	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00c3a	51		 push	 ecx
  00c3b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c40	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00c45	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00c4d	51		 push	 ecx
  00c4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c53	8d 8d ac fa ff
	ff		 lea	 ecx, DWORD PTR $T25[ebp]
  00c59	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00c5e	50		 push	 eax
  00c5f	51		 push	 ecx
  00c60	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00c65	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c6a	51		 push	 ecx
  00c6b	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00c70	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00c75	8d 8d 9c fa ff
	ff		 lea	 ecx, DWORD PTR $T24[ebp]
  00c7b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00c80	50		 push	 eax
  00c81	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00c84	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  00c89	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00c91	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00c96	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00c9b	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4479 :             draw_list->AddTriangleFilled(ImVec2(x+sz*0.5f,y), ImVec2(x+sz, y+sz-0.5f), ImVec2(x, y+sz-0.5f), col);      x += sz + spacing;      // Triangle

  00ca0	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00ca3	50		 push	 eax
  00ca4	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00ca9	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00cb1	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00cb9	51		 push	 ecx
  00cba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cbf	51		 push	 ecx
  00cc0	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00cc5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cca	8d 8d 8c fa ff
	ff		 lea	 ecx, DWORD PTR $T23[ebp]
  00cd0	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00cd5	50		 push	 eax
  00cd6	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00cdb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00ce3	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00ceb	51		 push	 ecx
  00cec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cf1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00cf6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00cfe	51		 push	 ecx
  00cff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d04	8d 8d 7c fa ff
	ff		 lea	 ecx, DWORD PTR $T22[ebp]
  00d0a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00d0f	50		 push	 eax
  00d10	51		 push	 ecx
  00d11	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00d16	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00d23	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  00d2b	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00d30	51		 push	 ecx
  00d31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d36	8d 8d 6c fa ff
	ff		 lea	 ecx, DWORD PTR $T21[ebp]
  00d3c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00d41	50		 push	 eax
  00d42	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00d45	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QAEXABUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
  00d4a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00d52	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00d57	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00d5c	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4480 :             draw_list->AddTriangleFilled(ImVec2(x+sz*0.2f,y), ImVec2(x, y+sz-0.5f), ImVec2(x+sz*0.4f, y+sz-0.5f), col); x += sz*0.4f + spacing; // Thin triangle

  00d61	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00d64	50		 push	 eax
  00d65	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00d6a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00d72	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00d7a	51		 push	 ecx
  00d7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d80	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00d88	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  00d90	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00d95	51		 push	 ecx
  00d96	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d9b	8d 8d 5c fa ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00da1	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00da6	50		 push	 eax
  00da7	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00dac	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00db4	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@3f000000
  00dbc	51		 push	 ecx
  00dbd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dc2	51		 push	 ecx
  00dc3	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00dc8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dcd	8d 8d 4c fa ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  00dd3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00dd8	50		 push	 eax
  00dd9	51		 push	 ecx
  00dda	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00ddf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00dec	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3e4ccccd
  00df4	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00df9	51		 push	 ecx
  00dfa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00dff	8d 8d 3c fa ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  00e05	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00e0a	50		 push	 eax
  00e0b	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00e0e	e8 00 00 00 00	 call	 ?AddTriangleFilled@ImDrawList@@QAEXABUImVec2@@00I@Z ; ImDrawList::AddTriangleFilled
  00e13	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00e1b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3ecccccd
  00e23	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00e28	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00e2d	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4481 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + sz, y + thickness), col);                 x += sz + spacing;  // Horizontal line (faster than AddLine, but only handle integer thickness)

  00e32	6a 0f		 push	 15			; 0000000fH
  00e34	51		 push	 ecx
  00e35	0f 57 c0	 xorps	 xmm0, xmm0
  00e38	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e3d	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00e40	50		 push	 eax
  00e41	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00e46	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?thickness@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00e4e	51		 push	 ecx
  00e4f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e54	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00e59	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00e61	51		 push	 ecx
  00e62	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e67	8d 8d 2c fa ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  00e6d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00e72	50		 push	 eax
  00e73	51		 push	 ecx
  00e74	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00e79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e7e	51		 push	 ecx
  00e7f	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00e84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e89	8d 8d 1c fa ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00e8f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00e94	50		 push	 eax
  00e95	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00e98	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  00e9d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00ea5	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  00eaa	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00eaf	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4482 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + thickness, y + sz), col);                 x += spacing*2.0f;  // Vertical line (faster than AddLine, but only handle integer thickness)

  00eb4	6a 0f		 push	 15			; 0000000fH
  00eb6	51		 push	 ecx
  00eb7	0f 57 c0	 xorps	 xmm0, xmm0
  00eba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ebf	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00ec2	50		 push	 eax
  00ec3	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00ec8	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00ed0	51		 push	 ecx
  00ed1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ed6	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00edb	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?thickness@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00ee3	51		 push	 ecx
  00ee4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ee9	8d 8d 0c fa ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00eef	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00ef4	50		 push	 eax
  00ef5	51		 push	 ecx
  00ef6	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00efb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f00	51		 push	 ecx
  00f01	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00f06	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f0b	8d 8d fc f9 ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00f11	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00f16	50		 push	 eax
  00f17	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00f1a	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  00f1f	f3 0f 10 45 a8	 movss	 xmm0, DWORD PTR _spacing$70[ebp]
  00f24	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40000000
  00f2c	f3 0f 58 45 c0	 addss	 xmm0, DWORD PTR _x$72[ebp]
  00f31	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4483 :             draw_list->AddRectFilled(ImVec2(x, y), ImVec2(x + 1, y + 1), col);                          x += sz;            // Pixel (faster than AddLine)

  00f36	6a 0f		 push	 15			; 0000000fH
  00f38	51		 push	 ecx
  00f39	0f 57 c0	 xorps	 xmm0, xmm0
  00f3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f41	8b 45 cc	 mov	 eax, DWORD PTR _col$73[ebp]
  00f44	50		 push	 eax
  00f45	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00f4a	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00f52	51		 push	 ecx
  00f53	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f58	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00f5d	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR __real@3f800000
  00f65	51		 push	 ecx
  00f66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f6b	8d 8d ec f9 ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  00f71	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00f76	50		 push	 eax
  00f77	51		 push	 ecx
  00f78	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00f7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f82	51		 push	 ecx
  00f83	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00f88	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f8d	8d 8d dc f9 ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  00f93	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00f98	50		 push	 eax
  00f99	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  00f9c	e8 00 00 00 00	 call	 ?AddRectFilled@ImDrawList@@QAEXABUImVec2@@0IMH@Z ; ImDrawList::AddRectFilled
  00fa1	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00fa6	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00fae	f3 0f 11 45 c0	 movss	 DWORD PTR _x$72[ebp], xmm0

; 4484 :             draw_list->AddRectFilledMultiColor(ImVec2(x, y), ImVec2(x + sz, y + sz), IM_COL32(0, 0, 0, 255), IM_COL32(255, 0, 0, 255), IM_COL32(255, 255, 0, 255), IM_COL32(0, 255, 0, 255));

  00fb3	68 00 ff 00 ff	 push	 -16711936		; ff00ff00H
  00fb8	68 ff ff 00 ff	 push	 -16711681		; ff00ffffH
  00fbd	68 ff 00 00 ff	 push	 -16776961		; ff0000ffH
  00fc2	68 00 00 00 ff	 push	 -16777216		; ff000000H
  00fc7	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00fcc	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00fd4	51		 push	 ecx
  00fd5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fda	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  00fdf	f3 0f 58 05 00
	00 00 00	 addss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  00fe7	51		 push	 ecx
  00fe8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00fed	8d 8d cc f9 ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00ff3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00ff8	50		 push	 eax
  00ff9	51		 push	 ecx
  00ffa	f3 0f 10 45 b4	 movss	 xmm0, DWORD PTR _y$71[ebp]
  00fff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01004	51		 push	 ecx
  01005	f3 0f 10 45 c0	 movss	 xmm0, DWORD PTR _x$72[ebp]
  0100a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0100f	8d 8d bc f9 ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  01015	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0101a	50		 push	 eax
  0101b	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  0101e	e8 00 00 00 00	 call	 ?AddRectFilledMultiColor@ImDrawList@@QAEXABUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor

; 4485 :             ImGui::Dummy(ImVec2((sz + spacing) * 9.8f, (sz + spacing) * 3));

  01023	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  0102b	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  01030	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@40400000
  01038	51		 push	 ecx
  01039	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0103e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?sz@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4MA
  01046	f3 0f 58 45 a8	 addss	 xmm0, DWORD PTR _spacing$70[ebp]
  0104b	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@411ccccd
  01053	51		 push	 ecx
  01054	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01059	8d 8d ac f9 ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  0105f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01064	50		 push	 eax
  01065	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXABUImVec2@@@Z ; ImGui::Dummy
  0106a	83 c4 04	 add	 esp, 4

; 4486 :             ImGui::EndTabItem();

  0106d	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN12@ShowExampl:

; 4487 :         }
; 4488 : 
; 4489 :         if (ImGui::BeginTabItem("Canvas"))

  01072	6a 00		 push	 0
  01074	6a 00		 push	 0
  01076	68 00 00 00 00	 push	 OFFSET ??_C@_06PBIJCONE@Canvas@
  0107b	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  01080	83 c4 0c	 add	 esp, 12			; 0000000cH
  01083	0f b6 c0	 movzx	 eax, al
  01086	85 c0		 test	 eax, eax
  01088	0f 84 e2 04 00
	00		 je	 $LN13@ShowExampl

; 4490 :         {
; 4491 :             static ImVector<ImVec2> points;

  0108e	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  01093	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  0109a	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  0109d	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  010a2	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  010a8	7e 48		 jle	 SHORT $LN6@ShowExampl
  010aa	68 00 00 00 00	 push	 OFFSET ?$TSS1@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  010af	e8 00 00 00 00	 call	 __Init_thread_header
  010b4	83 c4 04	 add	 esp, 4
  010b7	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA, -1
  010be	75 32		 jne	 SHORT $LN6@ShowExampl
  010c0	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  010c7	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  010cc	e8 00 00 00 00	 call	 ??0?$ImVector@UImVec2@@@@QAE@XZ ; ImVector<ImVec2>::ImVector<ImVec2>
  010d1	68 00 00 00 00	 push	 OFFSET ??__Fpoints@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@YAXXZ ; `ShowExampleAppCustomRendering'::`16'::`dynamic atexit destructor for 'points''
  010d6	e8 00 00 00 00	 call	 _atexit
  010db	83 c4 04	 add	 esp, 4
  010de	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  010e5	68 00 00 00 00	 push	 OFFSET ?$TSS1@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  010ea	e8 00 00 00 00	 call	 __Init_thread_footer
  010ef	83 c4 04	 add	 esp, 4
$LN6@ShowExampl:

; 4492 :             static bool adding_line = false;
; 4493 :             if (ImGui::Button("Clear")) points.clear();

  010f2	51		 push	 ecx
  010f3	0f 57 c0	 xorps	 xmm0, xmm0
  010f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  010fb	51		 push	 ecx
  010fc	0f 57 c0	 xorps	 xmm0, xmm0
  010ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01104	8d 8d 9c f9 ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  0110a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0110f	50		 push	 eax
  01110	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNHABIA@Clear@
  01115	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0111a	83 c4 08	 add	 esp, 8
  0111d	0f b6 c0	 movzx	 eax, al
  01120	85 c0		 test	 eax, eax
  01122	74 0a		 je	 SHORT $LN14@ShowExampl
  01124	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  01129	e8 00 00 00 00	 call	 ?clear@?$ImVector@UImVec2@@@@QAEXXZ ; ImVector<ImVec2>::clear
$LN14@ShowExampl:

; 4494 :             if (points.Size >= 2) { ImGui::SameLine(); if (ImGui::Button("Undo")) { points.pop_back(); points.pop_back(); } }

  0112e	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A, 2
  01135	7c 65		 jl	 SHORT $LN16@ShowExampl
  01137	51		 push	 ecx
  01138	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01140	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01145	51		 push	 ecx
  01146	0f 57 c0	 xorps	 xmm0, xmm0
  01149	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0114e	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01153	83 c4 08	 add	 esp, 8
  01156	51		 push	 ecx
  01157	0f 57 c0	 xorps	 xmm0, xmm0
  0115a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0115f	51		 push	 ecx
  01160	0f 57 c0	 xorps	 xmm0, xmm0
  01163	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01168	8d 8d 8c f9 ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0116e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01173	50		 push	 eax
  01174	68 00 00 00 00	 push	 OFFSET ??_C@_04LPGMNMPN@Undo@
  01179	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0117e	83 c4 08	 add	 esp, 8
  01181	0f b6 c0	 movzx	 eax, al
  01184	85 c0		 test	 eax, eax
  01186	74 14		 je	 SHORT $LN16@ShowExampl
  01188	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  0118d	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImVec2@@@@QAEXXZ ; ImVector<ImVec2>::pop_back
  01192	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  01197	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImVec2@@@@QAEXXZ ; ImVector<ImVec2>::pop_back
$LN16@ShowExampl:

; 4495 :             ImGui::Text("Left-click and drag to add lines,\nRight-click to undo");

  0119c	68 00 00 00 00	 push	 OFFSET ??_C@_0DG@KLKDBFIL@Left?9click?5and?5drag?5to?5add?5line@
  011a1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  011a6	83 c4 04	 add	 esp, 4

; 4496 : 
; 4497 :             // Here we are using InvisibleButton() as a convenience to 1) advance the cursor and 2) allows us to use IsItemHovered()
; 4498 :             // But you can also draw directly and poll mouse/keyboard by yourself. You can manipulate the cursor using GetCursorPos() and SetCursorPos().
; 4499 :             // If you only use the ImDrawList API, you can notify the owner window of its extends by using SetCursorPos(max).
; 4500 :             ImVec2 canvas_pos = ImGui::GetCursorScreenPos();            // ImDrawList API uses screen coordinates!

  011a9	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _canvas_pos$64[ebp]
  011af	50		 push	 eax
  011b0	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  011b5	83 c4 04	 add	 esp, 4

; 4501 :             ImVec2 canvas_size = ImGui::GetContentRegionAvail();        // Resize canvas to what's available

  011b8	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _canvas_size$63[ebp]
  011be	50		 push	 eax
  011bf	e8 00 00 00 00	 call	 ?GetContentRegionAvail@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetContentRegionAvail
  011c4	83 c4 04	 add	 esp, 4

; 4502 :             if (canvas_size.x < 50.0f) canvas_size.x = 50.0f;

  011c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  011cf	0f 2f 85 4c ff
	ff ff		 comiss	 xmm0, DWORD PTR _canvas_size$63[ebp]
  011d6	76 10		 jbe	 SHORT $LN17@ShowExampl
  011d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  011e0	f3 0f 11 85 4c
	ff ff ff	 movss	 DWORD PTR _canvas_size$63[ebp], xmm0
$LN17@ShowExampl:

; 4503 :             if (canvas_size.y < 50.0f) canvas_size.y = 50.0f;

  011e8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  011f0	0f 2f 85 50 ff
	ff ff		 comiss	 xmm0, DWORD PTR _canvas_size$63[ebp+4]
  011f7	76 10		 jbe	 SHORT $LN18@ShowExampl
  011f9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42480000
  01201	f3 0f 11 85 50
	ff ff ff	 movss	 DWORD PTR _canvas_size$63[ebp+4], xmm0
$LN18@ShowExampl:

; 4504 :             draw_list->AddRectFilledMultiColor(canvas_pos, ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), IM_COL32(50, 50, 50, 255), IM_COL32(50, 50, 60, 255), IM_COL32(60, 60, 70, 255), IM_COL32(50, 50, 60, 255));

  01209	68 32 32 3c ff	 push	 -12832206		; ff3c3232H
  0120e	68 3c 3c 46 ff	 push	 -12174276		; ff463c3cH
  01213	68 32 32 3c ff	 push	 -12832206		; ff3c3232H
  01218	68 32 32 32 ff	 push	 -13487566		; ff323232H
  0121d	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp+4]
  01225	f3 0f 58 85 50
	ff ff ff	 addss	 xmm0, DWORD PTR _canvas_size$63[ebp+4]
  0122d	51		 push	 ecx
  0122e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01233	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp]
  0123b	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _canvas_size$63[ebp]
  01243	51		 push	 ecx
  01244	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01249	8d 8d 7c f9 ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0124f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01254	50		 push	 eax
  01255	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _canvas_pos$64[ebp]
  0125b	50		 push	 eax
  0125c	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  0125f	e8 00 00 00 00	 call	 ?AddRectFilledMultiColor@ImDrawList@@QAEXABUImVec2@@0IIII@Z ; ImDrawList::AddRectFilledMultiColor

; 4505 :             draw_list->AddRect(canvas_pos, ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), IM_COL32(255, 255, 255, 255));

  01264	51		 push	 ecx
  01265	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0126d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01272	6a 0f		 push	 15			; 0000000fH
  01274	51		 push	 ecx
  01275	0f 57 c0	 xorps	 xmm0, xmm0
  01278	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0127d	6a ff		 push	 -1
  0127f	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp+4]
  01287	f3 0f 58 85 50
	ff ff ff	 addss	 xmm0, DWORD PTR _canvas_size$63[ebp+4]
  0128f	51		 push	 ecx
  01290	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01295	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp]
  0129d	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _canvas_size$63[ebp]
  012a5	51		 push	 ecx
  012a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012ab	8d 8d 6c f9 ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  012b1	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  012b6	50		 push	 eax
  012b7	8d 85 5c ff ff
	ff		 lea	 eax, DWORD PTR _canvas_pos$64[ebp]
  012bd	50		 push	 eax
  012be	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  012c1	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect

; 4506 : 
; 4507 :             bool adding_preview = false;

  012c6	c6 85 43 ff ff
	ff 00		 mov	 BYTE PTR _adding_preview$62[ebp], 0

; 4508 :             ImGui::InvisibleButton("canvas", canvas_size);

  012cd	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _canvas_size$63[ebp]
  012d3	50		 push	 eax
  012d4	68 00 00 00 00	 push	 OFFSET ??_C@_06DODEBHEI@canvas@
  012d9	e8 00 00 00 00	 call	 ?InvisibleButton@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::InvisibleButton
  012de	83 c4 08	 add	 esp, 8

; 4509 :             ImVec2 mouse_pos_in_canvas = ImVec2(ImGui::GetIO().MousePos.x - canvas_pos.x, ImGui::GetIO().MousePos.y - canvas_pos.y);

  012e1	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  012e6	f3 0f 10 80 e4
	00 00 00	 movss	 xmm0, DWORD PTR [eax+228]
  012ee	f3 0f 5c 85 60
	ff ff ff	 subss	 xmm0, DWORD PTR _canvas_pos$64[ebp+4]
  012f6	51		 push	 ecx
  012f7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012fc	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  01301	f3 0f 10 80 e0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+224]
  01309	f3 0f 5c 85 5c
	ff ff ff	 subss	 xmm0, DWORD PTR _canvas_pos$64[ebp]
  01311	51		 push	 ecx
  01312	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01317	8d 8d 30 ff ff
	ff		 lea	 ecx, DWORD PTR _mouse_pos_in_canvas$61[ebp]
  0131d	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 4510 :             if (adding_line)

  01322	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?adding_line@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA
  01329	85 c0		 test	 eax, eax
  0132b	74 3b		 je	 SHORT $LN20@ShowExampl

; 4511 :             {
; 4512 :                 adding_preview = true;

  0132d	c6 85 43 ff ff
	ff 01		 mov	 BYTE PTR _adding_preview$62[ebp], 1

; 4513 :                 points.push_back(mouse_pos_in_canvas);

  01334	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _mouse_pos_in_canvas$61[ebp]
  0133a	50		 push	 eax
  0133b	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  01340	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QAEXABUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 4514 :                 if (!ImGui::IsMouseDown(0))

  01345	6a 00		 push	 0
  01347	e8 00 00 00 00	 call	 ?IsMouseDown@ImGui@@YA_NH@Z ; ImGui::IsMouseDown
  0134c	83 c4 04	 add	 esp, 4
  0134f	0f b6 c0	 movzx	 eax, al
  01352	85 c0		 test	 eax, eax
  01354	75 12		 jne	 SHORT $LN20@ShowExampl

; 4515 :                     adding_line = adding_preview = false;

  01356	c6 85 43 ff ff
	ff 00		 mov	 BYTE PTR _adding_preview$62[ebp], 0
  0135d	8a 85 43 ff ff
	ff		 mov	 al, BYTE PTR _adding_preview$62[ebp]
  01363	a2 00 00 00 00	 mov	 BYTE PTR ?adding_line@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA, al
$LN20@ShowExampl:

; 4516 :             }
; 4517 :             if (ImGui::IsItemHovered())

  01368	6a 00		 push	 0
  0136a	e8 00 00 00 00	 call	 ?IsItemHovered@ImGui@@YA_NH@Z ; ImGui::IsItemHovered
  0136f	83 c4 04	 add	 esp, 4
  01372	0f b6 c0	 movzx	 eax, al
  01375	85 c0		 test	 eax, eax
  01377	0f 84 80 00 00
	00		 je	 $LN23@ShowExampl

; 4518 :             {
; 4519 :                 if (!adding_line && ImGui::IsMouseClicked(0))

  0137d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?adding_line@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA
  01384	85 c0		 test	 eax, eax
  01386	75 2b		 jne	 SHORT $LN22@ShowExampl
  01388	6a 00		 push	 0
  0138a	6a 00		 push	 0
  0138c	e8 00 00 00 00	 call	 ?IsMouseClicked@ImGui@@YA_NH_N@Z ; ImGui::IsMouseClicked
  01391	83 c4 08	 add	 esp, 8
  01394	0f b6 c0	 movzx	 eax, al
  01397	85 c0		 test	 eax, eax
  01399	74 18		 je	 SHORT $LN22@ShowExampl

; 4520 :                 {
; 4521 :                     points.push_back(mouse_pos_in_canvas);

  0139b	8d 85 30 ff ff
	ff		 lea	 eax, DWORD PTR _mouse_pos_in_canvas$61[ebp]
  013a1	50		 push	 eax
  013a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  013a7	e8 00 00 00 00	 call	 ?push_back@?$ImVector@UImVec2@@@@QAEXABUImVec2@@@Z ; ImVector<ImVec2>::push_back

; 4522 :                     adding_line = true;

  013ac	c6 05 00 00 00
	00 01		 mov	 BYTE PTR ?adding_line@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA, 1
$LN22@ShowExampl:

; 4523 :                 }
; 4524 :                 if (ImGui::IsMouseClicked(1) && !points.empty())

  013b3	6a 00		 push	 0
  013b5	6a 01		 push	 1
  013b7	e8 00 00 00 00	 call	 ?IsMouseClicked@ImGui@@YA_NH_N@Z ; ImGui::IsMouseClicked
  013bc	83 c4 08	 add	 esp, 8
  013bf	0f b6 c0	 movzx	 eax, al
  013c2	85 c0		 test	 eax, eax
  013c4	74 37		 je	 SHORT $LN23@ShowExampl
  013c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  013cb	e8 00 00 00 00	 call	 ?empty@?$ImVector@UImVec2@@@@QBE_NXZ ; ImVector<ImVec2>::empty
  013d0	0f b6 c0	 movzx	 eax, al
  013d3	85 c0		 test	 eax, eax
  013d5	75 26		 jne	 SHORT $LN23@ShowExampl

; 4525 :                 {
; 4526 :                     adding_line = adding_preview = false;

  013d7	c6 85 43 ff ff
	ff 00		 mov	 BYTE PTR _adding_preview$62[ebp], 0
  013de	8a 85 43 ff ff
	ff		 mov	 al, BYTE PTR _adding_preview$62[ebp]
  013e4	a2 00 00 00 00	 mov	 BYTE PTR ?adding_line@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA, al

; 4527 :                     points.pop_back();

  013e9	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  013ee	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImVec2@@@@QAEXXZ ; ImVector<ImVec2>::pop_back

; 4528 :                     points.pop_back();

  013f3	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  013f8	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImVec2@@@@QAEXXZ ; ImVector<ImVec2>::pop_back
$LN23@ShowExampl:

; 4529 :                 }
; 4530 :             }
; 4531 :             draw_list->PushClipRect(canvas_pos, ImVec2(canvas_pos.x + canvas_size.x, canvas_pos.y + canvas_size.y), true);      // clip lines within the canvas (if we resize it, etc.)

  013fd	6a 01		 push	 1
  013ff	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp+4]
  01407	f3 0f 58 85 50
	ff ff ff	 addss	 xmm0, DWORD PTR _canvas_size$63[ebp+4]
  0140f	51		 push	 ecx
  01410	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01415	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp]
  0141d	f3 0f 58 85 4c
	ff ff ff	 addss	 xmm0, DWORD PTR _canvas_size$63[ebp]
  01425	51		 push	 ecx
  01426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0142b	8d 8d 5c f9 ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  01431	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01436	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  01439	51		 push	 ecx
  0143a	8b 10		 mov	 edx, DWORD PTR [eax]
  0143c	52		 push	 edx
  0143d	8b 85 60 ff ff
	ff		 mov	 eax, DWORD PTR _canvas_pos$64[ebp+4]
  01443	50		 push	 eax
  01444	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _canvas_pos$64[ebp]
  0144a	51		 push	 ecx
  0144b	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  0144e	e8 00 00 00 00	 call	 ?PushClipRect@ImDrawList@@QAEXUImVec2@@0_N@Z ; ImDrawList::PushClipRect

; 4532 :             for (int i = 0; i < points.Size - 1; i += 2)

  01453	c7 85 24 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$60[ebp], 0
  0145d	eb 0f		 jmp	 SHORT $LN9@ShowExampl
$LN7@ShowExampl:
  0145f	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$60[ebp]
  01465	83 c0 02	 add	 eax, 2
  01468	89 85 24 ff ff
	ff		 mov	 DWORD PTR _i$60[ebp], eax
$LN9@ShowExampl:
  0146e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  01473	83 e8 01	 sub	 eax, 1
  01476	39 85 24 ff ff
	ff		 cmp	 DWORD PTR _i$60[ebp], eax
  0147c	0f 8d cc 00 00
	00		 jge	 $LN8@ShowExampl

; 4533 :                 draw_list->AddLine(ImVec2(canvas_pos.x + points[i].x, canvas_pos.y + points[i].y), ImVec2(canvas_pos.x + points[i + 1].x, canvas_pos.y + points[i + 1].y), IM_COL32(255, 255, 0, 255), 2.0f);

  01482	51		 push	 ecx
  01483	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0148b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01490	68 ff ff 00 ff	 push	 -16711681		; ff00ffffH
  01495	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$60[ebp]
  0149b	83 c0 01	 add	 eax, 1
  0149e	50		 push	 eax
  0149f	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  014a4	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  014a9	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp+4]
  014b1	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  014b6	51		 push	 ecx
  014b7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014bc	8b 8d 24 ff ff
	ff		 mov	 ecx, DWORD PTR _i$60[ebp]
  014c2	83 c1 01	 add	 ecx, 1
  014c5	51		 push	 ecx
  014c6	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  014cb	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  014d0	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp]
  014d8	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  014dc	51		 push	 ecx
  014dd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  014e2	8d 8d 4c f9 ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  014e8	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  014ed	50		 push	 eax
  014ee	8b 95 24 ff ff
	ff		 mov	 edx, DWORD PTR _i$60[ebp]
  014f4	52		 push	 edx
  014f5	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  014fa	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  014ff	f3 0f 10 85 60
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp+4]
  01507	f3 0f 58 40 04	 addss	 xmm0, DWORD PTR [eax+4]
  0150c	51		 push	 ecx
  0150d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01512	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR _i$60[ebp]
  01518	50		 push	 eax
  01519	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  0151e	e8 00 00 00 00	 call	 ??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z ; ImVector<ImVec2>::operator[]
  01523	f3 0f 10 85 5c
	ff ff ff	 movss	 xmm0, DWORD PTR _canvas_pos$64[ebp]
  0152b	f3 0f 58 00	 addss	 xmm0, DWORD PTR [eax]
  0152f	51		 push	 ecx
  01530	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01535	8d 8d 3c f9 ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0153b	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01540	50		 push	 eax
  01541	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  01544	e8 00 00 00 00	 call	 ?AddLine@ImDrawList@@QAEXABUImVec2@@0IM@Z ; ImDrawList::AddLine
  01549	e9 11 ff ff ff	 jmp	 $LN7@ShowExampl
$LN8@ShowExampl:

; 4534 :             draw_list->PopClipRect();

  0154e	8b 4d e8	 mov	 ecx, DWORD PTR _draw_list$[ebp]
  01551	e8 00 00 00 00	 call	 ?PopClipRect@ImDrawList@@QAEXXZ ; ImDrawList::PopClipRect

; 4535 :             if (adding_preview)

  01556	0f b6 85 43 ff
	ff ff		 movzx	 eax, BYTE PTR _adding_preview$62[ebp]
  0155d	85 c0		 test	 eax, eax
  0155f	74 0a		 je	 SHORT $LN24@ShowExampl

; 4536 :                 points.pop_back();

  01561	b9 00 00 00 00	 mov	 ecx, OFFSET ?points@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4U?$ImVector@UImVec2@@@@A
  01566	e8 00 00 00 00	 call	 ?pop_back@?$ImVector@UImVec2@@@@QAEXXZ ; ImVector<ImVec2>::pop_back
$LN24@ShowExampl:

; 4537 :             ImGui::EndTabItem();

  0156b	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN13@ShowExampl:

; 4538 :         }
; 4539 : 
; 4540 :         if (ImGui::BeginTabItem("BG/FG draw lists"))

  01570	6a 00		 push	 0
  01572	6a 00		 push	 0
  01574	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@CEOBEDIK@BG?1FG?5draw?5lists@
  01579	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  0157e	83 c4 0c	 add	 esp, 12			; 0000000cH
  01581	0f b6 c0	 movzx	 eax, al
  01584	85 c0		 test	 eax, eax
  01586	0f 84 78 01 00
	00		 je	 $LN25@ShowExampl

; 4541 :         {
; 4542 :             static bool draw_bg = true;
; 4543 :             static bool draw_fg = true;
; 4544 :             ImGui::Checkbox("Draw in Background draw list", &draw_bg);

  0158c	68 00 00 00 00	 push	 OFFSET ?draw_bg@?DA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA
  01591	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@BHPCJJNA@Draw?5in?5Background?5draw?5list@
  01596	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0159b	83 c4 08	 add	 esp, 8

; 4545 :             ImGui::SameLine(); HelpMarker("The Background draw list will be rendered below every Dear ImGui windows.");

  0159e	51		 push	 ecx
  0159f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  015a7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ac	51		 push	 ecx
  015ad	0f 57 c0	 xorps	 xmm0, xmm0
  015b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015b5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  015ba	83 c4 08	 add	 esp, 8
  015bd	68 00 00 00 00	 push	 OFFSET ??_C@_0EK@HADEKICD@The?5Background?5draw?5list?5will?5b@
  015c2	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  015c7	83 c4 04	 add	 esp, 4

; 4546 :             ImGui::Checkbox("Draw in Foreground draw list", &draw_fg);

  015ca	68 00 00 00 00	 push	 OFFSET ?draw_fg@?DA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA
  015cf	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MBHOHPNH@Draw?5in?5Foreground?5draw?5list@
  015d4	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  015d9	83 c4 08	 add	 esp, 8

; 4547 :             ImGui::SameLine(); HelpMarker("The Foreground draw list will be rendered over every Dear ImGui windows.");

  015dc	51		 push	 ecx
  015dd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  015e5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015ea	51		 push	 ecx
  015eb	0f 57 c0	 xorps	 xmm0, xmm0
  015ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  015f3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  015f8	83 c4 08	 add	 esp, 8
  015fb	68 00 00 00 00	 push	 OFFSET ??_C@_0EJ@MJHHHC@The?5Foreground?5draw?5list?5will?5b@
  01600	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01605	83 c4 04	 add	 esp, 4

; 4548 :             ImVec2 window_pos = ImGui::GetWindowPos();

  01608	8d 85 14 ff ff
	ff		 lea	 eax, DWORD PTR _window_pos$59[ebp]
  0160e	50		 push	 eax
  0160f	e8 00 00 00 00	 call	 ?GetWindowPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowPos
  01614	83 c4 04	 add	 esp, 4

; 4549 :             ImVec2 window_size = ImGui::GetWindowSize();

  01617	8d 85 04 ff ff
	ff		 lea	 eax, DWORD PTR _window_size$58[ebp]
  0161d	50		 push	 eax
  0161e	e8 00 00 00 00	 call	 ?GetWindowSize@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetWindowSize
  01623	83 c4 04	 add	 esp, 4

; 4550 :             ImVec2 window_center = ImVec2(window_pos.x + window_size.x * 0.5f, window_pos.y + window_size.y * 0.5f);

  01626	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _window_size$58[ebp+4]
  0162e	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01636	f3 0f 58 85 18
	ff ff ff	 addss	 xmm0, DWORD PTR _window_pos$59[ebp+4]
  0163e	51		 push	 ecx
  0163f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01644	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _window_size$58[ebp]
  0164c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  01654	f3 0f 58 85 14
	ff ff ff	 addss	 xmm0, DWORD PTR _window_pos$59[ebp]
  0165c	51		 push	 ecx
  0165d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01662	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR _window_center$57[ebp]
  01668	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 4551 :             if (draw_bg)

  0166d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?draw_bg@?DA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA
  01674	85 c0		 test	 eax, eax
  01676	74 3e		 je	 SHORT $LN26@ShowExampl

; 4552 :                 ImGui::GetBackgroundDrawList()->AddCircle(window_center, window_size.x * 0.6f, IM_COL32(255, 0, 0, 200), 48, 10+4);

  01678	51		 push	 ecx
  01679	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41600000
  01681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01686	6a 30		 push	 48			; 00000030H
  01688	68 ff 00 00 c8	 push	 -939523841		; c80000ffH
  0168d	f3 0f 10 85 04
	ff ff ff	 movss	 xmm0, DWORD PTR _window_size$58[ebp]
  01695	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  0169d	51		 push	 ecx
  0169e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016a3	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _window_center$57[ebp]
  016a9	50		 push	 eax
  016aa	e8 00 00 00 00	 call	 ?GetBackgroundDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetBackgroundDrawList
  016af	8b c8		 mov	 ecx, eax
  016b1	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QAEXABUImVec2@@MIHM@Z ; ImDrawList::AddCircle
$LN26@ShowExampl:

; 4553 :             if (draw_fg)

  016b6	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?draw_fg@?DA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4_NA
  016bd	85 c0		 test	 eax, eax
  016bf	74 3e		 je	 SHORT $LN27@ShowExampl

; 4554 :                 ImGui::GetForegroundDrawList()->AddCircle(window_center, window_size.y * 0.6f, IM_COL32(0, 255, 0, 200), 48, 10);

  016c1	51		 push	 ecx
  016c2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  016ca	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016cf	6a 30		 push	 48			; 00000030H
  016d1	68 00 ff 00 c8	 push	 -939458816		; c800ff00H
  016d6	f3 0f 10 85 08
	ff ff ff	 movss	 xmm0, DWORD PTR _window_size$58[ebp+4]
  016de	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f19999a
  016e6	51		 push	 ecx
  016e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016ec	8d 85 f4 fe ff
	ff		 lea	 eax, DWORD PTR _window_center$57[ebp]
  016f2	50		 push	 eax
  016f3	e8 00 00 00 00	 call	 ?GetForegroundDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetForegroundDrawList
  016f8	8b c8		 mov	 ecx, eax
  016fa	e8 00 00 00 00	 call	 ?AddCircle@ImDrawList@@QAEXABUImVec2@@MIHM@Z ; ImDrawList::AddCircle
$LN27@ShowExampl:

; 4555 :             ImGui::EndTabItem();

  016ff	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN25@ShowExampl:

; 4556 :         }
; 4557 : 
; 4558 :         ImGui::EndTabBar();

  01704	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN11@ShowExampl:

; 4559 :     }
; 4560 : 
; 4561 :     ImGui::End();

  01709	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 4562 : }

  0170e	52		 push	 edx
  0170f	8b cd		 mov	 ecx, ebp
  01711	50		 push	 eax
  01712	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN42@ShowExampl
  01718	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0171d	58		 pop	 eax
  0171e	5a		 pop	 edx
  0171f	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01722	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01729	59		 pop	 ecx
  0172a	5f		 pop	 edi
  0172b	5e		 pop	 esi
  0172c	5b		 pop	 ebx
  0172d	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01730	33 cd		 xor	 ecx, ebp
  01732	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01737	81 c4 cc 06 00
	00		 add	 esp, 1740		; 000006ccH
  0173d	3b ec		 cmp	 ebp, esp
  0173f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01744	8b e5		 mov	 esp, ebp
  01746	5d		 pop	 ebp
  01747	c3		 ret	 0
$LN42@ShowExampl:
  01748	07 00 00 00	 DD	 7
  0174c	00 00 00 00	 DD	 $LN41@ShowExampl
$LN41@ShowExampl:
  01750	d8 ff ff ff	 DD	 -40			; ffffffd8H
  01754	08 00 00 00	 DD	 8
  01758	00 00 00 00	 DD	 $LN33@ShowExampl
  0175c	5c ff ff ff	 DD	 -164			; ffffff5cH
  01760	08 00 00 00	 DD	 8
  01764	00 00 00 00	 DD	 $LN34@ShowExampl
  01768	4c ff ff ff	 DD	 -180			; ffffff4cH
  0176c	08 00 00 00	 DD	 8
  01770	00 00 00 00	 DD	 $LN35@ShowExampl
  01774	30 ff ff ff	 DD	 -208			; ffffff30H
  01778	08 00 00 00	 DD	 8
  0177c	00 00 00 00	 DD	 $LN36@ShowExampl
  01780	14 ff ff ff	 DD	 -236			; ffffff14H
  01784	08 00 00 00	 DD	 8
  01788	00 00 00 00	 DD	 $LN37@ShowExampl
  0178c	04 ff ff ff	 DD	 -252			; ffffff04H
  01790	08 00 00 00	 DD	 8
  01794	00 00 00 00	 DD	 $LN38@ShowExampl
  01798	f4 fe ff ff	 DD	 -268			; fffffef4H
  0179c	08 00 00 00	 DD	 8
  017a0	00 00 00 00	 DD	 $LN39@ShowExampl
$LN39@ShowExampl:
  017a4	77		 DB	 119			; 00000077H
  017a5	69		 DB	 105			; 00000069H
  017a6	6e		 DB	 110			; 0000006eH
  017a7	64		 DB	 100			; 00000064H
  017a8	6f		 DB	 111			; 0000006fH
  017a9	77		 DB	 119			; 00000077H
  017aa	5f		 DB	 95			; 0000005fH
  017ab	63		 DB	 99			; 00000063H
  017ac	65		 DB	 101			; 00000065H
  017ad	6e		 DB	 110			; 0000006eH
  017ae	74		 DB	 116			; 00000074H
  017af	65		 DB	 101			; 00000065H
  017b0	72		 DB	 114			; 00000072H
  017b1	00		 DB	 0
$LN38@ShowExampl:
  017b2	77		 DB	 119			; 00000077H
  017b3	69		 DB	 105			; 00000069H
  017b4	6e		 DB	 110			; 0000006eH
  017b5	64		 DB	 100			; 00000064H
  017b6	6f		 DB	 111			; 0000006fH
  017b7	77		 DB	 119			; 00000077H
  017b8	5f		 DB	 95			; 0000005fH
  017b9	73		 DB	 115			; 00000073H
  017ba	69		 DB	 105			; 00000069H
  017bb	7a		 DB	 122			; 0000007aH
  017bc	65		 DB	 101			; 00000065H
  017bd	00		 DB	 0
$LN37@ShowExampl:
  017be	77		 DB	 119			; 00000077H
  017bf	69		 DB	 105			; 00000069H
  017c0	6e		 DB	 110			; 0000006eH
  017c1	64		 DB	 100			; 00000064H
  017c2	6f		 DB	 111			; 0000006fH
  017c3	77		 DB	 119			; 00000077H
  017c4	5f		 DB	 95			; 0000005fH
  017c5	70		 DB	 112			; 00000070H
  017c6	6f		 DB	 111			; 0000006fH
  017c7	73		 DB	 115			; 00000073H
  017c8	00		 DB	 0
$LN36@ShowExampl:
  017c9	6d		 DB	 109			; 0000006dH
  017ca	6f		 DB	 111			; 0000006fH
  017cb	75		 DB	 117			; 00000075H
  017cc	73		 DB	 115			; 00000073H
  017cd	65		 DB	 101			; 00000065H
  017ce	5f		 DB	 95			; 0000005fH
  017cf	70		 DB	 112			; 00000070H
  017d0	6f		 DB	 111			; 0000006fH
  017d1	73		 DB	 115			; 00000073H
  017d2	5f		 DB	 95			; 0000005fH
  017d3	69		 DB	 105			; 00000069H
  017d4	6e		 DB	 110			; 0000006eH
  017d5	5f		 DB	 95			; 0000005fH
  017d6	63		 DB	 99			; 00000063H
  017d7	61		 DB	 97			; 00000061H
  017d8	6e		 DB	 110			; 0000006eH
  017d9	76		 DB	 118			; 00000076H
  017da	61		 DB	 97			; 00000061H
  017db	73		 DB	 115			; 00000073H
  017dc	00		 DB	 0
$LN35@ShowExampl:
  017dd	63		 DB	 99			; 00000063H
  017de	61		 DB	 97			; 00000061H
  017df	6e		 DB	 110			; 0000006eH
  017e0	76		 DB	 118			; 00000076H
  017e1	61		 DB	 97			; 00000061H
  017e2	73		 DB	 115			; 00000073H
  017e3	5f		 DB	 95			; 0000005fH
  017e4	73		 DB	 115			; 00000073H
  017e5	69		 DB	 105			; 00000069H
  017e6	7a		 DB	 122			; 0000007aH
  017e7	65		 DB	 101			; 00000065H
  017e8	00		 DB	 0
$LN34@ShowExampl:
  017e9	63		 DB	 99			; 00000063H
  017ea	61		 DB	 97			; 00000061H
  017eb	6e		 DB	 110			; 0000006eH
  017ec	76		 DB	 118			; 00000076H
  017ed	61		 DB	 97			; 00000061H
  017ee	73		 DB	 115			; 00000073H
  017ef	5f		 DB	 95			; 0000005fH
  017f0	70		 DB	 112			; 00000070H
  017f1	6f		 DB	 111			; 0000006fH
  017f2	73		 DB	 115			; 00000073H
  017f3	00		 DB	 0
$LN33@ShowExampl:
  017f4	70		 DB	 112			; 00000070H
  017f5	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowExampleAppCustomRendering@@YAXPA_N@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?L@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?ShowExampleAppCustomRendering@@YAXPA_N@Z$1:
  0000c	68 00 00 00 00	 push	 OFFSET ?$TSS1@?BA@??ShowExampleAppCustomRendering@@YAXPA_N@Z@4HA
  00011	e8 00 00 00 00	 call	 __Init_thread_abort
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?ShowExampleAppCustomRendering@@YAXPA_N@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 8a 30 f9 ff
	ff		 mov	 ecx, DWORD PTR [edx-1744]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowExampleAppCustomRendering@@YAXPA_N@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowExampleAppCustomRendering@@YAXPA_N@Z ENDP		; ShowExampleAppCustomRendering
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppWindowTitles@@YAXPA_N@Z
_TEXT	SEGMENT
tv179 = -436						; size = 8
$T1 = -424						; size = 8
$T2 = -408						; size = 8
$T3 = -392						; size = 8
$T4 = -376						; size = 8
$T5 = -360						; size = 8
$T6 = -344						; size = 8
_buf$ = -136						; size = 128
__$ArrayPad$ = -4					; size = 4
___formal$ = 8						; size = 4
?ShowExampleAppWindowTitles@@YAXPA_N@Z PROC		; ShowExampleAppWindowTitles, COMDAT

; 4393 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec b4 01 00
	00		 sub	 esp, 436		; 000001b4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 4c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-436]
  00012	b9 6d 00 00 00	 mov	 ecx, 109		; 0000006dH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4394 :     // By default, Windows are uniquely identified by their title.
; 4395 :     // You can use the "##" and "###" markers to manipulate the display/ID.
; 4396 : 
; 4397 :     // Using "##" to display same title but have unique identifier.
; 4398 :     ImGui::SetNextWindowPos(ImVec2(100, 100), ImGuiCond_FirstUseEver);

  00032	51		 push	 ecx
  00033	0f 57 c0	 xorps	 xmm0, xmm0
  00036	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0003b	51		 push	 ecx
  0003c	0f 57 c0	 xorps	 xmm0, xmm0
  0003f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00044	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  0004a	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0004f	50		 push	 eax
  00050	6a 04		 push	 4
  00052	51		 push	 ecx
  00053	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0005b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00060	51		 push	 ecx
  00061	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00069	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0006e	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  00074	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00079	50		 push	 eax
  0007a	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z ; ImGui::SetNextWindowPos
  0007f	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4399 :     ImGui::Begin("Same title as another window##1");

  00082	6a 00		 push	 0
  00084	6a 00		 push	 0
  00086	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@BDOLKHNF@Same?5title?5as?5another?5window?$CD?$CD1@
  0008b	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00090	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4400 :     ImGui::Text("This is window 1.\nMy title is the same as window 2, but my identifier is unique.");

  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@NGKGAEMM@This?5is?5window?51?4?6My?5title?5is?5t@
  00098	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0009d	83 c4 04	 add	 esp, 4

; 4401 :     ImGui::End();

  000a0	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4402 : 
; 4403 :     ImGui::SetNextWindowPos(ImVec2(100, 200), ImGuiCond_FirstUseEver);

  000a5	51		 push	 ecx
  000a6	0f 57 c0	 xorps	 xmm0, xmm0
  000a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ae	51		 push	 ecx
  000af	0f 57 c0	 xorps	 xmm0, xmm0
  000b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b7	8d 8d 88 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  000bd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000c2	50		 push	 eax
  000c3	6a 04		 push	 4
  000c5	51		 push	 ecx
  000c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  000ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d3	51		 push	 ecx
  000d4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  000dc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000e1	8d 8d 78 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  000e7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000ec	50		 push	 eax
  000ed	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z ; ImGui::SetNextWindowPos
  000f2	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4404 :     ImGui::Begin("Same title as another window##2");

  000f5	6a 00		 push	 0
  000f7	6a 00		 push	 0
  000f9	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@DIMGPEBG@Same?5title?5as?5another?5window?$CD?$CD2@
  000fe	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00103	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4405 :     ImGui::Text("This is window 2.\nMy title is the same as window 1, but my identifier is unique.");

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0FB@MFIDPLFC@This?5is?5window?52?4?6My?5title?5is?5t@
  0010b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00110	83 c4 04	 add	 esp, 4

; 4406 :     ImGui::End();

  00113	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4407 : 
; 4408 :     // Using "###" to display a changing title but keep a static identifier "AnimatedTitle"
; 4409 :     char buf[128];
; 4410 :     sprintf(buf, "Animated title %c %d###AnimatedTitle", "|/-\\"[(int)(ImGui::GetTime() / 0.25f) & 3], ImGui::GetFrameCount());

  00118	e8 00 00 00 00	 call	 ?GetFrameCount@ImGui@@YAHXZ ; ImGui::GetFrameCount
  0011d	50		 push	 eax
  0011e	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  00123	dd 9d 4c fe ff
	ff		 fstp	 QWORD PTR tv179[ebp]
  00129	f2 0f 10 85 4c
	fe ff ff	 movsd	 xmm0, QWORD PTR tv179[ebp]
  00131	f2 0f 5e 05 00
	00 00 00	 divsd	 xmm0, QWORD PTR __real@3fd0000000000000
  00139	f2 0f 2c c0	 cvttsd2si eax, xmm0
  0013d	83 e0 03	 and	 eax, 3
  00140	0f be 88 00 00
	00 00		 movsx	 ecx, BYTE PTR ??_C@_04NLDFHNKP@?$HM?1?9?2@[eax]
  00147	51		 push	 ecx
  00148	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@MMFFJKJN@Animated?5title?5?$CFc?5?$CFd?$CD?$CD?$CDAnimated@
  0014d	8d 95 78 ff ff
	ff		 lea	 edx, DWORD PTR _buf$[ebp]
  00153	52		 push	 edx
  00154	e8 00 00 00 00	 call	 _sprintf
  00159	83 c4 10	 add	 esp, 16			; 00000010H

; 4411 :     ImGui::SetNextWindowPos(ImVec2(100, 300), ImGuiCond_FirstUseEver);

  0015c	51		 push	 ecx
  0015d	0f 57 c0	 xorps	 xmm0, xmm0
  00160	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00165	51		 push	 ecx
  00166	0f 57 c0	 xorps	 xmm0, xmm0
  00169	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0016e	8d 8d 68 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00174	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00179	50		 push	 eax
  0017a	6a 04		 push	 4
  0017c	51		 push	 ecx
  0017d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00185	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0018a	51		 push	 ecx
  0018b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00193	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00198	8d 8d 58 fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0019e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001a3	50		 push	 eax
  001a4	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z ; ImGui::SetNextWindowPos
  001a9	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4412 :     ImGui::Begin(buf);

  001ac	6a 00		 push	 0
  001ae	6a 00		 push	 0
  001b0	8d 85 78 ff ff
	ff		 lea	 eax, DWORD PTR _buf$[ebp]
  001b6	50		 push	 eax
  001b7	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  001bc	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4413 :     ImGui::Text("This window has a changing title.");

  001bf	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@JFOMGEPF@This?5window?5has?5a?5changing?5titl@
  001c4	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001c9	83 c4 04	 add	 esp, 4

; 4414 :     ImGui::End();

  001cc	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4415 : }

  001d1	52		 push	 edx
  001d2	8b cd		 mov	 ecx, ebp
  001d4	50		 push	 eax
  001d5	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN5@ShowExampl
  001db	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001e0	58		 pop	 eax
  001e1	5a		 pop	 edx
  001e2	5f		 pop	 edi
  001e3	5e		 pop	 esi
  001e4	5b		 pop	 ebx
  001e5	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  001e8	33 cd		 xor	 ecx, ebp
  001ea	e8 00 00 00 00	 call	 @__security_check_cookie@4
  001ef	81 c4 b4 01 00
	00		 add	 esp, 436		; 000001b4H
  001f5	3b ec		 cmp	 ebp, esp
  001f7	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001fc	8b e5		 mov	 esp, ebp
  001fe	5d		 pop	 ebp
  001ff	c3		 ret	 0
$LN5@ShowExampl:
  00200	01 00 00 00	 DD	 1
  00204	00 00 00 00	 DD	 $LN4@ShowExampl
$LN4@ShowExampl:
  00208	78 ff ff ff	 DD	 -136			; ffffff78H
  0020c	80 00 00 00	 DD	 128			; 00000080H
  00210	00 00 00 00	 DD	 $LN3@ShowExampl
$LN3@ShowExampl:
  00214	62		 DB	 98			; 00000062H
  00215	75		 DB	 117			; 00000075H
  00216	66		 DB	 102			; 00000066H
  00217	00		 DB	 0
?ShowExampleAppWindowTitles@@YAXPA_N@Z ENDP		; ShowExampleAppWindowTitles
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppSimpleOverlay@@YAXPA_N@Z
_TEXT	SEGMENT
tv89 = -260						; size = 4
tv80 = -260						; size = 4
tv128 = -256						; size = 4
tv85 = -256						; size = 4
tv73 = -256						; size = 4
tv199 = -253						; size = 1
tv190 = -253						; size = 1
tv181 = -253						; size = 1
tv172 = -253						; size = 1
tv163 = -253						; size = 1
_window_pos_pivot$1 = -56				; size = 8
_window_pos$2 = -40					; size = 8
_io$ = -24						; size = 4
_DISTANCE$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_p_open$ = 8						; size = 4
?ShowExampleAppSimpleOverlay@@YAXPA_N@Z PROC		; ShowExampleAppSimpleOverlay, COMDAT

; 4353 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00012	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4354 :     const float DISTANCE = 10.0f;

  00032	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  0003a	f3 0f 11 45 f4	 movss	 DWORD PTR _DISTANCE$[ebp], xmm0

; 4355 :     static int corner = 0;
; 4356 :     ImGuiIO& io = ImGui::GetIO();

  0003f	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  00044	89 45 e8	 mov	 DWORD PTR _io$[ebp], eax

; 4357 :     if (corner != -1)

  00047	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, -1
  0004e	0f 84 12 01 00
	00		 je	 $LN2@ShowExampl

; 4358 :     {
; 4359 :         ImVec2 window_pos = ImVec2((corner & 1) ? io.DisplaySize.x - DISTANCE : DISTANCE, (corner & 2) ? io.DisplaySize.y - DISTANCE : DISTANCE);

  00054	a1 00 00 00 00	 mov	 eax, DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA
  00059	83 e0 02	 and	 eax, 2
  0005c	74 1a		 je	 SHORT $LN14@ShowExampl
  0005e	8b 4d e8	 mov	 ecx, DWORD PTR _io$[ebp]
  00061	f3 0f 10 41 0c	 movss	 xmm0, DWORD PTR [ecx+12]
  00066	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  0006e	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv73[ebp], xmm0
  00076	eb 10		 jmp	 SHORT $LN15@ShowExampl
$LN14@ShowExampl:
  00078	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00080	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv73[ebp], xmm0
$LN15@ShowExampl:
  00088	8b 15 00 00 00
	00		 mov	 edx, DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA
  0008e	83 e2 01	 and	 edx, 1
  00091	74 1a		 je	 SHORT $LN16@ShowExampl
  00093	8b 45 e8	 mov	 eax, DWORD PTR _io$[ebp]
  00096	f3 0f 10 40 08	 movss	 xmm0, DWORD PTR [eax+8]
  0009b	f3 0f 5c 05 00
	00 00 00	 subss	 xmm0, DWORD PTR __real@41200000
  000a3	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR tv80[ebp], xmm0
  000ab	eb 10		 jmp	 SHORT $LN17@ShowExampl
$LN16@ShowExampl:
  000ad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  000b5	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR tv80[ebp], xmm0
$LN17@ShowExampl:
  000bd	51		 push	 ecx
  000be	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR tv73[ebp]
  000c6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000cb	51		 push	 ecx
  000cc	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv80[ebp]
  000d4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d9	8d 4d d8	 lea	 ecx, DWORD PTR _window_pos$2[ebp]
  000dc	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 4360 :         ImVec2 window_pos_pivot = ImVec2((corner & 1) ? 1.0f : 0.0f, (corner & 2) ? 1.0f : 0.0f);

  000e1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA
  000e6	83 e0 02	 and	 eax, 2
  000e9	74 12		 je	 SHORT $LN18@ShowExampl
  000eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  000f3	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv85[ebp], xmm0
  000fb	eb 0b		 jmp	 SHORT $LN19@ShowExampl
$LN18@ShowExampl:
  000fd	0f 57 c0	 xorps	 xmm0, xmm0
  00100	f3 0f 11 85 00
	ff ff ff	 movss	 DWORD PTR tv85[ebp], xmm0
$LN19@ShowExampl:
  00108	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA
  0010e	83 e1 01	 and	 ecx, 1
  00111	74 12		 je	 SHORT $LN20@ShowExampl
  00113	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0011b	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR tv89[ebp], xmm0
  00123	eb 0b		 jmp	 SHORT $LN21@ShowExampl
$LN20@ShowExampl:
  00125	0f 57 c0	 xorps	 xmm0, xmm0
  00128	f3 0f 11 85 fc
	fe ff ff	 movss	 DWORD PTR tv89[ebp], xmm0
$LN21@ShowExampl:
  00130	51		 push	 ecx
  00131	f3 0f 10 85 00
	ff ff ff	 movss	 xmm0, DWORD PTR tv85[ebp]
  00139	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0013e	51		 push	 ecx
  0013f	f3 0f 10 85 fc
	fe ff ff	 movss	 xmm0, DWORD PTR tv89[ebp]
  00147	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0014c	8d 4d c8	 lea	 ecx, DWORD PTR _window_pos_pivot$1[ebp]
  0014f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 4361 :         ImGui::SetNextWindowPos(window_pos, ImGuiCond_Always, window_pos_pivot);

  00154	8d 45 c8	 lea	 eax, DWORD PTR _window_pos_pivot$1[ebp]
  00157	50		 push	 eax
  00158	6a 01		 push	 1
  0015a	8d 4d d8	 lea	 ecx, DWORD PTR _window_pos$2[ebp]
  0015d	51		 push	 ecx
  0015e	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z ; ImGui::SetNextWindowPos
  00163	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN2@ShowExampl:

; 4362 :     }
; 4363 :     ImGui::SetNextWindowBgAlpha(0.35f); // Transparent background

  00166	51		 push	 ecx
  00167	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3eb33333
  0016f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00174	e8 00 00 00 00	 call	 ?SetNextWindowBgAlpha@ImGui@@YAXM@Z ; ImGui::SetNextWindowBgAlpha
  00179	83 c4 04	 add	 esp, 4

; 4364 :     if (ImGui::Begin("Example: Simple overlay", p_open, (corner != -1 ? ImGuiWindowFlags_NoMove : 0) | ImGuiWindowFlags_NoDecoration | ImGuiWindowFlags_AlwaysAutoResize | ImGuiWindowFlags_NoSavedSettings | ImGuiWindowFlags_NoFocusOnAppearing | ImGuiWindowFlags_NoNav))

  0017c	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, -1
  00183	74 0c		 je	 SHORT $LN22@ShowExampl
  00185	c7 85 00 ff ff
	ff 04 00 00 00	 mov	 DWORD PTR tv128[ebp], 4
  0018f	eb 0a		 jmp	 SHORT $LN23@ShowExampl
$LN22@ShowExampl:
  00191	c7 85 00 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN23@ShowExampl:
  0019b	8b 85 00 ff ff
	ff		 mov	 eax, DWORD PTR tv128[ebp]
  001a1	83 c8 2b	 or	 eax, 43			; 0000002bH
  001a4	83 c8 40	 or	 eax, 64			; 00000040H
  001a7	0d 00 01 00 00	 or	 eax, 256		; 00000100H
  001ac	0d 00 10 00 00	 or	 eax, 4096		; 00001000H
  001b1	0d 00 00 0c 00	 or	 eax, 786432		; 000c0000H
  001b6	50		 push	 eax
  001b7	8b 4d 08	 mov	 ecx, DWORD PTR _p_open$[ebp]
  001ba	51		 push	 ecx
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PFDIHNNE@Example?3?5Simple?5overlay@
  001c0	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  001c5	83 c4 0c	 add	 esp, 12			; 0000000cH
  001c8	0f b6 d0	 movzx	 edx, al
  001cb	85 d2		 test	 edx, edx
  001cd	0f 84 f8 01 00
	00		 je	 $LN6@ShowExampl

; 4365 :     {
; 4366 :         ImGui::Text("Simple overlay\n" "in the corner of the screen.\n" "(right-click to change position)");

  001d3	68 00 00 00 00	 push	 OFFSET ??_C@_0EN@GGFBFCLD@Simple?5overlay?6in?5the?5corner?5of@
  001d8	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001dd	83 c4 04	 add	 esp, 4

; 4367 :         ImGui::Separator();

  001e0	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 4368 :         if (ImGui::IsMousePosValid())

  001e5	6a 00		 push	 0
  001e7	e8 00 00 00 00	 call	 ?IsMousePosValid@ImGui@@YA_NPBUImVec2@@@Z ; ImGui::IsMousePosValid
  001ec	83 c4 04	 add	 esp, 4
  001ef	0f b6 c0	 movzx	 eax, al
  001f2	85 c0		 test	 eax, eax
  001f4	74 35		 je	 SHORT $LN4@ShowExampl

; 4369 :             ImGui::Text("Mouse Position: (%.1f,%.1f)", io.MousePos.x, io.MousePos.y);

  001f6	8b 45 e8	 mov	 eax, DWORD PTR _io$[ebp]
  001f9	f3 0f 5a 80 e4
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+228]
  00201	83 ec 08	 sub	 esp, 8
  00204	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00209	8b 4d e8	 mov	 ecx, DWORD PTR _io$[ebp]
  0020c	f3 0f 5a 81 e0
	00 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+224]
  00214	83 ec 08	 sub	 esp, 8
  00217	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0021c	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@DKAAEOG@Mouse?5Position?3?5?$CI?$CF?41f?0?$CF?41f?$CJ@
  00221	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00226	83 c4 14	 add	 esp, 20			; 00000014H
  00229	eb 0d		 jmp	 SHORT $LN5@ShowExampl
$LN4@ShowExampl:

; 4370 :         else
; 4371 :             ImGui::Text("Mouse Position: <invalid>");

  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@POIHMAKN@Mouse?5Position?3?5?$DMinvalid?$DO@
  00230	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00235	83 c4 04	 add	 esp, 4
$LN5@ShowExampl:

; 4372 :         if (ImGui::BeginPopupContextWindow())

  00238	6a 01		 push	 1
  0023a	6a 01		 push	 1
  0023c	6a 00		 push	 0
  0023e	e8 00 00 00 00	 call	 ?BeginPopupContextWindow@ImGui@@YA_NPBDH_N@Z ; ImGui::BeginPopupContextWindow
  00243	83 c4 0c	 add	 esp, 12			; 0000000cH
  00246	0f b6 c0	 movzx	 eax, al
  00249	85 c0		 test	 eax, eax
  0024b	0f 84 7a 01 00
	00		 je	 $LN6@ShowExampl

; 4373 :         {
; 4374 :             if (ImGui::MenuItem("Custom",       NULL, corner == -1)) corner = -1;

  00251	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, -1
  00258	75 09		 jne	 SHORT $LN24@ShowExampl
  0025a	c6 85 03 ff ff
	ff 01		 mov	 BYTE PTR tv163[ebp], 1
  00261	eb 07		 jmp	 SHORT $LN25@ShowExampl
$LN24@ShowExampl:
  00263	c6 85 03 ff ff
	ff 00		 mov	 BYTE PTR tv163[ebp], 0
$LN25@ShowExampl:
  0026a	6a 01		 push	 1
  0026c	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR tv163[ebp]
  00273	50		 push	 eax
  00274	6a 00		 push	 0
  00276	68 00 00 00 00	 push	 OFFSET ??_C@_06IFGIOHDE@Custom@
  0027b	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00280	83 c4 10	 add	 esp, 16			; 00000010H
  00283	0f b6 c8	 movzx	 ecx, al
  00286	85 c9		 test	 ecx, ecx
  00288	74 0a		 je	 SHORT $LN7@ShowExampl
  0028a	c7 05 00 00 00
	00 ff ff ff ff	 mov	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, -1
$LN7@ShowExampl:

; 4375 :             if (ImGui::MenuItem("Top-left",     NULL, corner == 0)) corner = 0;

  00294	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 0
  0029b	75 09		 jne	 SHORT $LN26@ShowExampl
  0029d	c6 85 03 ff ff
	ff 01		 mov	 BYTE PTR tv172[ebp], 1
  002a4	eb 07		 jmp	 SHORT $LN27@ShowExampl
$LN26@ShowExampl:
  002a6	c6 85 03 ff ff
	ff 00		 mov	 BYTE PTR tv172[ebp], 0
$LN27@ShowExampl:
  002ad	6a 01		 push	 1
  002af	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR tv172[ebp]
  002b6	50		 push	 eax
  002b7	6a 00		 push	 0
  002b9	68 00 00 00 00	 push	 OFFSET ??_C@_08DPOKBJOC@Top?9left@
  002be	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  002c3	83 c4 10	 add	 esp, 16			; 00000010H
  002c6	0f b6 c8	 movzx	 ecx, al
  002c9	85 c9		 test	 ecx, ecx
  002cb	74 0a		 je	 SHORT $LN8@ShowExampl
  002cd	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 0
$LN8@ShowExampl:

; 4376 :             if (ImGui::MenuItem("Top-right",    NULL, corner == 1)) corner = 1;

  002d7	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 1
  002de	75 09		 jne	 SHORT $LN28@ShowExampl
  002e0	c6 85 03 ff ff
	ff 01		 mov	 BYTE PTR tv181[ebp], 1
  002e7	eb 07		 jmp	 SHORT $LN29@ShowExampl
$LN28@ShowExampl:
  002e9	c6 85 03 ff ff
	ff 00		 mov	 BYTE PTR tv181[ebp], 0
$LN29@ShowExampl:
  002f0	6a 01		 push	 1
  002f2	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR tv181[ebp]
  002f9	50		 push	 eax
  002fa	6a 00		 push	 0
  002fc	68 00 00 00 00	 push	 OFFSET ??_C@_09FEMEGGCE@Top?9right@
  00301	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00306	83 c4 10	 add	 esp, 16			; 00000010H
  00309	0f b6 c8	 movzx	 ecx, al
  0030c	85 c9		 test	 ecx, ecx
  0030e	74 0a		 je	 SHORT $LN9@ShowExampl
  00310	c7 05 00 00 00
	00 01 00 00 00	 mov	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 1
$LN9@ShowExampl:

; 4377 :             if (ImGui::MenuItem("Bottom-left",  NULL, corner == 2)) corner = 2;

  0031a	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 2
  00321	75 09		 jne	 SHORT $LN30@ShowExampl
  00323	c6 85 03 ff ff
	ff 01		 mov	 BYTE PTR tv190[ebp], 1
  0032a	eb 07		 jmp	 SHORT $LN31@ShowExampl
$LN30@ShowExampl:
  0032c	c6 85 03 ff ff
	ff 00		 mov	 BYTE PTR tv190[ebp], 0
$LN31@ShowExampl:
  00333	6a 01		 push	 1
  00335	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR tv190[ebp]
  0033c	50		 push	 eax
  0033d	6a 00		 push	 0
  0033f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MGBINKPN@Bottom?9left@
  00344	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00349	83 c4 10	 add	 esp, 16			; 00000010H
  0034c	0f b6 c8	 movzx	 ecx, al
  0034f	85 c9		 test	 ecx, ecx
  00351	74 0a		 je	 SHORT $LN10@ShowExampl
  00353	c7 05 00 00 00
	00 02 00 00 00	 mov	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 2
$LN10@ShowExampl:

; 4378 :             if (ImGui::MenuItem("Bottom-right", NULL, corner == 3)) corner = 3;

  0035d	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 3
  00364	75 09		 jne	 SHORT $LN32@ShowExampl
  00366	c6 85 03 ff ff
	ff 01		 mov	 BYTE PTR tv199[ebp], 1
  0036d	eb 07		 jmp	 SHORT $LN33@ShowExampl
$LN32@ShowExampl:
  0036f	c6 85 03 ff ff
	ff 00		 mov	 BYTE PTR tv199[ebp], 0
$LN33@ShowExampl:
  00376	6a 01		 push	 1
  00378	0f b6 85 03 ff
	ff ff		 movzx	 eax, BYTE PTR tv199[ebp]
  0037f	50		 push	 eax
  00380	6a 00		 push	 0
  00382	68 00 00 00 00	 push	 OFFSET ??_C@_0N@NJDFJJBC@Bottom?9right@
  00387	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  0038c	83 c4 10	 add	 esp, 16			; 00000010H
  0038f	0f b6 c8	 movzx	 ecx, al
  00392	85 c9		 test	 ecx, ecx
  00394	74 0a		 je	 SHORT $LN11@ShowExampl
  00396	c7 05 00 00 00
	00 03 00 00 00	 mov	 DWORD PTR ?corner@?1??ShowExampleAppSimpleOverlay@@YAXPA_N@Z@4HA, 3
$LN11@ShowExampl:

; 4379 :             if (p_open && ImGui::MenuItem("Close")) *p_open = false;

  003a0	83 7d 08 00	 cmp	 DWORD PTR _p_open$[ebp], 0
  003a4	74 20		 je	 SHORT $LN12@ShowExampl
  003a6	6a 01		 push	 1
  003a8	6a 00		 push	 0
  003aa	6a 00		 push	 0
  003ac	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  003b1	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  003b6	83 c4 10	 add	 esp, 16			; 00000010H
  003b9	0f b6 c0	 movzx	 eax, al
  003bc	85 c0		 test	 eax, eax
  003be	74 06		 je	 SHORT $LN12@ShowExampl
  003c0	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  003c3	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN12@ShowExampl:

; 4380 :             ImGui::EndPopup();

  003c6	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN6@ShowExampl:

; 4381 :         }
; 4382 :     }
; 4383 :     ImGui::End();

  003cb	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4384 : }

  003d0	52		 push	 edx
  003d1	8b cd		 mov	 ecx, ebp
  003d3	50		 push	 eax
  003d4	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN37@ShowExampl
  003da	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003df	58		 pop	 eax
  003e0	5a		 pop	 edx
  003e1	5f		 pop	 edi
  003e2	5e		 pop	 esi
  003e3	5b		 pop	 ebx
  003e4	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e7	33 cd		 xor	 ecx, ebp
  003e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ee	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  003f4	3b ec		 cmp	 ebp, esp
  003f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c3		 ret	 0
  003ff	90		 npad	 1
$LN37@ShowExampl:
  00400	02 00 00 00	 DD	 2
  00404	00 00 00 00	 DD	 $LN36@ShowExampl
$LN36@ShowExampl:
  00408	d8 ff ff ff	 DD	 -40			; ffffffd8H
  0040c	08 00 00 00	 DD	 8
  00410	00 00 00 00	 DD	 $LN34@ShowExampl
  00414	c8 ff ff ff	 DD	 -56			; ffffffc8H
  00418	08 00 00 00	 DD	 8
  0041c	00 00 00 00	 DD	 $LN35@ShowExampl
$LN35@ShowExampl:
  00420	77		 DB	 119			; 00000077H
  00421	69		 DB	 105			; 00000069H
  00422	6e		 DB	 110			; 0000006eH
  00423	64		 DB	 100			; 00000064H
  00424	6f		 DB	 111			; 0000006fH
  00425	77		 DB	 119			; 00000077H
  00426	5f		 DB	 95			; 0000005fH
  00427	70		 DB	 112			; 00000070H
  00428	6f		 DB	 111			; 0000006fH
  00429	73		 DB	 115			; 00000073H
  0042a	5f		 DB	 95			; 0000005fH
  0042b	70		 DB	 112			; 00000070H
  0042c	69		 DB	 105			; 00000069H
  0042d	76		 DB	 118			; 00000076H
  0042e	6f		 DB	 111			; 0000006fH
  0042f	74		 DB	 116			; 00000074H
  00430	00		 DB	 0
$LN34@ShowExampl:
  00431	77		 DB	 119			; 00000077H
  00432	69		 DB	 105			; 00000069H
  00433	6e		 DB	 110			; 0000006eH
  00434	64		 DB	 100			; 00000064H
  00435	6f		 DB	 111			; 0000006fH
  00436	77		 DB	 119			; 00000077H
  00437	5f		 DB	 95			; 0000005fH
  00438	70		 DB	 112			; 00000070H
  00439	6f		 DB	 111			; 0000006fH
  0043a	73		 DB	 115			; 00000073H
  0043b	00		 DB	 0
?ShowExampleAppSimpleOverlay@@YAXPA_N@Z ENDP		; ShowExampleAppSimpleOverlay
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppConstrainedResize@@YAXPA_N@Z
_TEXT	SEGMENT
tv189 = -580						; size = 4
$T1 = -572						; size = 8
$T2 = -556						; size = 8
$T3 = -540						; size = 8
$T4 = -524						; size = 8
$T5 = -508						; size = 8
$T6 = -492						; size = 8
$T7 = -476						; size = 8
$T8 = -460						; size = 8
$T9 = -444						; size = 8
$T10 = -428						; size = 8
$T11 = -412						; size = 8
$T12 = -396						; size = 8
$T13 = -380						; size = 8
$T14 = -364						; size = 8
$T15 = -348						; size = 8
$T16 = -332						; size = 8
$T17 = -316						; size = 8
$T18 = -300						; size = 8
$T19 = -284						; size = 8
$T20 = -268						; size = 8
_i$21 = -60						; size = 4
_desc$22 = -48						; size = 28
_flags$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p_open$ = 8						; size = 4
?ShowExampleAppConstrainedResize@@YAXPA_N@Z PROC	; ShowExampleAppConstrainedResize, COMDAT

; 4302 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 44 02 00
	00		 sub	 esp, 580		; 00000244H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd bc fd ff
	ff		 lea	 edi, DWORD PTR [ebp-580]
  00012	b9 91 00 00 00	 mov	 ecx, 145		; 00000091H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4303 :     struct CustomConstraints // Helper functions to demonstrate programmatic constraints
; 4304 :     {
; 4305 :         static void Square(ImGuiSizeCallbackData* data) { data->DesiredSize.x = data->DesiredSize.y = (data->DesiredSize.x > data->DesiredSize.y ? data->DesiredSize.x : data->DesiredSize.y); }
; 4306 :         static void Step(ImGuiSizeCallbackData* data)   { float step = (float)(int)(intptr_t)data->UserData; data->DesiredSize = ImVec2((int)(data->DesiredSize.x / step + 0.5f) * step, (int)(data->DesiredSize.y / step + 0.5f) * step); }
; 4307 :     };
; 4308 : 
; 4309 :     static bool auto_resize = false;
; 4310 :     static int type = 0;
; 4311 :     static int display_lines = 10;
; 4312 :     if (type == 0) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 0),    ImVec2(-1, FLT_MAX));      // Vertical only

  00032	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 0
  00039	75 57		 jne	 SHORT $LN5@ShowExampl
  0003b	6a 00		 push	 0
  0003d	6a 00		 push	 0
  0003f	51		 push	 ecx
  00040	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00048	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0004d	51		 push	 ecx
  0004e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00056	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005b	8d 8d f4 fe ff
	ff		 lea	 ecx, DWORD PTR $T20[ebp]
  00061	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00066	50		 push	 eax
  00067	51		 push	 ecx
  00068	0f 57 c0	 xorps	 xmm0, xmm0
  0006b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00070	51		 push	 ecx
  00071	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00079	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007e	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T19[ebp]
  00084	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00089	50		 push	 eax
  0008a	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  0008f	83 c4 10	 add	 esp, 16			; 00000010H
$LN5@ShowExampl:

; 4313 :     if (type == 1) ImGui::SetNextWindowSizeConstraints(ImVec2(0, -1),    ImVec2(FLT_MAX, -1));      // Horizontal only

  00092	83 3d 00 00 00
	00 01		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 1
  00099	75 57		 jne	 SHORT $LN6@ShowExampl
  0009b	6a 00		 push	 0
  0009d	6a 00		 push	 0
  0009f	51		 push	 ecx
  000a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	8d 8d d4 fe ff
	ff		 lea	 ecx, DWORD PTR $T18[ebp]
  000c1	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000c6	50		 push	 eax
  000c7	51		 push	 ecx
  000c8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  000d0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d5	51		 push	 ecx
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	8d 8d c4 fe ff
	ff		 lea	 ecx, DWORD PTR $T17[ebp]
  000e4	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000e9	50		 push	 eax
  000ea	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  000ef	83 c4 10	 add	 esp, 16			; 00000010H
$LN6@ShowExampl:

; 4314 :     if (type == 2) ImGui::SetNextWindowSizeConstraints(ImVec2(100, 100), ImVec2(FLT_MAX, FLT_MAX)); // Width > 100, Height > 100

  000f2	83 3d 00 00 00
	00 02		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 2
  000f9	75 5c		 jne	 SHORT $LN7@ShowExampl
  000fb	6a 00		 push	 0
  000fd	6a 00		 push	 0
  000ff	51		 push	 ecx
  00100	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00108	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0010d	51		 push	 ecx
  0010e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00116	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0011b	8d 8d b4 fe ff
	ff		 lea	 ecx, DWORD PTR $T16[ebp]
  00121	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00126	50		 push	 eax
  00127	51		 push	 ecx
  00128	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  00130	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00135	51		 push	 ecx
  00136	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  0013e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00143	8d 8d a4 fe ff
	ff		 lea	 ecx, DWORD PTR $T15[ebp]
  00149	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0014e	50		 push	 eax
  0014f	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  00154	83 c4 10	 add	 esp, 16			; 00000010H
$LN7@ShowExampl:

; 4315 :     if (type == 3) ImGui::SetNextWindowSizeConstraints(ImVec2(400, -1),  ImVec2(500, -1));          // Width 400-500

  00157	83 3d 00 00 00
	00 03		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 3
  0015e	75 5c		 jne	 SHORT $LN8@ShowExampl
  00160	6a 00		 push	 0
  00162	6a 00		 push	 0
  00164	51		 push	 ecx
  00165	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0016d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00172	51		 push	 ecx
  00173	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  0017b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00180	8d 8d 94 fe ff
	ff		 lea	 ecx, DWORD PTR $T14[ebp]
  00186	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0018b	50		 push	 eax
  0018c	51		 push	 ecx
  0018d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00195	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019a	51		 push	 ecx
  0019b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43c80000
  001a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a8	8d 8d 84 fe ff
	ff		 lea	 ecx, DWORD PTR $T13[ebp]
  001ae	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001b3	50		 push	 eax
  001b4	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  001b9	83 c4 10	 add	 esp, 16			; 00000010H
$LN8@ShowExampl:

; 4316 :     if (type == 4) ImGui::SetNextWindowSizeConstraints(ImVec2(-1, 400),  ImVec2(-1, 500));          // Height 400-500

  001bc	83 3d 00 00 00
	00 04		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 4
  001c3	75 5c		 jne	 SHORT $LN9@ShowExampl
  001c5	6a 00		 push	 0
  001c7	6a 00		 push	 0
  001c9	51		 push	 ecx
  001ca	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  001d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001d7	51		 push	 ecx
  001d8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001e0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e5	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR $T12[ebp]
  001eb	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001f0	50		 push	 eax
  001f1	51		 push	 ecx
  001f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43c80000
  001fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ff	51		 push	 ecx
  00200	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00208	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0020d	8d 8d 64 fe ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00213	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00218	50		 push	 eax
  00219	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  0021e	83 c4 10	 add	 esp, 16			; 00000010H
$LN9@ShowExampl:

; 4317 :     if (type == 5) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Square);                     // Always Square

  00221	83 3d 00 00 00
	00 05		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 5
  00228	75 55		 jne	 SHORT $LN10@ShowExampl
  0022a	6a 00		 push	 0
  0022c	68 00 00 00 00	 push	 OFFSET ?Square@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Square
  00231	51		 push	 ecx
  00232	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  0023a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023f	51		 push	 ecx
  00240	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00248	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0024d	8d 8d 54 fe ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  00253	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00258	50		 push	 eax
  00259	51		 push	 ecx
  0025a	0f 57 c0	 xorps	 xmm0, xmm0
  0025d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00262	51		 push	 ecx
  00263	0f 57 c0	 xorps	 xmm0, xmm0
  00266	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0026b	8d 8d 44 fe ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00271	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00276	50		 push	 eax
  00277	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  0027c	83 c4 10	 add	 esp, 16			; 00000010H
$LN10@ShowExampl:

; 4318 :     if (type == 6) ImGui::SetNextWindowSizeConstraints(ImVec2(0, 0),     ImVec2(FLT_MAX, FLT_MAX), CustomConstraints::Step, (void*)(intptr_t)100); // Fixed Step

  0027f	83 3d 00 00 00
	00 06		 cmp	 DWORD PTR ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA, 6
  00286	75 55		 jne	 SHORT $LN11@ShowExampl
  00288	6a 64		 push	 100			; 00000064H
  0028a	68 00 00 00 00	 push	 OFFSET ?Step@CustomConstraints@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@SAXPAUImGuiSizeCallbackData@@@Z ; `ShowExampleAppConstrainedResize'::`2'::CustomConstraints::Step
  0028f	51		 push	 ecx
  00290	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  00298	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029d	51		 push	 ecx
  0029e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  002a6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ab	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  002b1	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002b6	50		 push	 eax
  002b7	51		 push	 ecx
  002b8	0f 57 c0	 xorps	 xmm0, xmm0
  002bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c0	51		 push	 ecx
  002c1	0f 57 c0	 xorps	 xmm0, xmm0
  002c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c9	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  002cf	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002d4	50		 push	 eax
  002d5	e8 00 00 00 00	 call	 ?SetNextWindowSizeConstraints@ImGui@@YAXABUImVec2@@0P6AXPAUImGuiSizeCallbackData@@@ZPAX@Z ; ImGui::SetNextWindowSizeConstraints
  002da	83 c4 10	 add	 esp, 16			; 00000010H
$LN11@ShowExampl:

; 4319 : 
; 4320 :     ImGuiWindowFlags flags = auto_resize ? ImGuiWindowFlags_AlwaysAutoResize : 0;

  002dd	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?auto_resize@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4_NA
  002e4	85 c0		 test	 eax, eax
  002e6	74 0c		 je	 SHORT $LN17@ShowExampl
  002e8	c7 85 bc fd ff
	ff 40 00 00 00	 mov	 DWORD PTR tv189[ebp], 64 ; 00000040H
  002f2	eb 0a		 jmp	 SHORT $LN18@ShowExampl
$LN17@ShowExampl:
  002f4	c7 85 bc fd ff
	ff 00 00 00 00	 mov	 DWORD PTR tv189[ebp], 0
$LN18@ShowExampl:
  002fe	8b 8d bc fd ff
	ff		 mov	 ecx, DWORD PTR tv189[ebp]
  00304	89 4d f4	 mov	 DWORD PTR _flags$[ebp], ecx

; 4321 :     if (ImGui::Begin("Example: Constrained Resize", p_open, flags))

  00307	8b 45 f4	 mov	 eax, DWORD PTR _flags$[ebp]
  0030a	50		 push	 eax
  0030b	8b 4d 08	 mov	 ecx, DWORD PTR _p_open$[ebp]
  0030e	51		 push	 ecx
  0030f	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@KOHLMLPM@Example?3?5Constrained?5Resize@
  00314	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00319	83 c4 0c	 add	 esp, 12			; 0000000cH
  0031c	0f b6 d0	 movzx	 edx, al
  0031f	85 d2		 test	 edx, edx
  00321	0f 84 54 02 00
	00		 je	 $LN3@ShowExampl

; 4322 :     {
; 4323 :         const char* desc[] =
; 4324 :         {
; 4325 :             "Resize vertical only",

  00327	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp], OFFSET ??_C@_0BF@FPBGOCLL@Resize?5vertical?5only@

; 4326 :             "Resize horizontal only",

  0032e	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp+4], OFFSET ??_C@_0BH@FIOIJIGG@Resize?5horizontal?5only@

; 4327 :             "Width > 100, Height > 100",

  00335	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp+8], OFFSET ??_C@_0BK@CNAJDBBL@Width?5?$DO?5100?0?5Height?5?$DO?5100@

; 4328 :             "Width 400-500",

  0033c	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp+12], OFFSET ??_C@_0O@GIJNEIMP@Width?5400?9500@

; 4329 :             "Height 400-500",

  00343	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp+16], OFFSET ??_C@_0P@MPNPOAJG@Height?5400?9500@

; 4330 :             "Custom: Always Square",

  0034a	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp+20], OFFSET ??_C@_0BG@JBCFEINF@Custom?3?5Always?5Square@

; 4331 :             "Custom: Fixed Steps (100)",

  00351	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _desc$22[ebp+24], OFFSET ??_C@_0BK@NJBCHMME@Custom?3?5Fixed?5Steps?5?$CI100?$CJ@

; 4332 :         };
; 4333 :         if (ImGui::Button("200x200")) { ImGui::SetWindowSize(ImVec2(200, 200)); } ImGui::SameLine();

  00358	51		 push	 ecx
  00359	0f 57 c0	 xorps	 xmm0, xmm0
  0035c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00361	51		 push	 ecx
  00362	0f 57 c0	 xorps	 xmm0, xmm0
  00365	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036a	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00370	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00375	50		 push	 eax
  00376	68 00 00 00 00	 push	 OFFSET ??_C@_07JJIBJOCO@200x200@
  0037b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00380	83 c4 08	 add	 esp, 8
  00383	0f b6 c0	 movzx	 eax, al
  00386	85 c0		 test	 eax, eax
  00388	74 32		 je	 SHORT $LN13@ShowExampl
  0038a	6a 00		 push	 0
  0038c	51		 push	 ecx
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	51		 push	 ecx
  0039b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  003a3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a8	8d 8d 04 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  003ae	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  003b3	50		 push	 eax
  003b4	e8 00 00 00 00	 call	 ?SetWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetWindowSize
  003b9	83 c4 08	 add	 esp, 8
$LN13@ShowExampl:
  003bc	51		 push	 ecx
  003bd	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ca	51		 push	 ecx
  003cb	0f 57 c0	 xorps	 xmm0, xmm0
  003ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003d3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  003d8	83 c4 08	 add	 esp, 8

; 4334 :         if (ImGui::Button("500x500")) { ImGui::SetWindowSize(ImVec2(500, 500)); } ImGui::SameLine();

  003db	51		 push	 ecx
  003dc	0f 57 c0	 xorps	 xmm0, xmm0
  003df	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003e4	51		 push	 ecx
  003e5	0f 57 c0	 xorps	 xmm0, xmm0
  003e8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003ed	8d 8d f4 fd ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  003f3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  003f8	50		 push	 eax
  003f9	68 00 00 00 00	 push	 OFFSET ??_C@_07OJDKPIO@500x500@
  003fe	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00403	83 c4 08	 add	 esp, 8
  00406	0f b6 c0	 movzx	 eax, al
  00409	85 c0		 test	 eax, eax
  0040b	74 32		 je	 SHORT $LN14@ShowExampl
  0040d	6a 00		 push	 0
  0040f	51		 push	 ecx
  00410	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  00418	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0041d	51		 push	 ecx
  0041e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  00426	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0042b	8d 8d e4 fd ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  00431	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00436	50		 push	 eax
  00437	e8 00 00 00 00	 call	 ?SetWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetWindowSize
  0043c	83 c4 08	 add	 esp, 8
$LN14@ShowExampl:
  0043f	51		 push	 ecx
  00440	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00448	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0044d	51		 push	 ecx
  0044e	0f 57 c0	 xorps	 xmm0, xmm0
  00451	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00456	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0045b	83 c4 08	 add	 esp, 8

; 4335 :         if (ImGui::Button("800x200")) { ImGui::SetWindowSize(ImVec2(800, 200)); }

  0045e	51		 push	 ecx
  0045f	0f 57 c0	 xorps	 xmm0, xmm0
  00462	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00467	51		 push	 ecx
  00468	0f 57 c0	 xorps	 xmm0, xmm0
  0046b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00470	8d 8d d4 fd ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00476	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0047b	50		 push	 eax
  0047c	68 00 00 00 00	 push	 OFFSET ??_C@_07IEBICOG@800x200@
  00481	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00486	83 c4 08	 add	 esp, 8
  00489	0f b6 c0	 movzx	 eax, al
  0048c	85 c0		 test	 eax, eax
  0048e	74 32		 je	 SHORT $LN15@ShowExampl
  00490	6a 00		 push	 0
  00492	51		 push	 ecx
  00493	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  0049b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004a0	51		 push	 ecx
  004a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44480000
  004a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004ae	8d 8d c4 fd ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  004b4	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  004b9	50		 push	 eax
  004ba	e8 00 00 00 00	 call	 ?SetWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetWindowSize
  004bf	83 c4 08	 add	 esp, 8
$LN15@ShowExampl:

; 4336 :         ImGui::SetNextItemWidth(200);

  004c2	51		 push	 ecx
  004c3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  004cb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004d0	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  004d5	83 c4 04	 add	 esp, 4

; 4337 :         ImGui::Combo("Constraint", &type, desc, IM_ARRAYSIZE(desc));

  004d8	6a ff		 push	 -1
  004da	6a 07		 push	 7
  004dc	8d 45 d0	 lea	 eax, DWORD PTR _desc$22[ebp]
  004df	50		 push	 eax
  004e0	68 00 00 00 00	 push	 OFFSET ?type@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA
  004e5	68 00 00 00 00	 push	 OFFSET ??_C@_0L@PIOLEGBL@Constraint@
  004ea	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAHQBQBDHH@Z ; ImGui::Combo
  004ef	83 c4 14	 add	 esp, 20			; 00000014H

; 4338 :         ImGui::SetNextItemWidth(200);

  004f2	51		 push	 ecx
  004f3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43480000
  004fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00500	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  00505	83 c4 04	 add	 esp, 4

; 4339 :         ImGui::DragInt("Lines", &display_lines, 0.2f, 1, 100);

  00508	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0050d	6a 64		 push	 100			; 00000064H
  0050f	6a 01		 push	 1
  00511	51		 push	 ecx
  00512	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  0051a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0051f	68 00 00 00 00	 push	 OFFSET ?display_lines@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA
  00524	68 00 00 00 00	 push	 OFFSET ??_C@_05DDHCCCLJ@Lines@
  00529	e8 00 00 00 00	 call	 ?DragInt@ImGui@@YA_NPBDPAHMHH0@Z ; ImGui::DragInt
  0052e	83 c4 18	 add	 esp, 24			; 00000018H

; 4340 :         ImGui::Checkbox("Auto-resize", &auto_resize);

  00531	68 00 00 00 00	 push	 OFFSET ?auto_resize@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4_NA
  00536	68 00 00 00 00	 push	 OFFSET ??_C@_0M@CEOMCPLH@Auto?9resize@
  0053b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00540	83 c4 08	 add	 esp, 8

; 4341 :         for (int i = 0; i < display_lines; i++)

  00543	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _i$21[ebp], 0
  0054a	eb 09		 jmp	 SHORT $LN4@ShowExampl
$LN2@ShowExampl:
  0054c	8b 45 c4	 mov	 eax, DWORD PTR _i$21[ebp]
  0054f	83 c0 01	 add	 eax, 1
  00552	89 45 c4	 mov	 DWORD PTR _i$21[ebp], eax
$LN4@ShowExampl:
  00555	8b 45 c4	 mov	 eax, DWORD PTR _i$21[ebp]
  00558	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?display_lines@?1??ShowExampleAppConstrainedResize@@YAXPA_N@Z@4HA
  0055e	7d 1b		 jge	 SHORT $LN3@ShowExampl

; 4342 :             ImGui::Text("%*sHello, sailor! Making this line long enough for the example.", i * 4, "");

  00560	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00565	8b 45 c4	 mov	 eax, DWORD PTR _i$21[ebp]
  00568	c1 e0 02	 shl	 eax, 2
  0056b	50		 push	 eax
  0056c	68 00 00 00 00	 push	 OFFSET ??_C@_0EA@CCNBDEKJ@?$CF?$CKsHello?0?5sailor?$CB?5Making?5this?5l@
  00571	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00576	83 c4 0c	 add	 esp, 12			; 0000000cH
  00579	eb d1		 jmp	 SHORT $LN2@ShowExampl
$LN3@ShowExampl:

; 4343 :     }
; 4344 :     ImGui::End();

  0057b	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4345 : }

  00580	52		 push	 edx
  00581	8b cd		 mov	 ecx, ebp
  00583	50		 push	 eax
  00584	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN21@ShowExampl
  0058a	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  0058f	58		 pop	 eax
  00590	5a		 pop	 edx
  00591	5f		 pop	 edi
  00592	5e		 pop	 esi
  00593	5b		 pop	 ebx
  00594	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00597	33 cd		 xor	 ecx, ebp
  00599	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0059e	81 c4 44 02 00
	00		 add	 esp, 580		; 00000244H
  005a4	3b ec		 cmp	 ebp, esp
  005a6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005ab	8b e5		 mov	 esp, ebp
  005ad	5d		 pop	 ebp
  005ae	c3		 ret	 0
  005af	90		 npad	 1
$LN21@ShowExampl:
  005b0	01 00 00 00	 DD	 1
  005b4	00 00 00 00	 DD	 $LN20@ShowExampl
$LN20@ShowExampl:
  005b8	d0 ff ff ff	 DD	 -48			; ffffffd0H
  005bc	1c 00 00 00	 DD	 28			; 0000001cH
  005c0	00 00 00 00	 DD	 $LN19@ShowExampl
$LN19@ShowExampl:
  005c4	64		 DB	 100			; 00000064H
  005c5	65		 DB	 101			; 00000065H
  005c6	73		 DB	 115			; 00000073H
  005c7	63		 DB	 99			; 00000063H
  005c8	00		 DB	 0
?ShowExampleAppConstrainedResize@@YAXPA_N@Z ENDP	; ShowExampleAppConstrainedResize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppAutoResize@@YAXPA_N@Z
_TEXT	SEGMENT
_i$1 = -8						; size = 4
_p_open$ = 8						; size = 4
?ShowExampleAppAutoResize@@YAXPA_N@Z PROC		; ShowExampleAppAutoResize, COMDAT

; 4281 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4282 :     if (!ImGui::Begin("Example: Auto-resizing window", p_open, ImGuiWindowFlags_AlwaysAutoResize))

  00028	6a 40		 push	 64			; 00000040H
  0002a	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BJFILJPF@Example?3?5Auto?9resizing?5window@
  00033	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	0f b6 c8	 movzx	 ecx, al
  0003e	85 c9		 test	 ecx, ecx
  00040	75 07		 jne	 SHORT $LN5@ShowExampl

; 4283 :     {
; 4284 :         ImGui::End();

  00042	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4285 :         return;

  00047	eb 69		 jmp	 SHORT $LN1@ShowExampl
$LN5@ShowExampl:

; 4286 :     }
; 4287 : 
; 4288 :     static int lines = 10;
; 4289 :     ImGui::Text("Window will resize every-frame to the size of its content.\nNote that you probably don't want to query the window size to\noutput your content because that would create a feedback loop.");

  00049	68 00 00 00 00	 push	 OFFSET ??_C@_0LI@CEDCIBKO@Window?5will?5resize?5every?9frame?5@
  0004e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00053	83 c4 04	 add	 esp, 4

; 4290 :     ImGui::SliderInt("Number of lines", &lines, 1, 20);

  00056	68 00 00 00 00	 push	 OFFSET ??_C@_02DPKJAMEF@?$CFd@
  0005b	6a 14		 push	 20			; 00000014H
  0005d	6a 01		 push	 1
  0005f	68 00 00 00 00	 push	 OFFSET ?lines@?1??ShowExampleAppAutoResize@@YAXPA_N@Z@4HA
  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EAJBEEH@Number?5of?5lines@
  00069	e8 00 00 00 00	 call	 ?SliderInt@ImGui@@YA_NPBDPAHHH0@Z ; ImGui::SliderInt
  0006e	83 c4 14	 add	 esp, 20			; 00000014H

; 4291 :     for (int i = 0; i < lines; i++)

  00071	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _i$1[ebp], 0
  00078	eb 09		 jmp	 SHORT $LN4@ShowExampl
$LN2@ShowExampl:
  0007a	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  0007d	83 c0 01	 add	 eax, 1
  00080	89 45 f8	 mov	 DWORD PTR _i$1[ebp], eax
$LN4@ShowExampl:
  00083	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00086	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lines@?1??ShowExampleAppAutoResize@@YAXPA_N@Z@4HA
  0008c	7d 1f		 jge	 SHORT $LN3@ShowExampl

; 4292 :         ImGui::Text("%*sThis is line %d", i * 4, "", i); // Pad with space to extend size horizontally

  0008e	8b 45 f8	 mov	 eax, DWORD PTR _i$1[ebp]
  00091	50		 push	 eax
  00092	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00097	8b 4d f8	 mov	 ecx, DWORD PTR _i$1[ebp]
  0009a	c1 e1 02	 shl	 ecx, 2
  0009d	51		 push	 ecx
  0009e	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@DIDKCIOM@?$CF?$CKsThis?5is?5line?5?$CFd@
  000a3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  000a8	83 c4 10	 add	 esp, 16			; 00000010H
  000ab	eb cd		 jmp	 SHORT $LN2@ShowExampl
$LN3@ShowExampl:

; 4293 :     ImGui::End();

  000ad	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 4294 : }

  000b2	5f		 pop	 edi
  000b3	5e		 pop	 esi
  000b4	5b		 pop	 ebx
  000b5	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000bb	3b ec		 cmp	 ebp, esp
  000bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c2	8b e5		 mov	 esp, ebp
  000c4	5d		 pop	 ebp
  000c5	c3		 ret	 0
?ShowExampleAppAutoResize@@YAXPA_N@Z ENDP		; ShowExampleAppAutoResize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppLongText@@YAXPA_N@Z
_TEXT	SEGMENT
tv156 = -376						; size = 4
$T2 = -368						; size = 8
$T3 = -352						; size = 8
$T4 = -336						; size = 8
$T5 = -320						; size = 8
$T6 = -304						; size = 8
$T7 = -288						; size = 8
_i$8 = -80						; size = 4
_i$9 = -68						; size = 4
_clipper$10 = -56					; size = 24
_i$11 = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p_open$ = 8						; size = 4
?ShowExampleAppLongText@@YAXPA_N@Z PROC			; ShowExampleAppLongText, COMDAT

; 4223 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowExampleAppLongText@@YAXPA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 6c 01 00
	00		 sub	 esp, 364		; 0000016cH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 88 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-376]
  00020	b9 5b 00 00 00	 mov	 ecx, 91			; 0000005bH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4224 :     ImGui::SetNextWindowSize(ImVec2(520,600), ImGuiCond_FirstUseEver);

  0004a	6a 04		 push	 4
  0004c	51		 push	 ecx
  0004d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44160000
  00055	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005a	51		 push	 ecx
  0005b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44020000
  00063	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00068	8d 8d e0 fe ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  0006e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00073	50		 push	 eax
  00074	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetNextWindowSize
  00079	83 c4 08	 add	 esp, 8

; 4225 :     if (!ImGui::Begin("Example: Long text display", p_open))

  0007c	6a 00		 push	 0
  0007e	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  00081	50		 push	 eax
  00082	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@GBIKCKEE@Example?3?5Long?5text?5display@
  00087	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  0008c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0008f	0f b6 c8	 movzx	 ecx, al
  00092	85 c9		 test	 ecx, ecx
  00094	75 0a		 jne	 SHORT $LN16@ShowExampl

; 4226 :     {
; 4227 :         ImGui::End();

  00096	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4228 :         return;

  0009b	e9 25 03 00 00	 jmp	 $LN1@ShowExampl
$LN16@ShowExampl:

; 4229 :     }
; 4230 : 
; 4231 :     static int test_type = 0;
; 4232 :     static ImGuiTextBuffer log;

  000a0	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  000a5	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  000ac	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  000af	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  000b4	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  000ba	7e 48		 jle	 SHORT $LN2@ShowExampl
  000bc	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  000c1	e8 00 00 00 00	 call	 __Init_thread_header
  000c6	83 c4 04	 add	 esp, 4
  000c9	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA, -1
  000d0	75 32		 jne	 SHORT $LN2@ShowExampl
  000d2	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  000d9	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  000de	e8 00 00 00 00	 call	 ??0ImGuiTextBuffer@@QAE@XZ ; ImGuiTextBuffer::ImGuiTextBuffer
  000e3	68 00 00 00 00	 push	 OFFSET ??__Flog@?1??ShowExampleAppLongText@@YAXPA_N@Z@YAXXZ ; `ShowExampleAppLongText'::`2'::`dynamic atexit destructor for 'log''
  000e8	e8 00 00 00 00	 call	 _atexit
  000ed	83 c4 04	 add	 esp, 4
  000f0	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000f7	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  000fc	e8 00 00 00 00	 call	 __Init_thread_footer
  00101	83 c4 04	 add	 esp, 4
$LN2@ShowExampl:

; 4233 :     static int lines = 0;
; 4234 :     ImGui::Text("Printing unusually long amount of text.");

  00104	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@JCGLFKAA@Printing?5unusually?5long?5amount?5@
  00109	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0010e	83 c4 04	 add	 esp, 4

; 4235 :     ImGui::Combo("Test type", &test_type, "Single call to TextUnformatted()\0Multiple calls to Text(), clipped\0Multiple calls to Text(), not clipped (slow)\0");

  00111	6a ff		 push	 -1
  00113	68 00 00 00 00	 push	 OFFSET ??_C@_0HB@DAOOCDLA@Single?5call?5to?5TextUnformatted?$CI@
  00118	68 00 00 00 00	 push	 OFFSET ?test_type@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  0011d	68 00 00 00 00	 push	 OFFSET ??_C@_09NBDEEMIG@Test?5type@
  00122	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  00127	83 c4 10	 add	 esp, 16			; 00000010H

; 4236 :     ImGui::Text("Buffer contents: %d lines, %d bytes", lines, log.size());

  0012a	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  0012f	e8 00 00 00 00	 call	 ?size@ImGuiTextBuffer@@QBEHXZ ; ImGuiTextBuffer::size
  00134	50		 push	 eax
  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  0013a	50		 push	 eax
  0013b	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@MABLKLGB@Buffer?5contents?3?5?$CFd?5lines?0?5?$CFd?5b@
  00140	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00145	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4237 :     if (ImGui::Button("Clear")) { log.clear(); lines = 0; }

  00148	51		 push	 ecx
  00149	0f 57 c0	 xorps	 xmm0, xmm0
  0014c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00151	51		 push	 ecx
  00152	0f 57 c0	 xorps	 xmm0, xmm0
  00155	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0015a	8d 8d d0 fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00160	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00165	50		 push	 eax
  00166	68 00 00 00 00	 push	 OFFSET ??_C@_05MDNHABIA@Clear@
  0016b	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00170	83 c4 08	 add	 esp, 8
  00173	0f b6 c0	 movzx	 eax, al
  00176	85 c0		 test	 eax, eax
  00178	74 14		 je	 SHORT $LN17@ShowExampl
  0017a	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  0017f	e8 00 00 00 00	 call	 ?clear@ImGuiTextBuffer@@QAEXXZ ; ImGuiTextBuffer::clear
  00184	c7 05 00 00 00
	00 00 00 00 00	 mov	 DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA, 0
$LN17@ShowExampl:

; 4238 :     ImGui::SameLine();

  0018e	51		 push	 ecx
  0018f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00197	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0019c	51		 push	 ecx
  0019d	0f 57 c0	 xorps	 xmm0, xmm0
  001a0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001a5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  001aa	83 c4 08	 add	 esp, 8

; 4239 :     if (ImGui::Button("Add 1000 lines"))

  001ad	51		 push	 ecx
  001ae	0f 57 c0	 xorps	 xmm0, xmm0
  001b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b6	51		 push	 ecx
  001b7	0f 57 c0	 xorps	 xmm0, xmm0
  001ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001bf	8d 8d c0 fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  001c5	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001ca	50		 push	 eax
  001cb	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IHJDPCIL@Add?51000?5lines@
  001d0	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  001d5	83 c4 08	 add	 esp, 8
  001d8	0f b6 c0	 movzx	 eax, al
  001db	85 c0		 test	 eax, eax
  001dd	74 47		 je	 SHORT $LN18@ShowExampl

; 4240 :     {
; 4241 :         for (int i = 0; i < 1000; i++)

  001df	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _i$11[ebp], 0
  001e6	eb 09		 jmp	 SHORT $LN5@ShowExampl
$LN3@ShowExampl:
  001e8	8b 45 e8	 mov	 eax, DWORD PTR _i$11[ebp]
  001eb	83 c0 01	 add	 eax, 1
  001ee	89 45 e8	 mov	 DWORD PTR _i$11[ebp], eax
$LN5@ShowExampl:
  001f1	81 7d e8 e8 03
	00 00		 cmp	 DWORD PTR _i$11[ebp], 1000 ; 000003e8H
  001f8	7d 1d		 jge	 SHORT $LN4@ShowExampl

; 4242 :             log.appendf("%i The quick brown fox jumps over the lazy dog\n", lines+i);

  001fa	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  001ff	03 45 e8	 add	 eax, DWORD PTR _i$11[ebp]
  00202	50		 push	 eax
  00203	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@IKFBCOKM@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@
  00208	68 00 00 00 00	 push	 OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  0020d	e8 00 00 00 00	 call	 ?appendf@ImGuiTextBuffer@@QAAXPBDZZ ; ImGuiTextBuffer::appendf
  00212	83 c4 0c	 add	 esp, 12			; 0000000cH
  00215	eb d1		 jmp	 SHORT $LN3@ShowExampl
$LN4@ShowExampl:

; 4243 :         lines += 1000;

  00217	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  0021c	05 e8 03 00 00	 add	 eax, 1000		; 000003e8H
  00221	a3 00 00 00 00	 mov	 DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA, eax
$LN18@ShowExampl:

; 4244 :     }
; 4245 :     ImGui::BeginChild("Log");

  00226	6a 00		 push	 0
  00228	6a 00		 push	 0
  0022a	51		 push	 ecx
  0022b	0f 57 c0	 xorps	 xmm0, xmm0
  0022e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00233	51		 push	 ecx
  00234	0f 57 c0	 xorps	 xmm0, xmm0
  00237	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0023c	8d 8d b0 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00242	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00247	50		 push	 eax
  00248	68 00 00 00 00	 push	 OFFSET ??_C@_03GGEOLGBL@Log@
  0024d	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  00252	83 c4 10	 add	 esp, 16			; 00000010H

; 4246 :     switch (test_type)

  00255	a1 00 00 00 00	 mov	 eax, DWORD PTR ?test_type@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  0025a	89 85 88 fe ff
	ff		 mov	 DWORD PTR tv156[ebp], eax
  00260	83 bd 88 fe ff
	ff 00		 cmp	 DWORD PTR tv156[ebp], 0
  00267	74 1b		 je	 SHORT $LN19@ShowExampl
  00269	83 bd 88 fe ff
	ff 01		 cmp	 DWORD PTR tv156[ebp], 1
  00270	74 35		 je	 SHORT $LN20@ShowExampl
  00272	83 bd 88 fe ff
	ff 02		 cmp	 DWORD PTR tv156[ebp], 2
  00279	0f 84 da 00 00
	00		 je	 $LN21@ShowExampl
  0027f	e9 37 01 00 00	 jmp	 $LN6@ShowExampl
$LN19@ShowExampl:

; 4247 :     {
; 4248 :     case 0:
; 4249 :         // Single call to TextUnformatted() with a big buffer
; 4250 :         ImGui::TextUnformatted(log.begin(), log.end());

  00284	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  00289	e8 00 00 00 00	 call	 ?end@ImGuiTextBuffer@@QBEPBDXZ ; ImGuiTextBuffer::end
  0028e	50		 push	 eax
  0028f	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLongText@@YAXPA_N@Z@4UImGuiTextBuffer@@A
  00294	e8 00 00 00 00	 call	 ?begin@ImGuiTextBuffer@@QBEPBDXZ ; ImGuiTextBuffer::begin
  00299	50		 push	 eax
  0029a	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  0029f	83 c4 08	 add	 esp, 8

; 4251 :         break;

  002a2	e9 14 01 00 00	 jmp	 $LN6@ShowExampl
$LN20@ShowExampl:

; 4252 :     case 1:
; 4253 :         {
; 4254 :             // Multiple calls to Text(), manually coarsely clipped - demonstrate how to use the ImGuiListClipper helper.
; 4255 :             ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0,0));

  002a7	51		 push	 ecx
  002a8	0f 57 c0	 xorps	 xmm0, xmm0
  002ab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b0	51		 push	 ecx
  002b1	0f 57 c0	 xorps	 xmm0, xmm0
  002b4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b9	8d 8d a0 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  002bf	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002c4	50		 push	 eax
  002c5	6a 0d		 push	 13			; 0000000dH
  002c7	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  002cc	83 c4 08	 add	 esp, 8

; 4256 :             ImGuiListClipper clipper(lines);

  002cf	51		 push	 ecx
  002d0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002dd	a1 00 00 00 00	 mov	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  002e2	50		 push	 eax
  002e3	8d 4d c8	 lea	 ecx, DWORD PTR _clipper$10[ebp]
  002e6	e8 00 00 00 00	 call	 ??0ImGuiListClipper@@QAE@HM@Z ; ImGuiListClipper::ImGuiListClipper
  002eb	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
$LN8@ShowExampl:

; 4257 :             while (clipper.Step())

  002f2	8d 4d c8	 lea	 ecx, DWORD PTR _clipper$10[ebp]
  002f5	e8 00 00 00 00	 call	 ?Step@ImGuiListClipper@@QAE_NXZ ; ImGuiListClipper::Step
  002fa	0f b6 c0	 movzx	 eax, al
  002fd	85 c0		 test	 eax, eax
  002ff	74 2e		 je	 SHORT $LN9@ShowExampl

; 4258 :                 for (int i = clipper.DisplayStart; i < clipper.DisplayEnd; i++)

  00301	8b 45 d8	 mov	 eax, DWORD PTR _clipper$10[ebp+16]
  00304	89 45 bc	 mov	 DWORD PTR _i$9[ebp], eax
  00307	eb 09		 jmp	 SHORT $LN12@ShowExampl
$LN10@ShowExampl:
  00309	8b 45 bc	 mov	 eax, DWORD PTR _i$9[ebp]
  0030c	83 c0 01	 add	 eax, 1
  0030f	89 45 bc	 mov	 DWORD PTR _i$9[ebp], eax
$LN12@ShowExampl:
  00312	8b 45 bc	 mov	 eax, DWORD PTR _i$9[ebp]
  00315	3b 45 dc	 cmp	 eax, DWORD PTR _clipper$10[ebp+20]
  00318	7d 13		 jge	 SHORT $LN11@ShowExampl

; 4259 :                     ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);

  0031a	8b 45 bc	 mov	 eax, DWORD PTR _i$9[ebp]
  0031d	50		 push	 eax
  0031e	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@
  00323	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00328	83 c4 08	 add	 esp, 8
  0032b	eb dc		 jmp	 SHORT $LN10@ShowExampl
$LN11@ShowExampl:
  0032d	eb c3		 jmp	 SHORT $LN8@ShowExampl
$LN9@ShowExampl:

; 4260 :             ImGui::PopStyleVar();

  0032f	6a 01		 push	 1
  00331	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  00336	83 c4 04	 add	 esp, 4

; 4261 :             break;

  00339	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00340	8d 4d c8	 lea	 ecx, DWORD PTR _clipper$10[ebp]
  00343	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
  00348	eb 71		 jmp	 SHORT $LN6@ShowExampl

; 4262 :         }

  0034a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00351	8d 4d c8	 lea	 ecx, DWORD PTR _clipper$10[ebp]
  00354	e8 00 00 00 00	 call	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
$LN21@ShowExampl:

; 4263 :     case 2:
; 4264 :         // Multiple calls to Text(), not clipped (slow)
; 4265 :         ImGui::PushStyleVar(ImGuiStyleVar_ItemSpacing, ImVec2(0,0));

  00359	51		 push	 ecx
  0035a	0f 57 c0	 xorps	 xmm0, xmm0
  0035d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00362	51		 push	 ecx
  00363	0f 57 c0	 xorps	 xmm0, xmm0
  00366	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0036b	8d 8d 90 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00371	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00376	50		 push	 eax
  00377	6a 0d		 push	 13			; 0000000dH
  00379	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  0037e	83 c4 08	 add	 esp, 8

; 4266 :         for (int i = 0; i < lines; i++)

  00381	c7 45 b0 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  00388	eb 09		 jmp	 SHORT $LN15@ShowExampl
$LN13@ShowExampl:
  0038a	8b 45 b0	 mov	 eax, DWORD PTR _i$8[ebp]
  0038d	83 c0 01	 add	 eax, 1
  00390	89 45 b0	 mov	 DWORD PTR _i$8[ebp], eax
$LN15@ShowExampl:
  00393	8b 45 b0	 mov	 eax, DWORD PTR _i$8[ebp]
  00396	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?lines@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  0039c	7d 13		 jge	 SHORT $LN14@ShowExampl

; 4267 :             ImGui::Text("%i The quick brown fox jumps over the lazy dog", i);

  0039e	8b 45 b0	 mov	 eax, DWORD PTR _i$8[ebp]
  003a1	50		 push	 eax
  003a2	68 00 00 00 00	 push	 OFFSET ??_C@_0CP@NEDCKJAF@?$CFi?5The?5quick?5brown?5fox?5jumps?5ov@
  003a7	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003ac	83 c4 08	 add	 esp, 8
  003af	eb d9		 jmp	 SHORT $LN13@ShowExampl
$LN14@ShowExampl:

; 4268 :         ImGui::PopStyleVar();

  003b1	6a 01		 push	 1
  003b3	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  003b8	83 c4 04	 add	 esp, 4
$LN6@ShowExampl:

; 4269 :         break;
; 4270 :     }
; 4271 :     ImGui::EndChild();

  003bb	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 4272 :     ImGui::End();

  003c0	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 4273 : }

  003c5	52		 push	 edx
  003c6	8b cd		 mov	 ecx, ebp
  003c8	50		 push	 eax
  003c9	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN28@ShowExampl
  003cf	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  003d4	58		 pop	 eax
  003d5	5a		 pop	 edx
  003d6	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  003d9	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  003e0	59		 pop	 ecx
  003e1	5f		 pop	 edi
  003e2	5e		 pop	 esi
  003e3	5b		 pop	 ebx
  003e4	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  003e7	33 cd		 xor	 ecx, ebp
  003e9	e8 00 00 00 00	 call	 @__security_check_cookie@4
  003ee	81 c4 78 01 00
	00		 add	 esp, 376		; 00000178H
  003f4	3b ec		 cmp	 ebp, esp
  003f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003fb	8b e5		 mov	 esp, ebp
  003fd	5d		 pop	 ebp
  003fe	c3		 ret	 0
  003ff	90		 npad	 1
$LN28@ShowExampl:
  00400	01 00 00 00	 DD	 1
  00404	00 00 00 00	 DD	 $LN27@ShowExampl
$LN27@ShowExampl:
  00408	c8 ff ff ff	 DD	 -56			; ffffffc8H
  0040c	18 00 00 00	 DD	 24			; 00000018H
  00410	00 00 00 00	 DD	 $LN25@ShowExampl
$LN25@ShowExampl:
  00414	63		 DB	 99			; 00000063H
  00415	6c		 DB	 108			; 0000006cH
  00416	69		 DB	 105			; 00000069H
  00417	70		 DB	 112			; 00000070H
  00418	70		 DB	 112			; 00000070H
  00419	65		 DB	 101			; 00000065H
  0041a	72		 DB	 114			; 00000072H
  0041b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowExampleAppLongText@@YAXPA_N@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppLongText@@YAXPA_N@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?ShowExampleAppLongText@@YAXPA_N@Z$1:
  0000c	8d 4d c8	 lea	 ecx, DWORD PTR _clipper$10[ebp]
  0000f	e9 00 00 00 00	 jmp	 ??1ImGuiListClipper@@QAE@XZ ; ImGuiListClipper::~ImGuiListClipper
  00014	cc		 int	 3
  00015	cc		 int	 3
  00016	cc		 int	 3
  00017	cc		 int	 3
  00018	cc		 int	 3
__ehhandler$?ShowExampleAppLongText@@YAXPA_N@Z:
  00019	90		 npad	 1
  0001a	90		 npad	 1
  0001b	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  0001f	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00022	8b 8a 84 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-380]
  00028	33 c8		 xor	 ecx, eax
  0002a	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0002f	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00032	33 c8		 xor	 ecx, eax
  00034	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00039	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowExampleAppLongText@@YAXPA_N@Z
  0003e	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowExampleAppLongText@@YAXPA_N@Z ENDP			; ShowExampleAppLongText
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppPropertyEditor@@YAXPA_N@Z
_TEXT	SEGMENT
$T1 = -232						; size = 8
$T2 = -216						; size = 8
_obj_i$3 = -8						; size = 4
_p_open$ = 8						; size = 4
?ShowExampleAppPropertyEditor@@YAXPA_N@Z PROC		; ShowExampleAppPropertyEditor, COMDAT

; 4151 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec ec 00 00
	00		 sub	 esp, 236		; 000000ecH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 14 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-236]
  00012	b9 3b 00 00 00	 mov	 ecx, 59			; 0000003bH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4152 :     ImGui::SetNextWindowSize(ImVec2(430,450), ImGuiCond_FirstUseEver);

  00028	6a 04		 push	 4
  0002a	51		 push	 ecx
  0002b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43e10000
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	51		 push	 ecx
  00039	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43d70000
  00041	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00046	8d 8d 28 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  0004c	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00051	50		 push	 eax
  00052	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetNextWindowSize
  00057	83 c4 08	 add	 esp, 8

; 4153 :     if (!ImGui::Begin("Example: Property editor", p_open))

  0005a	6a 00		 push	 0
  0005c	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  0005f	50		 push	 eax
  00060	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@EKHJGGOC@Example?3?5Property?5editor@
  00065	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  0006a	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006d	0f b6 c8	 movzx	 ecx, al
  00070	85 c9		 test	 ecx, ecx
  00072	75 0a		 jne	 SHORT $LN5@ShowExampl

; 4154 :     {
; 4155 :         ImGui::End();

  00074	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4156 :         return;

  00079	e9 9f 00 00 00	 jmp	 $LN1@ShowExampl
$LN5@ShowExampl:

; 4157 :     }
; 4158 : 
; 4159 :     HelpMarker("This example shows how you may implement a property editor using two columns.\nAll objects/fields data are dummies here.\nRemember that in many simple cases, you can use ImGui::SameLine(xxx) to position\nyour cursor horizontally instead of using the Columns() API.");

  0007e	68 00 00 00 00	 push	 OFFSET ??_C@_0BAG@IGIKGKDA@This?5example?5shows?5how?5you?5may?5@
  00083	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00088	83 c4 04	 add	 esp, 4

; 4160 : 
; 4161 :     ImGui::PushStyleVar(ImGuiStyleVar_FramePadding, ImVec2(2,2));

  0008b	51		 push	 ecx
  0008c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  00094	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00099	51		 push	 ecx
  0009a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  000a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000a7	8d 8d 18 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000ad	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000b2	50		 push	 eax
  000b3	6a 0a		 push	 10			; 0000000aH
  000b5	e8 00 00 00 00	 call	 ?PushStyleVar@ImGui@@YAXHABUImVec2@@@Z ; ImGui::PushStyleVar
  000ba	83 c4 08	 add	 esp, 8

; 4162 :     ImGui::Columns(2);

  000bd	6a 01		 push	 1
  000bf	6a 00		 push	 0
  000c1	6a 02		 push	 2
  000c3	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  000c8	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4163 :     ImGui::Separator();

  000cb	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 4164 : 
; 4165 :     struct funcs
; 4166 :     {
; 4167 :         static void ShowDummyObject(const char* prefix, int uid)
; 4168 :         {
; 4169 :             ImGui::PushID(uid);                      // Use object uid as identifier. Most commonly you could also use the object pointer as a base ID.
; 4170 :             ImGui::AlignTextToFramePadding();  // Text and Tree nodes are less high than regular widgets, here we add vertical spacing to make the tree lines equal high.
; 4171 :             bool node_open = ImGui::TreeNode("Object", "%s_%u", prefix, uid);
; 4172 :             ImGui::NextColumn();
; 4173 :             ImGui::AlignTextToFramePadding();
; 4174 :             ImGui::Text("my sailor is rich");
; 4175 :             ImGui::NextColumn();
; 4176 :             if (node_open)
; 4177 :             {
; 4178 :                 static float dummy_members[8] = { 0.0f,0.0f,1.0f,3.1416f,100.0f,999.0f };
; 4179 :                 for (int i = 0; i < 8; i++)
; 4180 :                 {
; 4181 :                     ImGui::PushID(i); // Use field index as identifier.
; 4182 :                     if (i < 2)
; 4183 :                     {
; 4184 :                         ShowDummyObject("Child", 424242);
; 4185 :                     }
; 4186 :                     else
; 4187 :                     {
; 4188 :                         // Here we use a TreeNode to highlight on hover (we could use e.g. Selectable as well)
; 4189 :                         ImGui::AlignTextToFramePadding();
; 4190 :                         ImGui::TreeNodeEx("Field", ImGuiTreeNodeFlags_Leaf | ImGuiTreeNodeFlags_NoTreePushOnOpen | ImGuiTreeNodeFlags_Bullet, "Field_%d", i);
; 4191 :                         ImGui::NextColumn();
; 4192 :                         ImGui::SetNextItemWidth(-1);
; 4193 :                         if (i >= 5)
; 4194 :                             ImGui::InputFloat("##value", &dummy_members[i], 1.0f);
; 4195 :                         else
; 4196 :                             ImGui::DragFloat("##value", &dummy_members[i], 0.01f);
; 4197 :                         ImGui::NextColumn();
; 4198 :                     }
; 4199 :                     ImGui::PopID();
; 4200 :                 }
; 4201 :                 ImGui::TreePop();
; 4202 :             }
; 4203 :             ImGui::PopID();
; 4204 :         }
; 4205 :     };
; 4206 : 
; 4207 :     // Iterate dummy objects with dummy members (all the same data)
; 4208 :     for (int obj_i = 0; obj_i < 3; obj_i++)

  000d0	c7 45 f8 00 00
	00 00		 mov	 DWORD PTR _obj_i$3[ebp], 0
  000d7	eb 09		 jmp	 SHORT $LN4@ShowExampl
$LN2@ShowExampl:
  000d9	8b 45 f8	 mov	 eax, DWORD PTR _obj_i$3[ebp]
  000dc	83 c0 01	 add	 eax, 1
  000df	89 45 f8	 mov	 DWORD PTR _obj_i$3[ebp], eax
$LN4@ShowExampl:
  000e2	83 7d f8 03	 cmp	 DWORD PTR _obj_i$3[ebp], 3
  000e6	7d 13		 jge	 SHORT $LN3@ShowExampl

; 4209 :         funcs::ShowDummyObject("Object", obj_i);

  000e8	8b 45 f8	 mov	 eax, DWORD PTR _obj_i$3[ebp]
  000eb	50		 push	 eax
  000ec	68 00 00 00 00	 push	 OFFSET ??_C@_06ELFECKBG@Object@
  000f1	e8 00 00 00 00	 call	 ?ShowDummyObject@funcs@?1??ShowExampleAppPropertyEditor@@YAXPA_N@Z@SAXPBDH@Z ; `ShowExampleAppPropertyEditor'::`2'::funcs::ShowDummyObject
  000f6	83 c4 08	 add	 esp, 8
  000f9	eb de		 jmp	 SHORT $LN2@ShowExampl
$LN3@ShowExampl:

; 4210 : 
; 4211 :     ImGui::Columns(1);

  000fb	6a 01		 push	 1
  000fd	6a 00		 push	 0
  000ff	6a 01		 push	 1
  00101	e8 00 00 00 00	 call	 ?Columns@ImGui@@YAXHPBD_N@Z ; ImGui::Columns
  00106	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4212 :     ImGui::Separator();

  00109	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 4213 :     ImGui::PopStyleVar();

  0010e	6a 01		 push	 1
  00110	e8 00 00 00 00	 call	 ?PopStyleVar@ImGui@@YAXH@Z ; ImGui::PopStyleVar
  00115	83 c4 04	 add	 esp, 4

; 4214 :     ImGui::End();

  00118	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 4215 : }

  0011d	5f		 pop	 edi
  0011e	5e		 pop	 esi
  0011f	5b		 pop	 ebx
  00120	81 c4 ec 00 00
	00		 add	 esp, 236		; 000000ecH
  00126	3b ec		 cmp	 ebp, esp
  00128	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0012d	8b e5		 mov	 esp, ebp
  0012f	5d		 pop	 ebp
  00130	c3		 ret	 0
?ShowExampleAppPropertyEditor@@YAXPA_N@Z ENDP		; ShowExampleAppPropertyEditor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppLayout@@YAXPA_N@Z
_TEXT	SEGMENT
tv240 = -444						; size = 4
tv144 = -441						; size = 1
$T1 = -436						; size = 8
$T2 = -420						; size = 8
$T3 = -404						; size = 8
$T4 = -388						; size = 8
$T5 = -372						; size = 8
$T6 = -356						; size = 8
_label$7 = -148						; size = 128
_i$8 = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
_p_open$ = 8						; size = 4
?ShowExampleAppLayout@@YAXPA_N@Z PROC			; ShowExampleAppLayout, COMDAT

; 4090 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec bc 01 00
	00		 sub	 esp, 444		; 000001bcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 44 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-444]
  00012	b9 6f 00 00 00	 mov	 ecx, 111		; 0000006fH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4091 :     ImGui::SetNextWindowSize(ImVec2(500, 440), ImGuiCond_FirstUseEver);

  00032	6a 04		 push	 4
  00034	51		 push	 ecx
  00035	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43dc0000
  0003d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00042	51		 push	 ecx
  00043	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  0004b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00050	8d 8d 9c fe ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  00056	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0005b	50		 push	 eax
  0005c	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetNextWindowSize
  00061	83 c4 08	 add	 esp, 8

; 4092 :     if (ImGui::Begin("Example: Simple layout", p_open, ImGuiWindowFlags_MenuBar))

  00064	68 00 04 00 00	 push	 1024			; 00000400H
  00069	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  0006c	50		 push	 eax
  0006d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BCHKOJFL@Example?3?5Simple?5layout@
  00072	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00077	83 c4 0c	 add	 esp, 12			; 0000000cH
  0007a	0f b6 c8	 movzx	 ecx, al
  0007d	85 c9		 test	 ecx, ecx
  0007f	0f 84 8a 02 00
	00		 je	 $LN5@ShowExampl

; 4093 :     {
; 4094 :         if (ImGui::BeginMenuBar())

  00085	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  0008a	0f b6 c0	 movzx	 eax, al
  0008d	85 c0		 test	 eax, eax
  0008f	74 40		 je	 SHORT $LN6@ShowExampl

; 4095 :         {
; 4096 :             if (ImGui::BeginMenu("File"))

  00091	6a 01		 push	 1
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_04PBAHLACE@File@
  00098	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  0009d	83 c4 08	 add	 esp, 8
  000a0	0f b6 c0	 movzx	 eax, al
  000a3	85 c0		 test	 eax, eax
  000a5	74 25		 je	 SHORT $LN7@ShowExampl

; 4097 :             {
; 4098 :                 if (ImGui::MenuItem("Close")) *p_open = false;

  000a7	6a 01		 push	 1
  000a9	6a 00		 push	 0
  000ab	6a 00		 push	 0
  000ad	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close@
  000b2	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000b7	83 c4 10	 add	 esp, 16			; 00000010H
  000ba	0f b6 c0	 movzx	 eax, al
  000bd	85 c0		 test	 eax, eax
  000bf	74 06		 je	 SHORT $LN8@ShowExampl
  000c1	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  000c4	c6 00 00	 mov	 BYTE PTR [eax], 0
$LN8@ShowExampl:

; 4099 :                 ImGui::EndMenu();

  000c7	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN7@ShowExampl:

; 4100 :             }
; 4101 :             ImGui::EndMenuBar();

  000cc	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN6@ShowExampl:

; 4102 :         }
; 4103 : 
; 4104 :         // left
; 4105 :         static int selected = 0;
; 4106 :         ImGui::BeginChild("left pane", ImVec2(150, 0), true);

  000d1	6a 00		 push	 0
  000d3	6a 01		 push	 1
  000d5	51		 push	 ecx
  000d6	0f 57 c0	 xorps	 xmm0, xmm0
  000d9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000de	51		 push	 ecx
  000df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  000e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000ec	8d 8d 8c fe ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  000f2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000f7	50		 push	 eax
  000f8	68 00 00 00 00	 push	 OFFSET ??_C@_09OINOOGMP@left?5pane@
  000fd	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  00102	83 c4 10	 add	 esp, 16			; 00000010H

; 4107 :         for (int i = 0; i < 100; i++)

  00105	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _i$8[ebp], 0
  0010c	eb 09		 jmp	 SHORT $LN4@ShowExampl
$LN2@ShowExampl:
  0010e	8b 45 f4	 mov	 eax, DWORD PTR _i$8[ebp]
  00111	83 c0 01	 add	 eax, 1
  00114	89 45 f4	 mov	 DWORD PTR _i$8[ebp], eax
$LN4@ShowExampl:
  00117	83 7d f4 64	 cmp	 DWORD PTR _i$8[ebp], 100 ; 00000064H
  0011b	7d 7d		 jge	 SHORT $LN3@ShowExampl

; 4108 :         {
; 4109 :             char label[128];
; 4110 :             sprintf(label, "MyObject %d", i);

  0011d	8b 45 f4	 mov	 eax, DWORD PTR _i$8[ebp]
  00120	50		 push	 eax
  00121	68 00 00 00 00	 push	 OFFSET ??_C@_0M@DHBPHHKL@MyObject?5?$CFd@
  00126	8d 8d 6c ff ff
	ff		 lea	 ecx, DWORD PTR _label$7[ebp]
  0012c	51		 push	 ecx
  0012d	e8 00 00 00 00	 call	 _sprintf
  00132	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4111 :             if (ImGui::Selectable(label, selected == i))

  00135	a1 00 00 00 00	 mov	 eax, DWORD PTR ?selected@?4??ShowExampleAppLayout@@YAXPA_N@Z@4HA
  0013a	3b 45 f4	 cmp	 eax, DWORD PTR _i$8[ebp]
  0013d	75 09		 jne	 SHORT $LN16@ShowExampl
  0013f	c6 85 47 fe ff
	ff 01		 mov	 BYTE PTR tv144[ebp], 1
  00146	eb 07		 jmp	 SHORT $LN17@ShowExampl
$LN16@ShowExampl:
  00148	c6 85 47 fe ff
	ff 00		 mov	 BYTE PTR tv144[ebp], 0
$LN17@ShowExampl:
  0014f	51		 push	 ecx
  00150	0f 57 c0	 xorps	 xmm0, xmm0
  00153	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00158	51		 push	 ecx
  00159	0f 57 c0	 xorps	 xmm0, xmm0
  0015c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00161	8d 8d 7c fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  00167	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0016c	50		 push	 eax
  0016d	6a 00		 push	 0
  0016f	0f b6 8d 47 fe
	ff ff		 movzx	 ecx, BYTE PTR tv144[ebp]
  00176	51		 push	 ecx
  00177	8d 95 6c ff ff
	ff		 lea	 edx, DWORD PTR _label$7[ebp]
  0017d	52		 push	 edx
  0017e	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  00183	83 c4 10	 add	 esp, 16			; 00000010H
  00186	0f b6 c0	 movzx	 eax, al
  00189	85 c0		 test	 eax, eax
  0018b	74 08		 je	 SHORT $LN9@ShowExampl

; 4112 :                 selected = i;

  0018d	8b 45 f4	 mov	 eax, DWORD PTR _i$8[ebp]
  00190	a3 00 00 00 00	 mov	 DWORD PTR ?selected@?4??ShowExampleAppLayout@@YAXPA_N@Z@4HA, eax
$LN9@ShowExampl:

; 4113 :         }

  00195	e9 74 ff ff ff	 jmp	 $LN2@ShowExampl
$LN3@ShowExampl:

; 4114 :         ImGui::EndChild();

  0019a	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 4115 :         ImGui::SameLine();

  0019f	51		 push	 ecx
  001a0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  001a8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001ad	51		 push	 ecx
  001ae	0f 57 c0	 xorps	 xmm0, xmm0
  001b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001b6	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  001bb	83 c4 08	 add	 esp, 8

; 4116 : 
; 4117 :         // right
; 4118 :         ImGui::BeginGroup();

  001be	e8 00 00 00 00	 call	 ?BeginGroup@ImGui@@YAXXZ ; ImGui::BeginGroup

; 4119 :             ImGui::BeginChild("item view", ImVec2(0, -ImGui::GetFrameHeightWithSpacing())); // Leave room for 1 line below us

  001c3	6a 00		 push	 0
  001c5	6a 00		 push	 0
  001c7	e8 00 00 00 00	 call	 ?GetFrameHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetFrameHeightWithSpacing
  001cc	d9 9d 44 fe ff
	ff		 fstp	 DWORD PTR tv240[ebp]
  001d2	f3 0f 10 85 44
	fe ff ff	 movss	 xmm0, DWORD PTR tv240[ebp]
  001da	0f 57 05 00 00
	00 00		 xorps	 xmm0, DWORD PTR __xmm@80000000800000008000000080000000
  001e1	51		 push	 ecx
  001e2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001e7	51		 push	 ecx
  001e8	0f 57 c0	 xorps	 xmm0, xmm0
  001eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  001f0	8d 8d 6c fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  001f6	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  001fb	50		 push	 eax
  001fc	68 00 00 00 00	 push	 OFFSET ??_C@_09PHNAOHDK@item?5view@
  00201	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  00206	83 c4 10	 add	 esp, 16			; 00000010H

; 4120 :                 ImGui::Text("MyObject: %d", selected);

  00209	a1 00 00 00 00	 mov	 eax, DWORD PTR ?selected@?4??ShowExampleAppLayout@@YAXPA_N@Z@4HA
  0020e	50		 push	 eax
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CMHEFDFC@MyObject?3?5?$CFd@
  00214	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00219	83 c4 08	 add	 esp, 8

; 4121 :                 ImGui::Separator();

  0021c	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 4122 :                 if (ImGui::BeginTabBar("##Tabs", ImGuiTabBarFlags_None))

  00221	6a 00		 push	 0
  00223	68 00 00 00 00	 push	 OFFSET ??_C@_06BMLGLIAO@?$CD?$CDTabs@
  00228	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  0022d	83 c4 08	 add	 esp, 8
  00230	0f b6 c0	 movzx	 eax, al
  00233	85 c0		 test	 eax, eax
  00235	74 59		 je	 SHORT $LN10@ShowExampl

; 4123 :                 {
; 4124 :                     if (ImGui::BeginTabItem("Description"))

  00237	6a 00		 push	 0
  00239	6a 00		 push	 0
  0023b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@OHKMKKDH@Description@
  00240	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  00245	83 c4 0c	 add	 esp, 12			; 0000000cH
  00248	0f b6 c0	 movzx	 eax, al
  0024b	85 c0		 test	 eax, eax
  0024d	74 12		 je	 SHORT $LN11@ShowExampl

; 4125 :                     {
; 4126 :                         ImGui::TextWrapped("Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. ");

  0024f	68 00 00 00 00	 push	 OFFSET ??_C@_0HN@OJKIHMDC@Lorem?5ipsum?5dolor?5sit?5amet?0?5con@
  00254	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00259	83 c4 04	 add	 esp, 4

; 4127 :                         ImGui::EndTabItem();

  0025c	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN11@ShowExampl:

; 4128 :                     }
; 4129 :                     if (ImGui::BeginTabItem("Details"))

  00261	6a 00		 push	 0
  00263	6a 00		 push	 0
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_07NJJEDOBB@Details@
  0026a	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  0026f	83 c4 0c	 add	 esp, 12			; 0000000cH
  00272	0f b6 c0	 movzx	 eax, al
  00275	85 c0		 test	 eax, eax
  00277	74 12		 je	 SHORT $LN12@ShowExampl

; 4130 :                     {
; 4131 :                         ImGui::Text("ID: 0123456789");

  00279	68 00 00 00 00	 push	 OFFSET ??_C@_0P@CCIDAFDC@ID?3?50123456789@
  0027e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00283	83 c4 04	 add	 esp, 4

; 4132 :                         ImGui::EndTabItem();

  00286	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN12@ShowExampl:

; 4133 :                     }
; 4134 :                     ImGui::EndTabBar();

  0028b	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN10@ShowExampl:

; 4135 :                 }
; 4136 :             ImGui::EndChild();

  00290	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 4137 :             if (ImGui::Button("Revert")) {}

  00295	51		 push	 ecx
  00296	0f 57 c0	 xorps	 xmm0, xmm0
  00299	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0029e	51		 push	 ecx
  0029f	0f 57 c0	 xorps	 xmm0, xmm0
  002a2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002a7	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  002ad	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002b2	50		 push	 eax
  002b3	68 00 00 00 00	 push	 OFFSET ??_C@_06OIKMFEGE@Revert@
  002b8	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  002bd	83 c4 08	 add	 esp, 8

; 4138 :             ImGui::SameLine();

  002c0	51		 push	 ecx
  002c1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002c9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ce	51		 push	 ecx
  002cf	0f 57 c0	 xorps	 xmm0, xmm0
  002d2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002d7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  002dc	83 c4 08	 add	 esp, 8

; 4139 :             if (ImGui::Button("Save")) {}

  002df	51		 push	 ecx
  002e0	0f 57 c0	 xorps	 xmm0, xmm0
  002e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e8	51		 push	 ecx
  002e9	0f 57 c0	 xorps	 xmm0, xmm0
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	8d 8d 4c fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  002f7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002fc	50		 push	 eax
  002fd	68 00 00 00 00	 push	 OFFSET ??_C@_04INACKGJP@Save@
  00302	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00307	83 c4 08	 add	 esp, 8

; 4140 :         ImGui::EndGroup();

  0030a	e8 00 00 00 00	 call	 ?EndGroup@ImGui@@YAXXZ	; ImGui::EndGroup
$LN5@ShowExampl:

; 4141 :     }
; 4142 :     ImGui::End();

  0030f	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4143 : }

  00314	52		 push	 edx
  00315	8b cd		 mov	 ecx, ebp
  00317	50		 push	 eax
  00318	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN20@ShowExampl
  0031e	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00323	58		 pop	 eax
  00324	5a		 pop	 edx
  00325	5f		 pop	 edi
  00326	5e		 pop	 esi
  00327	5b		 pop	 ebx
  00328	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0032b	33 cd		 xor	 ecx, ebp
  0032d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00332	81 c4 bc 01 00
	00		 add	 esp, 444		; 000001bcH
  00338	3b ec		 cmp	 ebp, esp
  0033a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0033f	8b e5		 mov	 esp, ebp
  00341	5d		 pop	 ebp
  00342	c3		 ret	 0
  00343	90		 npad	 1
$LN20@ShowExampl:
  00344	01 00 00 00	 DD	 1
  00348	00 00 00 00	 DD	 $LN19@ShowExampl
$LN19@ShowExampl:
  0034c	6c ff ff ff	 DD	 -148			; ffffff6cH
  00350	80 00 00 00	 DD	 128			; 00000080H
  00354	00 00 00 00	 DD	 $LN18@ShowExampl
$LN18@ShowExampl:
  00358	6c		 DB	 108			; 0000006cH
  00359	61		 DB	 97			; 00000061H
  0035a	62		 DB	 98			; 00000062H
  0035b	65		 DB	 101			; 00000065H
  0035c	6c		 DB	 108			; 0000006cH
  0035d	00		 DB	 0
?ShowExampleAppLayout@@YAXPA_N@Z ENDP			; ShowExampleAppLayout
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppLog@@YAXPA_N@Z
_TEXT	SEGMENT
$T2 = -284						; size = 8
_words$3 = -76						; size = 28
_categories$4 = -40					; size = 12
_n$5 = -20						; size = 4
__$EHRec$ = -12						; size = 12
_p_open$ = 8						; size = 4
?ShowExampleAppLog@@YAXPA_N@Z PROC			; ShowExampleAppLog, COMDAT

; 4058 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowExampleAppLog@@YAXPA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec 14 01 00
	00		 sub	 esp, 276		; 00000114H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd e0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-288]
  00020	b9 45 00 00 00	 mov	 ecx, 69			; 00000045H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4059 :     static ExampleAppLog log;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0004c	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00053	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??ShowExampleAppLog@@YAXPA_N@Z@4HA
  0005b	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00061	7e 48		 jle	 SHORT $LN2@ShowExampl
  00063	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppLog@@YAXPA_N@Z@4HA
  00068	e8 00 00 00 00	 call	 __Init_thread_header
  0006d	83 c4 04	 add	 esp, 4
  00070	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppLog@@YAXPA_N@Z@4HA, -1
  00077	75 32		 jne	 SHORT $LN2@ShowExampl
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLog@@YAXPA_N@Z@4UExampleAppLog@@A
  00085	e8 00 00 00 00	 call	 ??0ExampleAppLog@@QAE@XZ ; ExampleAppLog::ExampleAppLog
  0008a	68 00 00 00 00	 push	 OFFSET ??__Flog@?1??ShowExampleAppLog@@YAXPA_N@Z@YAXXZ ; `ShowExampleAppLog'::`2'::`dynamic atexit destructor for 'log''
  0008f	e8 00 00 00 00	 call	 _atexit
  00094	83 c4 04	 add	 esp, 4
  00097	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppLog@@YAXPA_N@Z@4HA
  000a3	e8 00 00 00 00	 call	 __Init_thread_footer
  000a8	83 c4 04	 add	 esp, 4
$LN2@ShowExampl:

; 4060 : 
; 4061 :     // For the demo: add a debug button _BEFORE_ the normal log window contents
; 4062 :     // We take advantage of a rarely used feature: multiple calls to Begin()/End() are appending to the _same_ window.
; 4063 :     // Most of the contents of the window will be added by the log.Draw() call.
; 4064 :     ImGui::SetNextWindowSize(ImVec2(500, 400), ImGuiCond_FirstUseEver);

  000ab	6a 04		 push	 4
  000ad	51		 push	 ecx
  000ae	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43c80000
  000b6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000bb	51		 push	 ecx
  000bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43fa0000
  000c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c9	8d 8d e4 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000cf	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000d4	50		 push	 eax
  000d5	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetNextWindowSize
  000da	83 c4 08	 add	 esp, 8

; 4065 :     ImGui::Begin("Example: Log", p_open);

  000dd	6a 00		 push	 0
  000df	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  000e2	50		 push	 eax
  000e3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LFJACCKD@Example?3?5Log@
  000e8	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  000ed	83 c4 0c	 add	 esp, 12			; 0000000cH

; 4066 :     if (ImGui::SmallButton("[Debug] Add 5 entries"))

  000f0	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@JBNFHIEN@?$FLDebug?$FN?5Add?55?5entries@
  000f5	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  000fa	83 c4 04	 add	 esp, 4
  000fd	0f b6 c0	 movzx	 eax, al
  00100	85 c0		 test	 eax, eax
  00102	0f 84 bb 00 00
	00		 je	 $LN4@ShowExampl

; 4067 :     {
; 4068 :         static int counter = 0;
; 4069 :         for (int n = 0; n < 5; n++)

  00108	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR _n$5[ebp], 0
  0010f	eb 09		 jmp	 SHORT $LN5@ShowExampl
$LN3@ShowExampl:
  00111	8b 45 ec	 mov	 eax, DWORD PTR _n$5[ebp]
  00114	83 c0 01	 add	 eax, 1
  00117	89 45 ec	 mov	 DWORD PTR _n$5[ebp], eax
$LN5@ShowExampl:
  0011a	83 7d ec 05	 cmp	 DWORD PTR _n$5[ebp], 5
  0011e	0f 8d 9f 00 00
	00		 jge	 $LN4@ShowExampl

; 4070 :         {
; 4071 :             const char* categories[3] = { "info", "warn", "error" };

  00124	c7 45 d8 00 00
	00 00		 mov	 DWORD PTR _categories$4[ebp], OFFSET ??_C@_04NIDJFNBE@info@
  0012b	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _categories$4[ebp+4], OFFSET ??_C@_04FNLOFOEM@warn@
  00132	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _categories$4[ebp+8], OFFSET ??_C@_05KKCIMGE@error@

; 4072 :             const char* words[] = { "Bumfuzzled", "Cattywampus", "Snickersnee", "Abibliophobia", "Absquatulate", "Nincompoop", "Pauciloquent" };

  00139	c7 45 b4 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp], OFFSET ??_C@_0L@CIGCKJLI@Bumfuzzled@
  00140	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp+4], OFFSET ??_C@_0M@FKNIJFM@Cattywampus@
  00147	c7 45 bc 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp+8], OFFSET ??_C@_0M@KEIJGBOK@Snickersnee@
  0014e	c7 45 c0 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp+12], OFFSET ??_C@_0O@KKKMMPJN@Abibliophobia@
  00155	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp+16], OFFSET ??_C@_0N@FLCFMCCB@Absquatulate@
  0015c	c7 45 c8 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp+20], OFFSET ??_C@_0L@MIMGHMNH@Nincompoop@
  00163	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _words$3[ebp+24], OFFSET ??_C@_0N@BIHLNJM@Pauciloquent@

; 4073 :             log.AddLog("[%05d] [%s] Hello, current time is %.1f, here's a word: '%s'\n",

  0016a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?counter@?4??ShowExampleAppLog@@YAXPA_N@Z@4HA
  0016f	99		 cdq
  00170	b9 07 00 00 00	 mov	 ecx, 7
  00175	f7 f9		 idiv	 ecx
  00177	8b 54 95 b4	 mov	 edx, DWORD PTR _words$3[ebp+edx*4]
  0017b	52		 push	 edx
  0017c	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  00181	83 ec 08	 sub	 esp, 8
  00184	dd 1c 24	 fstp	 QWORD PTR [esp]
  00187	a1 00 00 00 00	 mov	 eax, DWORD PTR ?counter@?4??ShowExampleAppLog@@YAXPA_N@Z@4HA
  0018c	99		 cdq
  0018d	b9 03 00 00 00	 mov	 ecx, 3
  00192	f7 f9		 idiv	 ecx
  00194	8b 54 95 d8	 mov	 edx, DWORD PTR _categories$4[ebp+edx*4]
  00198	52		 push	 edx
  00199	e8 00 00 00 00	 call	 ?GetFrameCount@ImGui@@YAHXZ ; ImGui::GetFrameCount
  0019e	50		 push	 eax
  0019f	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@NHFCPAIM@?$FL?$CF05d?$FN?5?$FL?$CFs?$FN?5Hello?0?5current?5time@
  001a4	68 00 00 00 00	 push	 OFFSET ?log@?1??ShowExampleAppLog@@YAXPA_N@Z@4UExampleAppLog@@A
  001a9	e8 00 00 00 00	 call	 ?AddLog@ExampleAppLog@@QAAXPBDZZ ; ExampleAppLog::AddLog
  001ae	83 c4 1c	 add	 esp, 28			; 0000001cH

; 4074 :                 ImGui::GetFrameCount(), categories[counter % IM_ARRAYSIZE(categories)], ImGui::GetTime(), words[counter % IM_ARRAYSIZE(words)]);
; 4075 :             counter++;

  001b1	a1 00 00 00 00	 mov	 eax, DWORD PTR ?counter@?4??ShowExampleAppLog@@YAXPA_N@Z@4HA
  001b6	83 c0 01	 add	 eax, 1
  001b9	a3 00 00 00 00	 mov	 DWORD PTR ?counter@?4??ShowExampleAppLog@@YAXPA_N@Z@4HA, eax

; 4076 :         }

  001be	e9 4e ff ff ff	 jmp	 $LN3@ShowExampl
$LN4@ShowExampl:

; 4077 :     }
; 4078 :     ImGui::End();

  001c3	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4079 : 
; 4080 :     // Actually call in the regular Log helper (which will Begin() into the same window as we just did)
; 4081 :     log.Draw("Example: Log", p_open);

  001c8	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  001cb	50		 push	 eax
  001cc	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LFJACCKD@Example?3?5Log@
  001d1	b9 00 00 00 00	 mov	 ecx, OFFSET ?log@?1??ShowExampleAppLog@@YAXPA_N@Z@4UExampleAppLog@@A
  001d6	e8 00 00 00 00	 call	 ?Draw@ExampleAppLog@@QAEXPBDPA_N@Z ; ExampleAppLog::Draw

; 4082 : }

  001db	52		 push	 edx
  001dc	8b cd		 mov	 ecx, ebp
  001de	50		 push	 eax
  001df	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN13@ShowExampl
  001e5	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  001ea	58		 pop	 eax
  001eb	5a		 pop	 edx
  001ec	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  001ef	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  001f6	59		 pop	 ecx
  001f7	5f		 pop	 edi
  001f8	5e		 pop	 esi
  001f9	5b		 pop	 ebx
  001fa	81 c4 20 01 00
	00		 add	 esp, 288		; 00000120H
  00200	3b ec		 cmp	 ebp, esp
  00202	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00207	8b e5		 mov	 esp, ebp
  00209	5d		 pop	 ebp
  0020a	c3		 ret	 0
  0020b	90		 npad	 1
$LN13@ShowExampl:
  0020c	02 00 00 00	 DD	 2
  00210	00 00 00 00	 DD	 $LN12@ShowExampl
$LN12@ShowExampl:
  00214	d8 ff ff ff	 DD	 -40			; ffffffd8H
  00218	0c 00 00 00	 DD	 12			; 0000000cH
  0021c	00 00 00 00	 DD	 $LN9@ShowExampl
  00220	b4 ff ff ff	 DD	 -76			; ffffffb4H
  00224	1c 00 00 00	 DD	 28			; 0000001cH
  00228	00 00 00 00	 DD	 $LN10@ShowExampl
$LN10@ShowExampl:
  0022c	77		 DB	 119			; 00000077H
  0022d	6f		 DB	 111			; 0000006fH
  0022e	72		 DB	 114			; 00000072H
  0022f	64		 DB	 100			; 00000064H
  00230	73		 DB	 115			; 00000073H
  00231	00		 DB	 0
$LN9@ShowExampl:
  00232	63		 DB	 99			; 00000063H
  00233	61		 DB	 97			; 00000061H
  00234	74		 DB	 116			; 00000074H
  00235	65		 DB	 101			; 00000065H
  00236	67		 DB	 103			; 00000067H
  00237	6f		 DB	 111			; 0000006fH
  00238	72		 DB	 114			; 00000072H
  00239	69		 DB	 105			; 00000069H
  0023a	65		 DB	 101			; 00000065H
  0023b	73		 DB	 115			; 00000073H
  0023c	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowExampleAppLog@@YAXPA_N@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppLog@@YAXPA_N@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?ShowExampleAppLog@@YAXPA_N@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a dc fe ff
	ff		 mov	 ecx, DWORD PTR [edx-292]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowExampleAppLog@@YAXPA_N@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowExampleAppLog@@YAXPA_N@Z ENDP			; ShowExampleAppLog
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppConsole@@YAXPA_N@Z
_TEXT	SEGMENT
__$EHRec$ = -12						; size = 12
_p_open$ = 8						; size = 4
?ShowExampleAppConsole@@YAXPA_N@Z PROC			; ShowExampleAppConsole, COMDAT

; 3927 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowExampleAppConsole@@YAXPA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00020	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	50		 push	 eax
  00034	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00037	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003d	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00042	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3928 :     static ExampleAppConsole console;

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0004c	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00053	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00056	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??ShowExampleAppConsole@@YAXPA_N@Z@4HA
  0005b	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00061	7e 48		 jle	 SHORT $LN2@ShowExampl
  00063	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppConsole@@YAXPA_N@Z@4HA
  00068	e8 00 00 00 00	 call	 __Init_thread_header
  0006d	83 c4 04	 add	 esp, 4
  00070	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppConsole@@YAXPA_N@Z@4HA, -1
  00077	75 32		 jne	 SHORT $LN2@ShowExampl
  00079	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00080	b9 00 00 00 00	 mov	 ecx, OFFSET ?console@?1??ShowExampleAppConsole@@YAXPA_N@Z@4UExampleAppConsole@@A
  00085	e8 00 00 00 00	 call	 ??0ExampleAppConsole@@QAE@XZ ; ExampleAppConsole::ExampleAppConsole
  0008a	68 00 00 00 00	 push	 OFFSET ??__Fconsole@?1??ShowExampleAppConsole@@YAXPA_N@Z@YAXXZ ; `ShowExampleAppConsole'::`2'::`dynamic atexit destructor for 'console''
  0008f	e8 00 00 00 00	 call	 _atexit
  00094	83 c4 04	 add	 esp, 4
  00097	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppConsole@@YAXPA_N@Z@4HA
  000a3	e8 00 00 00 00	 call	 __Init_thread_footer
  000a8	83 c4 04	 add	 esp, 4
$LN2@ShowExampl:

; 3929 :     console.Draw("Example: Console", p_open);

  000ab	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  000ae	50		 push	 eax
  000af	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NEACHKPE@Example?3?5Console@
  000b4	b9 00 00 00 00	 mov	 ecx, OFFSET ?console@?1??ShowExampleAppConsole@@YAXPA_N@Z@4UExampleAppConsole@@A
  000b9	e8 00 00 00 00	 call	 ?Draw@ExampleAppConsole@@QAEXPBDPA_N@Z ; ExampleAppConsole::Draw

; 3930 : }

  000be	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  000c1	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  000c8	59		 pop	 ecx
  000c9	5f		 pop	 edi
  000ca	5e		 pop	 esi
  000cb	5b		 pop	 ebx
  000cc	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000d2	3b ec		 cmp	 ebp, esp
  000d4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d9	8b e5		 mov	 esp, ebp
  000db	5d		 pop	 ebp
  000dc	c3		 ret	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowExampleAppConsole@@YAXPA_N@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppConsole@@YAXPA_N@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
  0000c	cc		 int	 3
  0000d	cc		 int	 3
  0000e	cc		 int	 3
  0000f	cc		 int	 3
  00010	cc		 int	 3
__ehhandler$?ShowExampleAppConsole@@YAXPA_N@Z:
  00011	90		 npad	 1
  00012	90		 npad	 1
  00013	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00017	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  0001a	8b 8a 30 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-208]
  00020	33 c8		 xor	 ecx, eax
  00022	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00027	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowExampleAppConsole@@YAXPA_N@Z
  0002c	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowExampleAppConsole@@YAXPA_N@Z ENDP			; ShowExampleAppConsole
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppMainMenuBar@@YAXXZ
_TEXT	SEGMENT
?ShowExampleAppMainMenuBar@@YAXXZ PROC			; ShowExampleAppMainMenuBar, COMDAT

; 3516 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3517 :     if (ImGui::BeginMainMenuBar())

  00028	e8 00 00 00 00	 call	 ?BeginMainMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMainMenuBar
  0002d	0f b6 c0	 movzx	 eax, al
  00030	85 c0		 test	 eax, eax
  00032	0f 84 b3 00 00
	00		 je	 $LN1@ShowExampl

; 3518 :     {
; 3519 :         if (ImGui::BeginMenu("File"))

  00038	6a 01		 push	 1
  0003a	68 00 00 00 00	 push	 OFFSET ??_C@_04PBAHLACE@File@
  0003f	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00044	83 c4 08	 add	 esp, 8
  00047	0f b6 c0	 movzx	 eax, al
  0004a	85 c0		 test	 eax, eax
  0004c	74 0a		 je	 SHORT $LN3@ShowExampl

; 3520 :         {
; 3521 :             ShowExampleMenuFile();

  0004e	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 3522 :             ImGui::EndMenu();

  00053	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN3@ShowExampl:

; 3523 :         }
; 3524 :         if (ImGui::BeginMenu("Edit"))

  00058	6a 01		 push	 1
  0005a	68 00 00 00 00	 push	 OFFSET ??_C@_04BBNPPDNC@Edit@
  0005f	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  00064	83 c4 08	 add	 esp, 8
  00067	0f b6 c0	 movzx	 eax, al
  0006a	85 c0		 test	 eax, eax
  0006c	74 78		 je	 SHORT $LN4@ShowExampl

; 3525 :         {
; 3526 :             if (ImGui::MenuItem("Undo", "CTRL+Z")) {}

  0006e	6a 01		 push	 1
  00070	6a 00		 push	 0
  00072	68 00 00 00 00	 push	 OFFSET ??_C@_06GHDCGCHF@CTRL?$CLZ@
  00077	68 00 00 00 00	 push	 OFFSET ??_C@_04LPGMNMPN@Undo@
  0007c	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00081	83 c4 10	 add	 esp, 16			; 00000010H

; 3527 :             if (ImGui::MenuItem("Redo", "CTRL+Y", false, false)) {}  // Disabled item

  00084	6a 00		 push	 0
  00086	6a 00		 push	 0
  00088	68 00 00 00 00	 push	 OFFSET ??_C@_06EMBPDBLG@CTRL?$CLY@
  0008d	68 00 00 00 00	 push	 OFFSET ??_C@_04NKENIHOM@Redo@
  00092	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00097	83 c4 10	 add	 esp, 16			; 00000010H

; 3528 :             ImGui::Separator();

  0009a	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3529 :             if (ImGui::MenuItem("Cut", "CTRL+X")) {}

  0009f	6a 01		 push	 1
  000a1	6a 00		 push	 0
  000a3	68 00 00 00 00	 push	 OFFSET ??_C@_06FFAEAAPH@CTRL?$CLX@
  000a8	68 00 00 00 00	 push	 OFFSET ??_C@_03EOHDMBHJ@Cut@
  000ad	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000b2	83 c4 10	 add	 esp, 16			; 00000010H

; 3530 :             if (ImGui::MenuItem("Copy", "CTRL+C")) {}

  000b5	6a 01		 push	 1
  000b7	6a 00		 push	 0
  000b9	68 00 00 00 00	 push	 OFFSET ??_C@_06PMDCMLGN@CTRL?$CLC@
  000be	68 00 00 00 00	 push	 OFFSET ??_C@_04OPMHGHMB@Copy@
  000c3	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000c8	83 c4 10	 add	 esp, 16			; 00000010H

; 3531 :             if (ImGui::MenuItem("Paste", "CTRL+V")) {}

  000cb	6a 01		 push	 1
  000cd	6a 00		 push	 0
  000cf	68 00 00 00 00	 push	 OFFSET ??_C@_06MLIHCNHJ@CTRL?$CLV@
  000d4	68 00 00 00 00	 push	 OFFSET ??_C@_05NEBJFIEK@Paste@
  000d9	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  000de	83 c4 10	 add	 esp, 16			; 00000010H

; 3532 :             ImGui::EndMenu();

  000e1	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN4@ShowExampl:

; 3533 :         }
; 3534 :         ImGui::EndMainMenuBar();

  000e6	e8 00 00 00 00	 call	 ?EndMainMenuBar@ImGui@@YAXXZ ; ImGui::EndMainMenuBar
$LN1@ShowExampl:

; 3535 :     }
; 3536 : }

  000eb	5f		 pop	 edi
  000ec	5e		 pop	 esi
  000ed	5b		 pop	 ebx
  000ee	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  000f4	3b ec		 cmp	 ebp, esp
  000f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000fb	8b e5		 mov	 esp, ebp
  000fd	5d		 pop	 ebp
  000fe	c3		 ret	 0
?ShowExampleAppMainMenuBar@@YAXXZ ENDP			; ShowExampleAppMainMenuBar
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowExampleAppDocuments@@YAXPA_N@Z
_TEXT	SEGMENT
tv219 = -500						; size = 4
tv198 = -500						; size = 4
tv128 = -500						; size = 4
tv156 = -497						; size = 1
tv132 = -497						; size = 1
$T2 = -492						; size = 8
$T3 = -476						; size = 8
$T4 = -460						; size = 8
_n$5 = -252						; size = 4
_n$6 = -240						; size = 4
_n$7 = -228						; size = 4
_n$8 = -216						; size = 4
_n$9 = -204						; size = 4
_close_queue_unsaved_documents$10 = -192		; size = 4
_doc$11 = -180						; size = 4
_doc_n$12 = -168					; size = 4
_visible$13 = -153					; size = 1
_tab_flags$14 = -144					; size = 4
_doc$15 = -132						; size = 4
_doc_n$16 = -120					; size = 4
_tab_bar_flags$17 = -108				; size = 4
_doc$18 = -96						; size = 4
_doc_n$19 = -84						; size = 4
_doc_n$20 = -72						; size = 4
_doc$21 = -60						; size = 4
_doc_n$22 = -48						; size = 4
_doc_n$23 = -36						; size = 4
_open_count$24 = -24					; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_p_open$ = 8						; size = 4
?ShowExampleAppDocuments@@YAXPA_N@Z PROC		; ShowExampleAppDocuments, COMDAT

; 4658 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowExampleAppDocuments@@YAXPA_N@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec e8 01 00
	00		 sub	 esp, 488		; 000001e8H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 0c fe ff
	ff		 lea	 edi, DWORD PTR [ebp-500]
  00020	b9 7a 00 00 00	 mov	 ecx, 122		; 0000007aH
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 4659 :     static ExampleAppDocuments app;

  0004a	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0004f	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00056	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00059	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  0005e	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00064	7e 48		 jle	 SHORT $LN2@ShowExampl
  00066	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  0006b	e8 00 00 00 00	 call	 __Init_thread_header
  00070	83 c4 04	 add	 esp, 4
  00073	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA, -1
  0007a	75 32		 jne	 SHORT $LN2@ShowExampl
  0007c	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  00083	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00088	e8 00 00 00 00	 call	 ??0ExampleAppDocuments@@QAE@XZ ; ExampleAppDocuments::ExampleAppDocuments
  0008d	68 00 00 00 00	 push	 OFFSET ??__Fapp@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'app''
  00092	e8 00 00 00 00	 call	 _atexit
  00097	83 c4 04	 add	 esp, 4
  0009a	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  000a1	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  000a6	e8 00 00 00 00	 call	 __Init_thread_footer
  000ab	83 c4 04	 add	 esp, 4
$LN2@ShowExampl:

; 4660 : 
; 4661 :     // Options
; 4662 :     static bool opt_reorderable = true;
; 4663 :     static ImGuiTabBarFlags opt_fitting_flags = ImGuiTabBarFlags_FittingPolicyDefault_;
; 4664 : 
; 4665 :     if (!ImGui::Begin("Example: Documents", p_open, ImGuiWindowFlags_MenuBar))

  000ae	68 00 04 00 00	 push	 1024			; 00000400H
  000b3	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  000b6	50		 push	 eax
  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BKDKPNMJ@Example?3?5Documents@
  000bc	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  000c1	83 c4 0c	 add	 esp, 12			; 0000000cH
  000c4	0f b6 c8	 movzx	 ecx, al
  000c7	85 c9		 test	 ecx, ecx
  000c9	75 0a		 jne	 SHORT $LN37@ShowExampl

; 4666 :     {
; 4667 :         ImGui::End();

  000cb	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 4668 :         return;

  000d0	e9 24 08 00 00	 jmp	 $LN1@ShowExampl
$LN37@ShowExampl:

; 4669 :     }
; 4670 : 
; 4671 :     // Menu
; 4672 :     if (ImGui::BeginMenuBar())

  000d5	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  000da	0f b6 c0	 movzx	 eax, al
  000dd	85 c0		 test	 eax, eax
  000df	0f 84 9c 01 00
	00		 je	 $LN38@ShowExampl

; 4673 :     {
; 4674 :         if (ImGui::BeginMenu("File"))

  000e5	6a 01		 push	 1
  000e7	68 00 00 00 00	 push	 OFFSET ??_C@_04PBAHLACE@File@
  000ec	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  000f1	83 c4 08	 add	 esp, 8
  000f4	0f b6 c0	 movzx	 eax, al
  000f7	85 c0		 test	 eax, eax
  000f9	0f 84 7d 01 00
	00		 je	 $LN39@ShowExampl

; 4675 :         {
; 4676 :             int open_count = 0;

  000ff	c7 45 e8 00 00
	00 00		 mov	 DWORD PTR _open_count$24[ebp], 0

; 4677 :             for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00106	c7 45 dc 00 00
	00 00		 mov	 DWORD PTR _doc_n$23[ebp], 0
  0010d	eb 09		 jmp	 SHORT $LN5@ShowExampl
$LN3@ShowExampl:
  0010f	8b 45 dc	 mov	 eax, DWORD PTR _doc_n$23[ebp]
  00112	83 c0 01	 add	 eax, 1
  00115	89 45 dc	 mov	 DWORD PTR _doc_n$23[ebp], eax
$LN5@ShowExampl:
  00118	8b 45 dc	 mov	 eax, DWORD PTR _doc_n$23[ebp]
  0011b	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00121	7d 3a		 jge	 SHORT $LN4@ShowExampl

; 4678 :                 open_count += app.Documents[doc_n].Open ? 1 : 0;

  00123	8b 45 dc	 mov	 eax, DWORD PTR _doc_n$23[ebp]
  00126	50		 push	 eax
  00127	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  0012c	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  00131	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00135	85 c9		 test	 ecx, ecx
  00137	74 0c		 je	 SHORT $LN68@ShowExampl
  00139	c7 85 0c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv128[ebp], 1
  00143	eb 0a		 jmp	 SHORT $LN69@ShowExampl
$LN68@ShowExampl:
  00145	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv128[ebp], 0
$LN69@ShowExampl:
  0014f	8b 55 e8	 mov	 edx, DWORD PTR _open_count$24[ebp]
  00152	03 95 0c fe ff
	ff		 add	 edx, DWORD PTR tv128[ebp]
  00158	89 55 e8	 mov	 DWORD PTR _open_count$24[ebp], edx
  0015b	eb b2		 jmp	 SHORT $LN3@ShowExampl
$LN4@ShowExampl:

; 4679 : 
; 4680 :             if (ImGui::BeginMenu("Open", open_count < app.Documents.Size))

  0015d	8b 45 e8	 mov	 eax, DWORD PTR _open_count$24[ebp]
  00160	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00166	7d 09		 jge	 SHORT $LN70@ShowExampl
  00168	c6 85 0f fe ff
	ff 01		 mov	 BYTE PTR tv132[ebp], 1
  0016f	eb 07		 jmp	 SHORT $LN71@ShowExampl
$LN70@ShowExampl:
  00171	c6 85 0f fe ff
	ff 00		 mov	 BYTE PTR tv132[ebp], 0
$LN71@ShowExampl:
  00178	0f b6 8d 0f fe
	ff ff		 movzx	 ecx, BYTE PTR tv132[ebp]
  0017f	51		 push	 ecx
  00180	68 00 00 00 00	 push	 OFFSET ??_C@_04DNCDCIAE@Open@
  00185	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  0018a	83 c4 08	 add	 esp, 8
  0018d	0f b6 d0	 movzx	 edx, al
  00190	85 d2		 test	 edx, edx
  00192	74 63		 je	 SHORT $LN40@ShowExampl

; 4681 :             {
; 4682 :                 for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00194	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _doc_n$22[ebp], 0
  0019b	eb 09		 jmp	 SHORT $LN8@ShowExampl
$LN6@ShowExampl:
  0019d	8b 45 d0	 mov	 eax, DWORD PTR _doc_n$22[ebp]
  001a0	83 c0 01	 add	 eax, 1
  001a3	89 45 d0	 mov	 DWORD PTR _doc_n$22[ebp], eax
$LN8@ShowExampl:
  001a6	8b 45 d0	 mov	 eax, DWORD PTR _doc_n$22[ebp]
  001a9	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  001af	7d 41		 jge	 SHORT $LN7@ShowExampl

; 4683 :                 {
; 4684 :                     MyDocument* doc = &app.Documents[doc_n];

  001b1	8b 45 d0	 mov	 eax, DWORD PTR _doc_n$22[ebp]
  001b4	50		 push	 eax
  001b5	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  001ba	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  001bf	89 45 c4	 mov	 DWORD PTR _doc$21[ebp], eax

; 4685 :                     if (!doc->Open)

  001c2	8b 45 c4	 mov	 eax, DWORD PTR _doc$21[ebp]
  001c5	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  001c9	85 c9		 test	 ecx, ecx
  001cb	75 23		 jne	 SHORT $LN42@ShowExampl

; 4686 :                         if (ImGui::MenuItem(doc->Name))

  001cd	6a 01		 push	 1
  001cf	6a 00		 push	 0
  001d1	6a 00		 push	 0
  001d3	8b 45 c4	 mov	 eax, DWORD PTR _doc$21[ebp]
  001d6	8b 08		 mov	 ecx, DWORD PTR [eax]
  001d8	51		 push	 ecx
  001d9	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  001de	83 c4 10	 add	 esp, 16			; 00000010H
  001e1	0f b6 d0	 movzx	 edx, al
  001e4	85 d2		 test	 edx, edx
  001e6	74 08		 je	 SHORT $LN42@ShowExampl

; 4687 :                             doc->DoOpen();

  001e8	8b 4d c4	 mov	 ecx, DWORD PTR _doc$21[ebp]
  001eb	e8 00 00 00 00	 call	 ?DoOpen@MyDocument@@QAEXXZ ; MyDocument::DoOpen
$LN42@ShowExampl:

; 4688 :                 }

  001f0	eb ab		 jmp	 SHORT $LN6@ShowExampl
$LN7@ShowExampl:

; 4689 :                 ImGui::EndMenu();

  001f2	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN40@ShowExampl:

; 4690 :             }
; 4691 :             if (ImGui::MenuItem("Close All Documents", NULL, false, open_count > 0))

  001f7	83 7d e8 00	 cmp	 DWORD PTR _open_count$24[ebp], 0
  001fb	7e 09		 jle	 SHORT $LN72@ShowExampl
  001fd	c6 85 0f fe ff
	ff 01		 mov	 BYTE PTR tv156[ebp], 1
  00204	eb 07		 jmp	 SHORT $LN73@ShowExampl
$LN72@ShowExampl:
  00206	c6 85 0f fe ff
	ff 00		 mov	 BYTE PTR tv156[ebp], 0
$LN73@ShowExampl:
  0020d	0f b6 85 0f fe
	ff ff		 movzx	 eax, BYTE PTR tv156[ebp]
  00214	50		 push	 eax
  00215	6a 00		 push	 0
  00217	6a 00		 push	 0
  00219	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HCFGHAAC@Close?5All?5Documents@
  0021e	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00223	83 c4 10	 add	 esp, 16			; 00000010H
  00226	0f b6 c8	 movzx	 ecx, al
  00229	85 c9		 test	 ecx, ecx
  0022b	74 34		 je	 SHORT $LN10@ShowExampl

; 4692 :                 for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  0022d	c7 45 b8 00 00
	00 00		 mov	 DWORD PTR _doc_n$20[ebp], 0
  00234	eb 09		 jmp	 SHORT $LN11@ShowExampl
$LN9@ShowExampl:
  00236	8b 45 b8	 mov	 eax, DWORD PTR _doc_n$20[ebp]
  00239	83 c0 01	 add	 eax, 1
  0023c	89 45 b8	 mov	 DWORD PTR _doc_n$20[ebp], eax
$LN11@ShowExampl:
  0023f	8b 45 b8	 mov	 eax, DWORD PTR _doc_n$20[ebp]
  00242	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00248	7d 17		 jge	 SHORT $LN10@ShowExampl

; 4693 :                     app.Documents[doc_n].DoQueueClose();

  0024a	8b 45 b8	 mov	 eax, DWORD PTR _doc_n$20[ebp]
  0024d	50		 push	 eax
  0024e	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00253	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  00258	8b c8		 mov	 ecx, eax
  0025a	e8 00 00 00 00	 call	 ?DoQueueClose@MyDocument@@QAEXXZ ; MyDocument::DoQueueClose
  0025f	eb d5		 jmp	 SHORT $LN9@ShowExampl
$LN10@ShowExampl:

; 4694 :             if (ImGui::MenuItem("Exit", "Alt+F4")) {}

  00261	6a 01		 push	 1
  00263	6a 00		 push	 0
  00265	68 00 00 00 00	 push	 OFFSET ??_C@_06ELIFPNNI@Alt?$CLF4@
  0026a	68 00 00 00 00	 push	 OFFSET ??_C@_04LBABLPF@Exit@
  0026f	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0_N1@Z ; ImGui::MenuItem
  00274	83 c4 10	 add	 esp, 16			; 00000010H

; 4695 :             ImGui::EndMenu();

  00277	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN39@ShowExampl:

; 4696 :         }
; 4697 :         ImGui::EndMenuBar();

  0027c	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN38@ShowExampl:

; 4698 :     }
; 4699 : 
; 4700 :     // [Debug] List documents with one checkbox for each
; 4701 :     for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00281	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _doc_n$19[ebp], 0
  00288	eb 09		 jmp	 SHORT $LN14@ShowExampl
$LN12@ShowExampl:
  0028a	8b 45 ac	 mov	 eax, DWORD PTR _doc_n$19[ebp]
  0028d	83 c0 01	 add	 eax, 1
  00290	89 45 ac	 mov	 DWORD PTR _doc_n$19[ebp], eax
$LN14@ShowExampl:
  00293	8b 45 ac	 mov	 eax, DWORD PTR _doc_n$19[ebp]
  00296	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  0029c	7d 7b		 jge	 SHORT $LN13@ShowExampl

; 4702 :     {
; 4703 :         MyDocument* doc = &app.Documents[doc_n];

  0029e	8b 45 ac	 mov	 eax, DWORD PTR _doc_n$19[ebp]
  002a1	50		 push	 eax
  002a2	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  002a7	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  002ac	89 45 a0	 mov	 DWORD PTR _doc$18[ebp], eax

; 4704 :         if (doc_n > 0)

  002af	83 7d ac 00	 cmp	 DWORD PTR _doc_n$19[ebp], 0
  002b3	7e 1f		 jle	 SHORT $LN45@ShowExampl

; 4705 :             ImGui::SameLine();

  002b5	51		 push	 ecx
  002b6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002be	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c3	51		 push	 ecx
  002c4	0f 57 c0	 xorps	 xmm0, xmm0
  002c7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002cc	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  002d1	83 c4 08	 add	 esp, 8
$LN45@ShowExampl:

; 4706 :         ImGui::PushID(doc);

  002d4	8b 45 a0	 mov	 eax, DWORD PTR _doc$18[ebp]
  002d7	50		 push	 eax
  002d8	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBX@Z	; ImGui::PushID
  002dd	83 c4 04	 add	 esp, 4

; 4707 :         if (ImGui::Checkbox(doc->Name, &doc->Open))

  002e0	8b 45 a0	 mov	 eax, DWORD PTR _doc$18[ebp]
  002e3	83 c0 04	 add	 eax, 4
  002e6	50		 push	 eax
  002e7	8b 4d a0	 mov	 ecx, DWORD PTR _doc$18[ebp]
  002ea	8b 11		 mov	 edx, DWORD PTR [ecx]
  002ec	52		 push	 edx
  002ed	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  002f2	83 c4 08	 add	 esp, 8
  002f5	0f b6 c0	 movzx	 eax, al
  002f8	85 c0		 test	 eax, eax
  002fa	74 13		 je	 SHORT $LN47@ShowExampl

; 4708 :             if (!doc->Open)

  002fc	8b 45 a0	 mov	 eax, DWORD PTR _doc$18[ebp]
  002ff	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00303	85 c9		 test	 ecx, ecx
  00305	75 08		 jne	 SHORT $LN47@ShowExampl

; 4709 :                 doc->DoForceClose();

  00307	8b 4d a0	 mov	 ecx, DWORD PTR _doc$18[ebp]
  0030a	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QAEXXZ ; MyDocument::DoForceClose
$LN47@ShowExampl:

; 4710 :         ImGui::PopID();

  0030f	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 4711 :     }

  00314	e9 71 ff ff ff	 jmp	 $LN12@ShowExampl
$LN13@ShowExampl:

; 4712 : 
; 4713 :     ImGui::Separator();

  00319	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 4714 : 
; 4715 :     // Submit Tab Bar and Tabs
; 4716 :     {
; 4717 :         ImGuiTabBarFlags tab_bar_flags = (opt_fitting_flags) | (opt_reorderable ? ImGuiTabBarFlags_Reorderable : 0);

  0031e	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_reorderable@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4_NA
  00325	85 c0		 test	 eax, eax
  00327	74 0c		 je	 SHORT $LN74@ShowExampl
  00329	c7 85 0c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv198[ebp], 1
  00333	eb 0a		 jmp	 SHORT $LN75@ShowExampl
$LN74@ShowExampl:
  00335	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv198[ebp], 0
$LN75@ShowExampl:
  0033f	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?opt_fitting_flags@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  00345	0b 8d 0c fe ff
	ff		 or	 ecx, DWORD PTR tv198[ebp]
  0034b	89 4d 94	 mov	 DWORD PTR _tab_bar_flags$17[ebp], ecx

; 4718 :         if (ImGui::BeginTabBar("##tabs", tab_bar_flags))

  0034e	8b 45 94	 mov	 eax, DWORD PTR _tab_bar_flags$17[ebp]
  00351	50		 push	 eax
  00352	68 00 00 00 00	 push	 OFFSET ??_C@_06NNHHJHAK@?$CD?$CDtabs@
  00357	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  0035c	83 c4 08	 add	 esp, 8
  0035f	0f b6 c8	 movzx	 ecx, al
  00362	85 c9		 test	 ecx, ecx
  00364	0f 84 1e 01 00
	00		 je	 $LN48@ShowExampl

; 4719 :         {
; 4720 :             if (opt_reorderable)

  0036a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?opt_reorderable@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4_NA
  00371	85 c0		 test	 eax, eax
  00373	74 0d		 je	 SHORT $LN49@ShowExampl

; 4721 :                 NotifyOfDocumentsClosedElsewhere(app);

  00375	68 00 00 00 00	 push	 OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  0037a	e8 00 00 00 00	 call	 ?NotifyOfDocumentsClosedElsewhere@@YAXAAUExampleAppDocuments@@@Z ; NotifyOfDocumentsClosedElsewhere
  0037f	83 c4 04	 add	 esp, 4
$LN49@ShowExampl:

; 4722 : 
; 4723 :             // [DEBUG] Stress tests
; 4724 :             //if ((ImGui::GetFrameCount() % 30) == 0) docs[1].Open ^= 1;            // [DEBUG] Automatically show/hide a tab. Test various interactions e.g. dragging with this on.
; 4725 :             //if (ImGui::GetIO().KeyCtrl) ImGui::SetTabItemSelected(docs[1].Name);  // [DEBUG] Test SetTabItemSelected(), probably not very useful as-is anyway..
; 4726 : 
; 4727 :             // Submit Tabs
; 4728 :             for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  00382	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _doc_n$16[ebp], 0
  00389	eb 09		 jmp	 SHORT $LN17@ShowExampl
$LN15@ShowExampl:
  0038b	8b 45 88	 mov	 eax, DWORD PTR _doc_n$16[ebp]
  0038e	83 c0 01	 add	 eax, 1
  00391	89 45 88	 mov	 DWORD PTR _doc_n$16[ebp], eax
$LN17@ShowExampl:
  00394	8b 45 88	 mov	 eax, DWORD PTR _doc_n$16[ebp]
  00397	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  0039d	0f 8d e0 00 00
	00		 jge	 $LN16@ShowExampl

; 4729 :             {
; 4730 :                 MyDocument* doc = &app.Documents[doc_n];

  003a3	8b 45 88	 mov	 eax, DWORD PTR _doc_n$16[ebp]
  003a6	50		 push	 eax
  003a7	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  003ac	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  003b1	89 85 7c ff ff
	ff		 mov	 DWORD PTR _doc$15[ebp], eax

; 4731 :                 if (!doc->Open)

  003b7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  003bd	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  003c1	85 c9		 test	 ecx, ecx
  003c3	75 02		 jne	 SHORT $LN50@ShowExampl

; 4732 :                     continue;

  003c5	eb c4		 jmp	 SHORT $LN15@ShowExampl
$LN50@ShowExampl:

; 4733 : 
; 4734 :                 ImGuiTabItemFlags tab_flags = (doc->Dirty ? ImGuiTabItemFlags_UnsavedDocument : 0);

  003c7	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  003cd	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  003d1	85 c9		 test	 ecx, ecx
  003d3	74 0c		 je	 SHORT $LN76@ShowExampl
  003d5	c7 85 0c fe ff
	ff 01 00 00 00	 mov	 DWORD PTR tv219[ebp], 1
  003df	eb 0a		 jmp	 SHORT $LN77@ShowExampl
$LN76@ShowExampl:
  003e1	c7 85 0c fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv219[ebp], 0
$LN77@ShowExampl:
  003eb	8b 95 0c fe ff
	ff		 mov	 edx, DWORD PTR tv219[ebp]
  003f1	89 95 70 ff ff
	ff		 mov	 DWORD PTR _tab_flags$14[ebp], edx

; 4735 :                 bool visible = ImGui::BeginTabItem(doc->Name, &doc->Open, tab_flags);

  003f7	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _tab_flags$14[ebp]
  003fd	50		 push	 eax
  003fe	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _doc$15[ebp]
  00404	83 c1 04	 add	 ecx, 4
  00407	51		 push	 ecx
  00408	8b 95 7c ff ff
	ff		 mov	 edx, DWORD PTR _doc$15[ebp]
  0040e	8b 02		 mov	 eax, DWORD PTR [edx]
  00410	50		 push	 eax
  00411	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  00416	83 c4 0c	 add	 esp, 12			; 0000000cH
  00419	88 85 67 ff ff
	ff		 mov	 BYTE PTR _visible$13[ebp], al

; 4736 : 
; 4737 :                 // Cancel attempt to close when unsaved add to save queue so we can display a popup.
; 4738 :                 if (!doc->Open && doc->Dirty)

  0041f	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  00425	0f b6 48 04	 movzx	 ecx, BYTE PTR [eax+4]
  00429	85 c9		 test	 ecx, ecx
  0042b	75 23		 jne	 SHORT $LN51@ShowExampl
  0042d	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  00433	0f b6 48 06	 movzx	 ecx, BYTE PTR [eax+6]
  00437	85 c9		 test	 ecx, ecx
  00439	74 15		 je	 SHORT $LN51@ShowExampl

; 4739 :                 {
; 4740 :                     doc->Open = true;

  0043b	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  00441	c6 40 04 01	 mov	 BYTE PTR [eax+4], 1

; 4741 :                     doc->DoQueueClose();

  00445	8b 8d 7c ff ff
	ff		 mov	 ecx, DWORD PTR _doc$15[ebp]
  0044b	e8 00 00 00 00	 call	 ?DoQueueClose@MyDocument@@QAEXXZ ; MyDocument::DoQueueClose
$LN51@ShowExampl:

; 4742 :                 }
; 4743 : 
; 4744 :                 MyDocument::DisplayContextMenu(doc);

  00450	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  00456	50		 push	 eax
  00457	e8 00 00 00 00	 call	 ?DisplayContextMenu@MyDocument@@SAXPAU1@@Z ; MyDocument::DisplayContextMenu
  0045c	83 c4 04	 add	 esp, 4

; 4745 :                 if (visible)

  0045f	0f b6 85 67 ff
	ff ff		 movzx	 eax, BYTE PTR _visible$13[ebp]
  00466	85 c0		 test	 eax, eax
  00468	74 14		 je	 SHORT $LN52@ShowExampl

; 4746 :                 {
; 4747 :                     MyDocument::DisplayContents(doc);

  0046a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _doc$15[ebp]
  00470	50		 push	 eax
  00471	e8 00 00 00 00	 call	 ?DisplayContents@MyDocument@@SAXPAU1@@Z ; MyDocument::DisplayContents
  00476	83 c4 04	 add	 esp, 4

; 4748 :                     ImGui::EndTabItem();

  00479	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN52@ShowExampl:

; 4749 :                 }
; 4750 :             }

  0047e	e9 08 ff ff ff	 jmp	 $LN15@ShowExampl
$LN16@ShowExampl:

; 4751 : 
; 4752 :             ImGui::EndTabBar();

  00483	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN48@ShowExampl:

; 4753 :         }
; 4754 :     }
; 4755 : 
; 4756 :     // Update closing queue
; 4757 :     static ImVector<MyDocument*> close_queue;

  00488	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  0048d	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00494	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00497	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  0049c	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  004a2	7e 48		 jle	 SHORT $LN18@ShowExampl
  004a4	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  004a9	e8 00 00 00 00	 call	 __Init_thread_header
  004ae	83 c4 04	 add	 esp, 4
  004b1	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA, -1
  004b8	75 32		 jne	 SHORT $LN18@ShowExampl
  004ba	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  004c1	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  004c6	e8 00 00 00 00	 call	 ??0?$ImVector@PAUMyDocument@@@@QAE@XZ ; ImVector<MyDocument *>::ImVector<MyDocument *>
  004cb	68 00 00 00 00	 push	 OFFSET ??__Fclose_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@YAXXZ ; `ShowExampleAppDocuments'::`2'::`dynamic atexit destructor for 'close_queue''
  004d0	e8 00 00 00 00	 call	 _atexit
  004d5	83 c4 04	 add	 esp, 4
  004d8	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  004df	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  004e4	e8 00 00 00 00	 call	 __Init_thread_footer
  004e9	83 c4 04	 add	 esp, 4
$LN18@ShowExampl:

; 4758 :     if (close_queue.empty())

  004ec	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  004f1	e8 00 00 00 00	 call	 ?empty@?$ImVector@PAUMyDocument@@@@QBE_NXZ ; ImVector<MyDocument *>::empty
  004f6	0f b6 c0	 movzx	 eax, al
  004f9	85 c0		 test	 eax, eax
  004fb	74 6b		 je	 SHORT $LN20@ShowExampl

; 4759 :     {
; 4760 :         // Close queue is locked once we started a popup
; 4761 :         for (int doc_n = 0; doc_n < app.Documents.Size; doc_n++)

  004fd	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _doc_n$12[ebp], 0
  00507	eb 0f		 jmp	 SHORT $LN21@ShowExampl
$LN19@ShowExampl:
  00509	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _doc_n$12[ebp]
  0050f	83 c0 01	 add	 eax, 1
  00512	89 85 58 ff ff
	ff		 mov	 DWORD PTR _doc_n$12[ebp], eax
$LN21@ShowExampl:
  00518	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _doc_n$12[ebp]
  0051e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00524	7d 42		 jge	 SHORT $LN20@ShowExampl

; 4762 :         {
; 4763 :             MyDocument* doc = &app.Documents[doc_n];

  00526	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _doc_n$12[ebp]
  0052c	50		 push	 eax
  0052d	b9 00 00 00 00	 mov	 ecx, OFFSET ?app@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4UExampleAppDocuments@@A
  00532	e8 00 00 00 00	 call	 ??A?$ImVector@UMyDocument@@@@QAEAAUMyDocument@@H@Z ; ImVector<MyDocument>::operator[]
  00537	89 85 4c ff ff
	ff		 mov	 DWORD PTR _doc$11[ebp], eax

; 4764 :             if (doc->WantClose)

  0053d	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _doc$11[ebp]
  00543	0f b6 48 07	 movzx	 ecx, BYTE PTR [eax+7]
  00547	85 c9		 test	 ecx, ecx
  00549	74 1b		 je	 SHORT $LN54@ShowExampl

; 4765 :             {
; 4766 :                 doc->WantClose = false;

  0054b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _doc$11[ebp]
  00551	c6 40 07 00	 mov	 BYTE PTR [eax+7], 0

; 4767 :                 close_queue.push_back(doc);

  00555	8d 85 4c ff ff
	ff		 lea	 eax, DWORD PTR _doc$11[ebp]
  0055b	50		 push	 eax
  0055c	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  00561	e8 00 00 00 00	 call	 ?push_back@?$ImVector@PAUMyDocument@@@@QAEXABQAUMyDocument@@@Z ; ImVector<MyDocument *>::push_back
$LN54@ShowExampl:

; 4768 :             }
; 4769 :         }

  00566	eb a1		 jmp	 SHORT $LN19@ShowExampl
$LN20@ShowExampl:

; 4770 :     }
; 4771 : 
; 4772 :     // Display closing confirmation UI
; 4773 :     if (!close_queue.empty())

  00568	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  0056d	e8 00 00 00 00	 call	 ?empty@?$ImVector@PAUMyDocument@@@@QBE_NXZ ; ImVector<MyDocument *>::empty
  00572	0f b6 c0	 movzx	 eax, al
  00575	85 c0		 test	 eax, eax
  00577	0f 85 77 03 00
	00		 jne	 $LN60@ShowExampl

; 4774 :     {
; 4775 :         int close_queue_unsaved_documents = 0;

  0057d	c7 85 40 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _close_queue_unsaved_documents$10[ebp], 0

; 4776 :         for (int n = 0; n < close_queue.Size; n++)

  00587	c7 85 34 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$9[ebp], 0
  00591	eb 0f		 jmp	 SHORT $LN24@ShowExampl
$LN22@ShowExampl:
  00593	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _n$9[ebp]
  00599	83 c0 01	 add	 eax, 1
  0059c	89 85 34 ff ff
	ff		 mov	 DWORD PTR _n$9[ebp], eax
$LN24@ShowExampl:
  005a2	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _n$9[ebp]
  005a8	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  005ae	7d 2c		 jge	 SHORT $LN23@ShowExampl

; 4777 :             if (close_queue[n]->Dirty)

  005b0	8b 85 34 ff ff
	ff		 mov	 eax, DWORD PTR _n$9[ebp]
  005b6	50		 push	 eax
  005b7	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  005bc	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  005c1	8b 08		 mov	 ecx, DWORD PTR [eax]
  005c3	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  005c7	85 d2		 test	 edx, edx
  005c9	74 0f		 je	 SHORT $LN56@ShowExampl

; 4778 :                 close_queue_unsaved_documents++;

  005cb	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _close_queue_unsaved_documents$10[ebp]
  005d1	83 c0 01	 add	 eax, 1
  005d4	89 85 40 ff ff
	ff		 mov	 DWORD PTR _close_queue_unsaved_documents$10[ebp], eax
$LN56@ShowExampl:
  005da	eb b7		 jmp	 SHORT $LN22@ShowExampl
$LN23@ShowExampl:

; 4779 : 
; 4780 :         if (close_queue_unsaved_documents == 0)

  005dc	83 bd 40 ff ff
	ff 00		 cmp	 DWORD PTR _close_queue_unsaved_documents$10[ebp], 0
  005e3	75 52		 jne	 SHORT $LN57@ShowExampl

; 4781 :         {
; 4782 :             // Close documents when all are unsaved
; 4783 :             for (int n = 0; n < close_queue.Size; n++)

  005e5	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$8[ebp], 0
  005ef	eb 0f		 jmp	 SHORT $LN27@ShowExampl
$LN25@ShowExampl:
  005f1	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _n$8[ebp]
  005f7	83 c0 01	 add	 eax, 1
  005fa	89 85 28 ff ff
	ff		 mov	 DWORD PTR _n$8[ebp], eax
$LN27@ShowExampl:
  00600	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _n$8[ebp]
  00606	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  0060c	7d 1a		 jge	 SHORT $LN26@ShowExampl

; 4784 :                 close_queue[n]->DoForceClose();

  0060e	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _n$8[ebp]
  00614	50		 push	 eax
  00615	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  0061a	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  0061f	8b 08		 mov	 ecx, DWORD PTR [eax]
  00621	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QAEXXZ ; MyDocument::DoForceClose
  00626	eb c9		 jmp	 SHORT $LN25@ShowExampl
$LN26@ShowExampl:

; 4785 :             close_queue.clear();

  00628	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  0062d	e8 00 00 00 00	 call	 ?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ ; ImVector<MyDocument *>::clear

; 4786 :         }

  00632	e9 bd 02 00 00	 jmp	 $LN60@ShowExampl
$LN57@ShowExampl:

; 4787 :         else
; 4788 :         {
; 4789 :             if (!ImGui::IsPopupOpen("Save?"))

  00637	68 00 00 00 00	 push	 OFFSET ??_C@_05DIODKGEP@Save?$DP@
  0063c	e8 00 00 00 00	 call	 ?IsPopupOpen@ImGui@@YA_NPBD@Z ; ImGui::IsPopupOpen
  00641	83 c4 04	 add	 esp, 4
  00644	0f b6 c0	 movzx	 eax, al
  00647	85 c0		 test	 eax, eax
  00649	75 0d		 jne	 SHORT $LN59@ShowExampl

; 4790 :                 ImGui::OpenPopup("Save?");

  0064b	68 00 00 00 00	 push	 OFFSET ??_C@_05DIODKGEP@Save?$DP@
  00650	e8 00 00 00 00	 call	 ?OpenPopup@ImGui@@YAXPBD@Z ; ImGui::OpenPopup
  00655	83 c4 04	 add	 esp, 4
$LN59@ShowExampl:

; 4791 :             if (ImGui::BeginPopupModal("Save?"))

  00658	6a 00		 push	 0
  0065a	6a 00		 push	 0
  0065c	68 00 00 00 00	 push	 OFFSET ??_C@_05DIODKGEP@Save?$DP@
  00661	e8 00 00 00 00	 call	 ?BeginPopupModal@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginPopupModal
  00666	83 c4 0c	 add	 esp, 12			; 0000000cH
  00669	0f b6 c0	 movzx	 eax, al
  0066c	85 c0		 test	 eax, eax
  0066e	0f 84 80 02 00
	00		 je	 $LN60@ShowExampl

; 4792 :             {
; 4793 :                 ImGui::Text("Save change to the following items?");

  00674	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FLCNDGLJ@Save?5change?5to?5the?5following?5it@
  00679	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0067e	83 c4 04	 add	 esp, 4

; 4794 :                 ImGui::SetNextItemWidth(-1.0f);

  00681	51		 push	 ecx
  00682	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  00694	83 c4 04	 add	 esp, 4

; 4795 :                 if (ImGui::ListBoxHeader("##", close_queue_unsaved_documents, 6))

  00697	6a 06		 push	 6
  00699	8b 85 40 ff ff
	ff		 mov	 eax, DWORD PTR _close_queue_unsaved_documents$10[ebp]
  0069f	50		 push	 eax
  006a0	68 00 00 00 00	 push	 OFFSET ??_C@_02IEBMKJDF@?$CD?$CD@
  006a5	e8 00 00 00 00	 call	 ?ListBoxHeader@ImGui@@YA_NPBDHH@Z ; ImGui::ListBoxHeader
  006aa	83 c4 0c	 add	 esp, 12			; 0000000cH
  006ad	0f b6 c8	 movzx	 ecx, al
  006b0	85 c9		 test	 ecx, ecx
  006b2	74 6e		 je	 SHORT $LN61@ShowExampl

; 4796 :                 {
; 4797 :                     for (int n = 0; n < close_queue.Size; n++)

  006b4	c7 85 1c ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$7[ebp], 0
  006be	eb 0f		 jmp	 SHORT $LN30@ShowExampl
$LN28@ShowExampl:
  006c0	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _n$7[ebp]
  006c6	83 c0 01	 add	 eax, 1
  006c9	89 85 1c ff ff
	ff		 mov	 DWORD PTR _n$7[ebp], eax
$LN30@ShowExampl:
  006cf	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _n$7[ebp]
  006d5	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  006db	7d 40		 jge	 SHORT $LN29@ShowExampl

; 4798 :                         if (close_queue[n]->Dirty)

  006dd	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _n$7[ebp]
  006e3	50		 push	 eax
  006e4	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  006e9	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  006ee	8b 08		 mov	 ecx, DWORD PTR [eax]
  006f0	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  006f4	85 d2		 test	 edx, edx
  006f6	74 23		 je	 SHORT $LN62@ShowExampl

; 4799 :                             ImGui::Text("%s", close_queue[n]->Name);

  006f8	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _n$7[ebp]
  006fe	50		 push	 eax
  006ff	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  00704	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  00709	8b 08		 mov	 ecx, DWORD PTR [eax]
  0070b	8b 11		 mov	 edx, DWORD PTR [ecx]
  0070d	52		 push	 edx
  0070e	68 00 00 00 00	 push	 OFFSET ??_C@_02DKCKIIND@?$CFs@
  00713	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00718	83 c4 08	 add	 esp, 8
$LN62@ShowExampl:
  0071b	eb a3		 jmp	 SHORT $LN28@ShowExampl
$LN29@ShowExampl:

; 4800 :                     ImGui::ListBoxFooter();

  0071d	e8 00 00 00 00	 call	 ?ListBoxFooter@ImGui@@YAXXZ ; ImGui::ListBoxFooter
$LN61@ShowExampl:

; 4801 :                 }
; 4802 : 
; 4803 :                 if (ImGui::Button("Yes", ImVec2(80, 0)))

  00722	51		 push	 ecx
  00723	0f 57 c0	 xorps	 xmm0, xmm0
  00726	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072b	51		 push	 ecx
  0072c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  00734	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00739	8d 8d 34 fe ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  0073f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00744	50		 push	 eax
  00745	68 00 00 00 00	 push	 OFFSET ??_C@_03CCLAEDDF@Yes@
  0074a	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0074f	83 c4 08	 add	 esp, 8
  00752	0f b6 c0	 movzx	 eax, al
  00755	85 c0		 test	 eax, eax
  00757	0f 84 85 00 00
	00		 je	 $LN63@ShowExampl

; 4804 :                 {
; 4805 :                     for (int n = 0; n < close_queue.Size; n++)

  0075d	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$6[ebp], 0
  00767	eb 0f		 jmp	 SHORT $LN33@ShowExampl
$LN31@ShowExampl:
  00769	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _n$6[ebp]
  0076f	83 c0 01	 add	 eax, 1
  00772	89 85 10 ff ff
	ff		 mov	 DWORD PTR _n$6[ebp], eax
$LN33@ShowExampl:
  00778	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _n$6[ebp]
  0077e	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  00784	7d 4d		 jge	 SHORT $LN32@ShowExampl

; 4806 :                     {
; 4807 :                         if (close_queue[n]->Dirty)

  00786	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _n$6[ebp]
  0078c	50		 push	 eax
  0078d	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  00792	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  00797	8b 08		 mov	 ecx, DWORD PTR [eax]
  00799	0f b6 51 06	 movzx	 edx, BYTE PTR [ecx+6]
  0079d	85 d2		 test	 edx, edx
  0079f	74 18		 je	 SHORT $LN64@ShowExampl

; 4808 :                             close_queue[n]->DoSave();

  007a1	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _n$6[ebp]
  007a7	50		 push	 eax
  007a8	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  007ad	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  007b2	8b 08		 mov	 ecx, DWORD PTR [eax]
  007b4	e8 00 00 00 00	 call	 ?DoSave@MyDocument@@QAEXXZ ; MyDocument::DoSave
$LN64@ShowExampl:

; 4809 :                         close_queue[n]->DoForceClose();

  007b9	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _n$6[ebp]
  007bf	50		 push	 eax
  007c0	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  007c5	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  007ca	8b 08		 mov	 ecx, DWORD PTR [eax]
  007cc	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QAEXXZ ; MyDocument::DoForceClose

; 4810 :                     }

  007d1	eb 96		 jmp	 SHORT $LN31@ShowExampl
$LN32@ShowExampl:

; 4811 :                     close_queue.clear();

  007d3	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  007d8	e8 00 00 00 00	 call	 ?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ ; ImVector<MyDocument *>::clear

; 4812 :                     ImGui::CloseCurrentPopup();

  007dd	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN63@ShowExampl:

; 4813 :                 }
; 4814 :                 ImGui::SameLine();

  007e2	51		 push	 ecx
  007e3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007eb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f0	51		 push	 ecx
  007f1	0f 57 c0	 xorps	 xmm0, xmm0
  007f4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f9	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  007fe	83 c4 08	 add	 esp, 8

; 4815 :                 if (ImGui::Button("No", ImVec2(80, 0)))

  00801	51		 push	 ecx
  00802	0f 57 c0	 xorps	 xmm0, xmm0
  00805	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080a	51		 push	 ecx
  0080b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  00813	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00818	8d 8d 24 fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  0081e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00823	50		 push	 eax
  00824	68 00 00 00 00	 push	 OFFSET ??_C@_02JINPPBEP@No@
  00829	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  0082e	83 c4 08	 add	 esp, 8
  00831	0f b6 c0	 movzx	 eax, al
  00834	85 c0		 test	 eax, eax
  00836	74 52		 je	 SHORT $LN65@ShowExampl

; 4816 :                 {
; 4817 :                     for (int n = 0; n < close_queue.Size; n++)

  00838	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$5[ebp], 0
  00842	eb 0f		 jmp	 SHORT $LN36@ShowExampl
$LN34@ShowExampl:
  00844	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _n$5[ebp]
  0084a	83 c0 01	 add	 eax, 1
  0084d	89 85 04 ff ff
	ff		 mov	 DWORD PTR _n$5[ebp], eax
$LN36@ShowExampl:
  00853	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _n$5[ebp]
  00859	3b 05 00 00 00
	00		 cmp	 eax, DWORD PTR ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  0085f	7d 1a		 jge	 SHORT $LN35@ShowExampl

; 4818 :                         close_queue[n]->DoForceClose();

  00861	8b 85 04 ff ff
	ff		 mov	 eax, DWORD PTR _n$5[ebp]
  00867	50		 push	 eax
  00868	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  0086d	e8 00 00 00 00	 call	 ??A?$ImVector@PAUMyDocument@@@@QAEAAPAUMyDocument@@H@Z ; ImVector<MyDocument *>::operator[]
  00872	8b 08		 mov	 ecx, DWORD PTR [eax]
  00874	e8 00 00 00 00	 call	 ?DoForceClose@MyDocument@@QAEXXZ ; MyDocument::DoForceClose
  00879	eb c9		 jmp	 SHORT $LN34@ShowExampl
$LN35@ShowExampl:

; 4819 :                     close_queue.clear();

  0087b	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  00880	e8 00 00 00 00	 call	 ?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ ; ImVector<MyDocument *>::clear

; 4820 :                     ImGui::CloseCurrentPopup();

  00885	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN65@ShowExampl:

; 4821 :                 }
; 4822 :                 ImGui::SameLine();

  0088a	51		 push	 ecx
  0088b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00893	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00898	51		 push	 ecx
  00899	0f 57 c0	 xorps	 xmm0, xmm0
  0089c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008a6	83 c4 08	 add	 esp, 8

; 4823 :                 if (ImGui::Button("Cancel", ImVec2(80, 0)))

  008a9	51		 push	 ecx
  008aa	0f 57 c0	 xorps	 xmm0, xmm0
  008ad	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008b2	51		 push	 ecx
  008b3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42a00000
  008bb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c0	8d 8d 14 fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  008c6	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  008cb	50		 push	 eax
  008cc	68 00 00 00 00	 push	 OFFSET ??_C@_06FMBNCPDL@Cancel@
  008d1	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  008d6	83 c4 08	 add	 esp, 8
  008d9	0f b6 c0	 movzx	 eax, al
  008dc	85 c0		 test	 eax, eax
  008de	74 0f		 je	 SHORT $LN66@ShowExampl

; 4824 :                 {
; 4825 :                     close_queue.clear();

  008e0	b9 00 00 00 00	 mov	 ecx, OFFSET ?close_queue@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4U?$ImVector@PAUMyDocument@@@@A
  008e5	e8 00 00 00 00	 call	 ?clear@?$ImVector@PAUMyDocument@@@@QAEXXZ ; ImVector<MyDocument *>::clear

; 4826 :                     ImGui::CloseCurrentPopup();

  008ea	e8 00 00 00 00	 call	 ?CloseCurrentPopup@ImGui@@YAXXZ ; ImGui::CloseCurrentPopup
$LN66@ShowExampl:

; 4827 :                 }
; 4828 :                 ImGui::EndPopup();

  008ef	e8 00 00 00 00	 call	 ?EndPopup@ImGui@@YAXXZ	; ImGui::EndPopup
$LN60@ShowExampl:

; 4829 :             }
; 4830 :         }
; 4831 :     }
; 4832 : 
; 4833 :     ImGui::End();

  008f4	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowExampl:

; 4834 : }

  008f9	52		 push	 edx
  008fa	8b cd		 mov	 ecx, ebp
  008fc	50		 push	 eax
  008fd	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN83@ShowExampl
  00903	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00908	58		 pop	 eax
  00909	5a		 pop	 edx
  0090a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  0090d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00914	59		 pop	 ecx
  00915	5f		 pop	 edi
  00916	5e		 pop	 esi
  00917	5b		 pop	 ebx
  00918	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  0091b	33 cd		 xor	 ecx, ebp
  0091d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00922	81 c4 f4 01 00
	00		 add	 esp, 500		; 000001f4H
  00928	3b ec		 cmp	 ebp, esp
  0092a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0092f	8b e5		 mov	 esp, ebp
  00931	5d		 pop	 ebp
  00932	c3		 ret	 0
  00933	90		 npad	 1
$LN83@ShowExampl:
  00934	01 00 00 00	 DD	 1
  00938	00 00 00 00	 DD	 $LN82@ShowExampl
$LN82@ShowExampl:
  0093c	4c ff ff ff	 DD	 -180			; ffffff4cH
  00940	04 00 00 00	 DD	 4
  00944	00 00 00 00	 DD	 $LN80@ShowExampl
$LN80@ShowExampl:
  00948	64		 DB	 100			; 00000064H
  00949	6f		 DB	 111			; 0000006fH
  0094a	63		 DB	 99			; 00000063H
  0094b	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowExampleAppDocuments@@YAXPA_N@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?ShowExampleAppDocuments@@YAXPA_N@Z$1:
  0000c	68 00 00 00 00	 push	 OFFSET ?$TSS1@?1??ShowExampleAppDocuments@@YAXPA_N@Z@4HA
  00011	e8 00 00 00 00	 call	 __Init_thread_abort
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?ShowExampleAppDocuments@@YAXPA_N@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 8a 08 fe ff
	ff		 mov	 ecx, DWORD PTR [edx-504]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowExampleAppDocuments@@YAXPA_N@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowExampleAppDocuments@@YAXPA_N@Z ENDP		; ShowExampleAppDocuments
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT _sprintf
_TEXT	SEGMENT
__ArgList$ = -20					; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
_sprintf PROC						; COMDAT

; 1781 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e4 00 00
	00		 sub	 esp, 228		; 000000e4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 1c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-228]
  00012	b9 39 00 00 00	 mov	 ecx, 57			; 00000039H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1782 :         int _Result;
; 1783 :         va_list _ArgList;
; 1784 :         __crt_va_start(_ArgList, _Format);

  00028	8d 45 10	 lea	 eax, DWORD PTR __Format$[ebp+4]
  0002b	89 45 ec	 mov	 DWORD PTR __ArgList$[ebp], eax

; 1785 : 
; 1786 :         #pragma warning(push)
; 1787 :         #pragma warning(disable: 4996) // Deprecation
; 1788 :         _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

  0002e	8b 45 ec	 mov	 eax, DWORD PTR __ArgList$[ebp]
  00031	50		 push	 eax
  00032	6a 00		 push	 0
  00034	8b 4d 0c	 mov	 ecx, DWORD PTR __Format$[ebp]
  00037	51		 push	 ecx
  00038	8b 55 08	 mov	 edx, DWORD PTR __Buffer$[ebp]
  0003b	52		 push	 edx
  0003c	e8 00 00 00 00	 call	 __vsprintf_l
  00041	83 c4 10	 add	 esp, 16			; 00000010H
  00044	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1789 :         #pragma warning(pop)
; 1790 : 
; 1791 :         __crt_va_end(_ArgList);

  00047	c7 45 ec 00 00
	00 00		 mov	 DWORD PTR __ArgList$[ebp], 0

; 1792 :         return _Result;

  0004e	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]

; 1793 :     }

  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 e4 00 00
	00		 add	 esp, 228		; 000000e4H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
_sprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsprintf_l
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__Format$ = 12						; size = 4
__Locale$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsprintf_l PROC					; COMDAT

; 1459 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1460 :         #pragma warning(push)
; 1461 :         #pragma warning(disable: 4996) // Deprecation
; 1462 :         return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	8b 4d 10	 mov	 ecx, DWORD PTR __Locale$[ebp]
  0002f	51		 push	 ecx
  00030	8b 55 0c	 mov	 edx, DWORD PTR __Format$[ebp]
  00033	52		 push	 edx
  00034	6a ff		 push	 -1
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1463 :         #pragma warning(pop)
; 1464 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf
_TEXT	SEGMENT
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__ArgList$ = 20						; size = 4
__vsnprintf PROC					; COMDAT

; 1409 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1410 :         #pragma warning(push)
; 1411 :         #pragma warning(disable: 4996) // Deprecation
; 1412 :         return _vsnprintf_l(_Buffer, _BufferCount, _Format, NULL, _ArgList);

  00028	8b 45 14	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002b	50		 push	 eax
  0002c	6a 00		 push	 0
  0002e	8b 4d 10	 mov	 ecx, DWORD PTR __Format$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 0c	 mov	 edx, DWORD PTR __BufferCount$[ebp]
  00035	52		 push	 edx
  00036	8b 45 08	 mov	 eax, DWORD PTR __Buffer$[ebp]
  00039	50		 push	 eax
  0003a	e8 00 00 00 00	 call	 __vsnprintf_l
  0003f	83 c4 14	 add	 esp, 20			; 00000014H

; 1413 :         #pragma warning(pop)
; 1414 :     }

  00042	5f		 pop	 edi
  00043	5e		 pop	 esi
  00044	5b		 pop	 ebx
  00045	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  0004b	3b ec		 cmp	 ebp, esp
  0004d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00052	8b e5		 mov	 esp, ebp
  00054	5d		 pop	 ebp
  00055	c3		 ret	 0
__vsnprintf ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\stdio.h
;	COMDAT __vsnprintf_l
_TEXT	SEGMENT
tv74 = -208						; size = 4
__Result$ = -8						; size = 4
__Buffer$ = 8						; size = 4
__BufferCount$ = 12					; size = 4
__Format$ = 16						; size = 4
__Locale$ = 20						; size = 4
__ArgList$ = 24						; size = 4
__vsnprintf_l PROC					; COMDAT

; 1389 :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00012	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __9FF75F13_stdio@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 1390 :         int const _Result = __stdio_common_vsprintf(

  00028	8b f4		 mov	 esi, esp
  0002a	8b 45 18	 mov	 eax, DWORD PTR __ArgList$[ebp]
  0002d	50		 push	 eax
  0002e	8b 4d 14	 mov	 ecx, DWORD PTR __Locale$[ebp]
  00031	51		 push	 ecx
  00032	8b 55 10	 mov	 edx, DWORD PTR __Format$[ebp]
  00035	52		 push	 edx
  00036	8b 45 0c	 mov	 eax, DWORD PTR __BufferCount$[ebp]
  00039	50		 push	 eax
  0003a	8b 4d 08	 mov	 ecx, DWORD PTR __Buffer$[ebp]
  0003d	51		 push	 ecx
  0003e	e8 00 00 00 00	 call	 ___local_stdio_printf_options
  00043	8b 10		 mov	 edx, DWORD PTR [eax]
  00045	83 ca 01	 or	 edx, 1
  00048	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  0004b	50		 push	 eax
  0004c	52		 push	 edx
  0004d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp____stdio_common_vsprintf
  00053	83 c4 1c	 add	 esp, 28			; 0000001cH
  00056	3b f4		 cmp	 esi, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	89 45 f8	 mov	 DWORD PTR __Result$[ebp], eax

; 1391 :             _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1392 :             _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1393 : 
; 1394 :         return _Result < 0 ? -1 : _Result;

  00060	83 7d f8 00	 cmp	 DWORD PTR __Result$[ebp], 0
  00064	7d 0c		 jge	 SHORT $LN3@vsnprintf_
  00066	c7 85 30 ff ff
	ff ff ff ff ff	 mov	 DWORD PTR tv74[ebp], -1
  00070	eb 09		 jmp	 SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
  00072	8b 45 f8	 mov	 eax, DWORD PTR __Result$[ebp]
  00075	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv74[ebp], eax
$LN4@vsnprintf_:
  0007b	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv74[ebp]

; 1395 :     }

  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
__vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_stdio_config.h
;	COMDAT ___local_stdio_printf_options
_TEXT	SEGMENT
___local_stdio_printf_options PROC			; COMDAT

; 86   :     {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c0 00 00
	00		 sub	 esp, 192		; 000000c0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 40 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-192]
  00012	b9 30 00 00 00	 mov	 ecx, 48			; 00000030H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __1850469A_corecrt_stdio_config@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 87   :         static unsigned __int64 _OptionsStorage;
; 88   :         return &_OptionsStorage;

  00028	b8 00 00 00 00	 mov	 eax, OFFSET ?_OptionsStorage@?1??__local_stdio_printf_options@@9@4_KA ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 89   :     }

  0002d	5f		 pop	 edi
  0002e	5e		 pop	 esi
  0002f	5b		 pop	 ebx
  00030	81 c4 c0 00 00
	00		 add	 esp, 192		; 000000c0H
  00036	3b ec		 cmp	 ebp, esp
  00038	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003d	8b e5		 mov	 esp, ebp
  0003f	5d		 pop	 ebp
  00040	c3		 ret	 0
___local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sqrtf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sqrtf	PROC						; COMDAT

; 759  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E2865EBA_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 760  :             return (float)sqrt(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sqrt
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 761  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sqrtf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _sinf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_sinf	PROC						; COMDAT

; 749  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E2865EBA_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 750  :             return (float)sin(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _sin
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 751  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_sinf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _fmodf
_TEXT	SEGMENT
tv75 = -196						; size = 4
__X$ = 8						; size = 4
__Y$ = 12						; size = 4
_fmodf	PROC						; COMDAT

; 690  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E2865EBA_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 691  :             return (float)fmod(_X, _Y);

  00028	f3 0f 5a 45 0c	 cvtss2sd xmm0, DWORD PTR __Y$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0003a	83 ec 08	 sub	 esp, 8
  0003d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00042	e8 00 00 00 00	 call	 _fmod
  00047	83 c4 10	 add	 esp, 16			; 00000010H
  0004a	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv75[ebp]
  00050	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv75[ebp]

; 692  :         }

  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
_fmodf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Windows Kits\10\Include\10.0.18362.0\ucrt\corecrt_math.h
;	COMDAT _cosf
_TEXT	SEGMENT
tv72 = -196						; size = 4
__X$ = 8						; size = 4
_cosf	PROC						; COMDAT

; 648  :         {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __E2865EBA_corecrt_math@h
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 649  :             return (float)cos(_X);

  00028	f3 0f 5a 45 08	 cvtss2sd xmm0, DWORD PTR __X$[ebp]
  0002d	83 ec 08	 sub	 esp, 8
  00030	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00035	e8 00 00 00 00	 call	 _cos
  0003a	83 c4 08	 add	 esp, 8
  0003d	d9 9d 3c ff ff
	ff		 fstp	 DWORD PTR tv72[ebp]
  00043	d9 85 3c ff ff
	ff		 fld	 DWORD PTR tv72[ebp]

; 650  :         }

  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c3		 ret	 0
_cosf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?GetDebugName@ImFont@@QBEPBDXZ
_TEXT	SEGMENT
tv68 = -208						; size = 4
_this$ = -8						; size = 4
?GetDebugName@ImFont@@QBEPBDXZ PROC			; ImFont::GetDebugName, COMDAT
; _this$ = ecx

; 2228 :     const char*                 GetDebugName() const                { return ConfigData ? ConfigData->Name : "<unknown>"; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  00034	74 11		 je	 SHORT $LN3@GetDebugNa
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 51 3c	 mov	 edx, DWORD PTR [ecx+60]
  0003c	83 c2 4a	 add	 edx, 74			; 0000004aH
  0003f	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv68[ebp], edx
  00045	eb 0a		 jmp	 SHORT $LN4@GetDebugNa
$LN3@GetDebugNa:
  00047	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv68[ebp], OFFSET ??_C@_09EEKGDCPH@?$DMunknown?$DO@
$LN4@GetDebugNa:
  00051	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv68[ebp]
  00057	5f		 pop	 edi
  00058	5e		 pop	 esi
  00059	5b		 pop	 ebx
  0005a	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00060	3b ec		 cmp	 ebp, esp
  00062	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00067	8b e5		 mov	 esp, ebp
  00069	5d		 pop	 ebp
  0006a	c3		 ret	 0
?GetDebugName@ImFont@@QBEPBDXZ ENDP			; ImFont::GetDebugName
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@PAUImFont@@@@QAEAAPAUImFont@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@PAUImFont@@@@QAEAAPAUImFont@@H@Z PROC	; ImVector<ImFont *>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 91	 lea	 eax, DWORD PTR [ecx+edx*4]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@PAUImFont@@@@QAEAAPAUImFont@@H@Z ENDP	; ImVector<ImFont *>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?pop_back@?$ImVector@UImVec2@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?pop_back@?$ImVector@UImVec2@@@@QAEXXZ PROC		; ImVector<ImVec2>::pop_back, COMDAT
; _this$ = ecx

; 1294 :     inline void         pop_back()                          { IM_ASSERT(Size > 0); Size--; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	7f 21		 jg	 SHORT $LN3@pop_back
  00035	8b f4		 mov	 esi, esp
  00037	68 0e 05 00 00	 push	 1294			; 0000050eH
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@pop_back:
  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	83 e9 01	 sub	 ecx, 1
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	89 0a		 mov	 DWORD PTR [edx], ecx
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c3		 ret	 0
?pop_back@?$ImVector@UImVec2@@@@QAEXXZ ENDP		; ImVector<ImVec2>::pop_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@UImVec2@@@@QAEXABUImVec2@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@UImVec2@@@@QAEXABUImVec2@@@Z PROC	; ImVector<ImVec2>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@UImVec2@@@@QBEHH@Z ; ImVector<ImVec2>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@UImVec2@@@@QAEXH@Z ; ImVector<ImVec2>::reserve
$LN2@push_back:
  00054	6a 08		 push	 8
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 11		 mov	 edx, DWORD PTR [ecx]
  0005f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00062	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00065	8d 14 d1	 lea	 edx, DWORD PTR [ecx+edx*8]
  00068	52		 push	 edx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 08		 mov	 ecx, DWORD PTR [eax]
  00076	83 c1 01	 add	 ecx, 1
  00079	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007c	89 0a		 mov	 DWORD PTR [edx], ecx
  0007e	5f		 pop	 edi
  0007f	5e		 pop	 esi
  00080	5b		 pop	 ebx
  00081	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00087	3b ec		 cmp	 ebp, esp
  00089	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008e	8b e5		 mov	 esp, ebp
  00090	5d		 pop	 ebp
  00091	c2 04 00	 ret	 4
?push_back@?$ImVector@UImVec2@@@@QAEXABUImVec2@@@Z ENDP	; ImVector<ImVec2>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@UImVec2@@@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@UImVec2@@@@QAEXH@Z PROC		; ImVector<ImVec2>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 58		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  0003d	c1 e0 03	 shl	 eax, 3
  00040	50		 push	 eax
  00041	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00046	83 c4 04	 add	 esp, 4
  00049	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  0004c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 2b		 je	 SHORT $LN3@reserve
  00055	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005a	c1 e1 03	 shl	 ecx, 3
  0005d	51		 push	 ecx
  0005e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00061	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00064	50		 push	 eax
  00065	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00068	51		 push	 ecx
  00069	e8 00 00 00 00	 call	 _memcpy
  0006e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00071	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00074	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00077	51		 push	 ecx
  00078	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  0007d	83 c4 04	 add	 esp, 4
$LN3@reserve:
  00080	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00083	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00086	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00089	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008c	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0008f	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  00092	5f		 pop	 edi
  00093	5e		 pop	 esi
  00094	5b		 pop	 ebx
  00095	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0009b	3b ec		 cmp	 ebp, esp
  0009d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a2	8b e5		 mov	 esp, ebp
  000a4	5d		 pop	 ebp
  000a5	c2 04 00	 ret	 4
?reserve@?$ImVector@UImVec2@@@@QAEXH@Z ENDP		; ImVector<ImVec2>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@UImVec2@@@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@UImVec2@@@@QBEHH@Z PROC	; ImVector<ImVec2>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@UImVec2@@@@QBEHH@Z ENDP	; ImVector<ImVec2>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@UImVec2@@@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@?$ImVector@UImVec2@@@@QAEXXZ PROC		; ImVector<ImVec2>::clear, COMDAT
; _this$ = ecx

; 1275 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 2c		 je	 SHORT $LN1@clear
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00055	83 c4 04	 add	 esp, 4
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@clear:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?clear@?$ImVector@UImVec2@@@@QAEXXZ ENDP		; ImVector<ImVec2>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z PROC		; ImVector<ImVec2>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 d1	 lea	 eax, DWORD PTR [ecx+edx*8]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@UImVec2@@@@QAEAAUImVec2@@H@Z ENDP		; ImVector<ImVec2>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@UImVec2@@@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?empty@?$ImVector@UImVec2@@@@QBE_NXZ PROC		; ImVector<ImVec2>::empty, COMDAT
; _this$ = ecx

; 1268 :     inline bool         empty() const                       { return Size == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	75 0c		 jne	 SHORT $LN3@empty
  00035	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@empty:
  0004b	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?empty@?$ImVector@UImVec2@@@@QBE_NXZ ENDP		; ImVector<ImVec2>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImVec2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@UImVec2@@@@QAE@XZ PROC			; ImVector<ImVec2>::~ImVector<ImVec2>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@UImVec2@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@UImVec2@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@UImVec2@@@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@UImVec2@@@@QAE@XZ ENDP			; ImVector<ImVec2>::~ImVector<ImVec2>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@UImVec2@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@UImVec2@@@@QAE@XZ PROC			; ImVector<ImVec2>::ImVector<ImVec2>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@UImVec2@@@@QAE@XZ ENDP			; ImVector<ImVec2>::ImVector<ImVec2>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?HSV@ImColor@@SA?AU1@MMMM@Z
_TEXT	SEGMENT
_b$ = -36						; size = 4
_g$ = -24						; size = 4
_r$ = -12						; size = 4
__$ArrayPad$ = -4					; size = 4
___$ReturnUdt$ = 8					; size = 4
_h$ = 12						; size = 4
_s$ = 16						; size = 4
_v$ = 20						; size = 4
_a$ = 24						; size = 4
?HSV@ImColor@@SA?AU1@MMMM@Z PROC			; ImColor::HSV, COMDAT

; 1777 :     static ImColor HSV(float h, float s, float v, float a = 1.0f)   { float r,g,b; ImGui::ColorConvertHSVtoRGB(h, s, v, r, g, b); return ImColor(r,g,b,a); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec e8 00 00
	00		 sub	 esp, 232		; 000000e8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 18 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-232]
  00012	b9 3a 00 00 00	 mov	 ecx, 58			; 0000003aH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  00032	8d 45 dc	 lea	 eax, DWORD PTR _b$[ebp]
  00035	50		 push	 eax
  00036	8d 4d e8	 lea	 ecx, DWORD PTR _g$[ebp]
  00039	51		 push	 ecx
  0003a	8d 55 f4	 lea	 edx, DWORD PTR _r$[ebp]
  0003d	52		 push	 edx
  0003e	51		 push	 ecx
  0003f	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _v$[ebp]
  00044	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00049	51		 push	 ecx
  0004a	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _s$[ebp]
  0004f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00054	51		 push	 ecx
  00055	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _h$[ebp]
  0005a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0005f	e8 00 00 00 00	 call	 ?ColorConvertHSVtoRGB@ImGui@@YAXMMMAAM00@Z ; ImGui::ColorConvertHSVtoRGB
  00064	83 c4 18	 add	 esp, 24			; 00000018H
  00067	51		 push	 ecx
  00068	f3 0f 10 45 18	 movss	 xmm0, DWORD PTR _a$[ebp]
  0006d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00072	51		 push	 ecx
  00073	f3 0f 10 45 dc	 movss	 xmm0, DWORD PTR _b$[ebp]
  00078	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0007d	51		 push	 ecx
  0007e	f3 0f 10 45 e8	 movss	 xmm0, DWORD PTR _g$[ebp]
  00083	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00088	51		 push	 ecx
  00089	f3 0f 10 45 f4	 movss	 xmm0, DWORD PTR _r$[ebp]
  0008e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00093	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00096	e8 00 00 00 00	 call	 ??0ImColor@@QAE@MMMM@Z	; ImColor::ImColor
  0009b	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0009e	52		 push	 edx
  0009f	8b cd		 mov	 ecx, ebp
  000a1	50		 push	 eax
  000a2	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN7@HSV
  000a8	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  000ad	58		 pop	 eax
  000ae	5a		 pop	 edx
  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  000b5	33 cd		 xor	 ecx, ebp
  000b7	e8 00 00 00 00	 call	 @__security_check_cookie@4
  000bc	81 c4 e8 00 00
	00		 add	 esp, 232		; 000000e8H
  000c2	3b ec		 cmp	 ebp, esp
  000c4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c9	8b e5		 mov	 esp, ebp
  000cb	5d		 pop	 ebp
  000cc	c3		 ret	 0
  000cd	0f 1f 00	 npad	 3
$LN7@HSV:
  000d0	03 00 00 00	 DD	 3
  000d4	00 00 00 00	 DD	 $LN6@HSV
$LN6@HSV:
  000d8	f4 ff ff ff	 DD	 -12			; fffffff4H
  000dc	04 00 00 00	 DD	 4
  000e0	00 00 00 00	 DD	 $LN3@HSV
  000e4	e8 ff ff ff	 DD	 -24			; ffffffe8H
  000e8	04 00 00 00	 DD	 4
  000ec	00 00 00 00	 DD	 $LN4@HSV
  000f0	dc ff ff ff	 DD	 -36			; ffffffdcH
  000f4	04 00 00 00	 DD	 4
  000f8	00 00 00 00	 DD	 $LN5@HSV
$LN5@HSV:
  000fc	62		 DB	 98			; 00000062H
  000fd	00		 DB	 0
$LN4@HSV:
  000fe	67		 DB	 103			; 00000067H
  000ff	00		 DB	 0
$LN3@HSV:
  00100	72		 DB	 114			; 00000072H
  00101	00		 DB	 0
?HSV@ImColor@@SA?AU1@MMMM@Z ENDP			; ImColor::HSV
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??BImColor@@QBE?AUImVec4@@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
___$ReturnUdt$ = 8					; size = 4
??BImColor@@QBE?AUImVec4@@XZ PROC			; ImColor::operator ImVec4, COMDAT
; _this$ = ecx

; 1773 :     inline operator ImVec4() const                                  { return Value; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR ___$ReturnUdt$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	89 11		 mov	 DWORD PTR [ecx], edx
  00037	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  0003a	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  0003d	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00040	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  00043	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  00046	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00049	8b 45 08	 mov	 eax, DWORD PTR ___$ReturnUdt$[ebp]
  0004c	5f		 pop	 edi
  0004d	5e		 pop	 esi
  0004e	5b		 pop	 ebx
  0004f	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00055	3b ec		 cmp	 ebp, esp
  00057	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005c	8b e5		 mov	 esp, ebp
  0005e	5d		 pop	 ebp
  0005f	c2 04 00	 ret	 4
??BImColor@@QBE?AUImVec4@@XZ ENDP			; ImColor::operator ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??BImColor@@QBEIXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??BImColor@@QBEIXZ PROC					; ImColor::operator unsigned int, COMDAT
; _this$ = ecx

; 1772 :     inline operator ImU32() const                                   { return ImGui::ColorConvertFloat4ToU32(Value); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	50		 push	 eax
  00031	e8 00 00 00 00	 call	 ?ColorConvertFloat4ToU32@ImGui@@YAIABUImVec4@@@Z ; ImGui::ColorConvertFloat4ToU32
  00036	83 c4 04	 add	 esp, 4
  00039	5f		 pop	 edi
  0003a	5e		 pop	 esi
  0003b	5b		 pop	 ebx
  0003c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00042	3b ec		 cmp	 ebp, esp
  00044	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00049	8b e5		 mov	 esp, ebp
  0004b	5d		 pop	 ebp
  0004c	c3		 ret	 0
??BImColor@@QBEIXZ ENDP					; ImColor::operator unsigned int
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImColor@@QAE@ABUImVec4@@@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_col$ = 8						; size = 4
??0ImColor@@QAE@ABUImVec4@@@Z PROC			; ImColor::ImColor, COMDAT
; _this$ = ecx

; 1771 :     ImColor(const ImVec4& col)                                      { Value = col; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@XZ	; ImVec4::ImVec4
  00035	8b 45 08	 mov	 eax, DWORD PTR _col$[ebp]
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	8b 10		 mov	 edx, DWORD PTR [eax]
  0003d	89 11		 mov	 DWORD PTR [ecx], edx
  0003f	8b 50 04	 mov	 edx, DWORD PTR [eax+4]
  00042	89 51 04	 mov	 DWORD PTR [ecx+4], edx
  00045	8b 50 08	 mov	 edx, DWORD PTR [eax+8]
  00048	89 51 08	 mov	 DWORD PTR [ecx+8], edx
  0004b	8b 40 0c	 mov	 eax, DWORD PTR [eax+12]
  0004e	89 41 0c	 mov	 DWORD PTR [ecx+12], eax
  00051	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00054	5f		 pop	 edi
  00055	5e		 pop	 esi
  00056	5b		 pop	 ebx
  00057	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005d	3b ec		 cmp	 ebp, esp
  0005f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00064	8b e5		 mov	 esp, ebp
  00066	5d		 pop	 ebp
  00067	c2 04 00	 ret	 4
??0ImColor@@QAE@ABUImVec4@@@Z ENDP			; ImColor::ImColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImColor@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_r$ = 8							; size = 4
_g$ = 12						; size = 4
_b$ = 16						; size = 4
_a$ = 20						; size = 4
??0ImColor@@QAE@MMMM@Z PROC				; ImColor::ImColor, COMDAT
; _this$ = ecx

; 1770 :     ImColor(float r, float g, float b, float a = 1.0f)              { Value.x = r; Value.y = g; Value.z = b; Value.w = a; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@XZ	; ImVec4::ImVec4
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR _r$[ebp]
  0003d	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00041	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00044	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _g$[ebp]
  00049	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR _b$[ebp]
  00056	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  0005b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005e	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR _a$[ebp]
  00063	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0
  00068	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006b	5f		 pop	 edi
  0006c	5e		 pop	 esi
  0006d	5b		 pop	 ebx
  0006e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00074	3b ec		 cmp	 ebp, esp
  00076	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007b	8b e5		 mov	 esp, ebp
  0007d	5d		 pop	 ebp
  0007e	c2 10 00	 ret	 16			; 00000010H
??0ImColor@@QAE@MMMM@Z ENDP				; ImColor::ImColor
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1ImGuiListClipper@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1ImGuiListClipper@@QAE@XZ PROC			; ImGuiListClipper::~ImGuiListClipper, COMDAT
; _this$ = ecx

; 1733 :     ~ImGuiListClipper()                                                 { IM_ASSERT(ItemsCount == -1); }      // Assert if user forgot to call End() or Step() until false.

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1ImGuiListClipper@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 ff	 cmp	 DWORD PTR [eax+8], -1
  00053	74 21		 je	 SHORT $LN2@ImGuiListC
  00055	8b f4		 mov	 esi, esp
  00057	68 c5 06 00 00	 push	 1733			; 000006c5H
  0005c	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00061	68 00 00 00 00	 push	 OFFSET ??_C@_1CC@IHACEFEE@?$AAI?$AAt?$AAe?$AAm?$AAs?$AAC?$AAo?$AAu?$AAn?$AAt?$AA?5?$AA?$DN?$AA?$DN?$AA?5?$AA?9@
  00066	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0006c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006f	3b f4		 cmp	 esi, esp
  00071	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN2@ImGuiListC:
  00076	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00079	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  00080	59		 pop	 ecx
  00081	5f		 pop	 edi
  00082	5e		 pop	 esi
  00083	5b		 pop	 ebx
  00084	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  0008a	3b ec		 cmp	 ebp, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00091	8b e5		 mov	 esp, ebp
  00093	5d		 pop	 ebp
  00094	c3		 ret	 0
  00095	cc		 int	 3
  00096	cc		 int	 3
  00097	cc		 int	 3
  00098	cc		 int	 3
  00099	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1ImGuiListClipper@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1ImGuiListClipper@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1ImGuiListClipper@@QAE@XZ ENDP			; ImGuiListClipper::~ImGuiListClipper
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImGuiListClipper@@QAE@HM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_items_count$ = 8					; size = 4
_items_height$ = 12					; size = 4
??0ImGuiListClipper@@QAE@HM@Z PROC			; ImGuiListClipper::ImGuiListClipper, COMDAT
; _this$ = ecx

; 1732 :     ImGuiListClipper(int items_count = -1, float items_height = -1.0f)  { Begin(items_count, items_height); } // NB: Begin() initialize every fields (as we allow user to call Begin/End multiple times on a same instance if they want).

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	51		 push	 ecx
  0002e	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR _items_height$[ebp]
  00033	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00038	8b 45 08	 mov	 eax, DWORD PTR _items_count$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?Begin@ImGuiListClipper@@QAEXHM@Z ; ImGuiListClipper::Begin
  00044	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00047	5f		 pop	 edi
  00048	5e		 pop	 esi
  00049	5b		 pop	 ebx
  0004a	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00050	3b ec		 cmp	 ebp, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00057	8b e5		 mov	 esp, ebp
  00059	5d		 pop	 ebp
  0005a	c2 08 00	 ret	 8
??0ImGuiListClipper@@QAE@HM@Z ENDP			; ImGuiListClipper::ImGuiListClipper
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTextBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ImGuiTextBuffer@@QAE@XZ PROC				; ImGuiTextBuffer::~ImGuiTextBuffer, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	e8 00 00 00 00	 call	 ??1?$ImVector@D@@QAE@XZ	; ImVector<char>::~ImVector<char>
  0002b	5f		 pop	 edi
  0002c	5e		 pop	 esi
  0002d	5b		 pop	 ebx
  0002e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00034	3b ec		 cmp	 ebp, esp
  00036	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0003b	8b e5		 mov	 esp, ebp
  0003d	5d		 pop	 ebp
  0003e	c3		 ret	 0
??1ImGuiTextBuffer@@QAE@XZ ENDP				; ImGuiTextBuffer::~ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?clear@ImGuiTextBuffer@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@ImGuiTextBuffer@@QAEXXZ PROC			; ImGuiTextBuffer::clear, COMDAT
; _this$ = ecx

; 1651 :     void                clear()                 { Buf.clear(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ?clear@?$ImVector@D@@QAEXXZ ; ImVector<char>::clear
  00035	5f		 pop	 edi
  00036	5e		 pop	 esi
  00037	5b		 pop	 ebx
  00038	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003e	3b ec		 cmp	 ebp, esp
  00040	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00045	8b e5		 mov	 esp, ebp
  00047	5d		 pop	 ebp
  00048	c3		 ret	 0
?clear@ImGuiTextBuffer@@QAEXXZ ENDP			; ImGuiTextBuffer::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?size@ImGuiTextBuffer@@QBEHXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?size@ImGuiTextBuffer@@QBEHXZ PROC			; ImGuiTextBuffer::size, COMDAT
; _this$ = ecx

; 1649 :     int                 size() const            { return Buf.Size ? Buf.Size - 1 : 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	74 10		 je	 SHORT $LN3@size
  00035	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00038	8b 11		 mov	 edx, DWORD PTR [ecx]
  0003a	83 ea 01	 sub	 edx, 1
  0003d	89 95 30 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], edx
  00043	eb 0a		 jmp	 SHORT $LN4@size
$LN3@size:
  00045	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], 0
$LN4@size:
  0004f	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c3		 ret	 0
?size@ImGuiTextBuffer@@QBEHXZ ENDP			; ImGuiTextBuffer::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?end@ImGuiTextBuffer@@QBEPBDXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?end@ImGuiTextBuffer@@QBEPBDXZ PROC			; ImGuiTextBuffer::end, COMDAT
; _this$ = ecx

; 1648 :     const char*         end() const             { return Buf.Data ? &Buf.back() : EmptyString; }   // Buf is zero-terminated, so end() will point on the zero-terminator

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 10		 je	 SHORT $LN3@end
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?back@?$ImVector@D@@QBEABDXZ ; ImVector<char>::back
  0003e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00044	eb 0a		 jmp	 SHORT $LN4@end
$LN3@end:
  00046	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], OFFSET ?EmptyString@ImGuiTextBuffer@@2PADA ; ImGuiTextBuffer::EmptyString
$LN4@end:
  00050	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?end@ImGuiTextBuffer@@QBEPBDXZ ENDP			; ImGuiTextBuffer::end
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?begin@ImGuiTextBuffer@@QBEPBDXZ
_TEXT	SEGMENT
tv70 = -208						; size = 4
_this$ = -8						; size = 4
?begin@ImGuiTextBuffer@@QBEPBDXZ PROC			; ImGuiTextBuffer::begin, COMDAT
; _this$ = ecx

; 1647 :     const char*         begin() const           { return Buf.Data ? &Buf.front() : EmptyString; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 10		 je	 SHORT $LN3@begin
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	e8 00 00 00 00	 call	 ?front@?$ImVector@D@@QBEABDXZ ; ImVector<char>::front
  0003e	89 85 30 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  00044	eb 0a		 jmp	 SHORT $LN4@begin
$LN3@begin:
  00046	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv70[ebp], OFFSET ?EmptyString@ImGuiTextBuffer@@2PADA ; ImGuiTextBuffer::EmptyString
$LN4@begin:
  00050	8b 85 30 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  00056	5f		 pop	 edi
  00057	5e		 pop	 esi
  00058	5b		 pop	 ebx
  00059	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005f	3b ec		 cmp	 ebp, esp
  00061	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00066	8b e5		 mov	 esp, ebp
  00068	5d		 pop	 ebp
  00069	c3		 ret	 0
?begin@ImGuiTextBuffer@@QBEPBDXZ ENDP			; ImGuiTextBuffer::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??AImGuiTextBuffer@@QBEDH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??AImGuiTextBuffer@@QBEDH@Z PROC			; ImGuiTextBuffer::operator[], COMDAT
; _this$ = ecx

; 1646 :     inline char         operator[](int i) const { IM_ASSERT(Buf.Data != NULL); return Buf.Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	75 21		 jne	 SHORT $LN3@operator
  00036	8b f4		 mov	 esi, esp
  00038	68 6e 06 00 00	 push	 1646			; 0000066eH
  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00042	68 00 00 00 00	 push	 OFFSET ??_C@_1BM@COLNJNAB@?$AAB?$AAu?$AAf?$AA?4?$AAD?$AAa?$AAt?$AAa?$AA?5?$AA?$CB?$AA?$DN?$AA?5?$AA0@
  00047	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00050	3b f4		 cmp	 esi, esp
  00052	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00057	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005a	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005d	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00060	8a 04 11	 mov	 al, BYTE PTR [ecx+edx]
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 04 00	 ret	 4
??AImGuiTextBuffer@@QBEDH@Z ENDP			; ImGuiTextBuffer::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImGuiTextBuffer@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ImGuiTextBuffer@@QAE@XZ PROC				; ImGuiTextBuffer::ImGuiTextBuffer, COMDAT
; _this$ = ecx

; 1645 :     ImGuiTextBuffer()   { }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	e8 00 00 00 00	 call	 ??0?$ImVector@D@@QAE@XZ	; ImVector<char>::ImVector<char>
  00035	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00038	5f		 pop	 edi
  00039	5e		 pop	 esi
  0003a	5b		 pop	 ebx
  0003b	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00041	3b ec		 cmp	 ebp, esp
  00043	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00048	8b e5		 mov	 esp, ebp
  0004a	5d		 pop	 ebp
  0004b	c3		 ret	 0
??0ImGuiTextBuffer@@QAE@XZ ENDP				; ImGuiTextBuffer::ImGuiTextBuffer
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?push_back@?$ImVector@D@@QAEXABD@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_v$ = 8							; size = 4
?push_back@?$ImVector@D@@QAEXABD@Z PROC			; ImVector<char>::push_back, COMDAT
; _this$ = ecx

; 1293 :     inline void         push_back(const T& v)               { if (Size == Capacity) reserve(_grow_capacity(Size + 1)); memcpy(&Data[Size], &v, sizeof(v)); Size++; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00033	8b 10		 mov	 edx, DWORD PTR [eax]
  00035	3b 51 04	 cmp	 edx, DWORD PTR [ecx+4]
  00038	75 1a		 jne	 SHORT $LN2@push_back
  0003a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003d	8b 08		 mov	 ecx, DWORD PTR [eax]
  0003f	83 c1 01	 add	 ecx, 1
  00042	51		 push	 ecx
  00043	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00046	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@D@@QBEHH@Z ; ImVector<char>::_grow_capacity
  0004b	50		 push	 eax
  0004c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0004f	e8 00 00 00 00	 call	 ?reserve@?$ImVector@D@@QAEXH@Z ; ImVector<char>::reserve
$LN2@push_back:
  00054	6a 01		 push	 1
  00056	8b 45 08	 mov	 eax, DWORD PTR _v$[ebp]
  00059	50		 push	 eax
  0005a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0005d	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	03 10		 add	 edx, DWORD PTR [eax]
  00065	52		 push	 edx
  00066	e8 00 00 00 00	 call	 _memcpy
  0006b	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 08		 mov	 ecx, DWORD PTR [eax]
  00073	83 c1 01	 add	 ecx, 1
  00076	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00079	89 0a		 mov	 DWORD PTR [edx], ecx
  0007b	5f		 pop	 edi
  0007c	5e		 pop	 esi
  0007d	5b		 pop	 ebx
  0007e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00084	3b ec		 cmp	 ebp, esp
  00086	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0008b	8b e5		 mov	 esp, ebp
  0008d	5d		 pop	 ebp
  0008e	c2 04 00	 ret	 4
?push_back@?$ImVector@D@@QAEXABD@Z ENDP			; ImVector<char>::push_back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?reserve@?$ImVector@D@@QAEXH@Z
_TEXT	SEGMENT
_new_data$ = -20					; size = 4
_this$ = -8						; size = 4
_new_capacity$ = 8					; size = 4
?reserve@?$ImVector@D@@QAEXH@Z PROC			; ImVector<char>::reserve, COMDAT
; _this$ = ecx

; 1290 :     inline void         reserve(int new_capacity)           { if (new_capacity <= Capacity) return; T* new_data = (T*)IM_ALLOC((size_t)new_capacity * sizeof(T)); if (Data) { memcpy(new_data, Data, (size_t)Size * sizeof(T)); IM_FREE(Data); } Data = new_data; Capacity = new_capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d8 00 00
	00		 sub	 esp, 216		; 000000d8H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00013	b9 36 00 00 00	 mov	 ecx, 54			; 00000036H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7f 02		 jg	 SHORT $LN2@reserve
  00038	eb 52		 jmp	 SHORT $LN1@reserve
$LN2@reserve:
  0003a	8b 45 08	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  0003d	50		 push	 eax
  0003e	e8 00 00 00 00	 call	 ?MemAlloc@ImGui@@YAPAXI@Z ; ImGui::MemAlloc
  00043	83 c4 04	 add	 esp, 4
  00046	89 45 ec	 mov	 DWORD PTR _new_data$[ebp], eax
  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00050	74 28		 je	 SHORT $LN3@reserve
  00052	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00055	8b 08		 mov	 ecx, DWORD PTR [eax]
  00057	51		 push	 ecx
  00058	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005b	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  0005e	50		 push	 eax
  0005f	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00062	51		 push	 ecx
  00063	e8 00 00 00 00	 call	 _memcpy
  00068	83 c4 0c	 add	 esp, 12			; 0000000cH
  0006b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006e	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  00071	51		 push	 ecx
  00072	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00077	83 c4 04	 add	 esp, 4
$LN3@reserve:
  0007a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0007d	8b 4d ec	 mov	 ecx, DWORD PTR _new_data$[ebp]
  00080	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00083	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00086	8b 4d 08	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  00089	89 48 04	 mov	 DWORD PTR [eax+4], ecx
$LN1@reserve:
  0008c	5f		 pop	 edi
  0008d	5e		 pop	 esi
  0008e	5b		 pop	 ebx
  0008f	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00095	3b ec		 cmp	 ebp, esp
  00097	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0009c	8b e5		 mov	 esp, ebp
  0009e	5d		 pop	 ebp
  0009f	c2 04 00	 ret	 4
?reserve@?$ImVector@D@@QAEXH@Z ENDP			; ImVector<char>::reserve
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?resize@?$ImVector@D@@QAEXH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_new_size$ = 8						; size = 4
?resize@?$ImVector@D@@QAEXH@Z PROC			; ImVector<char>::resize, COMDAT
; _this$ = ecx

; 1287 :     inline void         resize(int new_size)                { if (new_size > Capacity) reserve(_grow_capacity(new_size)); Size = new_size; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _new_size$[ebp]
  00033	3b 48 04	 cmp	 ecx, DWORD PTR [eax+4]
  00036	7e 15		 jle	 SHORT $LN2@resize
  00038	8b 45 08	 mov	 eax, DWORD PTR _new_size$[ebp]
  0003b	50		 push	 eax
  0003c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003f	e8 00 00 00 00	 call	 ?_grow_capacity@?$ImVector@D@@QBEHH@Z ; ImVector<char>::_grow_capacity
  00044	50		 push	 eax
  00045	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00048	e8 00 00 00 00	 call	 ?reserve@?$ImVector@D@@QAEXH@Z ; ImVector<char>::reserve
$LN2@resize:
  0004d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00050	8b 4d 08	 mov	 ecx, DWORD PTR _new_size$[ebp]
  00053	89 08		 mov	 DWORD PTR [eax], ecx
  00055	5f		 pop	 edi
  00056	5e		 pop	 esi
  00057	5b		 pop	 ebx
  00058	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0005e	3b ec		 cmp	 ebp, esp
  00060	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00065	8b e5		 mov	 esp, ebp
  00067	5d		 pop	 ebp
  00068	c2 04 00	 ret	 4
?resize@?$ImVector@D@@QAEXH@Z ENDP			; ImVector<char>::resize
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?_grow_capacity@?$ImVector@D@@QBEHH@Z
_TEXT	SEGMENT
tv72 = -220						; size = 4
tv70 = -220						; size = 4
_new_capacity$ = -20					; size = 4
_this$ = -8						; size = 4
_sz$ = 8						; size = 4
?_grow_capacity@?$ImVector@D@@QBEHH@Z PROC		; ImVector<char>::_grow_capacity, COMDAT
; _this$ = ecx

; 1286 :     inline int          _grow_capacity(int sz) const        { int new_capacity = Capacity ? (Capacity + Capacity/2) : 8; return new_capacity > sz ? new_capacity : sz; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec dc 00 00
	00		 sub	 esp, 220		; 000000dcH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 24 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-220]
  00013	b9 37 00 00 00	 mov	 ecx, 55			; 00000037H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 04 00	 cmp	 DWORD PTR [eax+4], 0
  00034	74 19		 je	 SHORT $LN3@grow_capac
  00036	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00039	8b 41 04	 mov	 eax, DWORD PTR [ecx+4]
  0003c	99		 cdq
  0003d	2b c2		 sub	 eax, edx
  0003f	d1 f8		 sar	 eax, 1
  00041	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00044	03 42 04	 add	 eax, DWORD PTR [edx+4]
  00047	89 85 24 ff ff
	ff		 mov	 DWORD PTR tv70[ebp], eax
  0004d	eb 0a		 jmp	 SHORT $LN4@grow_capac
$LN3@grow_capac:
  0004f	c7 85 24 ff ff
	ff 08 00 00 00	 mov	 DWORD PTR tv70[ebp], 8
$LN4@grow_capac:
  00059	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv70[ebp]
  0005f	89 45 ec	 mov	 DWORD PTR _new_capacity$[ebp], eax
  00062	8b 45 ec	 mov	 eax, DWORD PTR _new_capacity$[ebp]
  00065	3b 45 08	 cmp	 eax, DWORD PTR _sz$[ebp]
  00068	7e 0b		 jle	 SHORT $LN5@grow_capac
  0006a	8b 4d ec	 mov	 ecx, DWORD PTR _new_capacity$[ebp]
  0006d	89 8d 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], ecx
  00073	eb 09		 jmp	 SHORT $LN6@grow_capac
$LN5@grow_capac:
  00075	8b 55 08	 mov	 edx, DWORD PTR _sz$[ebp]
  00078	89 95 24 ff ff
	ff		 mov	 DWORD PTR tv72[ebp], edx
$LN6@grow_capac:
  0007e	8b 85 24 ff ff
	ff		 mov	 eax, DWORD PTR tv72[ebp]
  00084	5f		 pop	 edi
  00085	5e		 pop	 esi
  00086	5b		 pop	 ebx
  00087	81 c4 dc 00 00
	00		 add	 esp, 220		; 000000dcH
  0008d	3b ec		 cmp	 ebp, esp
  0008f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00094	8b e5		 mov	 esp, ebp
  00096	5d		 pop	 ebp
  00097	c2 04 00	 ret	 4
?_grow_capacity@?$ImVector@D@@QBEHH@Z ENDP		; ImVector<char>::_grow_capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?back@?$ImVector@D@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?back@?$ImVector@D@@QBEABDXZ PROC			; ImVector<char>::back, COMDAT
; _this$ = ecx

; 1283 :     inline const T&     back() const                        { IM_ASSERT(Size > 0); return Data[Size - 1]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	7f 21		 jg	 SHORT $LN3@back
  00035	8b f4		 mov	 esi, esp
  00037	68 03 05 00 00	 push	 1283			; 00000503H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@back:
  00056	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00059	8b 08		 mov	 ecx, DWORD PTR [eax]
  0005b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0005e	8b 42 08	 mov	 eax, DWORD PTR [edx+8]
  00061	8d 44 08 ff	 lea	 eax, DWORD PTR [eax+ecx-1]
  00065	5f		 pop	 edi
  00066	5e		 pop	 esi
  00067	5b		 pop	 ebx
  00068	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006e	3b ec		 cmp	 ebp, esp
  00070	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00075	8b e5		 mov	 esp, ebp
  00077	5d		 pop	 ebp
  00078	c3		 ret	 0
?back@?$ImVector@D@@QBEABDXZ ENDP			; ImVector<char>::back
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?front@?$ImVector@D@@QBEABDXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?front@?$ImVector@D@@QBEABDXZ PROC			; ImVector<char>::front, COMDAT
; _this$ = ecx

; 1281 :     inline const T&     front() const                       { IM_ASSERT(Size > 0); return Data[0]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	7f 21		 jg	 SHORT $LN3@front
  00035	8b f4		 mov	 esi, esp
  00037	68 01 05 00 00	 push	 1281			; 00000501H
  0003c	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00041	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@KCECIPDP@?$AAS?$AAi?$AAz?$AAe?$AA?5?$AA?$DO?$AA?5?$AA0@
  00046	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	3b f4		 cmp	 esi, esp
  00051	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@front:
  00056	b8 01 00 00 00	 mov	 eax, 1
  0005b	6b c0 00	 imul	 eax, eax, 0
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	03 41 08	 add	 eax, DWORD PTR [ecx+8]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c3		 ret	 0
?front@?$ImVector@D@@QBEABDXZ ENDP			; ImVector<char>::front
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?begin@?$ImVector@D@@QAEPADXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?begin@?$ImVector@D@@QAEPADXZ PROC			; ImVector<char>::begin, COMDAT
; _this$ = ecx

; 1276 :     inline T*           begin()                             { return Data; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 08	 mov	 eax, DWORD PTR [eax+8]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?begin@?$ImVector@D@@QAEPADXZ ENDP			; ImVector<char>::begin
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?clear@?$ImVector@D@@QAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?clear@?$ImVector@D@@QAEXXZ PROC			; ImVector<char>::clear, COMDAT
; _this$ = ecx

; 1275 :     inline void         clear()                             { if (Data) { Size = Capacity = 0; IM_FREE(Data); Data = NULL; } }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00034	74 2c		 je	 SHORT $LN1@clear
  00036	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00039	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00040	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00043	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00049	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004c	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0004f	51		 push	 ecx
  00050	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00055	83 c4 04	 add	 esp, 4
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
$LN1@clear:
  00062	5f		 pop	 edi
  00063	5e		 pop	 esi
  00064	5b		 pop	 ebx
  00065	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006b	3b ec		 cmp	 ebp, esp
  0006d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00072	8b e5		 mov	 esp, ebp
  00074	5d		 pop	 ebp
  00075	c3		 ret	 0
?clear@?$ImVector@D@@QAEXXZ ENDP			; ImVector<char>::clear
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?capacity@?$ImVector@D@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?capacity@?$ImVector@D@@QBEHXZ PROC			; ImVector<char>::capacity, COMDAT
; _this$ = ecx

; 1271 :     inline int          capacity() const                    { return Capacity; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 40 04	 mov	 eax, DWORD PTR [eax+4]
  00033	5f		 pop	 edi
  00034	5e		 pop	 esi
  00035	5b		 pop	 ebx
  00036	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003c	3b ec		 cmp	 ebp, esp
  0003e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00043	8b e5		 mov	 esp, ebp
  00045	5d		 pop	 ebp
  00046	c3		 ret	 0
?capacity@?$ImVector@D@@QBEHXZ ENDP			; ImVector<char>::capacity
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?size@?$ImVector@D@@QBEHXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?size@?$ImVector@D@@QBEHXZ PROC				; ImVector<char>::size, COMDAT
; _this$ = ecx

; 1269 :     inline int          size() const                        { return Size; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 00		 mov	 eax, DWORD PTR [eax]
  00032	5f		 pop	 edi
  00033	5e		 pop	 esi
  00034	5b		 pop	 ebx
  00035	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003b	3b ec		 cmp	 ebp, esp
  0003d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00042	8b e5		 mov	 esp, ebp
  00044	5d		 pop	 ebp
  00045	c3		 ret	 0
?size@?$ImVector@D@@QBEHXZ ENDP				; ImVector<char>::size
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@D@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?empty@?$ImVector@D@@QBE_NXZ PROC			; ImVector<char>::empty, COMDAT
; _this$ = ecx

; 1268 :     inline bool         empty() const                       { return Size == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	75 0c		 jne	 SHORT $LN3@empty
  00035	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@empty:
  0004b	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?empty@?$ImVector@D@@QBE_NXZ ENDP			; ImVector<char>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@D@@QAE@XZ PROC				; ImVector<char>::~ImVector<char>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@D@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@D@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@D@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@D@@QAE@XZ ENDP				; ImVector<char>::~ImVector<char>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0?$ImVector@D@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0?$ImVector@D@@QAE@XZ PROC				; ImVector<char>::ImVector<char>, COMDAT
; _this$ = ecx

; 1263 :     inline ImVector()                                       { Size = Capacity = 0; Data = NULL; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	c7 40 04 00 00
	00 00		 mov	 DWORD PTR [eax+4], 0
  00037	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003a	c7 01 00 00 00
	00		 mov	 DWORD PTR [ecx], 0
  00040	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00043	c7 40 08 00 00
	00 00		 mov	 DWORD PTR [eax+8], 0
  0004a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004d	5f		 pop	 edi
  0004e	5e		 pop	 esi
  0004f	5b		 pop	 ebx
  00050	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00056	3b ec		 cmp	 ebp, esp
  00058	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005d	8b e5		 mov	 esp, ebp
  0005f	5d		 pop	 ebp
  00060	c3		 ret	 0
??0?$ImVector@D@@QAE@XZ ENDP				; ImVector<char>::ImVector<char>
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
;	COMDAT ??1ImGuiTextFilter@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??1ImGuiTextFilter@@QAE@XZ PROC				; ImGuiTextFilter::~ImGuiTextFilter, COMDAT
; _this$ = ecx
  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00026	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  0002c	e8 00 00 00 00	 call	 ??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>
  00031	5f		 pop	 edi
  00032	5e		 pop	 esi
  00033	5b		 pop	 ebx
  00034	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0003a	3b ec		 cmp	 ebp, esp
  0003c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00041	8b e5		 mov	 esp, ebp
  00043	5d		 pop	 ebp
  00044	c3		 ret	 0
??1ImGuiTextFilter@@QAE@XZ ENDP				; ImGuiTextFilter::~ImGuiTextFilter
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QBE_NXZ
_TEXT	SEGMENT
tv66 = -208						; size = 4
_this$ = -8						; size = 4
?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QBE_NXZ PROC ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty, COMDAT
; _this$ = ecx

; 1268 :     inline bool         empty() const                       { return Size == 0; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	83 38 00	 cmp	 DWORD PTR [eax], 0
  00033	75 0c		 jne	 SHORT $LN3@empty
  00035	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv66[ebp], 1
  0003f	eb 0a		 jmp	 SHORT $LN4@empty
$LN3@empty:
  00041	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv66[ebp], 0
$LN4@empty:
  0004b	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv66[ebp]
  00051	5f		 pop	 edi
  00052	5e		 pop	 esi
  00053	5b		 pop	 ebx
  00054	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  0005a	3b ec		 cmp	 ebp, esp
  0005c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00061	8b e5		 mov	 esp, ebp
  00063	5d		 pop	 ebp
  00064	c3		 ret	 0
?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QBE_NXZ ENDP ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ
_TEXT	SEGMENT
_this$ = -20						; size = 4
__$EHRec$ = -12						; size = 12
??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ PROC ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>, COMDAT
; _this$ = ecx

; 1266 :     inline ~ImVector()                                      { if (Data) IM_FREE(Data); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	51		 push	 ecx
  0001b	8d bd 28 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-216]
  00021	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00026	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002b	f3 ab		 rep stosd
  0002d	59		 pop	 ecx
  0002e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00033	33 c5		 xor	 eax, ebp
  00035	50		 push	 eax
  00036	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  00039	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  0003f	89 4d ec	 mov	 DWORD PTR _this$[ebp], ecx
  00042	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00047	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0004c	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  0004f	83 78 08 00	 cmp	 DWORD PTR [eax+8], 0
  00053	74 0f		 je	 SHORT $LN3@ImVector
  00055	8b 45 ec	 mov	 eax, DWORD PTR _this$[ebp]
  00058	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005b	51		 push	 ecx
  0005c	e8 00 00 00 00	 call	 ?MemFree@ImGui@@YAXPAX@Z ; ImGui::MemFree
  00061	83 c4 04	 add	 esp, 4
$LN3@ImVector:
  00064	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  00067	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  0006e	59		 pop	 ecx
  0006f	5f		 pop	 edi
  00070	5e		 pop	 esi
  00071	5b		 pop	 ebx
  00072	81 c4 d8 00 00
	00		 add	 esp, 216		; 000000d8H
  00078	3b ec		 cmp	 ebp, esp
  0007a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0007f	8b e5		 mov	 esp, ebp
  00081	5d		 pop	 ebp
  00082	c3		 ret	 0
  00083	cc		 int	 3
  00084	cc		 int	 3
  00085	cc		 int	 3
  00086	cc		 int	 3
  00087	cc		 int	 3
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__ehhandler$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ:
  00000	90		 npad	 1
  00001	90		 npad	 1
  00002	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00006	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00009	8b 8a 24 ff ff
	ff		 mov	 ecx, DWORD PTR [edx-220]
  0000f	33 c8		 xor	 ecx, eax
  00011	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00016	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ
  0001b	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
??1?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QAE@XZ ENDP ; ImVector<ImGuiTextFilter::ImGuiTextRange>::~ImVector<ImGuiTextFilter::ImGuiTextRange>
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ?IsActive@ImGuiTextFilter@@QBE_NXZ
_TEXT	SEGMENT
tv69 = -208						; size = 4
_this$ = -8						; size = 4
?IsActive@ImGuiTextFilter@@QBE_NXZ PROC			; ImGuiTextFilter::IsActive, COMDAT
; _this$ = ecx

; 1620 :     bool                IsActive() const { return !Filters.empty(); }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec d0 00 00
	00		 sub	 esp, 208		; 000000d0H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 30 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-208]
  00013	b9 34 00 00 00	 mov	 ecx, 52			; 00000034H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00030	81 c1 00 01 00
	00		 add	 ecx, 256		; 00000100H
  00036	e8 00 00 00 00	 call	 ?empty@?$ImVector@UImGuiTextRange@ImGuiTextFilter@@@@QBE_NXZ ; ImVector<ImGuiTextFilter::ImGuiTextRange>::empty
  0003b	0f b6 c0	 movzx	 eax, al
  0003e	85 c0		 test	 eax, eax
  00040	75 0c		 jne	 SHORT $LN3@IsActive
  00042	c7 85 30 ff ff
	ff 01 00 00 00	 mov	 DWORD PTR tv69[ebp], 1
  0004c	eb 0a		 jmp	 SHORT $LN4@IsActive
$LN3@IsActive:
  0004e	c7 85 30 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR tv69[ebp], 0
$LN4@IsActive:
  00058	8a 85 30 ff ff
	ff		 mov	 al, BYTE PTR tv69[ebp]
  0005e	5f		 pop	 edi
  0005f	5e		 pop	 esi
  00060	5b		 pop	 ebx
  00061	81 c4 d0 00 00
	00		 add	 esp, 208		; 000000d0H
  00067	3b ec		 cmp	 ebp, esp
  00069	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006e	8b e5		 mov	 esp, ebp
  00070	5d		 pop	 ebp
  00071	c3		 ret	 0
?IsActive@ImGuiTextFilter@@QBE_NXZ ENDP			; ImGuiTextFilter::IsActive
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??A?$ImVector@G@@QAEAAGH@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
_i$ = 8							; size = 4
??A?$ImVector@G@@QAEAAGH@Z PROC				; ImVector<unsigned short>::operator[], COMDAT
; _this$ = ecx

; 1272 :     inline T&           operator[](int i)                   { IM_ASSERT(i < Size); return Data[i]; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	8b 4d 08	 mov	 ecx, DWORD PTR _i$[ebp]
  00033	3b 08		 cmp	 ecx, DWORD PTR [eax]
  00035	7c 21		 jl	 SHORT $LN3@operator
  00037	8b f4		 mov	 esi, esp
  00039	68 f8 04 00 00	 push	 1272			; 000004f8H
  0003e	68 00 00 00 00	 push	 OFFSET ??_C@_1LK@HIKNCJCN@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00043	68 00 00 00 00	 push	 OFFSET ??_C@_1BC@DCMHDKFO@?$AAi?$AA?5?$AA?$DM?$AA?5?$AAS?$AAi?$AAz?$AAe@
  00048	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  0004e	83 c4 0c	 add	 esp, 12			; 0000000cH
  00051	3b f4		 cmp	 esi, esp
  00053	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN3@operator:
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	8b 48 08	 mov	 ecx, DWORD PTR [eax+8]
  0005e	8b 55 08	 mov	 edx, DWORD PTR _i$[ebp]
  00061	8d 04 51	 lea	 eax, DWORD PTR [ecx+edx*2]
  00064	5f		 pop	 edi
  00065	5e		 pop	 esi
  00066	5b		 pop	 ebx
  00067	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006d	3b ec		 cmp	 ebp, esp
  0006f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00074	8b e5		 mov	 esp, ebp
  00076	5d		 pop	 ebp
  00077	c2 04 00	 ret	 4
??A?$ImVector@G@@QAEAAGH@Z ENDP				; ImVector<unsigned short>::operator[]
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowUserGuide@ImGui@@YAXXZ
_TEXT	SEGMENT
_io$ = -8						; size = 4
?ShowUserGuide@ImGui@@YAXXZ PROC			; ImGui::ShowUserGuide, COMDAT

; 152  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 153  :     ImGuiIO& io = ImGui::GetIO();

  00028	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  0002d	89 45 f8	 mov	 DWORD PTR _io$[ebp], eax

; 154  :     ImGui::BulletText("Double-click on title bar to collapse window.");

  00030	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@FFJHEDDC@Double?9click?5on?5title?5bar?5to?5co@
  00035	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  0003a	83 c4 04	 add	 esp, 4

; 155  :     ImGui::BulletText("Click and drag on lower corner to resize window\n(double-click to auto fit window to its contents).");

  0003d	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@KHDHCLNB@Click?5and?5drag?5on?5lower?5corner?5@
  00042	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00047	83 c4 04	 add	 esp, 4

; 156  :     ImGui::BulletText("CTRL+Click on a slider or drag box to input value as text.");

  0004a	68 00 00 00 00	 push	 OFFSET ??_C@_0DL@LJHMLMPJ@CTRL?$CLClick?5on?5a?5slider?5or?5drag?5@
  0004f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00054	83 c4 04	 add	 esp, 4

; 157  :     ImGui::BulletText("TAB/SHIFT+TAB to cycle through keyboard editable fields.");

  00057	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@LKCIFMEM@TAB?1SHIFT?$CLTAB?5to?5cycle?5through?5@
  0005c	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00061	83 c4 04	 add	 esp, 4

; 158  :     if (io.FontAllowUserScaling)

  00064	8b 45 f8	 mov	 eax, DWORD PTR _io$[ebp]
  00067	0f b6 88 98 00
	00 00		 movzx	 ecx, BYTE PTR [eax+152]
  0006e	85 c9		 test	 ecx, ecx
  00070	74 0d		 je	 SHORT $LN2@ShowUserGu

; 159  :         ImGui::BulletText("CTRL+Mouse Wheel to zoom window contents.");

  00072	68 00 00 00 00	 push	 OFFSET ??_C@_0CK@LADJDPFO@CTRL?$CLMouse?5Wheel?5to?5zoom?5window@
  00077	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  0007c	83 c4 04	 add	 esp, 4
$LN2@ShowUserGu:

; 160  :     ImGui::BulletText("While inputing text:\n");

  0007f	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@NMLMAAHC@While?5inputing?5text?3?6@
  00084	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00089	83 c4 04	 add	 esp, 4

; 161  :     ImGui::Indent();

  0008c	51		 push	 ecx
  0008d	0f 57 c0	 xorps	 xmm0, xmm0
  00090	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00095	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
  0009a	83 c4 04	 add	 esp, 4

; 162  :     ImGui::BulletText("CTRL+Left/Right to word jump.");

  0009d	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@EGJGDBOL@CTRL?$CLLeft?1Right?5to?5word?5jump?4@
  000a2	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  000a7	83 c4 04	 add	 esp, 4

; 163  :     ImGui::BulletText("CTRL+A or double-click to select all.");

  000aa	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EHDHJJCE@CTRL?$CLA?5or?5double?9click?5to?5selec@
  000af	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  000b4	83 c4 04	 add	 esp, 4

; 164  :     ImGui::BulletText("CTRL+X/C/V to use clipboard cut/copy/paste.");

  000b7	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@COCDFHEI@CTRL?$CLX?1C?1V?5to?5use?5clipboard?5cut@
  000bc	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  000c1	83 c4 04	 add	 esp, 4

; 165  :     ImGui::BulletText("CTRL+Z,CTRL+Y to undo/redo.");

  000c4	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@KMMNEEIL@CTRL?$CLZ?0CTRL?$CLY?5to?5undo?1redo?4@
  000c9	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  000ce	83 c4 04	 add	 esp, 4

; 166  :     ImGui::BulletText("ESCAPE to revert.");

  000d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PKENOIKO@ESCAPE?5to?5revert?4@
  000d6	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  000db	83 c4 04	 add	 esp, 4

; 167  :     ImGui::BulletText("You can apply arithmetic operators +,*,/ on numerical values.\nUse +- to subtract.");

  000de	68 00 00 00 00	 push	 OFFSET ??_C@_0FC@FJHKJEAF@You?5can?5apply?5arithmetic?5operat@
  000e3	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  000e8	83 c4 04	 add	 esp, 4

; 168  :     ImGui::Unindent();

  000eb	51		 push	 ecx
  000ec	0f 57 c0	 xorps	 xmm0, xmm0
  000ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000f4	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
  000f9	83 c4 04	 add	 esp, 4

; 169  :     ImGui::BulletText("With keyboard navigation enabled:");

  000fc	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@LHGBBELP@With?5keyboard?5navigation?5enable@
  00101	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00106	83 c4 04	 add	 esp, 4

; 170  :     ImGui::Indent();

  00109	51		 push	 ecx
  0010a	0f 57 c0	 xorps	 xmm0, xmm0
  0010d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00112	e8 00 00 00 00	 call	 ?Indent@ImGui@@YAXM@Z	; ImGui::Indent
  00117	83 c4 04	 add	 esp, 4

; 171  :     ImGui::BulletText("Arrow keys to navigate.");

  0011a	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@PBJOMNMB@Arrow?5keys?5to?5navigate?4@
  0011f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00124	83 c4 04	 add	 esp, 4

; 172  :     ImGui::BulletText("Space to activate a widget.");

  00127	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@LKNGKCOD@Space?5to?5activate?5a?5widget?4@
  0012c	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00131	83 c4 04	 add	 esp, 4

; 173  :     ImGui::BulletText("Return to input text into a widget.");

  00134	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LIPDCNLP@Return?5to?5input?5text?5into?5a?5wid@
  00139	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  0013e	83 c4 04	 add	 esp, 4

; 174  :     ImGui::BulletText("Escape to deactivate a widget, close popup, exit child window.");

  00141	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@NLCDBEHA@Escape?5to?5deactivate?5a?5widget?0?5@
  00146	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  0014b	83 c4 04	 add	 esp, 4

; 175  :     ImGui::BulletText("Alt to jump to the menu layer of a window.");

  0014e	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@EBPMKFNL@Alt?5to?5jump?5to?5the?5menu?5layer?5o@
  00153	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00158	83 c4 04	 add	 esp, 4

; 176  :     ImGui::BulletText("CTRL+Tab to select a window.");

  0015b	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@MNOOCJNJ@CTRL?$CLTab?5to?5select?5a?5window?4@
  00160	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00165	83 c4 04	 add	 esp, 4

; 177  :     ImGui::Unindent();

  00168	51		 push	 ecx
  00169	0f 57 c0	 xorps	 xmm0, xmm0
  0016c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00171	e8 00 00 00 00	 call	 ?Unindent@ImGui@@YAXM@Z	; ImGui::Unindent
  00176	83 c4 04	 add	 esp, 4

; 178  : }

  00179	5f		 pop	 edi
  0017a	5e		 pop	 esi
  0017b	5b		 pop	 ebx
  0017c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00182	3b ec		 cmp	 ebp, esp
  00184	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00189	8b e5		 mov	 esp, ebp
  0018b	5d		 pop	 ebp
  0018c	c3		 ret	 0
?ShowUserGuide@ImGui@@YAXXZ ENDP			; ImGui::ShowUserGuide
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowFontSelector@ImGui@@YAXPBD@Z
_TEXT	SEGMENT
tv93 = -257						; size = 1
$T1 = -252						; size = 8
_font$2 = -44						; size = 4
_n$3 = -32						; size = 4
_font_current$ = -20					; size = 4
_io$ = -8						; size = 4
_label$ = 8						; size = 4
?ShowFontSelector@ImGui@@YAXPBD@Z PROC			; ImGui::ShowFontSelector, COMDAT

; 3235 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 04 01 00
	00		 sub	 esp, 260		; 00000104H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd fc fe ff
	ff		 lea	 edi, DWORD PTR [ebp-260]
  00012	b9 41 00 00 00	 mov	 ecx, 65			; 00000041H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3236 :     ImGuiIO& io = ImGui::GetIO();

  00028	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  0002d	89 45 f8	 mov	 DWORD PTR _io$[ebp], eax

; 3237 :     ImFont* font_current = ImGui::GetFont();

  00030	e8 00 00 00 00	 call	 ?GetFont@ImGui@@YAPAUImFont@@XZ ; ImGui::GetFont
  00035	89 45 ec	 mov	 DWORD PTR _font_current$[ebp], eax

; 3238 :     if (ImGui::BeginCombo(label, font_current->GetDebugName()))

  00038	6a 00		 push	 0
  0003a	8b 4d ec	 mov	 ecx, DWORD PTR _font_current$[ebp]
  0003d	e8 00 00 00 00	 call	 ?GetDebugName@ImFont@@QBEPBDXZ ; ImFont::GetDebugName
  00042	50		 push	 eax
  00043	8b 45 08	 mov	 eax, DWORD PTR _label$[ebp]
  00046	50		 push	 eax
  00047	e8 00 00 00 00	 call	 ?BeginCombo@ImGui@@YA_NPBD0H@Z ; ImGui::BeginCombo
  0004c	83 c4 0c	 add	 esp, 12			; 0000000cH
  0004f	0f b6 c8	 movzx	 ecx, al
  00052	85 c9		 test	 ecx, ecx
  00054	0f 84 c0 00 00
	00		 je	 $LN5@ShowFontSe

; 3239 :     {
; 3240 :         for (int n = 0; n < io.Fonts->Fonts.Size; n++)

  0005a	c7 45 e0 00 00
	00 00		 mov	 DWORD PTR _n$3[ebp], 0
  00061	eb 09		 jmp	 SHORT $LN4@ShowFontSe
$LN2@ShowFontSe:
  00063	8b 45 e0	 mov	 eax, DWORD PTR _n$3[ebp]
  00066	83 c0 01	 add	 eax, 1
  00069	89 45 e0	 mov	 DWORD PTR _n$3[ebp], eax
$LN4@ShowFontSe:
  0006c	8b 45 f8	 mov	 eax, DWORD PTR _io$[ebp]
  0006f	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00075	8b 55 e0	 mov	 edx, DWORD PTR _n$3[ebp]
  00078	3b 51 34	 cmp	 edx, DWORD PTR [ecx+52]
  0007b	0f 8d 94 00 00
	00		 jge	 $LN3@ShowFontSe

; 3241 :         {
; 3242 :             ImFont* font = io.Fonts->Fonts[n];

  00081	8b 45 e0	 mov	 eax, DWORD PTR _n$3[ebp]
  00084	50		 push	 eax
  00085	8b 4d f8	 mov	 ecx, DWORD PTR _io$[ebp]
  00088	8b 89 90 00 00
	00		 mov	 ecx, DWORD PTR [ecx+144]
  0008e	83 c1 34	 add	 ecx, 52			; 00000034H
  00091	e8 00 00 00 00	 call	 ??A?$ImVector@PAUImFont@@@@QAEAAPAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
  00096	8b 10		 mov	 edx, DWORD PTR [eax]
  00098	89 55 d4	 mov	 DWORD PTR _font$2[ebp], edx

; 3243 :             ImGui::PushID((void*)font);

  0009b	8b 45 d4	 mov	 eax, DWORD PTR _font$2[ebp]
  0009e	50		 push	 eax
  0009f	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBX@Z	; ImGui::PushID
  000a4	83 c4 04	 add	 esp, 4

; 3244 :             if (ImGui::Selectable(font->GetDebugName(), font == font_current))

  000a7	8b 45 d4	 mov	 eax, DWORD PTR _font$2[ebp]
  000aa	3b 45 ec	 cmp	 eax, DWORD PTR _font_current$[ebp]
  000ad	75 09		 jne	 SHORT $LN8@ShowFontSe
  000af	c6 85 ff fe ff
	ff 01		 mov	 BYTE PTR tv93[ebp], 1
  000b6	eb 07		 jmp	 SHORT $LN9@ShowFontSe
$LN8@ShowFontSe:
  000b8	c6 85 ff fe ff
	ff 00		 mov	 BYTE PTR tv93[ebp], 0
$LN9@ShowFontSe:
  000bf	51		 push	 ecx
  000c0	0f 57 c0	 xorps	 xmm0, xmm0
  000c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c8	51		 push	 ecx
  000c9	0f 57 c0	 xorps	 xmm0, xmm0
  000cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000d1	8d 8d 04 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  000d7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000dc	50		 push	 eax
  000dd	6a 00		 push	 0
  000df	0f b6 8d ff fe
	ff ff		 movzx	 ecx, BYTE PTR tv93[ebp]
  000e6	51		 push	 ecx
  000e7	8b 4d d4	 mov	 ecx, DWORD PTR _font$2[ebp]
  000ea	e8 00 00 00 00	 call	 ?GetDebugName@ImFont@@QBEPBDXZ ; ImFont::GetDebugName
  000ef	50		 push	 eax
  000f0	e8 00 00 00 00	 call	 ?Selectable@ImGui@@YA_NPBD_NHABUImVec2@@@Z ; ImGui::Selectable
  000f5	83 c4 10	 add	 esp, 16			; 00000010H
  000f8	0f b6 d0	 movzx	 edx, al
  000fb	85 d2		 test	 edx, edx
  000fd	74 0c		 je	 SHORT $LN6@ShowFontSe

; 3245 :                 io.FontDefault = font;

  000ff	8b 45 f8	 mov	 eax, DWORD PTR _io$[ebp]
  00102	8b 4d d4	 mov	 ecx, DWORD PTR _font$2[ebp]
  00105	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx
$LN6@ShowFontSe:

; 3246 :             ImGui::PopID();

  0010b	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 3247 :         }

  00110	e9 4e ff ff ff	 jmp	 $LN2@ShowFontSe
$LN3@ShowFontSe:

; 3248 :         ImGui::EndCombo();

  00115	e8 00 00 00 00	 call	 ?EndCombo@ImGui@@YAXXZ	; ImGui::EndCombo
$LN5@ShowFontSe:

; 3249 :     }
; 3250 :     ImGui::SameLine();

  0011a	51		 push	 ecx
  0011b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00123	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00128	51		 push	 ecx
  00129	0f 57 c0	 xorps	 xmm0, xmm0
  0012c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00131	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00136	83 c4 08	 add	 esp, 8

; 3251 :     HelpMarker(

  00139	68 00 00 00 00	 push	 OFFSET ??_C@_0BCM@MBDECECM@?9?5Load?5additional?5fonts?5with?5io@
  0013e	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00143	83 c4 04	 add	 esp, 4

; 3252 :         "- Load additional fonts with io.Fonts->AddFontFromFileTTF().\n"
; 3253 :         "- The font atlas is built when calling io.Fonts->GetTexDataAsXXXX() or io.Fonts->Build().\n"
; 3254 :         "- Read FAQ and docs/FONTS.txt for more details.\n"
; 3255 :         "- If you need to add/remove fonts at runtime (e.g. for DPI change), do it before calling NewFrame().");
; 3256 : }

  00146	5f		 pop	 edi
  00147	5e		 pop	 esi
  00148	5b		 pop	 ebx
  00149	81 c4 04 01 00
	00		 add	 esp, 260		; 00000104H
  0014f	3b ec		 cmp	 ebp, esp
  00151	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00156	8b e5		 mov	 esp, ebp
  00158	5d		 pop	 ebp
  00159	c3		 ret	 0
?ShowFontSelector@ImGui@@YAXPBD@Z ENDP			; ImGui::ShowFontSelector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowStyleSelector@ImGui@@YA_NPBD@Z
_TEXT	SEGMENT
tv71 = -196						; size = 4
_label$ = 8						; size = 4
?ShowStyleSelector@ImGui@@YA_NPBD@Z PROC		; ImGui::ShowStyleSelector, COMDAT

; 3217 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec c4 00 00
	00		 sub	 esp, 196		; 000000c4H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 3c ff ff
	ff		 lea	 edi, DWORD PTR [ebp-196]
  00012	b9 31 00 00 00	 mov	 ecx, 49			; 00000031H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3218 :     static int style_idx = -1;
; 3219 :     if (ImGui::Combo(label, &style_idx, "Classic\0Dark\0Light\0"))

  00028	6a ff		 push	 -1
  0002a	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@EIEKGNCP@Classic?$AADark?$AALight?$AA@
  0002f	68 00 00 00 00	 push	 OFFSET ?style_idx@?1??ShowStyleSelector@ImGui@@YA_NPBD@Z@4HA
  00034	8b 45 08	 mov	 eax, DWORD PTR _label$[ebp]
  00037	50		 push	 eax
  00038	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  0003d	83 c4 10	 add	 esp, 16			; 00000010H
  00040	0f b6 c8	 movzx	 ecx, al
  00043	85 c9		 test	 ecx, ecx
  00045	74 4e		 je	 SHORT $LN4@ShowStyleS

; 3220 :     {
; 3221 :         switch (style_idx)

  00047	a1 00 00 00 00	 mov	 eax, DWORD PTR ?style_idx@?1??ShowStyleSelector@ImGui@@YA_NPBD@Z@4HA
  0004c	89 85 3c ff ff
	ff		 mov	 DWORD PTR tv71[ebp], eax
  00052	83 bd 3c ff ff
	ff 00		 cmp	 DWORD PTR tv71[ebp], 0
  00059	74 14		 je	 SHORT $LN5@ShowStyleS
  0005b	83 bd 3c ff ff
	ff 01		 cmp	 DWORD PTR tv71[ebp], 1
  00062	74 17		 je	 SHORT $LN6@ShowStyleS
  00064	83 bd 3c ff ff
	ff 02		 cmp	 DWORD PTR tv71[ebp], 2
  0006b	74 1a		 je	 SHORT $LN7@ShowStyleS
  0006d	eb 22		 jmp	 SHORT $LN2@ShowStyleS
$LN5@ShowStyleS:

; 3222 :         {
; 3223 :         case 0: ImGui::StyleColorsClassic(); break;

  0006f	6a 00		 push	 0
  00071	e8 00 00 00 00	 call	 ?StyleColorsClassic@ImGui@@YAXPAUImGuiStyle@@@Z ; ImGui::StyleColorsClassic
  00076	83 c4 04	 add	 esp, 4
  00079	eb 16		 jmp	 SHORT $LN2@ShowStyleS
$LN6@ShowStyleS:

; 3224 :         case 1: ImGui::StyleColorsDark(); break;

  0007b	6a 00		 push	 0
  0007d	e8 00 00 00 00	 call	 ?StyleColorsDark@ImGui@@YAXPAUImGuiStyle@@@Z ; ImGui::StyleColorsDark
  00082	83 c4 04	 add	 esp, 4
  00085	eb 0a		 jmp	 SHORT $LN2@ShowStyleS
$LN7@ShowStyleS:

; 3225 :         case 2: ImGui::StyleColorsLight(); break;

  00087	6a 00		 push	 0
  00089	e8 00 00 00 00	 call	 ?StyleColorsLight@ImGui@@YAXPAUImGuiStyle@@@Z ; ImGui::StyleColorsLight
  0008e	83 c4 04	 add	 esp, 4
$LN2@ShowStyleS:

; 3226 :         }
; 3227 :         return true;

  00091	b0 01		 mov	 al, 1
  00093	eb 02		 jmp	 SHORT $LN1@ShowStyleS
$LN4@ShowStyleS:

; 3228 :     }
; 3229 :     return false;

  00095	32 c0		 xor	 al, al
$LN1@ShowStyleS:

; 3230 : }

  00097	5f		 pop	 edi
  00098	5e		 pop	 esi
  00099	5b		 pop	 ebx
  0009a	81 c4 c4 00 00
	00		 add	 esp, 196		; 000000c4H
  000a0	3b ec		 cmp	 ebp, esp
  000a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a7	8b e5		 mov	 esp, ebp
  000a9	5d		 pop	 ebp
  000aa	c3		 ret	 0
?ShowStyleSelector@ImGui@@YA_NPBD@Z ENDP		; ImGui::ShowStyleSelector
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z
_TEXT	SEGMENT
tv1632 = -992						; size = 8
tv1629 = -984						; size = 4
tv1618 = -980						; size = 8
tv1615 = -972						; size = 4
tv1415 = -972						; size = 4
tv1099 = -972						; size = 4
tv882 = -972						; size = 4
tv804 = -972						; size = 4
tv799 = -972						; size = 4
tv690 = -972						; size = 4
tv174 = -972						; size = 4
tv164 = -972						; size = 4
tv159 = -972						; size = 4
tv149 = -972						; size = 4
tv144 = -972						; size = 4
tv134 = -972						; size = 4
$T2 = -964						; size = 8
$T3 = -948						; size = 8
$T4 = -932						; size = 8
$T5 = -916						; size = 8
$T6 = -900						; size = 8
$T7 = -884						; size = 8
$T8 = -868						; size = 8
$T9 = -852						; size = 8
$T10 = -836						; size = 8
$T11 = -820						; size = 8
_border_col$12 = -420					; size = 16
_tint_col$13 = -396					; size = 16
_glyph$14 = -372					; size = 4
_cell_p2$15 = -360					; size = 8
_cell_p1$16 = -344					; size = 8
_n$17 = -328						; size = 4
_draw_list$18 = -316					; size = 4
_base_pos$19 = -304					; size = 8
_cell_spacing$20 = -288					; size = 4
_cell_size$21 = -276					; size = 4
_n$22 = -264						; size = 4
_count$23 = -252					; size = 4
_base$24 = -240						; size = 4
_cfg$25 = -228						; size = 4
_config_i$26 = -216					; size = 4
_surface_sqrt$27 = -204					; size = 4
_font_details_opened$28 = -189				; size = 1
_font$29 = -180						; size = 4
_i$30 = -168						; size = 4
_atlas$31 = -156					; size = 4
_io$32 = -144						; size = 4
_name$33 = -132						; size = 4
_i$34 = -120						; size = 4
_name$35 = -108						; size = 4
_col$36 = -96						; size = 4
_i$37 = -84						; size = 4
_window_menu_button_position$38 = -72			; size = 4
_popup_border$39 = -57					; size = 1
_frame_border$40 = -45					; size = 1
_window_border$41 = -33					; size = 1
_style$ = -24						; size = 4
__$ArrayPad$ = -16					; size = 4
__$EHRec$ = -12						; size = 12
_ref$ = 8						; size = 4
?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z PROC	; ImGui::ShowStyleEditor, COMDAT

; 3259 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	6a ff		 push	 -1
  00005	68 00 00 00 00	 push	 __ehhandler$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z
  0000a	64 a1 00 00 00
	00		 mov	 eax, DWORD PTR fs:0
  00010	50		 push	 eax
  00011	81 ec d4 03 00
	00		 sub	 esp, 980		; 000003d4H
  00017	53		 push	 ebx
  00018	56		 push	 esi
  00019	57		 push	 edi
  0001a	8d bd 20 fc ff
	ff		 lea	 edi, DWORD PTR [ebp-992]
  00020	b9 f5 00 00 00	 mov	 ecx, 245		; 000000f5H
  00025	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0002a	f3 ab		 rep stosd
  0002c	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00031	33 c5		 xor	 eax, ebp
  00033	89 45 f0	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00036	50		 push	 eax
  00037	8d 45 f4	 lea	 eax, DWORD PTR __$EHRec$[ebp]
  0003a	64 a3 00 00 00
	00		 mov	 DWORD PTR fs:0, eax
  00040	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00045	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3260 :     // You can pass in a reference ImGuiStyle structure to compare to, revert to and save to (else it compares to an internally stored reference)
; 3261 :     ImGuiStyle& style = ImGui::GetStyle();

  0004a	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  0004f	89 45 e8	 mov	 DWORD PTR _style$[ebp], eax

; 3262 :     static ImGuiStyle ref_saved_style;

  00052	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  00057	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  0005e	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00061	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00066	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  0006c	7e 3b		 jle	 SHORT $LN2@ShowStyleE
  0006e	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00073	e8 00 00 00 00	 call	 __Init_thread_header
  00078	83 c4 04	 add	 esp, 4
  0007b	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA, -1
  00082	75 25		 jne	 SHORT $LN2@ShowStyleE
  00084	c7 45 fc 00 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 0
  0008b	b9 00 00 00 00	 mov	 ecx, OFFSET ?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A
  00090	e8 00 00 00 00	 call	 ??0ImGuiStyle@@QAE@XZ	; ImGuiStyle::ImGuiStyle
  00095	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  0009c	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  000a1	e8 00 00 00 00	 call	 __Init_thread_footer
  000a6	83 c4 04	 add	 esp, 4
$LN2@ShowStyleE:

; 3263 : 
; 3264 :     // Default to using internal storage as reference
; 3265 :     static bool init = true;
; 3266 :     if (init && ref == NULL)

  000a9	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?init@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4_NA
  000b0	85 c0		 test	 eax, eax
  000b2	74 15		 je	 SHORT $LN25@ShowStyleE
  000b4	83 7d 08 00	 cmp	 DWORD PTR _ref$[ebp], 0
  000b8	75 0f		 jne	 SHORT $LN25@ShowStyleE

; 3267 :         ref_saved_style = style;

  000ba	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  000bf	8b 75 e8	 mov	 esi, DWORD PTR _style$[ebp]
  000c2	bf 00 00 00 00	 mov	 edi, OFFSET ?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A
  000c7	f3 a5		 rep movsd
$LN25@ShowStyleE:

; 3268 :     init = false;

  000c9	c6 05 00 00 00
	00 00		 mov	 BYTE PTR ?init@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4_NA, 0

; 3269 :     if (ref == NULL)

  000d0	83 7d 08 00	 cmp	 DWORD PTR _ref$[ebp], 0
  000d4	75 07		 jne	 SHORT $LN26@ShowStyleE

; 3270 :         ref = &ref_saved_style;

  000d6	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _ref$[ebp], OFFSET ?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A
$LN26@ShowStyleE:

; 3271 : 
; 3272 :     ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.50f);

  000dd	e8 00 00 00 00	 call	 ?GetWindowWidth@ImGui@@YAMXZ ; ImGui::GetWindowWidth
  000e2	d9 9d 34 fc ff
	ff		 fstp	 DWORD PTR tv1099[ebp]
  000e8	f3 0f 10 85 34
	fc ff ff	 movss	 xmm0, DWORD PTR tv1099[ebp]
  000f0	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f000000
  000f8	51		 push	 ecx
  000f9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000fe	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  00103	83 c4 04	 add	 esp, 4

; 3273 : 
; 3274 :     if (ImGui::ShowStyleSelector("Colors##Selector"))

  00106	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MDDLAALC@Colors?$CD?$CDSelector@
  0010b	e8 00 00 00 00	 call	 ?ShowStyleSelector@ImGui@@YA_NPBD@Z ; ImGui::ShowStyleSelector
  00110	83 c4 04	 add	 esp, 4
  00113	0f b6 c0	 movzx	 eax, al
  00116	85 c0		 test	 eax, eax
  00118	74 0f		 je	 SHORT $LN27@ShowStyleE

; 3275 :         ref_saved_style = style;

  0011a	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  0011f	8b 75 e8	 mov	 esi, DWORD PTR _style$[ebp]
  00122	bf 00 00 00 00	 mov	 edi, OFFSET ?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A
  00127	f3 a5		 rep movsd
$LN27@ShowStyleE:

; 3276 :     ImGui::ShowFontSelector("Fonts##Selector");

  00129	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OGAKFFL@Fonts?$CD?$CDSelector@
  0012e	e8 00 00 00 00	 call	 ?ShowFontSelector@ImGui@@YAXPBD@Z ; ImGui::ShowFontSelector
  00133	83 c4 04	 add	 esp, 4

; 3277 : 
; 3278 :     // Simplified Settings
; 3279 :     if (ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f"))

  00136	51		 push	 ecx
  00137	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0013f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00144	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00149	51		 push	 ecx
  0014a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  00152	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00157	51		 push	 ecx
  00158	0f 57 c0	 xorps	 xmm0, xmm0
  0015b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00160	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00163	83 c0 40	 add	 eax, 64			; 00000040H
  00166	50		 push	 eax
  00167	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MJEGPPND@FrameRounding@
  0016c	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00171	83 c4 18	 add	 esp, 24			; 00000018H
  00174	0f b6 c8	 movzx	 ecx, al
  00177	85 c9		 test	 ecx, ecx
  00179	74 0c		 je	 SHORT $LN28@ShowStyleE

; 3280 :         style.GrabRounding = style.FrameRounding; // Make GrabRounding always the same value as FrameRounding

  0017b	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0017e	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  00181	8b 51 40	 mov	 edx, DWORD PTR [ecx+64]
  00184	89 50 74	 mov	 DWORD PTR [eax+116], edx
$LN28@ShowStyleE:

; 3281 :     { bool window_border = (style.WindowBorderSize > 0.0f); if (ImGui::Checkbox("WindowBorder", &window_border)) style.WindowBorderSize = window_border ? 1.0f : 0.0f; }

  00187	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0018a	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  0018f	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00196	76 0c		 jbe	 SHORT $LN60@ShowStyleE
  00198	c7 85 34 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv134[ebp], 1
  001a2	eb 0a		 jmp	 SHORT $LN61@ShowStyleE
$LN60@ShowStyleE:
  001a4	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv134[ebp], 0
$LN61@ShowStyleE:
  001ae	8a 8d 34 fc ff
	ff		 mov	 cl, BYTE PTR tv134[ebp]
  001b4	88 4d df	 mov	 BYTE PTR _window_border$41[ebp], cl
  001b7	8d 45 df	 lea	 eax, DWORD PTR _window_border$41[ebp]
  001ba	50		 push	 eax
  001bb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IABNAJJO@WindowBorder@
  001c0	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  001c5	83 c4 08	 add	 esp, 8
  001c8	0f b6 c8	 movzx	 ecx, al
  001cb	85 c9		 test	 ecx, ecx
  001cd	74 35		 je	 SHORT $LN29@ShowStyleE
  001cf	0f b6 45 df	 movzx	 eax, BYTE PTR _window_border$41[ebp]
  001d3	85 c0		 test	 eax, eax
  001d5	74 12		 je	 SHORT $LN62@ShowStyleE
  001d7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  001df	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR tv144[ebp], xmm0
  001e7	eb 0b		 jmp	 SHORT $LN63@ShowStyleE
$LN62@ShowStyleE:
  001e9	0f 57 c0	 xorps	 xmm0, xmm0
  001ec	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR tv144[ebp], xmm0
$LN63@ShowStyleE:
  001f4	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  001f7	f3 0f 10 85 34
	fc ff ff	 movss	 xmm0, DWORD PTR tv144[ebp]
  001ff	f3 0f 11 41 10	 movss	 DWORD PTR [ecx+16], xmm0
$LN29@ShowStyleE:

; 3282 :     ImGui::SameLine();

  00204	51		 push	 ecx
  00205	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0020d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00212	51		 push	 ecx
  00213	0f 57 c0	 xorps	 xmm0, xmm0
  00216	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0021b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00220	83 c4 08	 add	 esp, 8

; 3283 :     { bool frame_border = (style.FrameBorderSize > 0.0f); if (ImGui::Checkbox("FrameBorder", &frame_border)) style.FrameBorderSize = frame_border ? 1.0f : 0.0f; }

  00223	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00226	f3 0f 10 40 44	 movss	 xmm0, DWORD PTR [eax+68]
  0022b	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  00232	76 0c		 jbe	 SHORT $LN64@ShowStyleE
  00234	c7 85 34 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv149[ebp], 1
  0023e	eb 0a		 jmp	 SHORT $LN65@ShowStyleE
$LN64@ShowStyleE:
  00240	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv149[ebp], 0
$LN65@ShowStyleE:
  0024a	8a 8d 34 fc ff
	ff		 mov	 cl, BYTE PTR tv149[ebp]
  00250	88 4d d3	 mov	 BYTE PTR _frame_border$40[ebp], cl
  00253	8d 45 d3	 lea	 eax, DWORD PTR _frame_border$40[ebp]
  00256	50		 push	 eax
  00257	68 00 00 00 00	 push	 OFFSET ??_C@_0M@LIENHPEL@FrameBorder@
  0025c	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00261	83 c4 08	 add	 esp, 8
  00264	0f b6 c8	 movzx	 ecx, al
  00267	85 c9		 test	 ecx, ecx
  00269	74 35		 je	 SHORT $LN30@ShowStyleE
  0026b	0f b6 45 d3	 movzx	 eax, BYTE PTR _frame_border$40[ebp]
  0026f	85 c0		 test	 eax, eax
  00271	74 12		 je	 SHORT $LN66@ShowStyleE
  00273	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0027b	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR tv159[ebp], xmm0
  00283	eb 0b		 jmp	 SHORT $LN67@ShowStyleE
$LN66@ShowStyleE:
  00285	0f 57 c0	 xorps	 xmm0, xmm0
  00288	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR tv159[ebp], xmm0
$LN67@ShowStyleE:
  00290	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  00293	f3 0f 10 85 34
	fc ff ff	 movss	 xmm0, DWORD PTR tv159[ebp]
  0029b	f3 0f 11 41 44	 movss	 DWORD PTR [ecx+68], xmm0
$LN30@ShowStyleE:

; 3284 :     ImGui::SameLine();

  002a0	51		 push	 ecx
  002a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  002a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002ae	51		 push	 ecx
  002af	0f 57 c0	 xorps	 xmm0, xmm0
  002b2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002b7	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  002bc	83 c4 08	 add	 esp, 8

; 3285 :     { bool popup_border = (style.PopupBorderSize > 0.0f); if (ImGui::Checkbox("PopupBorder", &popup_border)) style.PopupBorderSize = popup_border ? 1.0f : 0.0f; }

  002bf	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  002c2	f3 0f 10 40 34	 movss	 xmm0, DWORD PTR [eax+52]
  002c7	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  002ce	76 0c		 jbe	 SHORT $LN68@ShowStyleE
  002d0	c7 85 34 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv164[ebp], 1
  002da	eb 0a		 jmp	 SHORT $LN69@ShowStyleE
$LN68@ShowStyleE:
  002dc	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv164[ebp], 0
$LN69@ShowStyleE:
  002e6	8a 8d 34 fc ff
	ff		 mov	 cl, BYTE PTR tv164[ebp]
  002ec	88 4d c7	 mov	 BYTE PTR _popup_border$39[ebp], cl
  002ef	8d 45 c7	 lea	 eax, DWORD PTR _popup_border$39[ebp]
  002f2	50		 push	 eax
  002f3	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NFCFILGL@PopupBorder@
  002f8	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  002fd	83 c4 08	 add	 esp, 8
  00300	0f b6 c8	 movzx	 ecx, al
  00303	85 c9		 test	 ecx, ecx
  00305	74 35		 je	 SHORT $LN31@ShowStyleE
  00307	0f b6 45 c7	 movzx	 eax, BYTE PTR _popup_border$39[ebp]
  0030b	85 c0		 test	 eax, eax
  0030d	74 12		 je	 SHORT $LN70@ShowStyleE
  0030f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00317	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR tv174[ebp], xmm0
  0031f	eb 0b		 jmp	 SHORT $LN71@ShowStyleE
$LN70@ShowStyleE:
  00321	0f 57 c0	 xorps	 xmm0, xmm0
  00324	f3 0f 11 85 34
	fc ff ff	 movss	 DWORD PTR tv174[ebp], xmm0
$LN71@ShowStyleE:
  0032c	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  0032f	f3 0f 10 85 34
	fc ff ff	 movss	 xmm0, DWORD PTR tv174[ebp]
  00337	f3 0f 11 41 34	 movss	 DWORD PTR [ecx+52], xmm0
$LN31@ShowStyleE:

; 3286 : 
; 3287 :     // Save/Revert button
; 3288 :     if (ImGui::Button("Save Ref"))

  0033c	51		 push	 ecx
  0033d	0f 57 c0	 xorps	 xmm0, xmm0
  00340	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00345	51		 push	 ecx
  00346	0f 57 c0	 xorps	 xmm0, xmm0
  00349	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0034e	8d 8d cc fc ff
	ff		 lea	 ecx, DWORD PTR $T11[ebp]
  00354	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00359	50		 push	 eax
  0035a	68 00 00 00 00	 push	 OFFSET ??_C@_08EEJHGAPI@Save?5Ref@
  0035f	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00364	83 c4 08	 add	 esp, 8
  00367	0f b6 c0	 movzx	 eax, al
  0036a	85 c0		 test	 eax, eax
  0036c	74 1e		 je	 SHORT $LN32@ShowStyleE

; 3289 :         *ref = ref_saved_style = style;

  0036e	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  00373	8b 75 e8	 mov	 esi, DWORD PTR _style$[ebp]
  00376	bf 00 00 00 00	 mov	 edi, OFFSET ?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A
  0037b	f3 a5		 rep movsd
  0037d	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  00382	be 00 00 00 00	 mov	 esi, OFFSET ?ref_saved_style@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4U3@A
  00387	8b 7d 08	 mov	 edi, DWORD PTR _ref$[ebp]
  0038a	f3 a5		 rep movsd
$LN32@ShowStyleE:

; 3290 :     ImGui::SameLine();

  0038c	51		 push	 ecx
  0038d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00395	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0039a	51		 push	 ecx
  0039b	0f 57 c0	 xorps	 xmm0, xmm0
  0039e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003a3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  003a8	83 c4 08	 add	 esp, 8

; 3291 :     if (ImGui::Button("Revert Ref"))

  003ab	51		 push	 ecx
  003ac	0f 57 c0	 xorps	 xmm0, xmm0
  003af	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003b4	51		 push	 ecx
  003b5	0f 57 c0	 xorps	 xmm0, xmm0
  003b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003bd	8d 8d bc fc ff
	ff		 lea	 ecx, DWORD PTR $T10[ebp]
  003c3	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  003c8	50		 push	 eax
  003c9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@KOOMFCFA@Revert?5Ref@
  003ce	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  003d3	83 c4 08	 add	 esp, 8
  003d6	0f b6 c0	 movzx	 eax, al
  003d9	85 c0		 test	 eax, eax
  003db	74 0d		 je	 SHORT $LN33@ShowStyleE

; 3292 :         style = *ref;

  003dd	b9 ec 00 00 00	 mov	 ecx, 236		; 000000ecH
  003e2	8b 75 08	 mov	 esi, DWORD PTR _ref$[ebp]
  003e5	8b 7d e8	 mov	 edi, DWORD PTR _style$[ebp]
  003e8	f3 a5		 rep movsd
$LN33@ShowStyleE:

; 3293 :     ImGui::SameLine();

  003ea	51		 push	 ecx
  003eb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  003f3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  003f8	51		 push	 ecx
  003f9	0f 57 c0	 xorps	 xmm0, xmm0
  003fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00401	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00406	83 c4 08	 add	 esp, 8

; 3294 :     HelpMarker("Save/Revert in local non-persistent storage. Default Colors definition are not affected. Use \"Export\" below to save them somewhere.");

  00409	68 00 00 00 00	 push	 OFFSET ??_C@_0IE@DBDEKJDM@Save?1Revert?5in?5local?5non?9persis@
  0040e	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00413	83 c4 04	 add	 esp, 4

; 3295 : 
; 3296 :     ImGui::Separator();

  00416	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3297 : 
; 3298 :     if (ImGui::BeginTabBar("##tabs", ImGuiTabBarFlags_None))

  0041b	6a 00		 push	 0
  0041d	68 00 00 00 00	 push	 OFFSET ??_C@_06NNHHJHAK@?$CD?$CDtabs@
  00422	e8 00 00 00 00	 call	 ?BeginTabBar@ImGui@@YA_NPBDH@Z ; ImGui::BeginTabBar
  00427	83 c4 08	 add	 esp, 8
  0042a	0f b6 c0	 movzx	 eax, al
  0042d	85 c0		 test	 eax, eax
  0042f	0f 84 ff 18 00
	00		 je	 $LN34@ShowStyleE

; 3299 :     {
; 3300 :         if (ImGui::BeginTabItem("Sizes"))

  00435	6a 00		 push	 0
  00437	6a 00		 push	 0
  00439	68 00 00 00 00	 push	 OFFSET ??_C@_05BOIJFCDP@Sizes@
  0043e	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  00443	83 c4 0c	 add	 esp, 12			; 0000000cH
  00446	0f b6 c0	 movzx	 eax, al
  00449	85 c0		 test	 eax, eax
  0044b	0f 84 fe 06 00
	00		 je	 $LN35@ShowStyleE

; 3301 :         {
; 3302 :             ImGui::Text("Main");

  00451	68 00 00 00 00	 push	 OFFSET ??_C@_04KGFMLCPK@Main@
  00456	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0045b	83 c4 04	 add	 esp, 4

; 3303 :             ImGui::SliderFloat2("WindowPadding", (float*)&style.WindowPadding, 0.0f, 20.0f, "%.0f");

  0045e	51		 push	 ecx
  0045f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00467	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0046c	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00471	51		 push	 ecx
  00472	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  0047a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0047f	51		 push	 ecx
  00480	0f 57 c0	 xorps	 xmm0, xmm0
  00483	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00488	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0048b	83 c0 04	 add	 eax, 4
  0048e	50		 push	 eax
  0048f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NJEPBHAL@WindowPadding@
  00494	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00499	83 c4 18	 add	 esp, 24			; 00000018H

; 3304 :             ImGui::SliderFloat2("FramePadding", (float*)&style.FramePadding, 0.0f, 20.0f, "%.0f");

  0049c	51		 push	 ecx
  0049d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004a5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004aa	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  004af	51		 push	 ecx
  004b0	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  004b8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004bd	51		 push	 ecx
  004be	0f 57 c0	 xorps	 xmm0, xmm0
  004c1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004c6	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  004c9	83 c0 38	 add	 eax, 56			; 00000038H
  004cc	50		 push	 eax
  004cd	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CPMOGBCG@FramePadding@
  004d2	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  004d7	83 c4 18	 add	 esp, 24			; 00000018H

; 3305 :             ImGui::SliderFloat2("ItemSpacing", (float*)&style.ItemSpacing, 0.0f, 20.0f, "%.0f");

  004da	51		 push	 ecx
  004db	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  004e3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004e8	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  004ed	51		 push	 ecx
  004ee	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  004f6	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  004fb	51		 push	 ecx
  004fc	0f 57 c0	 xorps	 xmm0, xmm0
  004ff	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00504	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00507	83 c0 48	 add	 eax, 72			; 00000048H
  0050a	50		 push	 eax
  0050b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PJNJGKOI@ItemSpacing@
  00510	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00515	83 c4 18	 add	 esp, 24			; 00000018H

; 3306 :             ImGui::SliderFloat2("ItemInnerSpacing", (float*)&style.ItemInnerSpacing, 0.0f, 20.0f, "%.0f");

  00518	51		 push	 ecx
  00519	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00521	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00526	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  0052b	51		 push	 ecx
  0052c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  00534	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00539	51		 push	 ecx
  0053a	0f 57 c0	 xorps	 xmm0, xmm0
  0053d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00542	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00545	83 c0 50	 add	 eax, 80			; 00000050H
  00548	50		 push	 eax
  00549	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@FPELPPEM@ItemInnerSpacing@
  0054e	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00553	83 c4 18	 add	 esp, 24			; 00000018H

; 3307 :             ImGui::SliderFloat2("TouchExtraPadding", (float*)&style.TouchExtraPadding, 0.0f, 10.0f, "%.0f");

  00556	51		 push	 ecx
  00557	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0055f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00564	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00569	51		 push	 ecx
  0056a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41200000
  00572	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00577	51		 push	 ecx
  00578	0f 57 c0	 xorps	 xmm0, xmm0
  0057b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00580	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00583	83 c0 58	 add	 eax, 88			; 00000058H
  00586	50		 push	 eax
  00587	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@CHKNMAIJ@TouchExtraPadding@
  0058c	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00591	83 c4 18	 add	 esp, 24			; 00000018H

; 3308 :             ImGui::SliderFloat("IndentSpacing", &style.IndentSpacing, 0.0f, 30.0f, "%.0f");

  00594	51		 push	 ecx
  00595	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0059d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005a2	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  005a7	51		 push	 ecx
  005a8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  005b0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005b5	51		 push	 ecx
  005b6	0f 57 c0	 xorps	 xmm0, xmm0
  005b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005be	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  005c1	83 c0 60	 add	 eax, 96			; 00000060H
  005c4	50		 push	 eax
  005c5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@FJCIMFNP@IndentSpacing@
  005ca	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  005cf	83 c4 18	 add	 esp, 24			; 00000018H

; 3309 :             ImGui::SliderFloat("ScrollbarSize", &style.ScrollbarSize, 1.0f, 20.0f, "%.0f");

  005d2	51		 push	 ecx
  005d3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005db	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005e0	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  005e5	51		 push	 ecx
  005e6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  005ee	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  005f3	51		 push	 ecx
  005f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  005fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00601	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00604	83 c0 68	 add	 eax, 104		; 00000068H
  00607	50		 push	 eax
  00608	68 00 00 00 00	 push	 OFFSET ??_C@_0O@DNFCAGJO@ScrollbarSize@
  0060d	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00612	83 c4 18	 add	 esp, 24			; 00000018H

; 3310 :             ImGui::SliderFloat("GrabMinSize", &style.GrabMinSize, 1.0f, 20.0f, "%.0f");

  00615	51		 push	 ecx
  00616	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0061e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00623	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00628	51		 push	 ecx
  00629	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  00631	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00636	51		 push	 ecx
  00637	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0063f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00644	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00647	83 c0 70	 add	 eax, 112		; 00000070H
  0064a	50		 push	 eax
  0064b	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MMBGIFGH@GrabMinSize@
  00650	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00655	83 c4 18	 add	 esp, 24			; 00000018H

; 3311 :             ImGui::Text("Borders");

  00658	68 00 00 00 00	 push	 OFFSET ??_C@_07PJFMDFHH@Borders@
  0065d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00662	83 c4 04	 add	 esp, 4

; 3312 :             ImGui::SliderFloat("WindowBorderSize", &style.WindowBorderSize, 0.0f, 1.0f, "%.0f");

  00665	51		 push	 ecx
  00666	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0066e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00673	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00678	51		 push	 ecx
  00679	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00681	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00686	51		 push	 ecx
  00687	0f 57 c0	 xorps	 xmm0, xmm0
  0068a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0068f	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00692	83 c0 10	 add	 eax, 16			; 00000010H
  00695	50		 push	 eax
  00696	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DIOLDNNC@WindowBorderSize@
  0069b	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  006a0	83 c4 18	 add	 esp, 24			; 00000018H

; 3313 :             ImGui::SliderFloat("ChildBorderSize", &style.ChildBorderSize, 0.0f, 1.0f, "%.0f");

  006a3	51		 push	 ecx
  006a4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ac	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006b1	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  006b6	51		 push	 ecx
  006b7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006bf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c4	51		 push	 ecx
  006c5	0f 57 c0	 xorps	 xmm0, xmm0
  006c8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006cd	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  006d0	83 c0 2c	 add	 eax, 44			; 0000002cH
  006d3	50		 push	 eax
  006d4	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@MHPKDBMC@ChildBorderSize@
  006d9	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  006de	83 c4 18	 add	 esp, 24			; 00000018H

; 3314 :             ImGui::SliderFloat("PopupBorderSize", &style.PopupBorderSize, 0.0f, 1.0f, "%.0f");

  006e1	51		 push	 ecx
  006e2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006ea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006ef	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  006f4	51		 push	 ecx
  006f5	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  006fd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00702	51		 push	 ecx
  00703	0f 57 c0	 xorps	 xmm0, xmm0
  00706	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0070b	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0070e	83 c0 34	 add	 eax, 52			; 00000034H
  00711	50		 push	 eax
  00712	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@GHHMANCJ@PopupBorderSize@
  00717	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  0071c	83 c4 18	 add	 esp, 24			; 00000018H

; 3315 :             ImGui::SliderFloat("FrameBorderSize", &style.FrameBorderSize, 0.0f, 1.0f, "%.0f");

  0071f	51		 push	 ecx
  00720	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00728	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0072d	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00732	51		 push	 ecx
  00733	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0073b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00740	51		 push	 ecx
  00741	0f 57 c0	 xorps	 xmm0, xmm0
  00744	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00749	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0074c	83 c0 44	 add	 eax, 68			; 00000044H
  0074f	50		 push	 eax
  00750	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@OLKEIFFB@FrameBorderSize@
  00755	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  0075a	83 c4 18	 add	 esp, 24			; 00000018H

; 3316 :             ImGui::SliderFloat("TabBorderSize", &style.TabBorderSize, 0.0f, 1.0f, "%.0f");

  0075d	51		 push	 ecx
  0075e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00766	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0076b	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00770	51		 push	 ecx
  00771	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00779	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0077e	51		 push	 ecx
  0077f	0f 57 c0	 xorps	 xmm0, xmm0
  00782	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00787	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0078a	83 c0 7c	 add	 eax, 124		; 0000007cH
  0078d	50		 push	 eax
  0078e	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MEMGDJEN@TabBorderSize@
  00793	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00798	83 c4 18	 add	 esp, 24			; 00000018H

; 3317 :             ImGui::Text("Rounding");

  0079b	68 00 00 00 00	 push	 OFFSET ??_C@_08ICFONDFO@Rounding@
  007a0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  007a5	83 c4 04	 add	 esp, 4

; 3318 :             ImGui::SliderFloat("WindowRounding", &style.WindowRounding, 0.0f, 12.0f, "%.0f");

  007a8	51		 push	 ecx
  007a9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007b1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007b6	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  007bb	51		 push	 ecx
  007bc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  007c4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c9	51		 push	 ecx
  007ca	0f 57 c0	 xorps	 xmm0, xmm0
  007cd	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007d2	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  007d5	83 c0 0c	 add	 eax, 12			; 0000000cH
  007d8	50		 push	 eax
  007d9	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IMGPCCNA@WindowRounding@
  007de	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  007e3	83 c4 18	 add	 esp, 24			; 00000018H

; 3319 :             ImGui::SliderFloat("ChildRounding", &style.ChildRounding, 0.0f, 12.0f, "%.0f");

  007e6	51		 push	 ecx
  007e7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  007ef	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007f4	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  007f9	51		 push	 ecx
  007fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  00802	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00807	51		 push	 ecx
  00808	0f 57 c0	 xorps	 xmm0, xmm0
  0080b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00810	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00813	83 c0 28	 add	 eax, 40			; 00000028H
  00816	50		 push	 eax
  00817	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OLPNJDEC@ChildRounding@
  0081c	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00821	83 c4 18	 add	 esp, 24			; 00000018H

; 3320 :             ImGui::SliderFloat("FrameRounding", &style.FrameRounding, 0.0f, 12.0f, "%.0f");

  00824	51		 push	 ecx
  00825	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0082d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00832	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00837	51		 push	 ecx
  00838	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  00840	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00845	51		 push	 ecx
  00846	0f 57 c0	 xorps	 xmm0, xmm0
  00849	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084e	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00851	83 c0 40	 add	 eax, 64			; 00000040H
  00854	50		 push	 eax
  00855	68 00 00 00 00	 push	 OFFSET ??_C@_0O@MJEGPPND@FrameRounding@
  0085a	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  0085f	83 c4 18	 add	 esp, 24			; 00000018H

; 3321 :             ImGui::SliderFloat("PopupRounding", &style.PopupRounding, 0.0f, 12.0f, "%.0f");

  00862	51		 push	 ecx
  00863	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0086b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00870	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00875	51		 push	 ecx
  00876	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  0087e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00883	51		 push	 ecx
  00884	0f 57 c0	 xorps	 xmm0, xmm0
  00887	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0088c	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0088f	83 c0 30	 add	 eax, 48			; 00000030H
  00892	50		 push	 eax
  00893	68 00 00 00 00	 push	 OFFSET ??_C@_0O@OGBCIABM@PopupRounding@
  00898	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  0089d	83 c4 18	 add	 esp, 24			; 00000018H

; 3322 :             ImGui::SliderFloat("ScrollbarRounding", &style.ScrollbarRounding, 0.0f, 12.0f, "%.0f");

  008a0	51		 push	 ecx
  008a1	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008a9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ae	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  008b3	51		 push	 ecx
  008b4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  008bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008c1	51		 push	 ecx
  008c2	0f 57 c0	 xorps	 xmm0, xmm0
  008c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ca	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  008cd	83 c0 6c	 add	 eax, 108		; 0000006cH
  008d0	50		 push	 eax
  008d1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@IGAFHGEC@ScrollbarRounding@
  008d6	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  008db	83 c4 18	 add	 esp, 24			; 00000018H

; 3323 :             ImGui::SliderFloat("GrabRounding", &style.GrabRounding, 0.0f, 12.0f, "%.0f");

  008de	51		 push	 ecx
  008df	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  008e7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ec	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  008f1	51		 push	 ecx
  008f2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  008fa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008ff	51		 push	 ecx
  00900	0f 57 c0	 xorps	 xmm0, xmm0
  00903	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00908	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0090b	83 c0 74	 add	 eax, 116		; 00000074H
  0090e	50		 push	 eax
  0090f	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CHOEJEFP@GrabRounding@
  00914	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00919	83 c4 18	 add	 esp, 24			; 00000018H

; 3324 :             ImGui::SliderFloat("TabRounding", &style.TabRounding, 0.0f, 12.0f, "%.0f");

  0091c	51		 push	 ecx
  0091d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00925	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0092a	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  0092f	51		 push	 ecx
  00930	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41400000
  00938	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0093d	51		 push	 ecx
  0093e	0f 57 c0	 xorps	 xmm0, xmm0
  00941	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00946	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00949	83 c0 78	 add	 eax, 120		; 00000078H
  0094c	50		 push	 eax
  0094d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GELHPNFJ@TabRounding@
  00952	e8 00 00 00 00	 call	 ?SliderFloat@ImGui@@YA_NPBDPAMMM0M@Z ; ImGui::SliderFloat
  00957	83 c4 18	 add	 esp, 24			; 00000018H

; 3325 :             ImGui::Text("Alignment");

  0095a	68 00 00 00 00	 push	 OFFSET ??_C@_09FBMAGD@Alignment@
  0095f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00964	83 c4 04	 add	 esp, 4

; 3326 :             ImGui::SliderFloat2("WindowTitleAlign", (float*)&style.WindowTitleAlign, 0.0f, 1.0f, "%.2f");

  00967	51		 push	 ecx
  00968	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00970	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00975	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  0097a	51		 push	 ecx
  0097b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00983	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00988	51		 push	 ecx
  00989	0f 57 c0	 xorps	 xmm0, xmm0
  0098c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00991	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00994	83 c0 1c	 add	 eax, 28			; 0000001cH
  00997	50		 push	 eax
  00998	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@IFNMJCJO@WindowTitleAlign@
  0099d	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  009a2	83 c4 18	 add	 esp, 24			; 00000018H

; 3327 :             int window_menu_button_position = style.WindowMenuButtonPosition + 1;

  009a5	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  009a8	8b 48 24	 mov	 ecx, DWORD PTR [eax+36]
  009ab	83 c1 01	 add	 ecx, 1
  009ae	89 4d b8	 mov	 DWORD PTR _window_menu_button_position$38[ebp], ecx

; 3328 :             if (ImGui::Combo("WindowMenuButtonPosition", (int*)&window_menu_button_position, "None\0Left\0Right\0"))

  009b1	6a ff		 push	 -1
  009b3	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@ECHPPBJL@None?$AALeft?$AARight?$AA@
  009b8	8d 45 b8	 lea	 eax, DWORD PTR _window_menu_button_position$38[ebp]
  009bb	50		 push	 eax
  009bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@INNLFKOF@WindowMenuButtonPosition@
  009c1	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  009c6	83 c4 10	 add	 esp, 16			; 00000010H
  009c9	0f b6 c8	 movzx	 ecx, al
  009cc	85 c9		 test	 ecx, ecx
  009ce	74 0c		 je	 SHORT $LN36@ShowStyleE

; 3329 :                 style.WindowMenuButtonPosition = window_menu_button_position - 1;

  009d0	8b 45 b8	 mov	 eax, DWORD PTR _window_menu_button_position$38[ebp]
  009d3	83 e8 01	 sub	 eax, 1
  009d6	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  009d9	89 41 24	 mov	 DWORD PTR [ecx+36], eax
$LN36@ShowStyleE:

; 3330 :             ImGui::Combo("ColorButtonPosition", (int*)&style.ColorButtonPosition, "Left\0Right\0");

  009dc	6a ff		 push	 -1
  009de	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PMLPANEE@Left?$AARight?$AA@
  009e3	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  009e6	05 80 00 00 00	 add	 eax, 128		; 00000080H
  009eb	50		 push	 eax
  009ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@HCCCHIDA@ColorButtonPosition@
  009f1	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  009f6	83 c4 10	 add	 esp, 16			; 00000010H

; 3331 :             ImGui::SliderFloat2("ButtonTextAlign", (float*)&style.ButtonTextAlign, 0.0f, 1.0f, "%.2f"); ImGui::SameLine(); HelpMarker("Alignment applies when a button is larger than its text content.");

  009f9	51		 push	 ecx
  009fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a07	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  00a0c	51		 push	 ecx
  00a0d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a15	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a1a	51		 push	 ecx
  00a1b	0f 57 c0	 xorps	 xmm0, xmm0
  00a1e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a23	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00a26	05 84 00 00 00	 add	 eax, 132		; 00000084H
  00a2b	50		 push	 eax
  00a2c	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@PHDMJLFL@ButtonTextAlign@
  00a31	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00a36	83 c4 18	 add	 esp, 24			; 00000018H
  00a39	51		 push	 ecx
  00a3a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a42	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a47	51		 push	 ecx
  00a48	0f 57 c0	 xorps	 xmm0, xmm0
  00a4b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a50	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a55	83 c4 08	 add	 esp, 8
  00a58	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@KHCCNPEP@Alignment?5applies?5when?5a?5button@
  00a5d	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00a62	83 c4 04	 add	 esp, 4

; 3332 :             ImGui::SliderFloat2("SelectableTextAlign", (float*)&style.SelectableTextAlign, 0.0f, 1.0f, "%.2f"); ImGui::SameLine(); HelpMarker("Alignment applies when a selectable is larger than its text content.");

  00a65	51		 push	 ecx
  00a66	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a6e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a73	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  00a78	51		 push	 ecx
  00a79	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00a81	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a86	51		 push	 ecx
  00a87	0f 57 c0	 xorps	 xmm0, xmm0
  00a8a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a8f	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00a92	05 8c 00 00 00	 add	 eax, 140		; 0000008cH
  00a97	50		 push	 eax
  00a98	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@OFFKFPJC@SelectableTextAlign@
  00a9d	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00aa2	83 c4 18	 add	 esp, 24			; 00000018H
  00aa5	51		 push	 ecx
  00aa6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00aae	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ab3	51		 push	 ecx
  00ab4	0f 57 c0	 xorps	 xmm0, xmm0
  00ab7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00abc	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00ac1	83 c4 08	 add	 esp, 8
  00ac4	68 00 00 00 00	 push	 OFFSET ??_C@_0EF@EIJADJPM@Alignment?5applies?5when?5a?5select@
  00ac9	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00ace	83 c4 04	 add	 esp, 4

; 3333 :             ImGui::Text("Safe Area Padding"); ImGui::SameLine(); HelpMarker("Adjust if you cannot see the edges of your screen (e.g. on a TV where scaling has not been configured).");

  00ad1	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FINEDBHB@Safe?5Area?5Padding@
  00ad6	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00adb	83 c4 04	 add	 esp, 4
  00ade	51		 push	 ecx
  00adf	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00ae7	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00aec	51		 push	 ecx
  00aed	0f 57 c0	 xorps	 xmm0, xmm0
  00af0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af5	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00afa	83 c4 08	 add	 esp, 8
  00afd	68 00 00 00 00	 push	 OFFSET ??_C@_0GI@OFDAJLLA@Adjust?5if?5you?5cannot?5see?5the?5ed@
  00b02	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00b07	83 c4 04	 add	 esp, 4

; 3334 :             ImGui::SliderFloat2("DisplaySafeAreaPadding", (float*)&style.DisplaySafeAreaPadding, 0.0f, 30.0f, "%.0f");

  00b0a	51		 push	 ecx
  00b0b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  00b13	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b18	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  00b1d	51		 push	 ecx
  00b1e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41f00000
  00b26	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b2b	51		 push	 ecx
  00b2c	0f 57 c0	 xorps	 xmm0, xmm0
  00b2f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b34	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00b37	05 9c 00 00 00	 add	 eax, 156		; 0000009cH
  00b3c	50		 push	 eax
  00b3d	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@NLJOADCC@DisplaySafeAreaPadding@
  00b42	e8 00 00 00 00	 call	 ?SliderFloat2@ImGui@@YA_NPBDQAMMM0M@Z ; ImGui::SliderFloat2
  00b47	83 c4 18	 add	 esp, 24			; 00000018H

; 3335 :             ImGui::EndTabItem();

  00b4a	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN35@ShowStyleE:

; 3336 :         }
; 3337 : 
; 3338 :         if (ImGui::BeginTabItem("Colors"))

  00b4f	6a 00		 push	 0
  00b51	6a 00		 push	 0
  00b53	68 00 00 00 00	 push	 OFFSET ??_C@_06ICDCBJPI@Colors@
  00b58	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  00b5d	83 c4 0c	 add	 esp, 12			; 0000000cH
  00b60	0f b6 c0	 movzx	 eax, al
  00b63	85 c0		 test	 eax, eax
  00b65	0f 84 57 05 00
	00		 je	 $LN37@ShowStyleE

; 3339 :         {
; 3340 :             static int output_dest = 0;
; 3341 :             static bool output_only_modified = true;
; 3342 :             if (ImGui::Button("Export"))

  00b6b	51		 push	 ecx
  00b6c	0f 57 c0	 xorps	 xmm0, xmm0
  00b6f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b74	51		 push	 ecx
  00b75	0f 57 c0	 xorps	 xmm0, xmm0
  00b78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b7d	8d 8d ac fc ff
	ff		 lea	 ecx, DWORD PTR $T9[ebp]
  00b83	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00b88	50		 push	 eax
  00b89	68 00 00 00 00	 push	 OFFSET ??_C@_06BFGAPCKF@Export@
  00b8e	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00b93	83 c4 08	 add	 esp, 8
  00b96	0f b6 c0	 movzx	 eax, al
  00b99	85 c0		 test	 eax, eax
  00b9b	0f 84 0b 01 00
	00		 je	 $LN38@ShowStyleE

; 3343 :             {
; 3344 :                 if (output_dest == 0)

  00ba1	83 3d 00 00 00
	00 00		 cmp	 DWORD PTR ?output_dest@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA, 0
  00ba8	75 0c		 jne	 SHORT $LN39@ShowStyleE

; 3345 :                     ImGui::LogToClipboard();

  00baa	6a ff		 push	 -1
  00bac	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
  00bb1	83 c4 04	 add	 esp, 4
  00bb4	eb 0a		 jmp	 SHORT $LN40@ShowStyleE
$LN39@ShowStyleE:

; 3346 :                 else
; 3347 :                     ImGui::LogToTTY();

  00bb6	6a ff		 push	 -1
  00bb8	e8 00 00 00 00	 call	 ?LogToTTY@ImGui@@YAXH@Z	; ImGui::LogToTTY
  00bbd	83 c4 04	 add	 esp, 4
$LN40@ShowStyleE:

; 3348 :                 ImGui::LogText("ImVec4* colors = ImGui::GetStyle().Colors;" IM_NEWLINE);

  00bc0	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@IIGPHJOL@ImVec4?$CK?5colors?5?$DN?5ImGui?3?3GetStyl@
  00bc5	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPBDZZ ; ImGui::LogText
  00bca	83 c4 04	 add	 esp, 4

; 3349 :                 for (int i = 0; i < ImGuiCol_COUNT; i++)

  00bcd	c7 45 ac 00 00
	00 00		 mov	 DWORD PTR _i$37[ebp], 0
  00bd4	eb 09		 jmp	 SHORT $LN5@ShowStyleE
$LN3@ShowStyleE:
  00bd6	8b 45 ac	 mov	 eax, DWORD PTR _i$37[ebp]
  00bd9	83 c0 01	 add	 eax, 1
  00bdc	89 45 ac	 mov	 DWORD PTR _i$37[ebp], eax
$LN5@ShowStyleE:
  00bdf	83 7d ac 30	 cmp	 DWORD PTR _i$37[ebp], 48 ; 00000030H
  00be3	0f 8d be 00 00
	00		 jge	 $LN4@ShowStyleE

; 3350 :                 {
; 3351 :                     const ImVec4& col = style.Colors[i];

  00be9	8b 45 ac	 mov	 eax, DWORD PTR _i$37[ebp]
  00bec	c1 e0 04	 shl	 eax, 4
  00bef	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  00bf2	8d 94 01 b0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+176]
  00bf9	89 55 a0	 mov	 DWORD PTR _col$36[ebp], edx

; 3352 :                     const char* name = ImGui::GetStyleColorName(i);

  00bfc	8b 45 ac	 mov	 eax, DWORD PTR _i$37[ebp]
  00bff	50		 push	 eax
  00c00	e8 00 00 00 00	 call	 ?GetStyleColorName@ImGui@@YAPBDH@Z ; ImGui::GetStyleColorName
  00c05	83 c4 04	 add	 esp, 4
  00c08	89 45 94	 mov	 DWORD PTR _name$35[ebp], eax

; 3353 :                     if (!output_only_modified || memcmp(&col, &ref->Colors[i], sizeof(ImVec4)) != 0)

  00c0b	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?output_only_modified@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4_NA
  00c12	85 c0		 test	 eax, eax
  00c14	74 23		 je	 SHORT $LN42@ShowStyleE
  00c16	6a 10		 push	 16			; 00000010H
  00c18	8b 45 ac	 mov	 eax, DWORD PTR _i$37[ebp]
  00c1b	c1 e0 04	 shl	 eax, 4
  00c1e	8b 4d 08	 mov	 ecx, DWORD PTR _ref$[ebp]
  00c21	8d 94 01 b0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+176]
  00c28	52		 push	 edx
  00c29	8b 45 a0	 mov	 eax, DWORD PTR _col$36[ebp]
  00c2c	50		 push	 eax
  00c2d	e8 00 00 00 00	 call	 _memcmp
  00c32	83 c4 0c	 add	 esp, 12			; 0000000cH
  00c35	85 c0		 test	 eax, eax
  00c37	74 69		 je	 SHORT $LN41@ShowStyleE
$LN42@ShowStyleE:

; 3354 :                         ImGui::LogText("colors[ImGuiCol_%s]%*s= ImVec4(%.2ff, %.2ff, %.2ff, %.2ff);" IM_NEWLINE, name, 23 - (int)strlen(name), "", col.x, col.y, col.z, col.w);

  00c39	8b 45 a0	 mov	 eax, DWORD PTR _col$36[ebp]
  00c3c	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  00c41	83 ec 08	 sub	 esp, 8
  00c44	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c49	8b 4d a0	 mov	 ecx, DWORD PTR _col$36[ebp]
  00c4c	f3 0f 5a 41 08	 cvtss2sd xmm0, DWORD PTR [ecx+8]
  00c51	83 ec 08	 sub	 esp, 8
  00c54	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c59	8b 55 a0	 mov	 edx, DWORD PTR _col$36[ebp]
  00c5c	f3 0f 5a 42 04	 cvtss2sd xmm0, DWORD PTR [edx+4]
  00c61	83 ec 08	 sub	 esp, 8
  00c64	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c69	8b 45 a0	 mov	 eax, DWORD PTR _col$36[ebp]
  00c6c	f3 0f 5a 00	 cvtss2sd xmm0, DWORD PTR [eax]
  00c70	83 ec 08	 sub	 esp, 8
  00c73	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00c78	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00c7d	8b 4d 94	 mov	 ecx, DWORD PTR _name$35[ebp]
  00c80	51		 push	 ecx
  00c81	e8 00 00 00 00	 call	 _strlen
  00c86	83 c4 04	 add	 esp, 4
  00c89	ba 17 00 00 00	 mov	 edx, 23			; 00000017H
  00c8e	2b d0		 sub	 edx, eax
  00c90	52		 push	 edx
  00c91	8b 45 94	 mov	 eax, DWORD PTR _name$35[ebp]
  00c94	50		 push	 eax
  00c95	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@CEAFKMHA@colors?$FLImGuiCol_?$CFs?$FN?$CF?$CKs?$DN?5ImVec4?$CI@
  00c9a	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPBDZZ ; ImGui::LogText
  00c9f	83 c4 30	 add	 esp, 48			; 00000030H
$LN41@ShowStyleE:

; 3355 :                 }

  00ca2	e9 2f ff ff ff	 jmp	 $LN3@ShowStyleE
$LN4@ShowStyleE:

; 3356 :                 ImGui::LogFinish();

  00ca7	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN38@ShowStyleE:

; 3357 :             }
; 3358 :             ImGui::SameLine(); ImGui::SetNextItemWidth(120); ImGui::Combo("##output_type", &output_dest, "To Clipboard\0To TTY\0");

  00cac	51		 push	 ecx
  00cad	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00cb5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cba	51		 push	 ecx
  00cbb	0f 57 c0	 xorps	 xmm0, xmm0
  00cbe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cc3	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00cc8	83 c4 08	 add	 esp, 8
  00ccb	51		 push	 ecx
  00ccc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42f00000
  00cd4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00cd9	e8 00 00 00 00	 call	 ?SetNextItemWidth@ImGui@@YAXM@Z ; ImGui::SetNextItemWidth
  00cde	83 c4 04	 add	 esp, 4
  00ce1	6a ff		 push	 -1
  00ce3	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@PKKCFHCF@To?5Clipboard?$AATo?5TTY?$AA@
  00ce8	68 00 00 00 00	 push	 OFFSET ?output_dest@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00ced	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BMBGJILK@?$CD?$CDoutput_type@
  00cf2	e8 00 00 00 00	 call	 ?Combo@ImGui@@YA_NPBDPAH0H@Z ; ImGui::Combo
  00cf7	83 c4 10	 add	 esp, 16			; 00000010H

; 3359 :             ImGui::SameLine(); ImGui::Checkbox("Only Modified Colors", &output_only_modified);

  00cfa	51		 push	 ecx
  00cfb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00d03	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d08	51		 push	 ecx
  00d09	0f 57 c0	 xorps	 xmm0, xmm0
  00d0c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00d11	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00d16	83 c4 08	 add	 esp, 8
  00d19	68 00 00 00 00	 push	 OFFSET ?output_only_modified@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4_NA
  00d1e	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@EKILLAGK@Only?5Modified?5Colors@
  00d23	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00d28	83 c4 08	 add	 esp, 8

; 3360 : 
; 3361 :             static ImGuiTextFilter filter;

  00d2b	a1 00 00 00 00	 mov	 eax, DWORD PTR __tls_index
  00d30	64 8b 0d 00 00
	00 00		 mov	 ecx, DWORD PTR fs:__tls_array
  00d37	8b 14 81	 mov	 edx, DWORD PTR [ecx+eax*4]
  00d3a	a1 00 00 00 00	 mov	 eax, DWORD PTR ?$TSS1@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00d3f	3b 82 00 00 00
	00		 cmp	 eax, DWORD PTR __Init_thread_epoch[edx]
  00d45	7e 4d		 jle	 SHORT $LN6@ShowStyleE
  00d47	68 00 00 00 00	 push	 OFFSET ?$TSS1@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00d4c	e8 00 00 00 00	 call	 __Init_thread_header
  00d51	83 c4 04	 add	 esp, 4
  00d54	83 3d 00 00 00
	00 ff		 cmp	 DWORD PTR ?$TSS1@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA, -1
  00d5b	75 37		 jne	 SHORT $LN6@ShowStyleE
  00d5d	c7 45 fc 01 00
	00 00		 mov	 DWORD PTR __$EHRec$[ebp+8], 1
  00d64	68 00 00 00 00	 push	 OFFSET ??_C@_00CNPNBAHC@@
  00d69	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00d6e	e8 00 00 00 00	 call	 ??0ImGuiTextFilter@@QAE@PBD@Z ; ImGuiTextFilter::ImGuiTextFilter
  00d73	68 00 00 00 00	 push	 OFFSET ??__Ffilter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@YAXXZ ; `ImGui::ShowStyleEditor'::`34'::`dynamic atexit destructor for 'filter''
  00d78	e8 00 00 00 00	 call	 _atexit
  00d7d	83 c4 04	 add	 esp, 4
  00d80	c7 45 fc ff ff
	ff ff		 mov	 DWORD PTR __$EHRec$[ebp+8], -1
  00d87	68 00 00 00 00	 push	 OFFSET ?$TSS1@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00d8c	e8 00 00 00 00	 call	 __Init_thread_footer
  00d91	83 c4 04	 add	 esp, 4
$LN6@ShowStyleE:

; 3362 :             filter.Draw("Filter colors", ImGui::GetFontSize() * 16);

  00d94	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00d99	d9 9d 34 fc ff
	ff		 fstp	 DWORD PTR tv1415[ebp]
  00d9f	f3 0f 10 85 34
	fc ff ff	 movss	 xmm0, DWORD PTR tv1415[ebp]
  00da7	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  00daf	51		 push	 ecx
  00db0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00db5	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ECALKMOF@Filter?5colors@
  00dba	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00dbf	e8 00 00 00 00	 call	 ?Draw@ImGuiTextFilter@@QAE_NPBDM@Z ; ImGuiTextFilter::Draw

; 3363 : 
; 3364 :             static ImGuiColorEditFlags alpha_flags = 0;
; 3365 :             ImGui::RadioButton("Opaque", &alpha_flags, 0); ImGui::SameLine();

  00dc4	6a 00		 push	 0
  00dc6	68 00 00 00 00	 push	 OFFSET ?alpha_flags@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00dcb	68 00 00 00 00	 push	 OFFSET ??_C@_06OGJDIEIN@Opaque@
  00dd0	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBDPAHH@Z ; ImGui::RadioButton
  00dd5	83 c4 0c	 add	 esp, 12			; 0000000cH
  00dd8	51		 push	 ecx
  00dd9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00de1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00de6	51		 push	 ecx
  00de7	0f 57 c0	 xorps	 xmm0, xmm0
  00dea	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00def	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00df4	83 c4 08	 add	 esp, 8

; 3366 :             ImGui::RadioButton("Alpha", &alpha_flags, ImGuiColorEditFlags_AlphaPreview); ImGui::SameLine();

  00df7	68 00 00 02 00	 push	 131072			; 00020000H
  00dfc	68 00 00 00 00	 push	 OFFSET ?alpha_flags@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00e01	68 00 00 00 00	 push	 OFFSET ??_C@_05IHOGHNDL@Alpha@
  00e06	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBDPAHH@Z ; ImGui::RadioButton
  00e0b	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e0e	51		 push	 ecx
  00e0f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00e17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e1c	51		 push	 ecx
  00e1d	0f 57 c0	 xorps	 xmm0, xmm0
  00e20	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e25	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00e2a	83 c4 08	 add	 esp, 8

; 3367 :             ImGui::RadioButton("Both", &alpha_flags, ImGuiColorEditFlags_AlphaPreviewHalf); ImGui::SameLine();

  00e2d	68 00 00 04 00	 push	 262144			; 00040000H
  00e32	68 00 00 00 00	 push	 OFFSET ?alpha_flags@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00e37	68 00 00 00 00	 push	 OFFSET ??_C@_04IGHHMFLN@Both@
  00e3c	e8 00 00 00 00	 call	 ?RadioButton@ImGui@@YA_NPBDPAHH@Z ; ImGui::RadioButton
  00e41	83 c4 0c	 add	 esp, 12			; 0000000cH
  00e44	51		 push	 ecx
  00e45	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00e4d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e52	51		 push	 ecx
  00e53	0f 57 c0	 xorps	 xmm0, xmm0
  00e56	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e5b	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00e60	83 c4 08	 add	 esp, 8

; 3368 :             HelpMarker("In the color list:\nLeft-click on colored square to open color picker,\nRight-click to open edit options menu.");

  00e63	68 00 00 00 00	 push	 OFFSET ??_C@_0GN@IMCHBEFC@In?5the?5color?5list?3?6Left?9click?5o@
  00e68	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00e6d	83 c4 04	 add	 esp, 4

; 3369 : 
; 3370 :             ImGui::BeginChild("##colors", ImVec2(0, 0), true, ImGuiWindowFlags_AlwaysVerticalScrollbar | ImGuiWindowFlags_AlwaysHorizontalScrollbar | ImGuiWindowFlags_NavFlattened);

  00e70	68 00 c0 80 00	 push	 8437760			; 0080c000H
  00e75	6a 01		 push	 1
  00e77	51		 push	 ecx
  00e78	0f 57 c0	 xorps	 xmm0, xmm0
  00e7b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e80	51		 push	 ecx
  00e81	0f 57 c0	 xorps	 xmm0, xmm0
  00e84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00e89	8d 8d 9c fc ff
	ff		 lea	 ecx, DWORD PTR $T8[ebp]
  00e8f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00e94	50		 push	 eax
  00e95	68 00 00 00 00	 push	 OFFSET ??_C@_08PKGPDAGH@?$CD?$CDcolors@
  00e9a	e8 00 00 00 00	 call	 ?BeginChild@ImGui@@YA_NPBDABUImVec2@@_NH@Z ; ImGui::BeginChild
  00e9f	83 c4 10	 add	 esp, 16			; 00000010H

; 3371 :             ImGui::PushItemWidth(-160);

  00ea2	51		 push	 ecx
  00ea3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@c3200000
  00eab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00eb0	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  00eb5	83 c4 04	 add	 esp, 4

; 3372 :             for (int i = 0; i < ImGuiCol_COUNT; i++)

  00eb8	c7 45 88 00 00
	00 00		 mov	 DWORD PTR _i$34[ebp], 0
  00ebf	eb 09		 jmp	 SHORT $LN9@ShowStyleE
$LN7@ShowStyleE:
  00ec1	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00ec4	83 c0 01	 add	 eax, 1
  00ec7	89 45 88	 mov	 DWORD PTR _i$34[ebp], eax
$LN9@ShowStyleE:
  00eca	83 7d 88 30	 cmp	 DWORD PTR _i$34[ebp], 48 ; 00000030H
  00ece	0f 8d df 01 00
	00		 jge	 $LN8@ShowStyleE

; 3373 :             {
; 3374 :                 const char* name = ImGui::GetStyleColorName(i);

  00ed4	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00ed7	50		 push	 eax
  00ed8	e8 00 00 00 00	 call	 ?GetStyleColorName@ImGui@@YAPBDH@Z ; ImGui::GetStyleColorName
  00edd	83 c4 04	 add	 esp, 4
  00ee0	89 85 7c ff ff
	ff		 mov	 DWORD PTR _name$33[ebp], eax

; 3375 :                 if (!filter.PassFilter(name))

  00ee6	6a 00		 push	 0
  00ee8	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _name$33[ebp]
  00eee	50		 push	 eax
  00eef	b9 00 00 00 00	 mov	 ecx, OFFSET ?filter@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4UImGuiTextFilter@@A
  00ef4	e8 00 00 00 00	 call	 ?PassFilter@ImGuiTextFilter@@QBE_NPBD0@Z ; ImGuiTextFilter::PassFilter
  00ef9	0f b6 c8	 movzx	 ecx, al
  00efc	85 c9		 test	 ecx, ecx
  00efe	75 02		 jne	 SHORT $LN43@ShowStyleE

; 3376 :                     continue;

  00f00	eb bf		 jmp	 SHORT $LN7@ShowStyleE
$LN43@ShowStyleE:

; 3377 :                 ImGui::PushID(i);

  00f02	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00f05	50		 push	 eax
  00f06	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXH@Z	; ImGui::PushID
  00f0b	83 c4 04	 add	 esp, 4

; 3378 :                 ImGui::ColorEdit4("##color", (float*)&style.Colors[i], ImGuiColorEditFlags_AlphaBar | alpha_flags);

  00f0e	a1 00 00 00 00	 mov	 eax, DWORD PTR ?alpha_flags@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00f13	0d 00 00 01 00	 or	 eax, 65536		; 00010000H
  00f18	50		 push	 eax
  00f19	8b 4d 88	 mov	 ecx, DWORD PTR _i$34[ebp]
  00f1c	c1 e1 04	 shl	 ecx, 4
  00f1f	8b 55 e8	 mov	 edx, DWORD PTR _style$[ebp]
  00f22	8d 84 0a b0 00
	00 00		 lea	 eax, DWORD PTR [edx+ecx+176]
  00f29	50		 push	 eax
  00f2a	68 00 00 00 00	 push	 OFFSET ??_C@_07KJABCEJI@?$CD?$CDcolor@
  00f2f	e8 00 00 00 00	 call	 ?ColorEdit4@ImGui@@YA_NPBDQAMH@Z ; ImGui::ColorEdit4
  00f34	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3379 :                 if (memcmp(&style.Colors[i], &ref->Colors[i], sizeof(ImVec4)) != 0)

  00f37	6a 10		 push	 16			; 00000010H
  00f39	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00f3c	c1 e0 04	 shl	 eax, 4
  00f3f	8b 4d 08	 mov	 ecx, DWORD PTR _ref$[ebp]
  00f42	8d 94 01 b0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+176]
  00f49	52		 push	 edx
  00f4a	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00f4d	c1 e0 04	 shl	 eax, 4
  00f50	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  00f53	8d 94 01 b0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+176]
  00f5a	52		 push	 edx
  00f5b	e8 00 00 00 00	 call	 _memcmp
  00f60	83 c4 0c	 add	 esp, 12			; 0000000cH
  00f63	85 c0		 test	 eax, eax
  00f65	0f 84 0e 01 00
	00		 je	 $LN46@ShowStyleE

; 3380 :                 {
; 3381 :                     // Tips: in a real user application, you may want to merge and use an icon font into the main font, so instead of "Save"/"Revert" you'd use icons.
; 3382 :                     // Read the FAQ and docs/FONTS.txt about using icon fonts. It's really easy and super convenient!
; 3383 :                     ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Save")) ref->Colors[i] = style.Colors[i];

  00f6b	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00f6e	51		 push	 ecx
  00f6f	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  00f74	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f79	51		 push	 ecx
  00f7a	0f 57 c0	 xorps	 xmm0, xmm0
  00f7d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f82	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00f87	83 c4 08	 add	 esp, 8
  00f8a	51		 push	 ecx
  00f8b	0f 57 c0	 xorps	 xmm0, xmm0
  00f8e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f93	51		 push	 ecx
  00f94	0f 57 c0	 xorps	 xmm0, xmm0
  00f97	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00f9c	8d 8d 8c fc ff
	ff		 lea	 ecx, DWORD PTR $T7[ebp]
  00fa2	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00fa7	50		 push	 eax
  00fa8	68 00 00 00 00	 push	 OFFSET ??_C@_04INACKGJP@Save@
  00fad	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  00fb2	83 c4 08	 add	 esp, 8
  00fb5	0f b6 c0	 movzx	 eax, al
  00fb8	85 c0		 test	 eax, eax
  00fba	74 36		 je	 SHORT $LN45@ShowStyleE
  00fbc	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00fbf	c1 e0 04	 shl	 eax, 4
  00fc2	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  00fc5	8d 94 01 b0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+176]
  00fcc	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  00fcf	c1 e0 04	 shl	 eax, 4
  00fd2	8b 4d 08	 mov	 ecx, DWORD PTR _ref$[ebp]
  00fd5	8d 84 01 b0 00
	00 00		 lea	 eax, DWORD PTR [ecx+eax+176]
  00fdc	8b 0a		 mov	 ecx, DWORD PTR [edx]
  00fde	89 08		 mov	 DWORD PTR [eax], ecx
  00fe0	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  00fe3	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  00fe6	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  00fe9	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  00fec	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  00fef	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$LN45@ShowStyleE:

; 3384 :                     ImGui::SameLine(0.0f, style.ItemInnerSpacing.x); if (ImGui::Button("Revert")) style.Colors[i] = ref->Colors[i];

  00ff2	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  00ff5	51		 push	 ecx
  00ff6	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  00ffb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01000	51		 push	 ecx
  01001	0f 57 c0	 xorps	 xmm0, xmm0
  01004	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01009	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0100e	83 c4 08	 add	 esp, 8
  01011	51		 push	 ecx
  01012	0f 57 c0	 xorps	 xmm0, xmm0
  01015	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0101a	51		 push	 ecx
  0101b	0f 57 c0	 xorps	 xmm0, xmm0
  0101e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01023	8d 8d 7c fc ff
	ff		 lea	 ecx, DWORD PTR $T6[ebp]
  01029	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0102e	50		 push	 eax
  0102f	68 00 00 00 00	 push	 OFFSET ??_C@_06OIKMFEGE@Revert@
  01034	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  01039	83 c4 08	 add	 esp, 8
  0103c	0f b6 c0	 movzx	 eax, al
  0103f	85 c0		 test	 eax, eax
  01041	74 36		 je	 SHORT $LN46@ShowStyleE
  01043	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  01046	c1 e0 04	 shl	 eax, 4
  01049	8b 4d 08	 mov	 ecx, DWORD PTR _ref$[ebp]
  0104c	8d 94 01 b0 00
	00 00		 lea	 edx, DWORD PTR [ecx+eax+176]
  01053	8b 45 88	 mov	 eax, DWORD PTR _i$34[ebp]
  01056	c1 e0 04	 shl	 eax, 4
  01059	8b 4d e8	 mov	 ecx, DWORD PTR _style$[ebp]
  0105c	8d 84 01 b0 00
	00 00		 lea	 eax, DWORD PTR [ecx+eax+176]
  01063	8b 0a		 mov	 ecx, DWORD PTR [edx]
  01065	89 08		 mov	 DWORD PTR [eax], ecx
  01067	8b 4a 04	 mov	 ecx, DWORD PTR [edx+4]
  0106a	89 48 04	 mov	 DWORD PTR [eax+4], ecx
  0106d	8b 4a 08	 mov	 ecx, DWORD PTR [edx+8]
  01070	89 48 08	 mov	 DWORD PTR [eax+8], ecx
  01073	8b 52 0c	 mov	 edx, DWORD PTR [edx+12]
  01076	89 50 0c	 mov	 DWORD PTR [eax+12], edx
$LN46@ShowStyleE:

; 3385 :                 }
; 3386 :                 ImGui::SameLine(0.0f, style.ItemInnerSpacing.x);

  01079	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  0107c	51		 push	 ecx
  0107d	f3 0f 10 40 50	 movss	 xmm0, DWORD PTR [eax+80]
  01082	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01087	51		 push	 ecx
  01088	0f 57 c0	 xorps	 xmm0, xmm0
  0108b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01090	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01095	83 c4 08	 add	 esp, 8

; 3387 :                 ImGui::TextUnformatted(name);

  01098	6a 00		 push	 0
  0109a	8b 85 7c ff ff
	ff		 mov	 eax, DWORD PTR _name$33[ebp]
  010a0	50		 push	 eax
  010a1	e8 00 00 00 00	 call	 ?TextUnformatted@ImGui@@YAXPBD0@Z ; ImGui::TextUnformatted
  010a6	83 c4 08	 add	 esp, 8

; 3388 :                 ImGui::PopID();

  010a9	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 3389 :             }

  010ae	e9 0e fe ff ff	 jmp	 $LN7@ShowStyleE
$LN8@ShowStyleE:

; 3390 :             ImGui::PopItemWidth();

  010b3	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 3391 :             ImGui::EndChild();

  010b8	e8 00 00 00 00	 call	 ?EndChild@ImGui@@YAXXZ	; ImGui::EndChild

; 3392 : 
; 3393 :             ImGui::EndTabItem();

  010bd	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN37@ShowStyleE:

; 3394 :         }
; 3395 : 
; 3396 :         if (ImGui::BeginTabItem("Fonts"))

  010c2	6a 00		 push	 0
  010c4	6a 00		 push	 0
  010c6	68 00 00 00 00	 push	 OFFSET ??_C@_05ENDNDI@Fonts@
  010cb	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  010d0	83 c4 0c	 add	 esp, 12			; 0000000cH
  010d3	0f b6 c0	 movzx	 eax, al
  010d6	85 c0		 test	 eax, eax
  010d8	0f 84 f5 0a 00
	00		 je	 $LN47@ShowStyleE

; 3397 :         {
; 3398 :             ImGuiIO& io = ImGui::GetIO();

  010de	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  010e3	89 85 70 ff ff
	ff		 mov	 DWORD PTR _io$32[ebp], eax

; 3399 :             ImFontAtlas* atlas = io.Fonts;

  010e9	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _io$32[ebp]
  010ef	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  010f5	89 8d 64 ff ff
	ff		 mov	 DWORD PTR _atlas$31[ebp], ecx

; 3400 :             HelpMarker("Read FAQ and docs/FONTS.txt for details on font loading.");

  010fb	68 00 00 00 00	 push	 OFFSET ??_C@_0DJ@EDBFAJMO@Read?5FAQ?5and?5docs?1FONTS?4txt?5for@
  01100	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01105	83 c4 04	 add	 esp, 4

; 3401 :             ImGui::PushItemWidth(120);

  01108	51		 push	 ecx
  01109	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42f00000
  01111	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01116	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  0111b	83 c4 04	 add	 esp, 4

; 3402 :             for (int i = 0; i < atlas->Fonts.Size; i++)

  0111e	c7 85 58 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _i$30[ebp], 0
  01128	eb 0f		 jmp	 SHORT $LN12@ShowStyleE
$LN10@ShowStyleE:
  0112a	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$30[ebp]
  01130	83 c0 01	 add	 eax, 1
  01133	89 85 58 ff ff
	ff		 mov	 DWORD PTR _i$30[ebp], eax
$LN12@ShowStyleE:
  01139	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _atlas$31[ebp]
  0113f	8b 8d 58 ff ff
	ff		 mov	 ecx, DWORD PTR _i$30[ebp]
  01145	3b 48 34	 cmp	 ecx, DWORD PTR [eax+52]
  01148	0f 8d 5c 08 00
	00		 jge	 $LN11@ShowStyleE

; 3403 :             {
; 3404 :                 ImFont* font = atlas->Fonts[i];

  0114e	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$30[ebp]
  01154	50		 push	 eax
  01155	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _atlas$31[ebp]
  0115b	83 c1 34	 add	 ecx, 52			; 00000034H
  0115e	e8 00 00 00 00	 call	 ??A?$ImVector@PAUImFont@@@@QAEAAPAUImFont@@H@Z ; ImVector<ImFont *>::operator[]
  01163	8b 08		 mov	 ecx, DWORD PTR [eax]
  01165	89 8d 4c ff ff
	ff		 mov	 DWORD PTR _font$29[ebp], ecx

; 3405 :                 ImGui::PushID(font);

  0116b	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01171	50		 push	 eax
  01172	e8 00 00 00 00	 call	 ?PushID@ImGui@@YAXPBX@Z	; ImGui::PushID
  01177	83 c4 04	 add	 esp, 4

; 3406 :                 bool font_details_opened = ImGui::TreeNode(font, "Font %d: \"%s\"\n%.2f px, %d glyphs, %d file(s)", i, font->ConfigData ? font->ConfigData[0].Name : "", font->FontSize, font->Glyphs.Size, font->ConfigDataCount);

  0117a	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01180	83 78 3c 00	 cmp	 DWORD PTR [eax+60], 0
  01184	74 1d		 je	 SHORT $LN72@ShowStyleE
  01186	b9 78 00 00 00	 mov	 ecx, 120		; 00000078H
  0118b	6b d1 00	 imul	 edx, ecx, 0
  0118e	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01194	8b 48 3c	 mov	 ecx, DWORD PTR [eax+60]
  01197	8d 54 11 4a	 lea	 edx, DWORD PTR [ecx+edx+74]
  0119b	89 95 34 fc ff
	ff		 mov	 DWORD PTR tv690[ebp], edx
  011a1	eb 0a		 jmp	 SHORT $LN73@ShowStyleE
$LN72@ShowStyleE:
  011a3	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv690[ebp], OFFSET ??_C@_00CNPNBAHC@@
$LN73@ShowStyleE:
  011ad	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  011b3	0f bf 48 40	 movsx	 ecx, WORD PTR [eax+64]
  011b7	51		 push	 ecx
  011b8	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _font$29[ebp]
  011be	8b 42 20	 mov	 eax, DWORD PTR [edx+32]
  011c1	50		 push	 eax
  011c2	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  011c8	f3 0f 5a 41 10	 cvtss2sd xmm0, DWORD PTR [ecx+16]
  011cd	83 ec 08	 sub	 esp, 8
  011d0	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  011d5	8b 95 34 fc ff
	ff		 mov	 edx, DWORD PTR tv690[ebp]
  011db	52		 push	 edx
  011dc	8b 85 58 ff ff
	ff		 mov	 eax, DWORD PTR _i$30[ebp]
  011e2	50		 push	 eax
  011e3	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@DILJDNLP@Font?5?$CFd?3?5?$CC?$CFs?$CC?6?$CF?42f?5px?0?5?$CFd?5glyph@
  011e8	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  011ee	51		 push	 ecx
  011ef	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBXPBDZZ ; ImGui::TreeNode
  011f4	83 c4 20	 add	 esp, 32			; 00000020H
  011f7	88 85 43 ff ff
	ff		 mov	 BYTE PTR _font_details_opened$28[ebp], al

; 3407 :                 ImGui::SameLine(); if (ImGui::SmallButton("Set as default")) { io.FontDefault = font; }

  011fd	51		 push	 ecx
  011fe	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01206	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0120b	51		 push	 ecx
  0120c	0f 57 c0	 xorps	 xmm0, xmm0
  0120f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01214	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01219	83 c4 08	 add	 esp, 8
  0121c	68 00 00 00 00	 push	 OFFSET ??_C@_0P@HCLAAKJM@Set?5as?5default@
  01221	e8 00 00 00 00	 call	 ?SmallButton@ImGui@@YA_NPBD@Z ; ImGui::SmallButton
  01226	83 c4 04	 add	 esp, 4
  01229	0f b6 c0	 movzx	 eax, al
  0122c	85 c0		 test	 eax, eax
  0122e	74 12		 je	 SHORT $LN48@ShowStyleE
  01230	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _io$32[ebp]
  01236	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  0123c	89 88 9c 00 00
	00		 mov	 DWORD PTR [eax+156], ecx
$LN48@ShowStyleE:

; 3408 :                 if (font_details_opened)

  01242	0f b6 85 43 ff
	ff ff		 movzx	 eax, BYTE PTR _font_details_opened$28[ebp]
  01249	85 c0		 test	 eax, eax
  0124b	0f 84 4f 07 00
	00		 je	 $LN49@ShowStyleE

; 3409 :                 {
; 3410 :                     ImGui::PushFont(font);

  01251	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01257	50		 push	 eax
  01258	e8 00 00 00 00	 call	 ?PushFont@ImGui@@YAXPAUImFont@@@Z ; ImGui::PushFont
  0125d	83 c4 04	 add	 esp, 4

; 3411 :                     ImGui::Text("The quick brown fox jumps over the lazy dog");

  01260	68 00 00 00 00	 push	 OFFSET ??_C@_0CM@HCLJNHNJ@The?5quick?5brown?5fox?5jumps?5over?5@
  01265	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0126a	83 c4 04	 add	 esp, 4

; 3412 :                     ImGui::PopFont();

  0126d	e8 00 00 00 00	 call	 ?PopFont@ImGui@@YAXXZ	; ImGui::PopFont

; 3413 :                     ImGui::DragFloat("Font scale", &font->Scale, 0.005f, 0.3f, 2.0f, "%.1f");   // Scale only this font

  01272	51		 push	 ecx
  01273	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0127b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01280	68 00 00 00 00	 push	 OFFSET ??_C@_04GGBPDDBN@?$CF?41f@
  01285	51		 push	 ecx
  01286	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  0128e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01293	51		 push	 ecx
  01294	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  0129c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012a1	51		 push	 ecx
  012a2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  012aa	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012af	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  012b5	83 c0 48	 add	 eax, 72			; 00000048H
  012b8	50		 push	 eax
  012b9	68 00 00 00 00	 push	 OFFSET ??_C@_0L@HAJGHBLA@Font?5scale@
  012be	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  012c3	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3414 :                     ImGui::SameLine(); HelpMarker("Note than the default embedded font is NOT meant to be scaled.\n\nFont are currently rendered into bitmaps at a given size at the time of building the atlas. You may oversample them to get some flexibility with scaling. You can also render at multiple sizes and select which one to use at runtime.\n\n(Glimmer of hope: the atlas system should hopefully be rewritten in the future to make scaling more natural and automatic.)");

  012c6	51		 push	 ecx
  012c7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  012cf	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012d4	51		 push	 ecx
  012d5	0f 57 c0	 xorps	 xmm0, xmm0
  012d8	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  012dd	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  012e2	83 c4 08	 add	 esp, 8
  012e5	68 00 00 00 00	 push	 OFFSET ??_C@_0BKF@KOCFAEGF@Note?5than?5the?5default?5embedded?5@
  012ea	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  012ef	83 c4 04	 add	 esp, 4

; 3415 :                     ImGui::InputFloat("Font offset", &font->DisplayOffset.y, 1, 1, "%.0f");

  012f2	6a 00		 push	 0
  012f4	68 00 00 00 00	 push	 OFFSET ??_C@_04GHNNFJCK@?$CF?40f@
  012f9	51		 push	 ecx
  012fa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01302	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01307	51		 push	 ecx
  01308	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01315	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  0131b	83 c0 34	 add	 eax, 52			; 00000034H
  0131e	50		 push	 eax
  0131f	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MKKLGFNP@Font?5offset@
  01324	e8 00 00 00 00	 call	 ?InputFloat@ImGui@@YA_NPBDPAMMM0H@Z ; ImGui::InputFloat
  01329	83 c4 18	 add	 esp, 24			; 00000018H

; 3416 :                     ImGui::Text("Ascent: %f, Descent: %f, Height: %f", font->Ascent, font->Descent, font->Ascent - font->Descent);

  0132c	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01332	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  01338	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  0133d	f3 0f 5c 41 50	 subss	 xmm0, DWORD PTR [ecx+80]
  01342	f3 0f 5a c0	 cvtss2sd xmm0, xmm0
  01346	83 ec 08	 sub	 esp, 8
  01349	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0134e	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _font$29[ebp]
  01354	f3 0f 5a 42 50	 cvtss2sd xmm0, DWORD PTR [edx+80]
  01359	83 ec 08	 sub	 esp, 8
  0135c	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01361	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01367	f3 0f 5a 40 4c	 cvtss2sd xmm0, DWORD PTR [eax+76]
  0136c	83 ec 08	 sub	 esp, 8
  0136f	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01374	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@FJCMKHHK@Ascent?3?5?$CFf?0?5Descent?3?5?$CFf?0?5Height@
  01379	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0137e	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3417 :                     ImGui::Text("Fallback character: '%c' (U+%04X)", font->FallbackChar, font->FallbackChar);

  01381	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01387	0f b7 48 42	 movzx	 ecx, WORD PTR [eax+66]
  0138b	51		 push	 ecx
  0138c	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _font$29[ebp]
  01392	0f b7 42 42	 movzx	 eax, WORD PTR [edx+66]
  01396	50		 push	 eax
  01397	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FPHDKLMA@Fallback?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@
  0139c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  013a1	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3418 :                     ImGui::Text("Ellipsis character: '%c' (U+%04X)", font->EllipsisChar, font->EllipsisChar);

  013a4	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  013aa	0f b7 48 44	 movzx	 ecx, WORD PTR [eax+68]
  013ae	51		 push	 ecx
  013af	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _font$29[ebp]
  013b5	0f b7 42 44	 movzx	 eax, WORD PTR [edx+68]
  013b9	50		 push	 eax
  013ba	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@FMIIOLLL@Ellipsis?5character?3?5?8?$CFc?8?5?$CIU?$CL?$CF04@
  013bf	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  013c4	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3419 :                     const float surface_sqrt = sqrtf((float)font->MetricsTotalSurface);

  013c7	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  013cd	f3 0f 2a 40 54	 cvtsi2ss xmm0, DWORD PTR [eax+84]
  013d2	51		 push	 ecx
  013d3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  013d8	e8 00 00 00 00	 call	 _sqrtf
  013dd	83 c4 04	 add	 esp, 4
  013e0	d9 9d 34 ff ff
	ff		 fstp	 DWORD PTR _surface_sqrt$27[ebp]

; 3420 :                     ImGui::Text("Texture Area: about %d px ~%dx%d px", font->MetricsTotalSurface, (int)surface_sqrt, (int)surface_sqrt);

  013e6	f3 0f 2c 85 34
	ff ff ff	 cvttss2si eax, DWORD PTR _surface_sqrt$27[ebp]
  013ee	50		 push	 eax
  013ef	f3 0f 2c 8d 34
	ff ff ff	 cvttss2si ecx, DWORD PTR _surface_sqrt$27[ebp]
  013f7	51		 push	 ecx
  013f8	8b 95 4c ff ff
	ff		 mov	 edx, DWORD PTR _font$29[ebp]
  013fe	8b 42 54	 mov	 eax, DWORD PTR [edx+84]
  01401	50		 push	 eax
  01402	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LLADJGCM@Texture?5Area?3?5about?5?$CFd?5px?5?$HO?$CFdx?$CF@
  01407	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0140c	83 c4 10	 add	 esp, 16			; 00000010H

; 3421 :                     for (int config_i = 0; config_i < font->ConfigDataCount; config_i++)

  0140f	c7 85 28 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _config_i$26[ebp], 0
  01419	eb 0f		 jmp	 SHORT $LN15@ShowStyleE
$LN13@ShowStyleE:
  0141b	8b 85 28 ff ff
	ff		 mov	 eax, DWORD PTR _config_i$26[ebp]
  01421	83 c0 01	 add	 eax, 1
  01424	89 85 28 ff ff
	ff		 mov	 DWORD PTR _config_i$26[ebp], eax
$LN15@ShowStyleE:
  0142a	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01430	0f bf 48 40	 movsx	 ecx, WORD PTR [eax+64]
  01434	39 8d 28 ff ff
	ff		 cmp	 DWORD PTR _config_i$26[ebp], ecx
  0143a	7d 57		 jge	 SHORT $LN14@ShowStyleE

; 3422 :                         if (const ImFontConfig* cfg = &font->ConfigData[config_i])

  0143c	6b 85 28 ff ff
	ff 78		 imul	 eax, DWORD PTR _config_i$26[ebp], 120
  01443	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  01449	03 41 3c	 add	 eax, DWORD PTR [ecx+60]
  0144c	89 85 1c ff ff
	ff		 mov	 DWORD PTR _cfg$25[ebp], eax
  01452	74 3d		 je	 SHORT $LN50@ShowStyleE

; 3423 :                             ImGui::BulletText("Input %d: \'%s\', Oversample: (%d,%d), PixelSnapH: %d", config_i, cfg->Name, cfg->OversampleH, cfg->OversampleV, cfg->PixelSnapH);

  01454	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _cfg$25[ebp]
  0145a	0f b6 48 1c	 movzx	 ecx, BYTE PTR [eax+28]
  0145e	51		 push	 ecx
  0145f	8b 95 1c ff ff
	ff		 mov	 edx, DWORD PTR _cfg$25[ebp]
  01465	8b 42 18	 mov	 eax, DWORD PTR [edx+24]
  01468	50		 push	 eax
  01469	8b 8d 1c ff ff
	ff		 mov	 ecx, DWORD PTR _cfg$25[ebp]
  0146f	8b 51 14	 mov	 edx, DWORD PTR [ecx+20]
  01472	52		 push	 edx
  01473	8b 85 1c ff ff
	ff		 mov	 eax, DWORD PTR _cfg$25[ebp]
  01479	83 c0 4a	 add	 eax, 74			; 0000004aH
  0147c	50		 push	 eax
  0147d	8b 8d 28 ff ff
	ff		 mov	 ecx, DWORD PTR _config_i$26[ebp]
  01483	51		 push	 ecx
  01484	68 00 00 00 00	 push	 OFFSET ??_C@_0DE@KFKIBEOD@Input?5?$CFd?3?5?8?$CFs?8?0?5Oversample?3?5?$CI?$CFd@
  01489	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  0148e	83 c4 18	 add	 esp, 24			; 00000018H
$LN50@ShowStyleE:
  01491	eb 88		 jmp	 SHORT $LN13@ShowStyleE
$LN14@ShowStyleE:

; 3424 :                     if (ImGui::TreeNode("Glyphs", "Glyphs (%d)", font->Glyphs.Size))

  01493	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  01499	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  0149c	51		 push	 ecx
  0149d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NEAHLNMH@Glyphs?5?$CI?$CFd?$CJ@
  014a2	68 00 00 00 00	 push	 OFFSET ??_C@_06EBCCDGNI@Glyphs@
  014a7	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD0ZZ ; ImGui::TreeNode
  014ac	83 c4 0c	 add	 esp, 12			; 0000000cH
  014af	0f b6 d0	 movzx	 edx, al
  014b2	85 d2		 test	 edx, edx
  014b4	0f 84 e1 04 00
	00		 je	 $LN51@ShowStyleE

; 3425 :                     {
; 3426 :                         // Display all glyphs of the fonts in separate pages of 256 characters
; 3427 :                         for (unsigned int base = 0; base <= IM_UNICODE_CODEPOINT_MAX; base += 256)

  014ba	c7 85 10 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _base$24[ebp], 0
  014c4	eb 11		 jmp	 SHORT $LN18@ShowStyleE
$LN16@ShowStyleE:
  014c6	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _base$24[ebp]
  014cc	05 00 01 00 00	 add	 eax, 256		; 00000100H
  014d1	89 85 10 ff ff
	ff		 mov	 DWORD PTR _base$24[ebp], eax
$LN18@ShowStyleE:
  014d7	81 bd 10 ff ff
	ff ff ff 00 00	 cmp	 DWORD PTR _base$24[ebp], 65535 ; 0000ffffH
  014e1	0f 87 af 04 00
	00		 ja	 $LN17@ShowStyleE

; 3428 :                         {
; 3429 :                             int count = 0;

  014e7	c7 85 04 ff ff
	ff 00 00 00 00	 mov	 DWORD PTR _count$23[ebp], 0

; 3430 :                             for (unsigned int n = 0; n < 256; n++)

  014f1	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$22[ebp], 0
  014fb	eb 0f		 jmp	 SHORT $LN21@ShowStyleE
$LN19@ShowStyleE:
  014fd	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR _n$22[ebp]
  01503	83 c0 01	 add	 eax, 1
  01506	89 85 f8 fe ff
	ff		 mov	 DWORD PTR _n$22[ebp], eax
$LN21@ShowStyleE:
  0150c	81 bd f8 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR _n$22[ebp], 256 ; 00000100H
  01516	73 46		 jae	 SHORT $LN20@ShowStyleE

; 3431 :                                 count += font->FindGlyphNoFallback((ImWchar)(base + n)) ? 1 : 0;

  01518	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _base$24[ebp]
  0151e	03 85 f8 fe ff
	ff		 add	 eax, DWORD PTR _n$22[ebp]
  01524	50		 push	 eax
  01525	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  0152b	e8 00 00 00 00	 call	 ?FindGlyphNoFallback@ImFont@@QBEPBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
  01530	85 c0		 test	 eax, eax
  01532	74 0c		 je	 SHORT $LN74@ShowStyleE
  01534	c7 85 34 fc ff
	ff 01 00 00 00	 mov	 DWORD PTR tv799[ebp], 1
  0153e	eb 0a		 jmp	 SHORT $LN75@ShowStyleE
$LN74@ShowStyleE:
  01540	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv799[ebp], 0
$LN75@ShowStyleE:
  0154a	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _count$23[ebp]
  01550	03 8d 34 fc ff
	ff		 add	 ecx, DWORD PTR tv799[ebp]
  01556	89 8d 04 ff ff
	ff		 mov	 DWORD PTR _count$23[ebp], ecx
  0155c	eb 9f		 jmp	 SHORT $LN19@ShowStyleE
$LN20@ShowStyleE:

; 3432 :                             if (count > 0 && ImGui::TreeNode((void*)(intptr_t)base, "U+%04X..U+%04X (%d %s)", base, base + 255, count, count > 1 ? "glyphs" : "glyph"))

  0155e	83 bd 04 ff ff
	ff 00		 cmp	 DWORD PTR _count$23[ebp], 0
  01565	0f 8e 26 04 00
	00		 jle	 $LN52@ShowStyleE
  0156b	83 bd 04 ff ff
	ff 01		 cmp	 DWORD PTR _count$23[ebp], 1
  01572	7e 0c		 jle	 SHORT $LN76@ShowStyleE
  01574	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv804[ebp], OFFSET ??_C@_06IOJPAPEE@glyphs@
  0157e	eb 0a		 jmp	 SHORT $LN77@ShowStyleE
$LN76@ShowStyleE:
  01580	c7 85 34 fc ff
	ff 00 00 00 00	 mov	 DWORD PTR tv804[ebp], OFFSET ??_C@_05OIOMJNBL@glyph@
$LN77@ShowStyleE:
  0158a	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR tv804[ebp]
  01590	50		 push	 eax
  01591	8b 8d 04 ff ff
	ff		 mov	 ecx, DWORD PTR _count$23[ebp]
  01597	51		 push	 ecx
  01598	8b 95 10 ff ff
	ff		 mov	 edx, DWORD PTR _base$24[ebp]
  0159e	81 c2 ff 00 00
	00		 add	 edx, 255		; 000000ffH
  015a4	52		 push	 edx
  015a5	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _base$24[ebp]
  015ab	50		 push	 eax
  015ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KIECHKHD@U?$CL?$CF04X?4?4U?$CL?$CF04X?5?$CI?$CFd?5?$CFs?$CJ@
  015b1	8b 8d 10 ff ff
	ff		 mov	 ecx, DWORD PTR _base$24[ebp]
  015b7	51		 push	 ecx
  015b8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBXPBDZZ ; ImGui::TreeNode
  015bd	83 c4 18	 add	 esp, 24			; 00000018H
  015c0	0f b6 d0	 movzx	 edx, al
  015c3	85 d2		 test	 edx, edx
  015c5	0f 84 c6 03 00
	00		 je	 $LN52@ShowStyleE

; 3433 :                             {
; 3434 :                                 float cell_size = font->FontSize * 1;

  015cb	8b 85 4c ff ff
	ff		 mov	 eax, DWORD PTR _font$29[ebp]
  015d1	f3 0f 10 40 10	 movss	 xmm0, DWORD PTR [eax+16]
  015d6	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@3f800000
  015de	f3 0f 11 85 ec
	fe ff ff	 movss	 DWORD PTR _cell_size$21[ebp], xmm0

; 3435 :                                 float cell_spacing = style.ItemSpacing.y;

  015e6	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  015e9	f3 0f 10 40 4c	 movss	 xmm0, DWORD PTR [eax+76]
  015ee	f3 0f 11 85 e0
	fe ff ff	 movss	 DWORD PTR _cell_spacing$20[ebp], xmm0

; 3436 :                                 ImVec2 base_pos = ImGui::GetCursorScreenPos();

  015f6	8d 85 d0 fe ff
	ff		 lea	 eax, DWORD PTR _base_pos$19[ebp]
  015fc	50		 push	 eax
  015fd	e8 00 00 00 00	 call	 ?GetCursorScreenPos@ImGui@@YA?AUImVec2@@XZ ; ImGui::GetCursorScreenPos
  01602	83 c4 04	 add	 esp, 4

; 3437 :                                 ImDrawList* draw_list = ImGui::GetWindowDrawList();

  01605	e8 00 00 00 00	 call	 ?GetWindowDrawList@ImGui@@YAPAUImDrawList@@XZ ; ImGui::GetWindowDrawList
  0160a	89 85 c4 fe ff
	ff		 mov	 DWORD PTR _draw_list$18[ebp], eax

; 3438 :                                 for (unsigned int n = 0; n < 256; n++)

  01610	c7 85 b8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR _n$17[ebp], 0
  0161a	eb 0f		 jmp	 SHORT $LN24@ShowStyleE
$LN22@ShowStyleE:
  0161c	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _n$17[ebp]
  01622	83 c0 01	 add	 eax, 1
  01625	89 85 b8 fe ff
	ff		 mov	 DWORD PTR _n$17[ebp], eax
$LN24@ShowStyleE:
  0162b	81 bd b8 fe ff
	ff 00 01 00 00	 cmp	 DWORD PTR _n$17[ebp], 256 ; 00000100H
  01635	0f 83 01 03 00
	00		 jae	 $LN23@ShowStyleE

; 3439 :                                 {
; 3440 :                                     ImVec2 cell_p1(base_pos.x + (n % 16) * (cell_size + cell_spacing), base_pos.y + (n / 16) * (cell_size + cell_spacing));

  0163b	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _n$17[ebp]
  01641	c1 e8 04	 shr	 eax, 4
  01644	89 85 34 fc ff
	ff		 mov	 DWORD PTR tv1615[ebp], eax
  0164a	f2 0f 2a 85 34
	fc ff ff	 cvtsi2sd xmm0, DWORD PTR tv1615[ebp]
  01652	8b 8d 34 fc ff
	ff		 mov	 ecx, DWORD PTR tv1615[ebp]
  01658	c1 e9 1f	 shr	 ecx, 31			; 0000001fH
  0165b	f2 0f 58 04 cd
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[ecx*8]
  01664	f2 0f 11 85 2c
	fc ff ff	 movsd	 QWORD PTR tv1618[ebp], xmm0
  0166c	f2 0f 5a 85 2c
	fc ff ff	 cvtsd2ss xmm0, QWORD PTR tv1618[ebp]
  01674	f3 0f 10 8d ec
	fe ff ff	 movss	 xmm1, DWORD PTR _cell_size$21[ebp]
  0167c	f3 0f 58 8d e0
	fe ff ff	 addss	 xmm1, DWORD PTR _cell_spacing$20[ebp]
  01684	f3 0f 59 c1	 mulss	 xmm0, xmm1
  01688	f3 0f 58 85 d4
	fe ff ff	 addss	 xmm0, DWORD PTR _base_pos$19[ebp+4]
  01690	51		 push	 ecx
  01691	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01696	8b 85 b8 fe ff
	ff		 mov	 eax, DWORD PTR _n$17[ebp]
  0169c	33 d2		 xor	 edx, edx
  0169e	b9 10 00 00 00	 mov	 ecx, 16			; 00000010H
  016a3	f7 f1		 div	 ecx
  016a5	89 95 28 fc ff
	ff		 mov	 DWORD PTR tv1629[ebp], edx
  016ab	f2 0f 2a 85 28
	fc ff ff	 cvtsi2sd xmm0, DWORD PTR tv1629[ebp]
  016b3	8b 95 28 fc ff
	ff		 mov	 edx, DWORD PTR tv1629[ebp]
  016b9	c1 ea 1f	 shr	 edx, 31			; 0000001fH
  016bc	f2 0f 58 04 d5
	00 00 00 00	 addsd	 xmm0, QWORD PTR __xmm@41f00000000000000000000000000000[edx*8]
  016c5	f2 0f 11 85 20
	fc ff ff	 movsd	 QWORD PTR tv1632[ebp], xmm0
  016cd	f2 0f 5a 85 20
	fc ff ff	 cvtsd2ss xmm0, QWORD PTR tv1632[ebp]
  016d5	f3 0f 10 8d ec
	fe ff ff	 movss	 xmm1, DWORD PTR _cell_size$21[ebp]
  016dd	f3 0f 58 8d e0
	fe ff ff	 addss	 xmm1, DWORD PTR _cell_spacing$20[ebp]
  016e5	f3 0f 59 c1	 mulss	 xmm0, xmm1
  016e9	f3 0f 58 85 d0
	fe ff ff	 addss	 xmm0, DWORD PTR _base_pos$19[ebp]
  016f1	51		 push	 ecx
  016f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  016f7	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _cell_p1$16[ebp]
  016fd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 3441 :                                     ImVec2 cell_p2(cell_p1.x + cell_size, cell_p1.y + cell_size);

  01702	f3 0f 10 85 ac
	fe ff ff	 movss	 xmm0, DWORD PTR _cell_p1$16[ebp+4]
  0170a	f3 0f 58 85 ec
	fe ff ff	 addss	 xmm0, DWORD PTR _cell_size$21[ebp]
  01712	51		 push	 ecx
  01713	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01718	f3 0f 10 85 a8
	fe ff ff	 movss	 xmm0, DWORD PTR _cell_p1$16[ebp]
  01720	f3 0f 58 85 ec
	fe ff ff	 addss	 xmm0, DWORD PTR _cell_size$21[ebp]
  01728	51		 push	 ecx
  01729	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0172e	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _cell_p2$15[ebp]
  01734	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2

; 3442 :                                     const ImFontGlyph* glyph = font->FindGlyphNoFallback((ImWchar)(base + n));

  01739	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _base$24[ebp]
  0173f	03 85 b8 fe ff
	ff		 add	 eax, DWORD PTR _n$17[ebp]
  01745	50		 push	 eax
  01746	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  0174c	e8 00 00 00 00	 call	 ?FindGlyphNoFallback@ImFont@@QBEPBUImFontGlyph@@G@Z ; ImFont::FindGlyphNoFallback
  01751	89 85 8c fe ff
	ff		 mov	 DWORD PTR _glyph$14[ebp], eax

; 3443 :                                     draw_list->AddRect(cell_p1, cell_p2, glyph ? IM_COL32(255, 255, 255, 100) : IM_COL32(255, 255, 255, 50));

  01757	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _glyph$14[ebp], 0
  0175e	74 0c		 je	 SHORT $LN78@ShowStyleE
  01760	c7 85 34 fc ff
	ff ff ff ff 64	 mov	 DWORD PTR tv882[ebp], 1694498815 ; 64ffffffH
  0176a	eb 0a		 jmp	 SHORT $LN79@ShowStyleE
$LN78@ShowStyleE:
  0176c	c7 85 34 fc ff
	ff ff ff ff 32	 mov	 DWORD PTR tv882[ebp], 855638015 ; 32ffffffH
$LN79@ShowStyleE:
  01776	51		 push	 ecx
  01777	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  0177f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01784	6a 0f		 push	 15			; 0000000fH
  01786	51		 push	 ecx
  01787	0f 57 c0	 xorps	 xmm0, xmm0
  0178a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0178f	8b 85 34 fc ff
	ff		 mov	 eax, DWORD PTR tv882[ebp]
  01795	50		 push	 eax
  01796	8d 8d 98 fe ff
	ff		 lea	 ecx, DWORD PTR _cell_p2$15[ebp]
  0179c	51		 push	 ecx
  0179d	8d 95 a8 fe ff
	ff		 lea	 edx, DWORD PTR _cell_p1$16[ebp]
  017a3	52		 push	 edx
  017a4	8b 8d c4 fe ff
	ff		 mov	 ecx, DWORD PTR _draw_list$18[ebp]
  017aa	e8 00 00 00 00	 call	 ?AddRect@ImDrawList@@QAEXABUImVec2@@0IMHM@Z ; ImDrawList::AddRect

; 3444 :                                     if (glyph)

  017af	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _glyph$14[ebp], 0
  017b6	74 54		 je	 SHORT $LN53@ShowStyleE

; 3445 :                                         font->RenderChar(draw_list, cell_size, cell_p1, ImGui::GetColorU32(ImGuiCol_Text), (ImWchar)(base + n)); // We use ImFont::RenderChar as a shortcut because we don't have UTF-8 conversion functions available to generate a string.

  017b8	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _base$24[ebp]
  017be	03 85 b8 fe ff
	ff		 add	 eax, DWORD PTR _n$17[ebp]
  017c4	50		 push	 eax
  017c5	51		 push	 ecx
  017c6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  017ce	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017d3	6a 00		 push	 0
  017d5	e8 00 00 00 00	 call	 ?GetColorU32@ImGui@@YAIHM@Z ; ImGui::GetColorU32
  017da	83 c4 08	 add	 esp, 8
  017dd	50		 push	 eax
  017de	8b 8d ac fe ff
	ff		 mov	 ecx, DWORD PTR _cell_p1$16[ebp+4]
  017e4	51		 push	 ecx
  017e5	8b 95 a8 fe ff
	ff		 mov	 edx, DWORD PTR _cell_p1$16[ebp]
  017eb	52		 push	 edx
  017ec	51		 push	 ecx
  017ed	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _cell_size$21[ebp]
  017f5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  017fa	8b 85 c4 fe ff
	ff		 mov	 eax, DWORD PTR _draw_list$18[ebp]
  01800	50		 push	 eax
  01801	8b 8d 4c ff ff
	ff		 mov	 ecx, DWORD PTR _font$29[ebp]
  01807	e8 00 00 00 00	 call	 ?RenderChar@ImFont@@QBEXPAUImDrawList@@MUImVec2@@IG@Z ; ImFont::RenderChar
$LN53@ShowStyleE:

; 3446 :                                     if (glyph && ImGui::IsMouseHoveringRect(cell_p1, cell_p2))

  0180c	83 bd 8c fe ff
	ff 00		 cmp	 DWORD PTR _glyph$14[ebp], 0
  01813	0f 84 1e 01 00
	00		 je	 $LN54@ShowStyleE
  01819	6a 01		 push	 1
  0181b	8d 85 98 fe ff
	ff		 lea	 eax, DWORD PTR _cell_p2$15[ebp]
  01821	50		 push	 eax
  01822	8d 8d a8 fe ff
	ff		 lea	 ecx, DWORD PTR _cell_p1$16[ebp]
  01828	51		 push	 ecx
  01829	e8 00 00 00 00	 call	 ?IsMouseHoveringRect@ImGui@@YA_NABUImVec2@@0_N@Z ; ImGui::IsMouseHoveringRect
  0182e	83 c4 0c	 add	 esp, 12			; 0000000cH
  01831	0f b6 d0	 movzx	 edx, al
  01834	85 d2		 test	 edx, edx
  01836	0f 84 fb 00 00
	00		 je	 $LN54@ShowStyleE

; 3447 :                                     {
; 3448 :                                         ImGui::BeginTooltip();

  0183c	e8 00 00 00 00	 call	 ?BeginTooltip@ImGui@@YAXXZ ; ImGui::BeginTooltip

; 3449 :                                         ImGui::Text("Codepoint: U+%04X", base + n);

  01841	8b 85 10 ff ff
	ff		 mov	 eax, DWORD PTR _base$24[ebp]
  01847	03 85 b8 fe ff
	ff		 add	 eax, DWORD PTR _n$17[ebp]
  0184d	50		 push	 eax
  0184e	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JMLDGIFC@Codepoint?3?5U?$CL?$CF04X@
  01853	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  01858	83 c4 08	 add	 esp, 8

; 3450 :                                         ImGui::Separator();

  0185b	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3451 :                                         ImGui::Text("AdvanceX: %.1f", glyph->AdvanceX);

  01860	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _glyph$14[ebp]
  01866	f3 0f 5a 40 04	 cvtss2sd xmm0, DWORD PTR [eax+4]
  0186b	83 ec 08	 sub	 esp, 8
  0186e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01873	68 00 00 00 00	 push	 OFFSET ??_C@_0P@JLIDDFIB@AdvanceX?3?5?$CF?41f@
  01878	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0187d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3452 :                                         ImGui::Text("Pos: (%.2f,%.2f)->(%.2f,%.2f)", glyph->X0, glyph->Y0, glyph->X1, glyph->Y1);

  01880	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _glyph$14[ebp]
  01886	f3 0f 5a 40 14	 cvtss2sd xmm0, DWORD PTR [eax+20]
  0188b	83 ec 08	 sub	 esp, 8
  0188e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01893	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _glyph$14[ebp]
  01899	f3 0f 5a 41 10	 cvtss2sd xmm0, DWORD PTR [ecx+16]
  0189e	83 ec 08	 sub	 esp, 8
  018a1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  018a6	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR _glyph$14[ebp]
  018ac	f3 0f 5a 42 0c	 cvtss2sd xmm0, DWORD PTR [edx+12]
  018b1	83 ec 08	 sub	 esp, 8
  018b4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  018b9	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _glyph$14[ebp]
  018bf	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  018c4	83 ec 08	 sub	 esp, 8
  018c7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  018cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@BCFBHCGJ@Pos?3?5?$CI?$CF?42f?0?$CF?42f?$CJ?9?$DO?$CI?$CF?42f?0?$CF?42f?$CJ@
  018d1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  018d6	83 c4 24	 add	 esp, 36			; 00000024H

; 3453 :                                         ImGui::Text("UV: (%.3f,%.3f)->(%.3f,%.3f)", glyph->U0, glyph->V0, glyph->U1, glyph->V1);

  018d9	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _glyph$14[ebp]
  018df	f3 0f 5a 40 24	 cvtss2sd xmm0, DWORD PTR [eax+36]
  018e4	83 ec 08	 sub	 esp, 8
  018e7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  018ec	8b 8d 8c fe ff
	ff		 mov	 ecx, DWORD PTR _glyph$14[ebp]
  018f2	f3 0f 5a 41 20	 cvtss2sd xmm0, DWORD PTR [ecx+32]
  018f7	83 ec 08	 sub	 esp, 8
  018fa	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  018ff	8b 95 8c fe ff
	ff		 mov	 edx, DWORD PTR _glyph$14[ebp]
  01905	f3 0f 5a 42 1c	 cvtss2sd xmm0, DWORD PTR [edx+28]
  0190a	83 ec 08	 sub	 esp, 8
  0190d	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01912	8b 85 8c fe ff
	ff		 mov	 eax, DWORD PTR _glyph$14[ebp]
  01918	f3 0f 5a 40 18	 cvtss2sd xmm0, DWORD PTR [eax+24]
  0191d	83 ec 08	 sub	 esp, 8
  01920	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  01925	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@EHEDNDHJ@UV?3?5?$CI?$CF?43f?0?$CF?43f?$CJ?9?$DO?$CI?$CF?43f?0?$CF?43f?$CJ@
  0192a	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0192f	83 c4 24	 add	 esp, 36			; 00000024H

; 3454 :                                         ImGui::EndTooltip();

  01932	e8 00 00 00 00	 call	 ?EndTooltip@ImGui@@YAXXZ ; ImGui::EndTooltip
$LN54@ShowStyleE:

; 3455 :                                     }
; 3456 :                                 }

  01937	e9 e0 fc ff ff	 jmp	 $LN22@ShowStyleE
$LN23@ShowStyleE:

; 3457 :                                 ImGui::Dummy(ImVec2((cell_size + cell_spacing) * 16, (cell_size + cell_spacing) * 16));

  0193c	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _cell_size$21[ebp]
  01944	f3 0f 58 85 e0
	fe ff ff	 addss	 xmm0, DWORD PTR _cell_spacing$20[ebp]
  0194c	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  01954	51		 push	 ecx
  01955	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0195a	f3 0f 10 85 ec
	fe ff ff	 movss	 xmm0, DWORD PTR _cell_size$21[ebp]
  01962	f3 0f 58 85 e0
	fe ff ff	 addss	 xmm0, DWORD PTR _cell_spacing$20[ebp]
  0196a	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41800000
  01972	51		 push	 ecx
  01973	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01978	8d 8d 6c fc ff
	ff		 lea	 ecx, DWORD PTR $T5[ebp]
  0197e	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01983	50		 push	 eax
  01984	e8 00 00 00 00	 call	 ?Dummy@ImGui@@YAXABUImVec2@@@Z ; ImGui::Dummy
  01989	83 c4 04	 add	 esp, 4

; 3458 :                                 ImGui::TreePop();

  0198c	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN52@ShowStyleE:

; 3459 :                             }
; 3460 :                         }

  01991	e9 30 fb ff ff	 jmp	 $LN16@ShowStyleE
$LN17@ShowStyleE:

; 3461 :                         ImGui::TreePop();

  01996	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN51@ShowStyleE:

; 3462 :                     }
; 3463 :                     ImGui::TreePop();

  0199b	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN49@ShowStyleE:

; 3464 :                 }
; 3465 :                 ImGui::PopID();

  019a0	e8 00 00 00 00	 call	 ?PopID@ImGui@@YAXXZ	; ImGui::PopID

; 3466 :             }

  019a5	e9 80 f7 ff ff	 jmp	 $LN10@ShowStyleE
$LN11@ShowStyleE:

; 3467 :             if (ImGui::TreeNode("Atlas texture", "Atlas texture (%dx%d pixels)", atlas->TexWidth, atlas->TexHeight))

  019aa	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _atlas$31[ebp]
  019b0	8b 48 20	 mov	 ecx, DWORD PTR [eax+32]
  019b3	51		 push	 ecx
  019b4	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _atlas$31[ebp]
  019ba	8b 42 1c	 mov	 eax, DWORD PTR [edx+28]
  019bd	50		 push	 eax
  019be	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@JPEJHLJM@Atlas?5texture?5?$CI?$CFdx?$CFd?5pixels?$CJ@
  019c3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@KCJLBEBN@Atlas?5texture@
  019c8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD0ZZ ; ImGui::TreeNode
  019cd	83 c4 10	 add	 esp, 16			; 00000010H
  019d0	0f b6 c8	 movzx	 ecx, al
  019d3	85 c9		 test	 ecx, ecx
  019d5	0f 84 1f 01 00
	00		 je	 $LN55@ShowStyleE

; 3468 :             {
; 3469 :                 ImVec4 tint_col = ImVec4(1.0f, 1.0f, 1.0f, 1.0f);

  019db	51		 push	 ecx
  019dc	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019e4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019e9	51		 push	 ecx
  019ea	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  019f2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  019f7	51		 push	 ecx
  019f8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a00	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a05	51		 push	 ecx
  01a06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a13	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR _tint_col$13[ebp]
  01a19	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4

; 3470 :                 ImVec4 border_col = ImVec4(1.0f, 1.0f, 1.0f, 0.5f);

  01a1e	51		 push	 ecx
  01a1f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f000000
  01a27	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a2c	51		 push	 ecx
  01a2d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a35	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a3a	51		 push	 ecx
  01a3b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a43	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a48	51		 push	 ecx
  01a49	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a51	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a56	8d 8d 5c fe ff
	ff		 lea	 ecx, DWORD PTR _border_col$12[ebp]
  01a5c	e8 00 00 00 00	 call	 ??0ImVec4@@QAE@MMMM@Z	; ImVec4::ImVec4

; 3471 :                 ImGui::Image(atlas->TexID, ImVec2((float)atlas->TexWidth, (float)atlas->TexHeight), ImVec2(0, 0), ImVec2(1, 1), tint_col, border_col);

  01a61	8d 85 5c fe ff
	ff		 lea	 eax, DWORD PTR _border_col$12[ebp]
  01a67	50		 push	 eax
  01a68	8d 8d 74 fe ff
	ff		 lea	 ecx, DWORD PTR _tint_col$13[ebp]
  01a6e	51		 push	 ecx
  01a6f	51		 push	 ecx
  01a70	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a78	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a7d	51		 push	 ecx
  01a7e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01a86	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01a8b	8d 8d 5c fc ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  01a91	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01a96	50		 push	 eax
  01a97	51		 push	 ecx
  01a98	0f 57 c0	 xorps	 xmm0, xmm0
  01a9b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa0	51		 push	 ecx
  01aa1	0f 57 c0	 xorps	 xmm0, xmm0
  01aa4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01aa9	8d 8d 4c fc ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  01aaf	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01ab4	50		 push	 eax
  01ab5	8b 95 64 ff ff
	ff		 mov	 edx, DWORD PTR _atlas$31[ebp]
  01abb	f3 0f 2a 42 20	 cvtsi2ss xmm0, DWORD PTR [edx+32]
  01ac0	51		 push	 ecx
  01ac1	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ac6	8b 85 64 ff ff
	ff		 mov	 eax, DWORD PTR _atlas$31[ebp]
  01acc	f3 0f 2a 40 1c	 cvtsi2ss xmm0, DWORD PTR [eax+28]
  01ad1	51		 push	 ecx
  01ad2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ad7	8d 8d 3c fc ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  01add	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  01ae2	50		 push	 eax
  01ae3	8b 8d 64 ff ff
	ff		 mov	 ecx, DWORD PTR _atlas$31[ebp]
  01ae9	8b 51 08	 mov	 edx, DWORD PTR [ecx+8]
  01aec	52		 push	 edx
  01aed	e8 00 00 00 00	 call	 ?Image@ImGui@@YAXPAXABUImVec2@@11ABUImVec4@@2@Z ; ImGui::Image
  01af2	83 c4 18	 add	 esp, 24			; 00000018H

; 3472 :                 ImGui::TreePop();

  01af5	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN55@ShowStyleE:

; 3473 :             }
; 3474 : 
; 3475 :             HelpMarker("Those are old settings provided for convenience.\nHowever, the _correct_ way of scaling your UI is currently to reload your font at the designed size, rebuild the font atlas, and call style.ScaleAllSizes() on a reference ImGuiStyle structure.");

  01afa	68 00 00 00 00	 push	 OFFSET ??_C@_0PC@PJPPOHAC@Those?5are?5old?5settings?5provided@
  01aff	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01b04	83 c4 04	 add	 esp, 4

; 3476 :             static float window_scale = 1.0f;
; 3477 :             if (ImGui::DragFloat("window scale", &window_scale, 0.005f, 0.3f, 2.0f, "%.2f"))   // scale only this window

  01b07	51		 push	 ecx
  01b08	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b10	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b15	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  01b1a	51		 push	 ecx
  01b1b	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01b23	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b28	51		 push	 ecx
  01b29	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01b31	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b36	51		 push	 ecx
  01b37	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  01b3f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b44	68 00 00 00 00	 push	 OFFSET ?window_scale@?DK@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4MA
  01b49	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DLFCCMFO@window?5scale@
  01b4e	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  01b53	83 c4 1c	 add	 esp, 28			; 0000001cH
  01b56	0f b6 c0	 movzx	 eax, al
  01b59	85 c0		 test	 eax, eax
  01b5b	74 16		 je	 SHORT $LN56@ShowStyleE

; 3478 :                 ImGui::SetWindowFontScale(window_scale);

  01b5d	51		 push	 ecx
  01b5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR ?window_scale@?DK@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4MA
  01b66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b6b	e8 00 00 00 00	 call	 ?SetWindowFontScale@ImGui@@YAXM@Z ; ImGui::SetWindowFontScale
  01b70	83 c4 04	 add	 esp, 4
$LN56@ShowStyleE:

; 3479 :             ImGui::DragFloat("global scale", &io.FontGlobalScale, 0.005f, 0.3f, 2.0f, "%.2f");      // scale everything

  01b73	51		 push	 ecx
  01b74	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01b7c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b81	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  01b86	51		 push	 ecx
  01b87	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01b8f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01b94	51		 push	 ecx
  01b95	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e99999a
  01b9d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ba2	51		 push	 ecx
  01ba3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  01bab	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01bb0	8b 85 70 ff ff
	ff		 mov	 eax, DWORD PTR _io$32[ebp]
  01bb6	05 94 00 00 00	 add	 eax, 148		; 00000094H
  01bbb	50		 push	 eax
  01bbc	68 00 00 00 00	 push	 OFFSET ??_C@_0N@DCHFKEPM@global?5scale@
  01bc1	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  01bc6	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3480 :             ImGui::PopItemWidth();

  01bc9	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 3481 : 
; 3482 :             ImGui::EndTabItem();

  01bce	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN47@ShowStyleE:

; 3483 :         }
; 3484 : 
; 3485 :         if (ImGui::BeginTabItem("Rendering"))

  01bd3	6a 00		 push	 0
  01bd5	6a 00		 push	 0
  01bd7	68 00 00 00 00	 push	 OFFSET ??_C@_09PIAIFBON@Rendering@
  01bdc	e8 00 00 00 00	 call	 ?BeginTabItem@ImGui@@YA_NPBDPA_NH@Z ; ImGui::BeginTabItem
  01be1	83 c4 0c	 add	 esp, 12			; 0000000cH
  01be4	0f b6 c0	 movzx	 eax, al
  01be7	85 c0		 test	 eax, eax
  01be9	0f 84 40 01 00
	00		 je	 $LN57@ShowStyleE

; 3486 :         {
; 3487 :             ImGui::Checkbox("Anti-aliased lines", &style.AntiAliasedLines); ImGui::SameLine(); HelpMarker("When disabling anti-aliasing lines, you'll probably want to disable borders in your style as well.");

  01bef	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  01bf2	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  01bf7	50		 push	 eax
  01bf8	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@INPJKAKL@Anti?9aliased?5lines@
  01bfd	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  01c02	83 c4 08	 add	 esp, 8
  01c05	51		 push	 ecx
  01c06	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  01c0e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c13	51		 push	 ecx
  01c14	0f 57 c0	 xorps	 xmm0, xmm0
  01c17	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c1c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  01c21	83 c4 08	 add	 esp, 8
  01c24	68 00 00 00 00	 push	 OFFSET ??_C@_0GD@HJLOEILL@When?5disabling?5anti?9aliasing?5li@
  01c29	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  01c2e	83 c4 04	 add	 esp, 4

; 3488 :             ImGui::Checkbox("Anti-aliased fill", &style.AntiAliasedFill);

  01c31	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  01c34	05 a9 00 00 00	 add	 eax, 169		; 000000a9H
  01c39	50		 push	 eax
  01c3a	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@KAFHAJBP@Anti?9aliased?5fill@
  01c3f	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  01c44	83 c4 08	 add	 esp, 8

; 3489 :             ImGui::PushItemWidth(100);

  01c47	51		 push	 ecx
  01c48	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@42c80000
  01c50	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c55	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  01c5a	83 c4 04	 add	 esp, 4

; 3490 :             ImGui::DragFloat("Curve Tessellation Tolerance", &style.CurveTessellationTol, 0.02f, 0.10f, FLT_MAX, "%.2f", 2.0f);

  01c5d	51		 push	 ecx
  01c5e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@40000000
  01c66	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c6b	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  01c70	51		 push	 ecx
  01c71	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@7f7fffff
  01c79	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c7e	51		 push	 ecx
  01c7f	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01c87	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c8c	51		 push	 ecx
  01c8d	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ca3d70a
  01c95	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01c9a	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  01c9d	05 ac 00 00 00	 add	 eax, 172		; 000000acH
  01ca2	50		 push	 eax
  01ca3	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@KPCPFGKJ@Curve?5Tessellation?5Tolerance@
  01ca8	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  01cad	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3491 :             if (style.CurveTessellationTol < 0.10f) style.CurveTessellationTol = 0.10f;

  01cb0	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  01cb3	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01cbb	0f 2f 80 ac 00
	00 00		 comiss	 xmm0, DWORD PTR [eax+172]
  01cc2	76 13		 jbe	 SHORT $LN58@ShowStyleE
  01cc4	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  01cc7	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3dcccccd
  01ccf	f3 0f 11 80 ac
	00 00 00	 movss	 DWORD PTR [eax+172], xmm0
$LN58@ShowStyleE:

; 3492 :             ImGui::DragFloat("Global Alpha", &style.Alpha, 0.005f, 0.20f, 1.0f, "%.2f"); // Not exposing zero here so user doesn't "lose" the UI (zero alpha clips all widgets). But application code could have a toggle to switch between zero and non-zero.

  01cd7	51		 push	 ecx
  01cd8	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01ce0	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01ce5	68 00 00 00 00	 push	 OFFSET ??_C@_04GEFJINEE@?$CF?42f@
  01cea	51		 push	 ecx
  01ceb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3f800000
  01cf3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01cf8	51		 push	 ecx
  01cf9	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  01d01	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d06	51		 push	 ecx
  01d07	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ba3d70a
  01d0f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  01d14	8b 45 e8	 mov	 eax, DWORD PTR _style$[ebp]
  01d17	50		 push	 eax
  01d18	68 00 00 00 00	 push	 OFFSET ??_C@_0N@MBCJIDFM@Global?5Alpha@
  01d1d	e8 00 00 00 00	 call	 ?DragFloat@ImGui@@YA_NPBDPAMMMM0M@Z ; ImGui::DragFloat
  01d22	83 c4 1c	 add	 esp, 28			; 0000001cH

; 3493 :             ImGui::PopItemWidth();

  01d25	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 3494 : 
; 3495 :             ImGui::EndTabItem();

  01d2a	e8 00 00 00 00	 call	 ?EndTabItem@ImGui@@YAXXZ ; ImGui::EndTabItem
$LN57@ShowStyleE:

; 3496 :         }
; 3497 : 
; 3498 :         ImGui::EndTabBar();

  01d2f	e8 00 00 00 00	 call	 ?EndTabBar@ImGui@@YAXXZ	; ImGui::EndTabBar
$LN34@ShowStyleE:

; 3499 :     }
; 3500 : 
; 3501 :     ImGui::PopItemWidth();

  01d34	e8 00 00 00 00	 call	 ?PopItemWidth@ImGui@@YAXXZ ; ImGui::PopItemWidth

; 3502 : }

  01d39	52		 push	 edx
  01d3a	8b cd		 mov	 ecx, ebp
  01d3c	50		 push	 eax
  01d3d	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN93@ShowStyleE
  01d43	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  01d48	58		 pop	 eax
  01d49	5a		 pop	 edx
  01d4a	8b 4d f4	 mov	 ecx, DWORD PTR __$EHRec$[ebp]
  01d4d	64 89 0d 00 00
	00 00		 mov	 DWORD PTR fs:0, ecx
  01d54	59		 pop	 ecx
  01d55	5f		 pop	 edi
  01d56	5e		 pop	 esi
  01d57	5b		 pop	 ebx
  01d58	8b 4d f0	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  01d5b	33 cd		 xor	 ecx, ebp
  01d5d	e8 00 00 00 00	 call	 @__security_check_cookie@4
  01d62	81 c4 e0 03 00
	00		 add	 esp, 992		; 000003e0H
  01d68	3b ec		 cmp	 ebp, esp
  01d6a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01d6f	8b e5		 mov	 esp, ebp
  01d71	5d		 pop	 ebp
  01d72	c3		 ret	 0
  01d73	90		 npad	 1
$LN93@ShowStyleE:
  01d74	09 00 00 00	 DD	 9
  01d78	00 00 00 00	 DD	 $LN92@ShowStyleE
$LN92@ShowStyleE:
  01d7c	df ff ff ff	 DD	 -33			; ffffffdfH
  01d80	01 00 00 00	 DD	 1
  01d84	00 00 00 00	 DD	 $LN82@ShowStyleE
  01d88	d3 ff ff ff	 DD	 -45			; ffffffd3H
  01d8c	01 00 00 00	 DD	 1
  01d90	00 00 00 00	 DD	 $LN83@ShowStyleE
  01d94	c7 ff ff ff	 DD	 -57			; ffffffc7H
  01d98	01 00 00 00	 DD	 1
  01d9c	00 00 00 00	 DD	 $LN84@ShowStyleE
  01da0	b8 ff ff ff	 DD	 -72			; ffffffb8H
  01da4	04 00 00 00	 DD	 4
  01da8	00 00 00 00	 DD	 $LN85@ShowStyleE
  01dac	d0 fe ff ff	 DD	 -304			; fffffed0H
  01db0	08 00 00 00	 DD	 8
  01db4	00 00 00 00	 DD	 $LN86@ShowStyleE
  01db8	a8 fe ff ff	 DD	 -344			; fffffea8H
  01dbc	08 00 00 00	 DD	 8
  01dc0	00 00 00 00	 DD	 $LN87@ShowStyleE
  01dc4	98 fe ff ff	 DD	 -360			; fffffe98H
  01dc8	08 00 00 00	 DD	 8
  01dcc	00 00 00 00	 DD	 $LN88@ShowStyleE
  01dd0	74 fe ff ff	 DD	 -396			; fffffe74H
  01dd4	10 00 00 00	 DD	 16			; 00000010H
  01dd8	00 00 00 00	 DD	 $LN89@ShowStyleE
  01ddc	5c fe ff ff	 DD	 -420			; fffffe5cH
  01de0	10 00 00 00	 DD	 16			; 00000010H
  01de4	00 00 00 00	 DD	 $LN90@ShowStyleE
$LN90@ShowStyleE:
  01de8	62		 DB	 98			; 00000062H
  01de9	6f		 DB	 111			; 0000006fH
  01dea	72		 DB	 114			; 00000072H
  01deb	64		 DB	 100			; 00000064H
  01dec	65		 DB	 101			; 00000065H
  01ded	72		 DB	 114			; 00000072H
  01dee	5f		 DB	 95			; 0000005fH
  01def	63		 DB	 99			; 00000063H
  01df0	6f		 DB	 111			; 0000006fH
  01df1	6c		 DB	 108			; 0000006cH
  01df2	00		 DB	 0
$LN89@ShowStyleE:
  01df3	74		 DB	 116			; 00000074H
  01df4	69		 DB	 105			; 00000069H
  01df5	6e		 DB	 110			; 0000006eH
  01df6	74		 DB	 116			; 00000074H
  01df7	5f		 DB	 95			; 0000005fH
  01df8	63		 DB	 99			; 00000063H
  01df9	6f		 DB	 111			; 0000006fH
  01dfa	6c		 DB	 108			; 0000006cH
  01dfb	00		 DB	 0
$LN88@ShowStyleE:
  01dfc	63		 DB	 99			; 00000063H
  01dfd	65		 DB	 101			; 00000065H
  01dfe	6c		 DB	 108			; 0000006cH
  01dff	6c		 DB	 108			; 0000006cH
  01e00	5f		 DB	 95			; 0000005fH
  01e01	70		 DB	 112			; 00000070H
  01e02	32		 DB	 50			; 00000032H
  01e03	00		 DB	 0
$LN87@ShowStyleE:
  01e04	63		 DB	 99			; 00000063H
  01e05	65		 DB	 101			; 00000065H
  01e06	6c		 DB	 108			; 0000006cH
  01e07	6c		 DB	 108			; 0000006cH
  01e08	5f		 DB	 95			; 0000005fH
  01e09	70		 DB	 112			; 00000070H
  01e0a	31		 DB	 49			; 00000031H
  01e0b	00		 DB	 0
$LN86@ShowStyleE:
  01e0c	62		 DB	 98			; 00000062H
  01e0d	61		 DB	 97			; 00000061H
  01e0e	73		 DB	 115			; 00000073H
  01e0f	65		 DB	 101			; 00000065H
  01e10	5f		 DB	 95			; 0000005fH
  01e11	70		 DB	 112			; 00000070H
  01e12	6f		 DB	 111			; 0000006fH
  01e13	73		 DB	 115			; 00000073H
  01e14	00		 DB	 0
$LN85@ShowStyleE:
  01e15	77		 DB	 119			; 00000077H
  01e16	69		 DB	 105			; 00000069H
  01e17	6e		 DB	 110			; 0000006eH
  01e18	64		 DB	 100			; 00000064H
  01e19	6f		 DB	 111			; 0000006fH
  01e1a	77		 DB	 119			; 00000077H
  01e1b	5f		 DB	 95			; 0000005fH
  01e1c	6d		 DB	 109			; 0000006dH
  01e1d	65		 DB	 101			; 00000065H
  01e1e	6e		 DB	 110			; 0000006eH
  01e1f	75		 DB	 117			; 00000075H
  01e20	5f		 DB	 95			; 0000005fH
  01e21	62		 DB	 98			; 00000062H
  01e22	75		 DB	 117			; 00000075H
  01e23	74		 DB	 116			; 00000074H
  01e24	74		 DB	 116			; 00000074H
  01e25	6f		 DB	 111			; 0000006fH
  01e26	6e		 DB	 110			; 0000006eH
  01e27	5f		 DB	 95			; 0000005fH
  01e28	70		 DB	 112			; 00000070H
  01e29	6f		 DB	 111			; 0000006fH
  01e2a	73		 DB	 115			; 00000073H
  01e2b	69		 DB	 105			; 00000069H
  01e2c	74		 DB	 116			; 00000074H
  01e2d	69		 DB	 105			; 00000069H
  01e2e	6f		 DB	 111			; 0000006fH
  01e2f	6e		 DB	 110			; 0000006eH
  01e30	00		 DB	 0
$LN84@ShowStyleE:
  01e31	70		 DB	 112			; 00000070H
  01e32	6f		 DB	 111			; 0000006fH
  01e33	70		 DB	 112			; 00000070H
  01e34	75		 DB	 117			; 00000075H
  01e35	70		 DB	 112			; 00000070H
  01e36	5f		 DB	 95			; 0000005fH
  01e37	62		 DB	 98			; 00000062H
  01e38	6f		 DB	 111			; 0000006fH
  01e39	72		 DB	 114			; 00000072H
  01e3a	64		 DB	 100			; 00000064H
  01e3b	65		 DB	 101			; 00000065H
  01e3c	72		 DB	 114			; 00000072H
  01e3d	00		 DB	 0
$LN83@ShowStyleE:
  01e3e	66		 DB	 102			; 00000066H
  01e3f	72		 DB	 114			; 00000072H
  01e40	61		 DB	 97			; 00000061H
  01e41	6d		 DB	 109			; 0000006dH
  01e42	65		 DB	 101			; 00000065H
  01e43	5f		 DB	 95			; 0000005fH
  01e44	62		 DB	 98			; 00000062H
  01e45	6f		 DB	 111			; 0000006fH
  01e46	72		 DB	 114			; 00000072H
  01e47	64		 DB	 100			; 00000064H
  01e48	65		 DB	 101			; 00000065H
  01e49	72		 DB	 114			; 00000072H
  01e4a	00		 DB	 0
$LN82@ShowStyleE:
  01e4b	77		 DB	 119			; 00000077H
  01e4c	69		 DB	 105			; 00000069H
  01e4d	6e		 DB	 110			; 0000006eH
  01e4e	64		 DB	 100			; 00000064H
  01e4f	6f		 DB	 111			; 0000006fH
  01e50	77		 DB	 119			; 00000077H
  01e51	5f		 DB	 95			; 0000005fH
  01e52	62		 DB	 98			; 00000062H
  01e53	6f		 DB	 111			; 0000006fH
  01e54	72		 DB	 114			; 00000072H
  01e55	64		 DB	 100			; 00000064H
  01e56	65		 DB	 101			; 00000065H
  01e57	72		 DB	 114			; 00000072H
  01e58	00		 DB	 0
_TEXT	ENDS
;	COMDAT text$x
text$x	SEGMENT
__unwindfunclet$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z$0:
  00000	68 00 00 00 00	 push	 OFFSET ?$TSS0@?1??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00005	e8 00 00 00 00	 call	 __Init_thread_abort
  0000a	59		 pop	 ecx
  0000b	c3		 ret	 0
__unwindfunclet$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z$1:
  0000c	68 00 00 00 00	 push	 OFFSET ?$TSS1@?CC@??ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z@4HA
  00011	e8 00 00 00 00	 call	 __Init_thread_abort
  00016	59		 pop	 ecx
  00017	c3		 ret	 0
  00018	cc		 int	 3
  00019	cc		 int	 3
  0001a	cc		 int	 3
  0001b	cc		 int	 3
  0001c	cc		 int	 3
__ehhandler$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z:
  0001d	90		 npad	 1
  0001e	90		 npad	 1
  0001f	8b 54 24 08	 mov	 edx, DWORD PTR [esp+8]
  00023	8d 42 0c	 lea	 eax, DWORD PTR [edx+12]
  00026	8b 8a 1c fc ff
	ff		 mov	 ecx, DWORD PTR [edx-996]
  0002c	33 c8		 xor	 ecx, eax
  0002e	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00033	8b 4a fc	 mov	 ecx, DWORD PTR [edx-4]
  00036	33 c8		 xor	 ecx, eax
  00038	e8 00 00 00 00	 call	 @__security_check_cookie@4
  0003d	b8 00 00 00 00	 mov	 eax, OFFSET __ehfuncinfo$?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z
  00042	e9 00 00 00 00	 jmp	 ___CxxFrameHandler3
text$x	ENDS
?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z ENDP	; ImGui::ShowStyleEditor
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowAboutWindow@ImGui@@YAXPA_N@Z
_TEXT	SEGMENT
tv365 = -264						; size = 4
tv156 = -264						; size = 4
tv150 = -264						; size = 4
$T1 = -256						; size = 8
$T2 = -240						; size = 8
_copy_to_clipboard$3 = -29				; size = 1
_style$4 = -20						; size = 4
_io$5 = -8						; size = 4
_p_open$ = 8						; size = 4
?ShowAboutWindow@ImGui@@YAXPA_N@Z PROC			; ImGui::ShowAboutWindow, COMDAT

; 3075 : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 08 01 00
	00		 sub	 esp, 264		; 00000108H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd f8 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-264]
  00012	b9 42 00 00 00	 mov	 ecx, 66			; 00000042H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  00023	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 3076 :     if (!ImGui::Begin("About Dear ImGui", p_open, ImGuiWindowFlags_AlwaysAutoResize))

  00028	6a 40		 push	 64			; 00000040H
  0002a	8b 45 08	 mov	 eax, DWORD PTR _p_open$[ebp]
  0002d	50		 push	 eax
  0002e	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui@
  00033	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00038	83 c4 0c	 add	 esp, 12			; 0000000cH
  0003b	0f b6 c8	 movzx	 ecx, al
  0003e	85 c9		 test	 ecx, ecx
  00040	75 0a		 jne	 SHORT $LN2@ShowAboutW

; 3077 :     {
; 3078 :         ImGui::End();

  00042	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 3079 :         return;

  00047	e9 7f 05 00 00	 jmp	 $LN1@ShowAboutW
$LN2@ShowAboutW:

; 3080 :     }
; 3081 :     ImGui::Text("Dear ImGui %s", ImGui::GetVersion());

  0004c	e8 00 00 00 00	 call	 ?GetVersion@ImGui@@YAPBDXZ ; ImGui::GetVersion
  00051	50		 push	 eax
  00052	68 00 00 00 00	 push	 OFFSET ??_C@_0O@NCHBJMJF@Dear?5ImGui?5?$CFs@
  00057	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0005c	83 c4 08	 add	 esp, 8

; 3082 :     ImGui::Separator();

  0005f	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3083 :     ImGui::Text("By Omar Cornut and all Dear ImGui contributors.");

  00064	68 00 00 00 00	 push	 OFFSET ??_C@_0DA@LADNBCJ@By?5Omar?5Cornut?5and?5all?5Dear?5ImG@
  00069	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0006e	83 c4 04	 add	 esp, 4

; 3084 :     ImGui::Text("Dear ImGui is licensed under the MIT License, see LICENSE for more information.");

  00071	68 00 00 00 00	 push	 OFFSET ??_C@_0FA@NMHKMBMB@Dear?5ImGui?5is?5licensed?5under?5th@
  00076	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0007b	83 c4 04	 add	 esp, 4

; 3085 : 
; 3086 :     static bool show_config_info = false;
; 3087 :     ImGui::Checkbox("Config/Build Information", &show_config_info);

  0007e	68 00 00 00 00	 push	 OFFSET ?show_config_info@?1??ShowAboutWindow@ImGui@@YAXPA_N@Z@4_NA
  00083	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@CEAKAMCE@Config?1Build?5Information@
  00088	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0008d	83 c4 08	 add	 esp, 8

; 3088 :     if (show_config_info)

  00090	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_config_info@?1??ShowAboutWindow@ImGui@@YAXPA_N@Z@4_NA
  00097	85 c0		 test	 eax, eax
  00099	0f 84 27 05 00
	00		 je	 $LN3@ShowAboutW

; 3089 :     {
; 3090 :         ImGuiIO& io = ImGui::GetIO();

  0009f	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  000a4	89 45 f8	 mov	 DWORD PTR _io$5[ebp], eax

; 3091 :         ImGuiStyle& style = ImGui::GetStyle();

  000a7	e8 00 00 00 00	 call	 ?GetStyle@ImGui@@YAAAUImGuiStyle@@XZ ; ImGui::GetStyle
  000ac	89 45 ec	 mov	 DWORD PTR _style$4[ebp], eax

; 3092 : 
; 3093 :         bool copy_to_clipboard = ImGui::Button("Copy to clipboard");

  000af	51		 push	 ecx
  000b0	0f 57 c0	 xorps	 xmm0, xmm0
  000b3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000b8	51		 push	 ecx
  000b9	0f 57 c0	 xorps	 xmm0, xmm0
  000bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  000c1	8d 8d 10 ff ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  000c7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  000cc	50		 push	 eax
  000cd	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@JBNIPPJL@Copy?5to?5clipboard@
  000d2	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  000d7	83 c4 08	 add	 esp, 8
  000da	88 45 e3	 mov	 BYTE PTR _copy_to_clipboard$3[ebp], al

; 3094 :         ImGui::BeginChildFrame(ImGui::GetID("cfginfos"), ImVec2(0, ImGui::GetTextLineHeightWithSpacing() * 18), ImGuiWindowFlags_NoMove);

  000dd	6a 04		 push	 4
  000df	e8 00 00 00 00	 call	 ?GetTextLineHeightWithSpacing@ImGui@@YAMXZ ; ImGui::GetTextLineHeightWithSpacing
  000e4	d9 9d f8 fe ff
	ff		 fstp	 DWORD PTR tv365[ebp]
  000ea	f3 0f 10 85 f8
	fe ff ff	 movss	 xmm0, DWORD PTR tv365[ebp]
  000f2	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@41900000
  000fa	51		 push	 ecx
  000fb	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00100	51		 push	 ecx
  00101	0f 57 c0	 xorps	 xmm0, xmm0
  00104	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00109	8d 8d 00 ff ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  0010f	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  00114	50		 push	 eax
  00115	68 00 00 00 00	 push	 OFFSET ??_C@_08HEKABECO@cfginfos@
  0011a	e8 00 00 00 00	 call	 ?GetID@ImGui@@YAIPBD@Z	; ImGui::GetID
  0011f	83 c4 04	 add	 esp, 4
  00122	50		 push	 eax
  00123	e8 00 00 00 00	 call	 ?BeginChildFrame@ImGui@@YA_NIABUImVec2@@H@Z ; ImGui::BeginChildFrame
  00128	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3095 :         if (copy_to_clipboard)

  0012b	0f b6 45 e3	 movzx	 eax, BYTE PTR _copy_to_clipboard$3[ebp]
  0012f	85 c0		 test	 eax, eax
  00131	74 17		 je	 SHORT $LN4@ShowAboutW

; 3096 :         {
; 3097 :             ImGui::LogToClipboard();

  00133	6a ff		 push	 -1
  00135	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
  0013a	83 c4 04	 add	 esp, 4

; 3098 :             ImGui::LogText("```\n"); // Back quotes will make the text appears without formatting when pasting to GitHub

  0013d	68 00 00 00 00	 push	 OFFSET ??_C@_04CJPBKLAG@?$GA?$GA?$GA?6@
  00142	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPBDZZ ; ImGui::LogText
  00147	83 c4 04	 add	 esp, 4
$LN4@ShowAboutW:

; 3099 :         }
; 3100 : 
; 3101 :         ImGui::Text("Dear ImGui %s (%d)", IMGUI_VERSION, IMGUI_VERSION_NUM);

  0014a	68 f9 43 00 00	 push	 17401			; 000043f9H
  0014f	68 00 00 00 00	 push	 OFFSET ??_C@_08KHNILBGC@1?475?5WIP@
  00154	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@GCCEJBGO@Dear?5ImGui?5?$CFs?5?$CI?$CFd?$CJ@
  00159	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0015e	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3102 :         ImGui::Separator();

  00161	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3103 :         ImGui::Text("sizeof(size_t): %d, sizeof(ImDrawIdx): %d, sizeof(ImDrawVert): %d", (int)sizeof(size_t), (int)sizeof(ImDrawIdx), (int)sizeof(ImDrawVert));

  00166	6a 14		 push	 20			; 00000014H
  00168	6a 02		 push	 2
  0016a	6a 04		 push	 4
  0016c	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@BJAMNCHD@sizeof?$CIsize_t?$CJ?3?5?$CFd?0?5sizeof?$CIImDr@
  00171	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00176	83 c4 10	 add	 esp, 16			; 00000010H

; 3104 :         ImGui::Text("define: __cplusplus=%d", (int)__cplusplus);

  00179	68 1f 0c 03 00	 push	 199711			; 00030c1fH
  0017e	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@KGAJBCNH@define?3?5__cplusplus?$DN?$CFd@
  00183	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00188	83 c4 08	 add	 esp, 8

; 3105 : #ifdef IMGUI_DISABLE_OBSOLETE_FUNCTIONS
; 3106 :         ImGui::Text("define: IMGUI_DISABLE_OBSOLETE_FUNCTIONS");
; 3107 : #endif
; 3108 : #ifdef IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS
; 3109 :         ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_CLIPBOARD_FUNCTIONS");
; 3110 : #endif
; 3111 : #ifdef IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS
; 3112 :         ImGui::Text("define: IMGUI_DISABLE_WIN32_DEFAULT_IME_FUNCTIONS");
; 3113 : #endif
; 3114 : #ifdef IMGUI_DISABLE_WIN32_FUNCTIONS
; 3115 :         ImGui::Text("define: IMGUI_DISABLE_WIN32_FUNCTIONS");
; 3116 : #endif
; 3117 : #ifdef IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS
; 3118 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FORMAT_FUNCTIONS");
; 3119 : #endif
; 3120 : #ifdef IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS
; 3121 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_MATH_FUNCTIONS");
; 3122 : #endif
; 3123 : #ifdef IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS
; 3124 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_FILE_FUNCTIONS");
; 3125 : #endif
; 3126 : #ifdef IMGUI_DISABLE_FILE_FUNCTIONS
; 3127 :         ImGui::Text("define: IMGUI_DISABLE_FILE_FUNCTIONS");
; 3128 : #endif
; 3129 : #ifdef IMGUI_DISABLE_DEFAULT_ALLOCATORS
; 3130 :         ImGui::Text("define: IMGUI_DISABLE_DEFAULT_ALLOCATORS");
; 3131 : #endif
; 3132 : #ifdef IMGUI_USE_BGRA_PACKED_COLOR
; 3133 :         ImGui::Text("define: IMGUI_USE_BGRA_PACKED_COLOR");
; 3134 : #endif
; 3135 : #ifdef _WIN32
; 3136 :         ImGui::Text("define: _WIN32");

  0018b	68 00 00 00 00	 push	 OFFSET ??_C@_0P@KFJLIPEJ@define?3?5_WIN32@
  00190	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00195	83 c4 04	 add	 esp, 4

; 3137 : #endif
; 3138 : #ifdef _WIN64
; 3139 :         ImGui::Text("define: _WIN64");
; 3140 : #endif
; 3141 : #ifdef __linux__
; 3142 :         ImGui::Text("define: __linux__");
; 3143 : #endif
; 3144 : #ifdef __APPLE__
; 3145 :         ImGui::Text("define: __APPLE__");
; 3146 : #endif
; 3147 : #ifdef _MSC_VER
; 3148 :         ImGui::Text("define: _MSC_VER=%d", _MSC_VER);

  00198	68 87 07 00 00	 push	 1927			; 00000787H
  0019d	68 00 00 00 00	 push	 OFFSET ??_C@_0BE@JHNIDJHD@define?3?5_MSC_VER?$DN?$CFd@
  001a2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001a7	83 c4 08	 add	 esp, 8

; 3149 : #endif
; 3150 : #ifdef __MINGW32__
; 3151 :         ImGui::Text("define: __MINGW32__");
; 3152 : #endif
; 3153 : #ifdef __MINGW64__
; 3154 :         ImGui::Text("define: __MINGW64__");
; 3155 : #endif
; 3156 : #ifdef __GNUC__
; 3157 :         ImGui::Text("define: __GNUC__=%d", (int)__GNUC__);
; 3158 : #endif
; 3159 : #ifdef __clang_version__
; 3160 :         ImGui::Text("define: __clang_version__=%s", __clang_version__);
; 3161 : #endif
; 3162 :         ImGui::Separator();

  001aa	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3163 :         ImGui::Text("io.BackendPlatformName: %s", io.BackendPlatformName ? io.BackendPlatformName : "NULL");

  001af	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  001b2	83 b8 b4 00 00
	00 00		 cmp	 DWORD PTR [eax+180], 0
  001b9	74 11		 je	 SHORT $LN23@ShowAboutW
  001bb	8b 4d f8	 mov	 ecx, DWORD PTR _io$5[ebp]
  001be	8b 91 b4 00 00
	00		 mov	 edx, DWORD PTR [ecx+180]
  001c4	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv150[ebp], edx
  001ca	eb 0a		 jmp	 SHORT $LN24@ShowAboutW
$LN23@ShowAboutW:
  001cc	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv150[ebp], OFFSET ??_C@_04HIBGFPH@NULL@
$LN24@ShowAboutW:
  001d6	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv150[ebp]
  001dc	50		 push	 eax
  001dd	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@DHJKNAPN@io?4BackendPlatformName?3?5?$CFs@
  001e2	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  001e7	83 c4 08	 add	 esp, 8

; 3164 :         ImGui::Text("io.BackendRendererName: %s", io.BackendRendererName ? io.BackendRendererName : "NULL");

  001ea	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  001ed	83 b8 b8 00 00
	00 00		 cmp	 DWORD PTR [eax+184], 0
  001f4	74 11		 je	 SHORT $LN25@ShowAboutW
  001f6	8b 4d f8	 mov	 ecx, DWORD PTR _io$5[ebp]
  001f9	8b 91 b8 00 00
	00		 mov	 edx, DWORD PTR [ecx+184]
  001ff	89 95 f8 fe ff
	ff		 mov	 DWORD PTR tv156[ebp], edx
  00205	eb 0a		 jmp	 SHORT $LN26@ShowAboutW
$LN25@ShowAboutW:
  00207	c7 85 f8 fe ff
	ff 00 00 00 00	 mov	 DWORD PTR tv156[ebp], OFFSET ??_C@_04HIBGFPH@NULL@
$LN26@ShowAboutW:
  00211	8b 85 f8 fe ff
	ff		 mov	 eax, DWORD PTR tv156[ebp]
  00217	50		 push	 eax
  00218	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@HCPCDKOE@io?4BackendRendererName?3?5?$CFs@
  0021d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00222	83 c4 08	 add	 esp, 8

; 3165 :         ImGui::Text("io.ConfigFlags: 0x%08X", io.ConfigFlags);

  00225	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00228	8b 08		 mov	 ecx, DWORD PTR [eax]
  0022a	51		 push	 ecx
  0022b	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@DILJIOHM@io?4ConfigFlags?3?50x?$CF08X@
  00230	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00235	83 c4 08	 add	 esp, 8

; 3166 :         if (io.ConfigFlags & ImGuiConfigFlags_NavEnableKeyboard)        ImGui::Text(" NavEnableKeyboard");

  00238	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  0023b	8b 08		 mov	 ecx, DWORD PTR [eax]
  0023d	83 e1 01	 and	 ecx, 1
  00240	74 0d		 je	 SHORT $LN5@ShowAboutW
  00242	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CKENCLMO@?5NavEnableKeyboard@
  00247	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0024c	83 c4 04	 add	 esp, 4
$LN5@ShowAboutW:

; 3167 :         if (io.ConfigFlags & ImGuiConfigFlags_NavEnableGamepad)         ImGui::Text(" NavEnableGamepad");

  0024f	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00252	8b 08		 mov	 ecx, DWORD PTR [eax]
  00254	83 e1 02	 and	 ecx, 2
  00257	74 0d		 je	 SHORT $LN6@ShowAboutW
  00259	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@PFLKKAGF@?5NavEnableGamepad@
  0025e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00263	83 c4 04	 add	 esp, 4
$LN6@ShowAboutW:

; 3168 :         if (io.ConfigFlags & ImGuiConfigFlags_NavEnableSetMousePos)     ImGui::Text(" NavEnableSetMousePos");

  00266	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00269	8b 08		 mov	 ecx, DWORD PTR [eax]
  0026b	83 e1 04	 and	 ecx, 4
  0026e	74 0d		 je	 SHORT $LN7@ShowAboutW
  00270	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@KOLHMNKG@?5NavEnableSetMousePos@
  00275	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0027a	83 c4 04	 add	 esp, 4
$LN7@ShowAboutW:

; 3169 :         if (io.ConfigFlags & ImGuiConfigFlags_NavNoCaptureKeyboard)     ImGui::Text(" NavNoCaptureKeyboard");

  0027d	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00280	8b 08		 mov	 ecx, DWORD PTR [eax]
  00282	83 e1 08	 and	 ecx, 8
  00285	74 0d		 je	 SHORT $LN8@ShowAboutW
  00287	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@DGPFDLKM@?5NavNoCaptureKeyboard@
  0028c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00291	83 c4 04	 add	 esp, 4
$LN8@ShowAboutW:

; 3170 :         if (io.ConfigFlags & ImGuiConfigFlags_NoMouse)                  ImGui::Text(" NoMouse");

  00294	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00297	8b 08		 mov	 ecx, DWORD PTR [eax]
  00299	83 e1 10	 and	 ecx, 16			; 00000010H
  0029c	74 0d		 je	 SHORT $LN9@ShowAboutW
  0029e	68 00 00 00 00	 push	 OFFSET ??_C@_08GAJGGFEK@?5NoMouse@
  002a3	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002a8	83 c4 04	 add	 esp, 4
$LN9@ShowAboutW:

; 3171 :         if (io.ConfigFlags & ImGuiConfigFlags_NoMouseCursorChange)      ImGui::Text(" NoMouseCursorChange");

  002ab	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  002ae	8b 08		 mov	 ecx, DWORD PTR [eax]
  002b0	83 e1 20	 and	 ecx, 32			; 00000020H
  002b3	74 0d		 je	 SHORT $LN10@ShowAboutW
  002b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@LKMNGEAI@?5NoMouseCursorChange@
  002ba	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002bf	83 c4 04	 add	 esp, 4
$LN10@ShowAboutW:

; 3172 :         if (io.MouseDrawCursor)                                         ImGui::Text("io.MouseDrawCursor");

  002c2	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  002c5	0f b6 88 a8 00
	00 00		 movzx	 ecx, BYTE PTR [eax+168]
  002cc	85 c9		 test	 ecx, ecx
  002ce	74 0d		 je	 SHORT $LN11@ShowAboutW
  002d0	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor@
  002d5	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002da	83 c4 04	 add	 esp, 4
$LN11@ShowAboutW:

; 3173 :         if (io.ConfigMacOSXBehaviors)                                   ImGui::Text("io.ConfigMacOSXBehaviors");

  002dd	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  002e0	0f b6 88 a9 00
	00 00		 movzx	 ecx, BYTE PTR [eax+169]
  002e7	85 c9		 test	 ecx, ecx
  002e9	74 0d		 je	 SHORT $LN12@ShowAboutW
  002eb	68 00 00 00 00	 push	 OFFSET ??_C@_0BJ@PEAELIMN@io?4ConfigMacOSXBehaviors@
  002f0	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  002f5	83 c4 04	 add	 esp, 4
$LN12@ShowAboutW:

; 3174 :         if (io.ConfigInputTextCursorBlink)                              ImGui::Text("io.ConfigInputTextCursorBlink");

  002f8	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  002fb	0f b6 88 aa 00
	00 00		 movzx	 ecx, BYTE PTR [eax+170]
  00302	85 c9		 test	 ecx, ecx
  00304	74 0d		 je	 SHORT $LN13@ShowAboutW
  00306	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink@
  0030b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00310	83 c4 04	 add	 esp, 4
$LN13@ShowAboutW:

; 3175 :         if (io.ConfigWindowsResizeFromEdges)                            ImGui::Text("io.ConfigWindowsResizeFromEdges");

  00313	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00316	0f b6 88 ab 00
	00 00		 movzx	 ecx, BYTE PTR [eax+171]
  0031d	85 c9		 test	 ecx, ecx
  0031f	74 0d		 je	 SHORT $LN14@ShowAboutW
  00321	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges@
  00326	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0032b	83 c4 04	 add	 esp, 4
$LN14@ShowAboutW:

; 3176 :         if (io.ConfigWindowsMoveFromTitleBarOnly)                       ImGui::Text("io.ConfigWindowsMoveFromTitleBarOnly");

  0032e	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00331	0f b6 88 ac 00
	00 00		 movzx	 ecx, BYTE PTR [eax+172]
  00338	85 c9		 test	 ecx, ecx
  0033a	74 0d		 je	 SHORT $LN15@ShowAboutW
  0033c	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBa@
  00341	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00346	83 c4 04	 add	 esp, 4
$LN15@ShowAboutW:

; 3177 :         if (io.ConfigWindowsMemoryCompactTimer >= 0.0f)                 ImGui::Text("io.ConfigWindowsMemoryCompactTimer = %.1ff", io.ConfigWindowsMemoryCompactTimer);

  00349	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  0034c	f3 0f 10 80 b0
	00 00 00	 movss	 xmm0, DWORD PTR [eax+176]
  00354	0f 2f 05 00 00
	00 00		 comiss	 xmm0, DWORD PTR __real@00000000
  0035b	72 20		 jb	 SHORT $LN16@ShowAboutW
  0035d	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00360	f3 0f 5a 80 b0
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+176]
  00368	83 ec 08	 sub	 esp, 8
  0036b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@DGNIKDMB@io?4ConfigWindowsMemoryCompactTi@
  00375	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0037a	83 c4 0c	 add	 esp, 12			; 0000000cH
$LN16@ShowAboutW:

; 3178 :         ImGui::Text("io.BackendFlags: 0x%08X", io.BackendFlags);

  0037d	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00380	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00383	51		 push	 ecx
  00384	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@GNGLPDFI@io?4BackendFlags?3?50x?$CF08X@
  00389	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0038e	83 c4 08	 add	 esp, 8

; 3179 :         if (io.BackendFlags & ImGuiBackendFlags_HasGamepad)             ImGui::Text(" HasGamepad");

  00391	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00394	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  00397	83 e1 01	 and	 ecx, 1
  0039a	74 0d		 je	 SHORT $LN17@ShowAboutW
  0039c	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MPABENKI@?5HasGamepad@
  003a1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003a6	83 c4 04	 add	 esp, 4
$LN17@ShowAboutW:

; 3180 :         if (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors)        ImGui::Text(" HasMouseCursors");

  003a9	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  003ac	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003af	83 e1 02	 and	 ecx, 2
  003b2	74 0d		 je	 SHORT $LN18@ShowAboutW
  003b4	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NNHFCGPM@?5HasMouseCursors@
  003b9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003be	83 c4 04	 add	 esp, 4
$LN18@ShowAboutW:

; 3181 :         if (io.BackendFlags & ImGuiBackendFlags_HasSetMousePos)         ImGui::Text(" HasSetMousePos");

  003c1	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  003c4	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003c7	83 e1 04	 and	 ecx, 4
  003ca	74 0d		 je	 SHORT $LN19@ShowAboutW
  003cc	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@EKJHBGEP@?5HasSetMousePos@
  003d1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003d6	83 c4 04	 add	 esp, 4
$LN19@ShowAboutW:

; 3182 :         if (io.BackendFlags & ImGuiBackendFlags_RendererHasVtxOffset)   ImGui::Text(" RendererHasVtxOffset");

  003d9	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  003dc	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  003df	83 e1 08	 and	 ecx, 8
  003e2	74 0d		 je	 SHORT $LN20@ShowAboutW
  003e4	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@GFLBPJOL@?5RendererHasVtxOffset@
  003e9	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  003ee	83 c4 04	 add	 esp, 4
$LN20@ShowAboutW:

; 3183 :         ImGui::Separator();

  003f1	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3184 :         ImGui::Text("io.Fonts: %d fonts, Flags: 0x%08X, TexSize: %d,%d", io.Fonts->Fonts.Size, io.Fonts->Flags, io.Fonts->TexWidth, io.Fonts->TexHeight);

  003f6	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  003f9	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  003ff	8b 51 20	 mov	 edx, DWORD PTR [ecx+32]
  00402	52		 push	 edx
  00403	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00406	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  0040c	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  0040f	52		 push	 edx
  00410	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00413	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00419	8b 51 04	 mov	 edx, DWORD PTR [ecx+4]
  0041c	52		 push	 edx
  0041d	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00420	8b 88 90 00 00
	00		 mov	 ecx, DWORD PTR [eax+144]
  00426	8b 51 34	 mov	 edx, DWORD PTR [ecx+52]
  00429	52		 push	 edx
  0042a	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@CPKPHKKN@io?4Fonts?3?5?$CFd?5fonts?0?5Flags?3?50x?$CF0@
  0042f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00434	83 c4 14	 add	 esp, 20			; 00000014H

; 3185 :         ImGui::Text("io.DisplaySize: %.2f,%.2f", io.DisplaySize.x, io.DisplaySize.y);

  00437	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  0043a	f3 0f 5a 40 0c	 cvtss2sd xmm0, DWORD PTR [eax+12]
  0043f	83 ec 08	 sub	 esp, 8
  00442	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00447	8b 4d f8	 mov	 ecx, DWORD PTR _io$5[ebp]
  0044a	f3 0f 5a 41 08	 cvtss2sd xmm0, DWORD PTR [ecx+8]
  0044f	83 ec 08	 sub	 esp, 8
  00452	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00457	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@EIINOCEN@io?4DisplaySize?3?5?$CF?42f?0?$CF?42f@
  0045c	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00461	83 c4 14	 add	 esp, 20			; 00000014H

; 3186 :         ImGui::Text("io.DisplayFramebufferScale: %.2f,%.2f", io.DisplayFramebufferScale.x, io.DisplayFramebufferScale.y);

  00464	8b 45 f8	 mov	 eax, DWORD PTR _io$5[ebp]
  00467	f3 0f 5a 80 a4
	00 00 00	 cvtss2sd xmm0, DWORD PTR [eax+164]
  0046f	83 ec 08	 sub	 esp, 8
  00472	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00477	8b 4d f8	 mov	 ecx, DWORD PTR _io$5[ebp]
  0047a	f3 0f 5a 81 a0
	00 00 00	 cvtss2sd xmm0, DWORD PTR [ecx+160]
  00482	83 ec 08	 sub	 esp, 8
  00485	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0048a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@MDJEGDDF@io?4DisplayFramebufferScale?3?5?$CF?42@
  0048f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00494	83 c4 14	 add	 esp, 20			; 00000014H

; 3187 :         ImGui::Separator();

  00497	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 3188 :         ImGui::Text("style.WindowPadding: %.2f,%.2f", style.WindowPadding.x, style.WindowPadding.y);

  0049c	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  0049f	f3 0f 5a 40 08	 cvtss2sd xmm0, DWORD PTR [eax+8]
  004a4	83 ec 08	 sub	 esp, 8
  004a7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004ac	8b 4d ec	 mov	 ecx, DWORD PTR _style$4[ebp]
  004af	f3 0f 5a 41 04	 cvtss2sd xmm0, DWORD PTR [ecx+4]
  004b4	83 ec 08	 sub	 esp, 8
  004b7	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004bc	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@CFKGJLOD@style?4WindowPadding?3?5?$CF?42f?0?$CF?42f@
  004c1	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004c6	83 c4 14	 add	 esp, 20			; 00000014H

; 3189 :         ImGui::Text("style.WindowBorderSize: %.2f", style.WindowBorderSize);

  004c9	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  004cc	f3 0f 5a 40 10	 cvtss2sd xmm0, DWORD PTR [eax+16]
  004d1	83 ec 08	 sub	 esp, 8
  004d4	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004d9	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NGAGEFMI@style?4WindowBorderSize?3?5?$CF?42f@
  004de	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  004e3	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3190 :         ImGui::Text("style.FramePadding: %.2f,%.2f", style.FramePadding.x, style.FramePadding.y);

  004e6	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  004e9	f3 0f 5a 40 3c	 cvtss2sd xmm0, DWORD PTR [eax+60]
  004ee	83 ec 08	 sub	 esp, 8
  004f1	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  004f6	8b 4d ec	 mov	 ecx, DWORD PTR _style$4[ebp]
  004f9	f3 0f 5a 41 38	 cvtss2sd xmm0, DWORD PTR [ecx+56]
  004fe	83 ec 08	 sub	 esp, 8
  00501	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00506	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GOMLHPA@style?4FramePadding?3?5?$CF?42f?0?$CF?42f@
  0050b	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00510	83 c4 14	 add	 esp, 20			; 00000014H

; 3191 :         ImGui::Text("style.FrameRounding: %.2f", style.FrameRounding);

  00513	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  00516	f3 0f 5a 40 40	 cvtss2sd xmm0, DWORD PTR [eax+64]
  0051b	83 ec 08	 sub	 esp, 8
  0051e	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00523	68 00 00 00 00	 push	 OFFSET ??_C@_0BK@INLCDPGI@style?4FrameRounding?3?5?$CF?42f@
  00528	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0052d	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3192 :         ImGui::Text("style.FrameBorderSize: %.2f", style.FrameBorderSize);

  00530	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  00533	f3 0f 5a 40 44	 cvtss2sd xmm0, DWORD PTR [eax+68]
  00538	83 ec 08	 sub	 esp, 8
  0053b	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  00540	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@JEFFCPEF@style?4FrameBorderSize?3?5?$CF?42f@
  00545	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0054a	83 c4 0c	 add	 esp, 12			; 0000000cH

; 3193 :         ImGui::Text("style.ItemSpacing: %.2f,%.2f", style.ItemSpacing.x, style.ItemSpacing.y);

  0054d	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  00550	f3 0f 5a 40 4c	 cvtss2sd xmm0, DWORD PTR [eax+76]
  00555	83 ec 08	 sub	 esp, 8
  00558	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0055d	8b 4d ec	 mov	 ecx, DWORD PTR _style$4[ebp]
  00560	f3 0f 5a 41 48	 cvtss2sd xmm0, DWORD PTR [ecx+72]
  00565	83 ec 08	 sub	 esp, 8
  00568	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0056d	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@DHGOAPDN@style?4ItemSpacing?3?5?$CF?42f?0?$CF?42f@
  00572	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00577	83 c4 14	 add	 esp, 20			; 00000014H

; 3194 :         ImGui::Text("style.ItemInnerSpacing: %.2f,%.2f", style.ItemInnerSpacing.x, style.ItemInnerSpacing.y);

  0057a	8b 45 ec	 mov	 eax, DWORD PTR _style$4[ebp]
  0057d	f3 0f 5a 40 54	 cvtss2sd xmm0, DWORD PTR [eax+84]
  00582	83 ec 08	 sub	 esp, 8
  00585	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0058a	8b 4d ec	 mov	 ecx, DWORD PTR _style$4[ebp]
  0058d	f3 0f 5a 41 50	 cvtss2sd xmm0, DWORD PTR [ecx+80]
  00592	83 ec 08	 sub	 esp, 8
  00595	f2 0f 11 04 24	 movsd	 QWORD PTR [esp], xmm0
  0059a	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@ECALHKFF@style?4ItemInnerSpacing?3?5?$CF?42f?0?$CF?4@
  0059f	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  005a4	83 c4 14	 add	 esp, 20			; 00000014H

; 3195 : 
; 3196 :         if (copy_to_clipboard)

  005a7	0f b6 45 e3	 movzx	 eax, BYTE PTR _copy_to_clipboard$3[ebp]
  005ab	85 c0		 test	 eax, eax
  005ad	74 12		 je	 SHORT $LN21@ShowAboutW

; 3197 :         {
; 3198 :             ImGui::LogText("\n```\n");

  005af	68 00 00 00 00	 push	 OFFSET ??_C@_05PPIKNONO@?6?$GA?$GA?$GA?6@
  005b4	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPBDZZ ; ImGui::LogText
  005b9	83 c4 04	 add	 esp, 4

; 3199 :             ImGui::LogFinish();

  005bc	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN21@ShowAboutW:

; 3200 :         }
; 3201 :         ImGui::EndChildFrame();

  005c1	e8 00 00 00 00	 call	 ?EndChildFrame@ImGui@@YAXXZ ; ImGui::EndChildFrame
$LN3@ShowAboutW:

; 3202 :     }
; 3203 :     ImGui::End();

  005c6	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowAboutW:

; 3204 : }

  005cb	5f		 pop	 edi
  005cc	5e		 pop	 esi
  005cd	5b		 pop	 ebx
  005ce	81 c4 08 01 00
	00		 add	 esp, 264		; 00000108H
  005d4	3b ec		 cmp	 ebp, esp
  005d6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005db	8b e5		 mov	 esp, ebp
  005dd	5d		 pop	 ebp
  005de	c3		 ret	 0
?ShowAboutWindow@ImGui@@YAXPA_N@Z ENDP			; ImGui::ShowAboutWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui_demo.cpp
;	COMDAT ?ShowDemoWindow@ImGui@@YAXPA_N@Z
_TEXT	SEGMENT
tv628 = -304						; size = 4
tv621 = -300						; size = 4
tv598 = -300						; size = 4
$T1 = -292						; size = 8
$T2 = -276						; size = 8
$T3 = -260						; size = 8
$T4 = -244						; size = 8
_backend_flags$5 = -36					; size = 4
_io$6 = -24						; size = 4
_window_flags$ = -12					; size = 4
__$ArrayPad$ = -4					; size = 4
_p_open$ = 8						; size = 4
?ShowDemoWindow@ImGui@@YAXPA_N@Z PROC			; ImGui::ShowDemoWindow, COMDAT

; 200  : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 30 01 00
	00		 sub	 esp, 304		; 00000130H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd d0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-304]
  00012	b9 4c 00 00 00	 mov	 ecx, 76			; 0000004cH
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	a1 00 00 00 00	 mov	 eax, DWORD PTR ___security_cookie
  00023	33 c5		 xor	 eax, ebp
  00025	89 45 fc	 mov	 DWORD PTR __$ArrayPad$[ebp], eax
  00028	b9 00 00 00 00	 mov	 ecx, OFFSET __B5B020C2_imgui_demo@cpp
  0002d	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4

; 201  :     IM_ASSERT(ImGui::GetCurrentContext() != NULL && "Missing dear imgui context. Refer to examples app!"); // Exceptionally add an extra assert here for people confused with initial dear imgui setup

  00032	e8 00 00 00 00	 call	 ?GetCurrentContext@ImGui@@YAPAUImGuiContext@@XZ ; ImGui::GetCurrentContext
  00037	85 c0		 test	 eax, eax
  00039	74 09		 je	 SHORT $LN44@ShowDemoWi
  0003b	b8 00 00 00 00	 mov	 eax, OFFSET ??_C@_0DD@MGKHNCLH@Missing?5dear?5imgui?5context?4?5Ref@
  00040	85 c0		 test	 eax, eax
  00042	75 26		 jne	 SHORT $LN45@ShowDemoWi
$LN44@ShowDemoWi:
  00044	8b 0d 00 00 00
	00		 mov	 ecx, DWORD PTR ?__LINE__Var@?0??ShowDemoWindow@ImGui@@YAXPA_N@Z@4JA
  0004a	83 c1 01	 add	 ecx, 1
  0004d	8b f4		 mov	 esi, esp
  0004f	51		 push	 ecx
  00050	68 00 00 00 00	 push	 OFFSET ??_C@_1MI@BHIFDDFG@?$AAD?$AA?3?$AA?2?$AAP?$AAr?$AAo?$AAg?$AAr?$AAa?$AAm?$AAm?$AAi?$AAe?$AAr?$AAe@
  00055	68 00 00 00 00	 push	 OFFSET ??_C@_1LA@COADBOEK@?$AAI?$AAm?$AAG?$AAu?$AAi?$AA?3?$AA?3?$AAG?$AAe?$AAt?$AAC?$AAu?$AAr?$AAr?$AAe@
  0005a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp___wassert
  00060	83 c4 0c	 add	 esp, 12			; 0000000cH
  00063	3b f4		 cmp	 esi, esp
  00065	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN45@ShowDemoWi:

; 202  : 
; 203  :     // Examples Apps (accessible from the "Examples" menu)
; 204  :     static bool show_app_documents = false;
; 205  :     static bool show_app_main_menu_bar = false;
; 206  :     static bool show_app_console = false;
; 207  :     static bool show_app_log = false;
; 208  :     static bool show_app_layout = false;
; 209  :     static bool show_app_property_editor = false;
; 210  :     static bool show_app_long_text = false;
; 211  :     static bool show_app_auto_resize = false;
; 212  :     static bool show_app_constrained_resize = false;
; 213  :     static bool show_app_simple_overlay = false;
; 214  :     static bool show_app_window_titles = false;
; 215  :     static bool show_app_custom_rendering = false;
; 216  : 
; 217  :     if (show_app_documents)           ShowExampleAppDocuments(&show_app_documents);

  0006a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00071	85 c0		 test	 eax, eax
  00073	74 0d		 je	 SHORT $LN2@ShowDemoWi
  00075	68 00 00 00 00	 push	 OFFSET ?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0007a	e8 00 00 00 00	 call	 ?ShowExampleAppDocuments@@YAXPA_N@Z ; ShowExampleAppDocuments
  0007f	83 c4 04	 add	 esp, 4
$LN2@ShowDemoWi:

; 218  :     if (show_app_main_menu_bar)       ShowExampleAppMainMenuBar();

  00082	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_main_menu_bar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00089	85 c0		 test	 eax, eax
  0008b	74 05		 je	 SHORT $LN3@ShowDemoWi
  0008d	e8 00 00 00 00	 call	 ?ShowExampleAppMainMenuBar@@YAXXZ ; ShowExampleAppMainMenuBar
$LN3@ShowDemoWi:

; 219  :     if (show_app_console)             ShowExampleAppConsole(&show_app_console);

  00092	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00099	85 c0		 test	 eax, eax
  0009b	74 0d		 je	 SHORT $LN4@ShowDemoWi
  0009d	68 00 00 00 00	 push	 OFFSET ?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000a2	e8 00 00 00 00	 call	 ?ShowExampleAppConsole@@YAXPA_N@Z ; ShowExampleAppConsole
  000a7	83 c4 04	 add	 esp, 4
$LN4@ShowDemoWi:

; 220  :     if (show_app_log)                 ShowExampleAppLog(&show_app_log);

  000aa	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000b1	85 c0		 test	 eax, eax
  000b3	74 0d		 je	 SHORT $LN5@ShowDemoWi
  000b5	68 00 00 00 00	 push	 OFFSET ?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000ba	e8 00 00 00 00	 call	 ?ShowExampleAppLog@@YAXPA_N@Z ; ShowExampleAppLog
  000bf	83 c4 04	 add	 esp, 4
$LN5@ShowDemoWi:

; 221  :     if (show_app_layout)              ShowExampleAppLayout(&show_app_layout);

  000c2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000c9	85 c0		 test	 eax, eax
  000cb	74 0d		 je	 SHORT $LN6@ShowDemoWi
  000cd	68 00 00 00 00	 push	 OFFSET ?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000d2	e8 00 00 00 00	 call	 ?ShowExampleAppLayout@@YAXPA_N@Z ; ShowExampleAppLayout
  000d7	83 c4 04	 add	 esp, 4
$LN6@ShowDemoWi:

; 222  :     if (show_app_property_editor)     ShowExampleAppPropertyEditor(&show_app_property_editor);

  000da	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000e1	85 c0		 test	 eax, eax
  000e3	74 0d		 je	 SHORT $LN7@ShowDemoWi
  000e5	68 00 00 00 00	 push	 OFFSET ?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000ea	e8 00 00 00 00	 call	 ?ShowExampleAppPropertyEditor@@YAXPA_N@Z ; ShowExampleAppPropertyEditor
  000ef	83 c4 04	 add	 esp, 4
$LN7@ShowDemoWi:

; 223  :     if (show_app_long_text)           ShowExampleAppLongText(&show_app_long_text);

  000f2	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  000f9	85 c0		 test	 eax, eax
  000fb	74 0d		 je	 SHORT $LN8@ShowDemoWi
  000fd	68 00 00 00 00	 push	 OFFSET ?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00102	e8 00 00 00 00	 call	 ?ShowExampleAppLongText@@YAXPA_N@Z ; ShowExampleAppLongText
  00107	83 c4 04	 add	 esp, 4
$LN8@ShowDemoWi:

; 224  :     if (show_app_auto_resize)         ShowExampleAppAutoResize(&show_app_auto_resize);

  0010a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00111	85 c0		 test	 eax, eax
  00113	74 0d		 je	 SHORT $LN9@ShowDemoWi
  00115	68 00 00 00 00	 push	 OFFSET ?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0011a	e8 00 00 00 00	 call	 ?ShowExampleAppAutoResize@@YAXPA_N@Z ; ShowExampleAppAutoResize
  0011f	83 c4 04	 add	 esp, 4
$LN9@ShowDemoWi:

; 225  :     if (show_app_constrained_resize)  ShowExampleAppConstrainedResize(&show_app_constrained_resize);

  00122	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00129	85 c0		 test	 eax, eax
  0012b	74 0d		 je	 SHORT $LN10@ShowDemoWi
  0012d	68 00 00 00 00	 push	 OFFSET ?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00132	e8 00 00 00 00	 call	 ?ShowExampleAppConstrainedResize@@YAXPA_N@Z ; ShowExampleAppConstrainedResize
  00137	83 c4 04	 add	 esp, 4
$LN10@ShowDemoWi:

; 226  :     if (show_app_simple_overlay)      ShowExampleAppSimpleOverlay(&show_app_simple_overlay);

  0013a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00141	85 c0		 test	 eax, eax
  00143	74 0d		 je	 SHORT $LN11@ShowDemoWi
  00145	68 00 00 00 00	 push	 OFFSET ?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0014a	e8 00 00 00 00	 call	 ?ShowExampleAppSimpleOverlay@@YAXPA_N@Z ; ShowExampleAppSimpleOverlay
  0014f	83 c4 04	 add	 esp, 4
$LN11@ShowDemoWi:

; 227  :     if (show_app_window_titles)       ShowExampleAppWindowTitles(&show_app_window_titles);

  00152	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00159	85 c0		 test	 eax, eax
  0015b	74 0d		 je	 SHORT $LN12@ShowDemoWi
  0015d	68 00 00 00 00	 push	 OFFSET ?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00162	e8 00 00 00 00	 call	 ?ShowExampleAppWindowTitles@@YAXPA_N@Z ; ShowExampleAppWindowTitles
  00167	83 c4 04	 add	 esp, 4
$LN12@ShowDemoWi:

; 228  :     if (show_app_custom_rendering)    ShowExampleAppCustomRendering(&show_app_custom_rendering);

  0016a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00171	85 c0		 test	 eax, eax
  00173	74 0d		 je	 SHORT $LN13@ShowDemoWi
  00175	68 00 00 00 00	 push	 OFFSET ?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0017a	e8 00 00 00 00	 call	 ?ShowExampleAppCustomRendering@@YAXPA_N@Z ; ShowExampleAppCustomRendering
  0017f	83 c4 04	 add	 esp, 4
$LN13@ShowDemoWi:

; 229  : 
; 230  :     // Dear ImGui Apps (accessible from the "Tools" menu)
; 231  :     static bool show_app_metrics = false;
; 232  :     static bool show_app_style_editor = false;
; 233  :     static bool show_app_about = false;
; 234  : 
; 235  :     if (show_app_metrics)             { ImGui::ShowMetricsWindow(&show_app_metrics); }

  00182	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00189	85 c0		 test	 eax, eax
  0018b	74 0d		 je	 SHORT $LN14@ShowDemoWi
  0018d	68 00 00 00 00	 push	 OFFSET ?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00192	e8 00 00 00 00	 call	 ?ShowMetricsWindow@ImGui@@YAXPA_N@Z ; ImGui::ShowMetricsWindow
  00197	83 c4 04	 add	 esp, 4
$LN14@ShowDemoWi:

; 236  :     if (show_app_style_editor)        { ImGui::Begin("Style Editor", &show_app_style_editor); ImGui::ShowStyleEditor(); ImGui::End(); }

  0019a	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  001a1	85 c0		 test	 eax, eax
  001a3	74 23		 je	 SHORT $LN15@ShowDemoWi
  001a5	6a 00		 push	 0
  001a7	68 00 00 00 00	 push	 OFFSET ?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  001ac	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GJBKNEHA@Style?5Editor@
  001b1	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  001b6	83 c4 0c	 add	 esp, 12			; 0000000cH
  001b9	6a 00		 push	 0
  001bb	e8 00 00 00 00	 call	 ?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z ; ImGui::ShowStyleEditor
  001c0	83 c4 04	 add	 esp, 4
  001c3	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN15@ShowDemoWi:

; 237  :     if (show_app_about)               { ImGui::ShowAboutWindow(&show_app_about); }

  001c8	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  001cf	85 c0		 test	 eax, eax
  001d1	74 0d		 je	 SHORT $LN16@ShowDemoWi
  001d3	68 00 00 00 00	 push	 OFFSET ?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  001d8	e8 00 00 00 00	 call	 ?ShowAboutWindow@ImGui@@YAXPA_N@Z ; ImGui::ShowAboutWindow
  001dd	83 c4 04	 add	 esp, 4
$LN16@ShowDemoWi:

; 238  : 
; 239  :     // Demonstrate the various window flags. Typically you would just use the default!
; 240  :     static bool no_titlebar = false;
; 241  :     static bool no_scrollbar = false;
; 242  :     static bool no_menu = false;
; 243  :     static bool no_move = false;
; 244  :     static bool no_resize = false;
; 245  :     static bool no_collapse = false;
; 246  :     static bool no_close = false;
; 247  :     static bool no_nav = false;
; 248  :     static bool no_background = false;
; 249  :     static bool no_bring_to_front = false;
; 250  : 
; 251  :     ImGuiWindowFlags window_flags = 0;

  001e0	c7 45 f4 00 00
	00 00		 mov	 DWORD PTR _window_flags$[ebp], 0

; 252  :     if (no_titlebar)        window_flags |= ImGuiWindowFlags_NoTitleBar;

  001e7	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_titlebar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  001ee	85 c0		 test	 eax, eax
  001f0	74 09		 je	 SHORT $LN17@ShowDemoWi
  001f2	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  001f5	83 c8 01	 or	 eax, 1
  001f8	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN17@ShowDemoWi:

; 253  :     if (no_scrollbar)       window_flags |= ImGuiWindowFlags_NoScrollbar;

  001fb	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_scrollbar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00202	85 c0		 test	 eax, eax
  00204	74 09		 je	 SHORT $LN18@ShowDemoWi
  00206	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  00209	83 c8 08	 or	 eax, 8
  0020c	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN18@ShowDemoWi:

; 254  :     if (!no_menu)           window_flags |= ImGuiWindowFlags_MenuBar;

  0020f	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_menu@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00216	85 c0		 test	 eax, eax
  00218	75 0b		 jne	 SHORT $LN19@ShowDemoWi
  0021a	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  0021d	0d 00 04 00 00	 or	 eax, 1024		; 00000400H
  00222	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN19@ShowDemoWi:

; 255  :     if (no_move)            window_flags |= ImGuiWindowFlags_NoMove;

  00225	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_move@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0022c	85 c0		 test	 eax, eax
  0022e	74 09		 je	 SHORT $LN20@ShowDemoWi
  00230	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  00233	83 c8 04	 or	 eax, 4
  00236	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN20@ShowDemoWi:

; 256  :     if (no_resize)          window_flags |= ImGuiWindowFlags_NoResize;

  00239	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00240	85 c0		 test	 eax, eax
  00242	74 09		 je	 SHORT $LN21@ShowDemoWi
  00244	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  00247	83 c8 02	 or	 eax, 2
  0024a	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN21@ShowDemoWi:

; 257  :     if (no_collapse)        window_flags |= ImGuiWindowFlags_NoCollapse;

  0024d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_collapse@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00254	85 c0		 test	 eax, eax
  00256	74 09		 je	 SHORT $LN22@ShowDemoWi
  00258	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  0025b	83 c8 20	 or	 eax, 32			; 00000020H
  0025e	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN22@ShowDemoWi:

; 258  :     if (no_nav)             window_flags |= ImGuiWindowFlags_NoNav;

  00261	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_nav@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00268	85 c0		 test	 eax, eax
  0026a	74 0b		 je	 SHORT $LN23@ShowDemoWi
  0026c	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  0026f	0d 00 00 0c 00	 or	 eax, 786432		; 000c0000H
  00274	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN23@ShowDemoWi:

; 259  :     if (no_background)      window_flags |= ImGuiWindowFlags_NoBackground;

  00277	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_background@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0027e	85 c0		 test	 eax, eax
  00280	74 0b		 je	 SHORT $LN24@ShowDemoWi
  00282	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  00285	0d 80 00 00 00	 or	 eax, 128		; 00000080H
  0028a	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN24@ShowDemoWi:

; 260  :     if (no_bring_to_front)  window_flags |= ImGuiWindowFlags_NoBringToFrontOnFocus;

  0028d	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_bring_to_front@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00294	85 c0		 test	 eax, eax
  00296	74 0b		 je	 SHORT $LN25@ShowDemoWi
  00298	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  0029b	0d 00 20 00 00	 or	 eax, 8192		; 00002000H
  002a0	89 45 f4	 mov	 DWORD PTR _window_flags$[ebp], eax
$LN25@ShowDemoWi:

; 261  :     if (no_close)           p_open = NULL; // Don't pass our bool* to Begin

  002a3	0f b6 05 00 00
	00 00		 movzx	 eax, BYTE PTR ?no_close@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  002aa	85 c0		 test	 eax, eax
  002ac	74 07		 je	 SHORT $LN26@ShowDemoWi
  002ae	c7 45 08 00 00
	00 00		 mov	 DWORD PTR _p_open$[ebp], 0
$LN26@ShowDemoWi:

; 262  : 
; 263  :     // We specify a default position/size in case there's no data in the .ini file. Typically this isn't required! We only do it to make the Demo applications a little more welcoming.
; 264  :     ImGui::SetNextWindowPos(ImVec2(650, 20), ImGuiCond_FirstUseEver);

  002b5	51		 push	 ecx
  002b6	0f 57 c0	 xorps	 xmm0, xmm0
  002b9	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002be	51		 push	 ecx
  002bf	0f 57 c0	 xorps	 xmm0, xmm0
  002c2	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002c7	8d 8d 0c ff ff
	ff		 lea	 ecx, DWORD PTR $T4[ebp]
  002cd	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002d2	50		 push	 eax
  002d3	6a 04		 push	 4
  002d5	51		 push	 ecx
  002d6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@41a00000
  002de	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002e3	51		 push	 ecx
  002e4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44228000
  002ec	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  002f1	8d 8d fc fe ff
	ff		 lea	 ecx, DWORD PTR $T3[ebp]
  002f7	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  002fc	50		 push	 eax
  002fd	e8 00 00 00 00	 call	 ?SetNextWindowPos@ImGui@@YAXABUImVec2@@H0@Z ; ImGui::SetNextWindowPos
  00302	83 c4 0c	 add	 esp, 12			; 0000000cH

; 265  :     ImGui::SetNextWindowSize(ImVec2(550, 680), ImGuiCond_FirstUseEver);

  00305	6a 04		 push	 4
  00307	51		 push	 ecx
  00308	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@442a0000
  00310	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00315	51		 push	 ecx
  00316	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@44098000
  0031e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00323	8d 8d ec fe ff
	ff		 lea	 ecx, DWORD PTR $T2[ebp]
  00329	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  0032e	50		 push	 eax
  0032f	e8 00 00 00 00	 call	 ?SetNextWindowSize@ImGui@@YAXABUImVec2@@H@Z ; ImGui::SetNextWindowSize
  00334	83 c4 08	 add	 esp, 8

; 266  : 
; 267  :     // Main body of the Demo window starts here.
; 268  :     if (!ImGui::Begin("Dear ImGui Demo", p_open, window_flags))

  00337	8b 45 f4	 mov	 eax, DWORD PTR _window_flags$[ebp]
  0033a	50		 push	 eax
  0033b	8b 4d 08	 mov	 ecx, DWORD PTR _p_open$[ebp]
  0033e	51		 push	 ecx
  0033f	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@IGMFAKOE@Dear?5ImGui?5Demo@
  00344	e8 00 00 00 00	 call	 ?Begin@ImGui@@YA_NPBDPA_NH@Z ; ImGui::Begin
  00349	83 c4 0c	 add	 esp, 12			; 0000000cH
  0034c	0f b6 d0	 movzx	 edx, al
  0034f	85 d2		 test	 edx, edx
  00351	75 0a		 jne	 SHORT $LN27@ShowDemoWi

; 269  :     {
; 270  :         // Early out if the window is collapsed, as an optimization.
; 271  :         ImGui::End();

  00353	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End

; 272  :         return;

  00358	e9 72 08 00 00	 jmp	 $LN1@ShowDemoWi
$LN27@ShowDemoWi:

; 273  :     }
; 274  : 
; 275  :     // Most "big" widgets share a common width settings by default.
; 276  :     //ImGui::PushItemWidth(ImGui::GetWindowWidth() * 0.65f);    // Use 2/3 of the space for widgets and 1/3 for labels (default)
; 277  :     ImGui::PushItemWidth(ImGui::GetFontSize() * -12);           // Use fixed width for labels (by passing a negative value), the rest goes to widgets. We choose a width proportional to our font size.

  0035d	e8 00 00 00 00	 call	 ?GetFontSize@ImGui@@YAMXZ ; ImGui::GetFontSize
  00362	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR tv598[ebp]
  00368	f3 0f 10 85 d4
	fe ff ff	 movss	 xmm0, DWORD PTR tv598[ebp]
  00370	f3 0f 59 05 00
	00 00 00	 mulss	 xmm0, DWORD PTR __real@c1400000
  00378	51		 push	 ecx
  00379	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0037e	e8 00 00 00 00	 call	 ?PushItemWidth@ImGui@@YAXM@Z ; ImGui::PushItemWidth
  00383	83 c4 04	 add	 esp, 4

; 278  : 
; 279  :     // Menu Bar
; 280  :     if (ImGui::BeginMenuBar())

  00386	e8 00 00 00 00	 call	 ?BeginMenuBar@ImGui@@YA_NXZ ; ImGui::BeginMenuBar
  0038b	0f b6 c0	 movzx	 eax, al
  0038e	85 c0		 test	 eax, eax
  00390	0f 84 a9 01 00
	00		 je	 $LN28@ShowDemoWi

; 281  :     {
; 282  :         if (ImGui::BeginMenu("Menu"))

  00396	6a 01		 push	 1
  00398	68 00 00 00 00	 push	 OFFSET ??_C@_04IFEHPILC@Menu@
  0039d	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  003a2	83 c4 08	 add	 esp, 8
  003a5	0f b6 c0	 movzx	 eax, al
  003a8	85 c0		 test	 eax, eax
  003aa	74 0a		 je	 SHORT $LN29@ShowDemoWi

; 283  :         {
; 284  :             ShowExampleMenuFile();

  003ac	e8 00 00 00 00	 call	 ?ShowExampleMenuFile@@YAXXZ ; ShowExampleMenuFile

; 285  :             ImGui::EndMenu();

  003b1	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN29@ShowDemoWi:

; 286  :         }
; 287  :         if (ImGui::BeginMenu("Examples"))

  003b6	6a 01		 push	 1
  003b8	68 00 00 00 00	 push	 OFFSET ??_C@_08KJMBPHGD@Examples@
  003bd	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  003c2	83 c4 08	 add	 esp, 8
  003c5	0f b6 c0	 movzx	 eax, al
  003c8	85 c0		 test	 eax, eax
  003ca	0f 84 0d 01 00
	00		 je	 $LN30@ShowDemoWi

; 288  :         {
; 289  :             ImGui::MenuItem("Main menu bar", NULL, &show_app_main_menu_bar);

  003d0	6a 01		 push	 1
  003d2	68 00 00 00 00	 push	 OFFSET ?show_app_main_menu_bar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  003d7	6a 00		 push	 0
  003d9	68 00 00 00 00	 push	 OFFSET ??_C@_0O@ECNFCDDH@Main?5menu?5bar@
  003de	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  003e3	83 c4 10	 add	 esp, 16			; 00000010H

; 290  :             ImGui::MenuItem("Console", NULL, &show_app_console);

  003e6	6a 01		 push	 1
  003e8	68 00 00 00 00	 push	 OFFSET ?show_app_console@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  003ed	6a 00		 push	 0
  003ef	68 00 00 00 00	 push	 OFFSET ??_C@_07PGLPGHFC@Console@
  003f4	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  003f9	83 c4 10	 add	 esp, 16			; 00000010H

; 291  :             ImGui::MenuItem("Log", NULL, &show_app_log);

  003fc	6a 01		 push	 1
  003fe	68 00 00 00 00	 push	 OFFSET ?show_app_log@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00403	6a 00		 push	 0
  00405	68 00 00 00 00	 push	 OFFSET ??_C@_03GGEOLGBL@Log@
  0040a	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  0040f	83 c4 10	 add	 esp, 16			; 00000010H

; 292  :             ImGui::MenuItem("Simple layout", NULL, &show_app_layout);

  00412	6a 01		 push	 1
  00414	68 00 00 00 00	 push	 OFFSET ?show_app_layout@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00419	6a 00		 push	 0
  0041b	68 00 00 00 00	 push	 OFFSET ??_C@_0O@JBJOEMFC@Simple?5layout@
  00420	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00425	83 c4 10	 add	 esp, 16			; 00000010H

; 293  :             ImGui::MenuItem("Property editor", NULL, &show_app_property_editor);

  00428	6a 01		 push	 1
  0042a	68 00 00 00 00	 push	 OFFSET ?show_app_property_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0042f	6a 00		 push	 0
  00431	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@DNAHAJCI@Property?5editor@
  00436	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  0043b	83 c4 10	 add	 esp, 16			; 00000010H

; 294  :             ImGui::MenuItem("Long text display", NULL, &show_app_long_text);

  0043e	6a 01		 push	 1
  00440	68 00 00 00 00	 push	 OFFSET ?show_app_long_text@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00445	6a 00		 push	 0
  00447	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@INJCBODH@Long?5text?5display@
  0044c	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00451	83 c4 10	 add	 esp, 16			; 00000010H

; 295  :             ImGui::MenuItem("Auto-resizing window", NULL, &show_app_auto_resize);

  00454	6a 01		 push	 1
  00456	68 00 00 00 00	 push	 OFFSET ?show_app_auto_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0045b	6a 00		 push	 0
  0045d	68 00 00 00 00	 push	 OFFSET ??_C@_0BF@OHKJAELB@Auto?9resizing?5window@
  00462	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00467	83 c4 10	 add	 esp, 16			; 00000010H

; 296  :             ImGui::MenuItem("Constrained-resizing window", NULL, &show_app_constrained_resize);

  0046a	6a 01		 push	 1
  0046c	68 00 00 00 00	 push	 OFFSET ?show_app_constrained_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00471	6a 00		 push	 0
  00473	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@CJMMFMCL@Constrained?9resizing?5window@
  00478	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  0047d	83 c4 10	 add	 esp, 16			; 00000010H

; 297  :             ImGui::MenuItem("Simple overlay", NULL, &show_app_simple_overlay);

  00480	6a 01		 push	 1
  00482	68 00 00 00 00	 push	 OFFSET ?show_app_simple_overlay@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00487	6a 00		 push	 0
  00489	68 00 00 00 00	 push	 OFFSET ??_C@_0P@IMGHCBNF@Simple?5overlay@
  0048e	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00493	83 c4 10	 add	 esp, 16			; 00000010H

; 298  :             ImGui::MenuItem("Manipulating window titles", NULL, &show_app_window_titles);

  00496	6a 01		 push	 1
  00498	68 00 00 00 00	 push	 OFFSET ?show_app_window_titles@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  0049d	6a 00		 push	 0
  0049f	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MDGJIIDL@Manipulating?5window?5titles@
  004a4	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  004a9	83 c4 10	 add	 esp, 16			; 00000010H

; 299  :             ImGui::MenuItem("Custom rendering", NULL, &show_app_custom_rendering);

  004ac	6a 01		 push	 1
  004ae	68 00 00 00 00	 push	 OFFSET ?show_app_custom_rendering@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  004b3	6a 00		 push	 0
  004b5	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@MLNDPKFI@Custom?5rendering@
  004ba	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  004bf	83 c4 10	 add	 esp, 16			; 00000010H

; 300  :             ImGui::MenuItem("Documents", NULL, &show_app_documents);

  004c2	6a 01		 push	 1
  004c4	68 00 00 00 00	 push	 OFFSET ?show_app_documents@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  004c9	6a 00		 push	 0
  004cb	68 00 00 00 00	 push	 OFFSET ??_C@_09IBGBKIMC@Documents@
  004d0	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  004d5	83 c4 10	 add	 esp, 16			; 00000010H

; 301  :             ImGui::EndMenu();

  004d8	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN30@ShowDemoWi:

; 302  :         }
; 303  :         if (ImGui::BeginMenu("Tools"))

  004dd	6a 01		 push	 1
  004df	68 00 00 00 00	 push	 OFFSET ??_C@_05OENKALAF@Tools@
  004e4	e8 00 00 00 00	 call	 ?BeginMenu@ImGui@@YA_NPBD_N@Z ; ImGui::BeginMenu
  004e9	83 c4 08	 add	 esp, 8
  004ec	0f b6 c0	 movzx	 eax, al
  004ef	85 c0		 test	 eax, eax
  004f1	74 47		 je	 SHORT $LN31@ShowDemoWi

; 304  :         {
; 305  :             ImGui::MenuItem("Metrics", NULL, &show_app_metrics);

  004f3	6a 01		 push	 1
  004f5	68 00 00 00 00	 push	 OFFSET ?show_app_metrics@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  004fa	6a 00		 push	 0
  004fc	68 00 00 00 00	 push	 OFFSET ??_C@_07OKMHIPFF@Metrics@
  00501	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00506	83 c4 10	 add	 esp, 16			; 00000010H

; 306  :             ImGui::MenuItem("Style Editor", NULL, &show_app_style_editor);

  00509	6a 01		 push	 1
  0050b	68 00 00 00 00	 push	 OFFSET ?show_app_style_editor@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00510	6a 00		 push	 0
  00512	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GJBKNEHA@Style?5Editor@
  00517	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  0051c	83 c4 10	 add	 esp, 16			; 00000010H

; 307  :             ImGui::MenuItem("About Dear ImGui", NULL, &show_app_about);

  0051f	6a 01		 push	 1
  00521	68 00 00 00 00	 push	 OFFSET ?show_app_about@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00526	6a 00		 push	 0
  00528	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@NKKLPDOL@About?5Dear?5ImGui@
  0052d	e8 00 00 00 00	 call	 ?MenuItem@ImGui@@YA_NPBD0PA_N_N@Z ; ImGui::MenuItem
  00532	83 c4 10	 add	 esp, 16			; 00000010H

; 308  :             ImGui::EndMenu();

  00535	e8 00 00 00 00	 call	 ?EndMenu@ImGui@@YAXXZ	; ImGui::EndMenu
$LN31@ShowDemoWi:

; 309  :         }
; 310  :         ImGui::EndMenuBar();

  0053a	e8 00 00 00 00	 call	 ?EndMenuBar@ImGui@@YAXXZ ; ImGui::EndMenuBar
$LN28@ShowDemoWi:

; 311  :     }
; 312  : 
; 313  :     ImGui::Text("dear imgui says hello. (%s)", IMGUI_VERSION);

  0053f	68 00 00 00 00	 push	 OFFSET ??_C@_08KHNILBGC@1?475?5WIP@
  00544	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@OGBJOAAJ@dear?5imgui?5says?5hello?4?5?$CI?$CFs?$CJ@
  00549	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0054e	83 c4 08	 add	 esp, 8

; 314  :     ImGui::Spacing();

  00551	e8 00 00 00 00	 call	 ?Spacing@ImGui@@YAXXZ	; ImGui::Spacing

; 315  : 
; 316  :     if (ImGui::CollapsingHeader("Help"))

  00556	6a 00		 push	 0
  00558	68 00 00 00 00	 push	 OFFSET ??_C@_04DDFEFHOJ@Help@
  0055d	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00562	83 c4 08	 add	 esp, 8
  00565	0f b6 c0	 movzx	 eax, al
  00568	85 c0		 test	 eax, eax
  0056a	0f 84 ab 00 00
	00		 je	 $LN32@ShowDemoWi

; 317  :     {
; 318  :         ImGui::Text("ABOUT THIS DEMO:");

  00570	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@LJBDHCFD@ABOUT?5THIS?5DEMO?3@
  00575	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  0057a	83 c4 04	 add	 esp, 4

; 319  :         ImGui::BulletText("Sections below are demonstrating many aspects of the library.");

  0057d	68 00 00 00 00	 push	 OFFSET ??_C@_0DO@FBJHOIEP@Sections?5below?5are?5demonstratin@
  00582	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00587	83 c4 04	 add	 esp, 4

; 320  :         ImGui::BulletText("The \"Examples\" menu above leads to more demo contents.");

  0058a	68 00 00 00 00	 push	 OFFSET ??_C@_0DH@GKLDFKKO@The?5?$CCExamples?$CC?5menu?5above?5leads@
  0058f	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00594	83 c4 04	 add	 esp, 4

; 321  :         ImGui::BulletText("The \"Tools\" menu above gives access to: About Box, Style Editor,\n"

  00597	68 00 00 00 00	 push	 OFFSET ??_C@_0HK@IHDIDEEM@The?5?$CCTools?$CC?5menu?5above?5gives?5ac@
  0059c	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  005a1	83 c4 04	 add	 esp, 4

; 322  :                           "and Metrics (general purpose Dear ImGui debugging tool).");
; 323  :         ImGui::Separator();

  005a4	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 324  : 
; 325  :         ImGui::Text("PROGRAMMER GUIDE:");

  005a9	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@GECCEBDK@PROGRAMMER?5GUIDE?3@
  005ae	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  005b3	83 c4 04	 add	 esp, 4

; 326  :         ImGui::BulletText("See the ShowDemoWindow() code in imgui_demo.cpp. <- you are here!");

  005b6	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@GEILMFPK@See?5the?5ShowDemoWindow?$CI?$CJ?5code?5i@
  005bb	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  005c0	83 c4 04	 add	 esp, 4

; 327  :         ImGui::BulletText("See comments in imgui.cpp.");

  005c3	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@CMPGJGKF@See?5comments?5in?5imgui?4cpp?4@
  005c8	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  005cd	83 c4 04	 add	 esp, 4

; 328  :         ImGui::BulletText("See example applications in the examples/ folder.");

  005d0	68 00 00 00 00	 push	 OFFSET ??_C@_0DC@LILBLMCJ@See?5example?5applications?5in?5the@
  005d5	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  005da	83 c4 04	 add	 esp, 4

; 329  :         ImGui::BulletText("Read the FAQ at http://www.dearimgui.org/faq/");

  005dd	68 00 00 00 00	 push	 OFFSET ??_C@_0CO@IHPGPBLH@Read?5the?5FAQ?5at?5http?3?1?1www?4dear@
  005e2	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  005e7	83 c4 04	 add	 esp, 4

; 330  :         ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableKeyboard' for keyboard controls.");

  005ea	68 00 00 00 00	 push	 OFFSET ??_C@_0EB@MLAMCLHL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@
  005ef	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  005f4	83 c4 04	 add	 esp, 4

; 331  :         ImGui::BulletText("Set 'io.ConfigFlags |= NavEnableGamepad' for gamepad controls.");

  005f7	68 00 00 00 00	 push	 OFFSET ??_C@_0DP@CIADOILL@Set?5?8io?4ConfigFlags?5?$HM?$DN?5NavEnabl@
  005fc	e8 00 00 00 00	 call	 ?BulletText@ImGui@@YAXPBDZZ ; ImGui::BulletText
  00601	83 c4 04	 add	 esp, 4

; 332  :         ImGui::Separator();

  00604	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator

; 333  : 
; 334  :         ImGui::Text("USER GUIDE:");

  00609	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NDGNNOFI@USER?5GUIDE?3@
  0060e	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00613	83 c4 04	 add	 esp, 4

; 335  :         ImGui::ShowUserGuide();

  00616	e8 00 00 00 00	 call	 ?ShowUserGuide@ImGui@@YAXXZ ; ImGui::ShowUserGuide
$LN32@ShowDemoWi:

; 336  :     }
; 337  : 
; 338  :     if (ImGui::CollapsingHeader("Configuration"))

  0061b	6a 00		 push	 0
  0061d	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PIILMNHI@Configuration@
  00622	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00627	83 c4 08	 add	 esp, 8
  0062a	0f b6 c0	 movzx	 eax, al
  0062d	85 c0		 test	 eax, eax
  0062f	0f 84 d6 03 00
	00		 je	 $LN40@ShowDemoWi

; 339  :     {
; 340  :         ImGuiIO& io = ImGui::GetIO();

  00635	e8 00 00 00 00	 call	 ?GetIO@ImGui@@YAAAUImGuiIO@@XZ ; ImGui::GetIO
  0063a	89 45 e8	 mov	 DWORD PTR _io$6[ebp], eax

; 341  : 
; 342  :         if (ImGui::TreeNode("Configuration##2"))

  0063d	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@DLCAGGKD@Configuration?$CD?$CD2@
  00642	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00647	83 c4 04	 add	 esp, 4
  0064a	0f b6 c0	 movzx	 eax, al
  0064d	85 c0		 test	 eax, eax
  0064f	0f 84 6e 02 00
	00		 je	 $LN34@ShowDemoWi

; 343  :         {
; 344  :             ImGui::CheckboxFlags("io.ConfigFlags: NavEnableKeyboard", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NavEnableKeyboard);

  00655	6a 01		 push	 1
  00657	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  0065a	50		 push	 eax
  0065b	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@MKDHACD@io?4ConfigFlags?3?5NavEnableKeyboa@
  00660	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00665	83 c4 0c	 add	 esp, 12			; 0000000cH

; 345  :             ImGui::CheckboxFlags("io.ConfigFlags: NavEnableGamepad", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NavEnableGamepad);

  00668	6a 02		 push	 2
  0066a	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  0066d	50		 push	 eax
  0066e	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@MCNBOBFF@io?4ConfigFlags?3?5NavEnableGamepa@
  00673	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00678	83 c4 0c	 add	 esp, 12			; 0000000cH

; 346  :             ImGui::SameLine(); HelpMarker("Required back-end to feed in gamepad inputs in io.NavInputs[] and set io.BackendFlags |= ImGuiBackendFlags_HasGamepad.\n\nRead instructions in imgui.cpp for details.");

  0067b	51		 push	 ecx
  0067c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00684	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00689	51		 push	 ecx
  0068a	0f 57 c0	 xorps	 xmm0, xmm0
  0068d	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00692	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00697	83 c4 08	 add	 esp, 8
  0069a	68 00 00 00 00	 push	 OFFSET ??_C@_0KE@MBIKOFFP@Required?5back?9end?5to?5feed?5in?5ga@
  0069f	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  006a4	83 c4 04	 add	 esp, 4

; 347  :             ImGui::CheckboxFlags("io.ConfigFlags: NavEnableSetMousePos", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NavEnableSetMousePos);

  006a7	6a 04		 push	 4
  006a9	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  006ac	50		 push	 eax
  006ad	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@BBHAMFJD@io?4ConfigFlags?3?5NavEnableSetMou@
  006b2	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  006b7	83 c4 0c	 add	 esp, 12			; 0000000cH

; 348  :             ImGui::SameLine(); HelpMarker("Instruct navigation to move the mouse cursor. See comment for ImGuiConfigFlags_NavEnableSetMousePos.");

  006ba	51		 push	 ecx
  006bb	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  006c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006c8	51		 push	 ecx
  006c9	0f 57 c0	 xorps	 xmm0, xmm0
  006cc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  006d1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  006d6	83 c4 08	 add	 esp, 8
  006d9	68 00 00 00 00	 push	 OFFSET ??_C@_0GF@EIFIGBGA@Instruct?5navigation?5to?5move?5the@
  006de	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  006e3	83 c4 04	 add	 esp, 4

; 349  :             ImGui::CheckboxFlags("io.ConfigFlags: NoMouse", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NoMouse);

  006e6	6a 10		 push	 16			; 00000010H
  006e8	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  006eb	50		 push	 eax
  006ec	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@FJCAMGFF@io?4ConfigFlags?3?5NoMouse@
  006f1	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  006f6	83 c4 0c	 add	 esp, 12			; 0000000cH

; 350  :             if (io.ConfigFlags & ImGuiConfigFlags_NoMouse) // Create a way to restore this flag otherwise we could be stuck completely!

  006f9	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  006fc	8b 08		 mov	 ecx, DWORD PTR [eax]
  006fe	83 e1 10	 and	 ecx, 16			; 00000010H
  00701	0f 84 97 00 00
	00		 je	 $LN37@ShowDemoWi

; 351  :             {
; 352  :                 if (fmodf((float)ImGui::GetTime(), 0.40f) < 0.20f)

  00707	51		 push	 ecx
  00708	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3ecccccd
  00710	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00715	e8 00 00 00 00	 call	 ?GetTime@ImGui@@YANXZ	; ImGui::GetTime
  0071a	d9 9d d4 fe ff
	ff		 fstp	 DWORD PTR tv621[ebp]
  00720	d9 85 d4 fe ff
	ff		 fld	 DWORD PTR tv621[ebp]
  00726	51		 push	 ecx
  00727	d9 1c 24	 fstp	 DWORD PTR [esp]
  0072a	e8 00 00 00 00	 call	 _fmodf
  0072f	83 c4 08	 add	 esp, 8
  00732	d9 9d d0 fe ff
	ff		 fstp	 DWORD PTR tv628[ebp]
  00738	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@3e4ccccd
  00740	0f 2f 85 d0 fe
	ff ff		 comiss	 xmm0, DWORD PTR tv628[ebp]
  00747	76 2c		 jbe	 SHORT $LN36@ShowDemoWi

; 353  :                 {
; 354  :                     ImGui::SameLine();

  00749	51		 push	 ecx
  0074a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00752	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00757	51		 push	 ecx
  00758	0f 57 c0	 xorps	 xmm0, xmm0
  0075b	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00760	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00765	83 c4 08	 add	 esp, 8

; 355  :                     ImGui::Text("<<PRESS SPACE TO DISABLE>>");

  00768	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@MKGMHIPJ@?$DM?$DMPRESS?5SPACE?5TO?5DISABLE?$DO?$DO@
  0076d	e8 00 00 00 00	 call	 ?Text@ImGui@@YAXPBDZZ	; ImGui::Text
  00772	83 c4 04	 add	 esp, 4
$LN36@ShowDemoWi:

; 356  :                 }
; 357  :                 if (ImGui::IsKeyPressed(ImGui::GetKeyIndex(ImGuiKey_Space)))

  00775	6a 01		 push	 1
  00777	6a 0c		 push	 12			; 0000000cH
  00779	e8 00 00 00 00	 call	 ?GetKeyIndex@ImGui@@YAHH@Z ; ImGui::GetKeyIndex
  0077e	83 c4 04	 add	 esp, 4
  00781	50		 push	 eax
  00782	e8 00 00 00 00	 call	 ?IsKeyPressed@ImGui@@YA_NH_N@Z ; ImGui::IsKeyPressed
  00787	83 c4 08	 add	 esp, 8
  0078a	0f b6 c0	 movzx	 eax, al
  0078d	85 c0		 test	 eax, eax
  0078f	74 0d		 je	 SHORT $LN37@ShowDemoWi

; 358  :                     io.ConfigFlags &= ~ImGuiConfigFlags_NoMouse;

  00791	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  00794	8b 08		 mov	 ecx, DWORD PTR [eax]
  00796	83 e1 ef	 and	 ecx, -17		; ffffffefH
  00799	8b 55 e8	 mov	 edx, DWORD PTR _io$6[ebp]
  0079c	89 0a		 mov	 DWORD PTR [edx], ecx
$LN37@ShowDemoWi:

; 359  :             }
; 360  :             ImGui::CheckboxFlags("io.ConfigFlags: NoMouseCursorChange", (unsigned int *)&io.ConfigFlags, ImGuiConfigFlags_NoMouseCursorChange);

  0079e	6a 20		 push	 32			; 00000020H
  007a0	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  007a3	50		 push	 eax
  007a4	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@KNKEEHDL@io?4ConfigFlags?3?5NoMouseCursorCh@
  007a9	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  007ae	83 c4 0c	 add	 esp, 12			; 0000000cH

; 361  :             ImGui::SameLine(); HelpMarker("Instruct back-end to not alter mouse cursor shape and visibility.");

  007b1	51		 push	 ecx
  007b2	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007ba	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007bf	51		 push	 ecx
  007c0	0f 57 c0	 xorps	 xmm0, xmm0
  007c3	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  007c8	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  007cd	83 c4 08	 add	 esp, 8
  007d0	68 00 00 00 00	 push	 OFFSET ??_C@_0EC@DCPLBGPI@Instruct?5back?9end?5to?5not?5alter?5@
  007d5	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  007da	83 c4 04	 add	 esp, 4

; 362  :             ImGui::Checkbox("io.ConfigInputTextCursorBlink", &io.ConfigInputTextCursorBlink);

  007dd	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  007e0	05 aa 00 00 00	 add	 eax, 170		; 000000aaH
  007e5	50		 push	 eax
  007e6	68 00 00 00 00	 push	 OFFSET ??_C@_0BO@GBANMLLJ@io?4ConfigInputTextCursorBlink@
  007eb	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  007f0	83 c4 08	 add	 esp, 8

; 363  :             ImGui::SameLine(); HelpMarker("Set to false to disable blinking cursor, for users who consider it distracting");

  007f3	51		 push	 ecx
  007f4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  007fc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00801	51		 push	 ecx
  00802	0f 57 c0	 xorps	 xmm0, xmm0
  00805	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0080a	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  0080f	83 c4 08	 add	 esp, 8
  00812	68 00 00 00 00	 push	 OFFSET ??_C@_0EP@GBIAPNGK@Set?5to?5false?5to?5disable?5blinkin@
  00817	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  0081c	83 c4 04	 add	 esp, 4

; 364  :             ImGui::Checkbox("io.ConfigWindowsResizeFromEdges", &io.ConfigWindowsResizeFromEdges);

  0081f	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  00822	05 ab 00 00 00	 add	 eax, 171		; 000000abH
  00827	50		 push	 eax
  00828	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@IFIIDADM@io?4ConfigWindowsResizeFromEdges@
  0082d	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00832	83 c4 08	 add	 esp, 8

; 365  :             ImGui::SameLine(); HelpMarker("Enable resizing of windows from their edges and from the lower-left corner.\nThis requires (io.BackendFlags & ImGuiBackendFlags_HasMouseCursors) because it needs mouse cursor feedback.");

  00835	51		 push	 ecx
  00836	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  0083e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00843	51		 push	 ecx
  00844	0f 57 c0	 xorps	 xmm0, xmm0
  00847	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0084c	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00851	83 c4 08	 add	 esp, 8
  00854	68 00 00 00 00	 push	 OFFSET ??_C@_0LI@DCCFFPOA@Enable?5resizing?5of?5windows?5from@
  00859	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  0085e	83 c4 04	 add	 esp, 4

; 366  :             ImGui::Checkbox("io.ConfigWindowsMoveFromTitleBarOnly", &io.ConfigWindowsMoveFromTitleBarOnly);

  00861	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  00864	05 ac 00 00 00	 add	 eax, 172		; 000000acH
  00869	50		 push	 eax
  0086a	68 00 00 00 00	 push	 OFFSET ??_C@_0CF@PKBLIGGG@io?4ConfigWindowsMoveFromTitleBa@
  0086f	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00874	83 c4 08	 add	 esp, 8

; 367  :             ImGui::Checkbox("io.MouseDrawCursor", &io.MouseDrawCursor);

  00877	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  0087a	05 a8 00 00 00	 add	 eax, 168		; 000000a8H
  0087f	50		 push	 eax
  00880	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@PFDMJJAG@io?4MouseDrawCursor@
  00885	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  0088a	83 c4 08	 add	 esp, 8

; 368  :             ImGui::SameLine(); HelpMarker("Instruct Dear ImGui to render a mouse cursor for you. Note that a mouse cursor rendered via your application GPU rendering path will feel more laggy than hardware cursor, but will be more in sync with your other visuals.\n\nSome desktop applications may use both kinds of cursors (e.g. enable software cursor only when resizing/dragging something).");

  0088d	51		 push	 ecx
  0088e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00896	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  0089b	51		 push	 ecx
  0089c	0f 57 c0	 xorps	 xmm0, xmm0
  0089f	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  008a4	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  008a9	83 c4 08	 add	 esp, 8
  008ac	68 00 00 00 00	 push	 OFFSET ??_C@_0BFL@ILCCFGGP@Instruct?5Dear?5ImGui?5to?5render?5a@
  008b1	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  008b6	83 c4 04	 add	 esp, 4

; 369  :             ImGui::TreePop();

  008b9	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 370  :             ImGui::Separator();

  008be	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN34@ShowDemoWi:

; 371  :         }
; 372  : 
; 373  :         if (ImGui::TreeNode("Backend Flags"))

  008c3	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GGPAPCP@Backend?5Flags@
  008c8	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  008cd	83 c4 04	 add	 esp, 4
  008d0	0f b6 c0	 movzx	 eax, al
  008d3	85 c0		 test	 eax, eax
  008d5	74 6c		 je	 SHORT $LN38@ShowDemoWi

; 374  :         {
; 375  :             HelpMarker("Those flags are set by the back-ends (imgui_impl_xxx files) to specify their capabilities.\nHere we expose then as read-only fields to avoid breaking interactions with your back-end.");

  008d7	68 00 00 00 00	 push	 OFFSET ??_C@_0LG@OFNCJLC@Those?5flags?5are?5set?5by?5the?5back@
  008dc	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  008e1	83 c4 04	 add	 esp, 4

; 376  :             ImGuiBackendFlags backend_flags = io.BackendFlags; // Make a local copy to avoid modifying actual back-end flags.

  008e4	8b 45 e8	 mov	 eax, DWORD PTR _io$6[ebp]
  008e7	8b 48 04	 mov	 ecx, DWORD PTR [eax+4]
  008ea	89 4d dc	 mov	 DWORD PTR _backend_flags$5[ebp], ecx

; 377  :             ImGui::CheckboxFlags("io.BackendFlags: HasGamepad", (unsigned int *)&backend_flags, ImGuiBackendFlags_HasGamepad);

  008ed	6a 01		 push	 1
  008ef	8d 45 dc	 lea	 eax, DWORD PTR _backend_flags$5[ebp]
  008f2	50		 push	 eax
  008f3	68 00 00 00 00	 push	 OFFSET ??_C@_0BM@KECFJBMD@io?4BackendFlags?3?5HasGamepad@
  008f8	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  008fd	83 c4 0c	 add	 esp, 12			; 0000000cH

; 378  :             ImGui::CheckboxFlags("io.BackendFlags: HasMouseCursors", (unsigned int *)&backend_flags, ImGuiBackendFlags_HasMouseCursors);

  00900	6a 02		 push	 2
  00902	8d 45 dc	 lea	 eax, DWORD PTR _backend_flags$5[ebp]
  00905	50		 push	 eax
  00906	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@OGFIDKNB@io?4BackendFlags?3?5HasMouseCursor@
  0090b	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00910	83 c4 0c	 add	 esp, 12			; 0000000cH

; 379  :             ImGui::CheckboxFlags("io.BackendFlags: HasSetMousePos", (unsigned int *)&backend_flags, ImGuiBackendFlags_HasSetMousePos);

  00913	6a 04		 push	 4
  00915	8d 45 dc	 lea	 eax, DWORD PTR _backend_flags$5[ebp]
  00918	50		 push	 eax
  00919	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@JKLPDGP@io?4BackendFlags?3?5HasSetMousePos@
  0091e	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00923	83 c4 0c	 add	 esp, 12			; 0000000cH

; 380  :             ImGui::CheckboxFlags("io.BackendFlags: RendererHasVtxOffset", (unsigned int *)&backend_flags, ImGuiBackendFlags_RendererHasVtxOffset);

  00926	6a 08		 push	 8
  00928	8d 45 dc	 lea	 eax, DWORD PTR _backend_flags$5[ebp]
  0092b	50		 push	 eax
  0092c	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@EKAIMAPC@io?4BackendFlags?3?5RendererHasVtx@
  00931	e8 00 00 00 00	 call	 ?CheckboxFlags@ImGui@@YA_NPBDPAII@Z ; ImGui::CheckboxFlags
  00936	83 c4 0c	 add	 esp, 12			; 0000000cH

; 381  :             ImGui::TreePop();

  00939	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 382  :             ImGui::Separator();

  0093e	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN38@ShowDemoWi:

; 383  :         }
; 384  : 
; 385  :         if (ImGui::TreeNode("Style"))

  00943	68 00 00 00 00	 push	 OFFSET ??_C@_05IHAFCALK@Style@
  00948	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  0094d	83 c4 04	 add	 esp, 4
  00950	0f b6 c0	 movzx	 eax, al
  00953	85 c0		 test	 eax, eax
  00955	74 21		 je	 SHORT $LN39@ShowDemoWi

; 386  :         {
; 387  :             HelpMarker("The same contents can be accessed in 'Tools->Style Editor' or by calling the ShowStyleEditor() function.");

  00957	68 00 00 00 00	 push	 OFFSET ??_C@_0GJ@COKJKNBB@The?5same?5contents?5can?5be?5access@
  0095c	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  00961	83 c4 04	 add	 esp, 4

; 388  :             ImGui::ShowStyleEditor();

  00964	6a 00		 push	 0
  00966	e8 00 00 00 00	 call	 ?ShowStyleEditor@ImGui@@YAXPAUImGuiStyle@@@Z ; ImGui::ShowStyleEditor
  0096b	83 c4 04	 add	 esp, 4

; 389  :             ImGui::TreePop();

  0096e	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop

; 390  :             ImGui::Separator();

  00973	e8 00 00 00 00	 call	 ?Separator@ImGui@@YAXXZ	; ImGui::Separator
$LN39@ShowDemoWi:

; 391  :         }
; 392  : 
; 393  :         if (ImGui::TreeNode("Capture/Logging"))

  00978	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@BMMAIOLM@Capture?1Logging@
  0097d	e8 00 00 00 00	 call	 ?TreeNode@ImGui@@YA_NPBD@Z ; ImGui::TreeNode
  00982	83 c4 04	 add	 esp, 4
  00985	0f b6 c0	 movzx	 eax, al
  00988	85 c0		 test	 eax, eax
  0098a	74 7f		 je	 SHORT $LN40@ShowDemoWi

; 394  :         {
; 395  :             ImGui::TextWrapped("The logging API redirects all text output so you can easily capture the content of a window or a block. Tree nodes can be automatically expanded.");

  0098c	68 00 00 00 00	 push	 OFFSET ??_C@_0JC@LGKFGNAK@The?5logging?5API?5redirects?5all?5t@
  00991	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  00996	83 c4 04	 add	 esp, 4

; 396  :             HelpMarker("Try opening any of the contents below in this window and then click one of the \"Log To\" button.");

  00999	68 00 00 00 00	 push	 OFFSET ??_C@_0GA@GFOLBJBL@Try?5opening?5any?5of?5the?5contents@
  0099e	e8 00 00 00 00	 call	 ?HelpMarker@@YAXPBD@Z	; HelpMarker
  009a3	83 c4 04	 add	 esp, 4

; 397  :             ImGui::LogButtons();

  009a6	e8 00 00 00 00	 call	 ?LogButtons@ImGui@@YAXXZ ; ImGui::LogButtons

; 398  :             ImGui::TextWrapped("You can also call ImGui::LogText() to output directly to the log without a visual output.");

  009ab	68 00 00 00 00	 push	 OFFSET ??_C@_0FK@CDOBPMKK@You?5can?5also?5call?5ImGui?3?3LogTex@
  009b0	e8 00 00 00 00	 call	 ?TextWrapped@ImGui@@YAXPBDZZ ; ImGui::TextWrapped
  009b5	83 c4 04	 add	 esp, 4

; 399  :             if (ImGui::Button("Copy \"Hello, world!\" to clipboard"))

  009b8	51		 push	 ecx
  009b9	0f 57 c0	 xorps	 xmm0, xmm0
  009bc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009c1	51		 push	 ecx
  009c2	0f 57 c0	 xorps	 xmm0, xmm0
  009c5	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  009ca	8d 8d dc fe ff
	ff		 lea	 ecx, DWORD PTR $T1[ebp]
  009d0	e8 00 00 00 00	 call	 ??0ImVec2@@QAE@MM@Z	; ImVec2::ImVec2
  009d5	50		 push	 eax
  009d6	68 00 00 00 00	 push	 OFFSET ??_C@_0CC@DLICJJEI@Copy?5?$CCHello?0?5world?$CB?$CC?5to?5clipboa@
  009db	e8 00 00 00 00	 call	 ?Button@ImGui@@YA_NPBDABUImVec2@@@Z ; ImGui::Button
  009e0	83 c4 08	 add	 esp, 8
  009e3	0f b6 c0	 movzx	 eax, al
  009e6	85 c0		 test	 eax, eax
  009e8	74 1c		 je	 SHORT $LN41@ShowDemoWi

; 400  :             {
; 401  :                 ImGui::LogToClipboard();

  009ea	6a ff		 push	 -1
  009ec	e8 00 00 00 00	 call	 ?LogToClipboard@ImGui@@YAXH@Z ; ImGui::LogToClipboard
  009f1	83 c4 04	 add	 esp, 4

; 402  :                 ImGui::LogText("Hello, world!");

  009f4	68 00 00 00 00	 push	 OFFSET ??_C@_0O@GEHPLBPJ@Hello?0?5world?$CB@
  009f9	e8 00 00 00 00	 call	 ?LogText@ImGui@@YAXPBDZZ ; ImGui::LogText
  009fe	83 c4 04	 add	 esp, 4

; 403  :                 ImGui::LogFinish();

  00a01	e8 00 00 00 00	 call	 ?LogFinish@ImGui@@YAXXZ	; ImGui::LogFinish
$LN41@ShowDemoWi:

; 404  :             }
; 405  :             ImGui::TreePop();

  00a06	e8 00 00 00 00	 call	 ?TreePop@ImGui@@YAXXZ	; ImGui::TreePop
$LN40@ShowDemoWi:

; 406  :         }
; 407  :     }
; 408  : 
; 409  :     if (ImGui::CollapsingHeader("Window options"))

  00a0b	6a 00		 push	 0
  00a0d	68 00 00 00 00	 push	 OFFSET ??_C@_0P@FBBKILOB@Window?5options@
  00a12	e8 00 00 00 00	 call	 ?CollapsingHeader@ImGui@@YA_NPBDH@Z ; ImGui::CollapsingHeader
  00a17	83 c4 08	 add	 esp, 8
  00a1a	0f b6 c0	 movzx	 eax, al
  00a1d	85 c0		 test	 eax, eax
  00a1f	0f 84 8c 01 00
	00		 je	 $LN42@ShowDemoWi

; 410  :     {
; 411  :         ImGui::Checkbox("No titlebar", &no_titlebar); ImGui::SameLine(150);

  00a25	68 00 00 00 00	 push	 OFFSET ?no_titlebar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00a2a	68 00 00 00 00	 push	 OFFSET ??_C@_0M@EABCFDNG@No?5titlebar@
  00a2f	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00a34	83 c4 08	 add	 esp, 8
  00a37	51		 push	 ecx
  00a38	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a40	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a45	51		 push	 ecx
  00a46	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00a4e	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a53	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a58	83 c4 08	 add	 esp, 8

; 412  :         ImGui::Checkbox("No scrollbar", &no_scrollbar); ImGui::SameLine(300);

  00a5b	68 00 00 00 00	 push	 OFFSET ?no_scrollbar@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00a60	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GGGGKBFF@No?5scrollbar@
  00a65	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00a6a	83 c4 08	 add	 esp, 8
  00a6d	51		 push	 ecx
  00a6e	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00a76	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a7b	51		 push	 ecx
  00a7c	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00a84	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00a89	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00a8e	83 c4 08	 add	 esp, 8

; 413  :         ImGui::Checkbox("No menu", &no_menu);

  00a91	68 00 00 00 00	 push	 OFFSET ?no_menu@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00a96	68 00 00 00 00	 push	 OFFSET ??_C@_07KBMDBGCH@No?5menu@
  00a9b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00aa0	83 c4 08	 add	 esp, 8

; 414  :         ImGui::Checkbox("No move", &no_move); ImGui::SameLine(150);

  00aa3	68 00 00 00 00	 push	 OFFSET ?no_move@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00aa8	68 00 00 00 00	 push	 OFFSET ??_C@_07JGIJBGNK@No?5move@
  00aad	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00ab2	83 c4 08	 add	 esp, 8
  00ab5	51		 push	 ecx
  00ab6	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00abe	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ac3	51		 push	 ecx
  00ac4	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00acc	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00ad1	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00ad6	83 c4 08	 add	 esp, 8

; 415  :         ImGui::Checkbox("No resize", &no_resize); ImGui::SameLine(300);

  00ad9	68 00 00 00 00	 push	 OFFSET ?no_resize@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00ade	68 00 00 00 00	 push	 OFFSET ??_C@_09HMNEIDKA@No?5resize@
  00ae3	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00ae8	83 c4 08	 add	 esp, 8
  00aeb	51		 push	 ecx
  00aec	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00af4	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00af9	51		 push	 ecx
  00afa	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00b02	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b07	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b0c	83 c4 08	 add	 esp, 8

; 416  :         ImGui::Checkbox("No collapse", &no_collapse);

  00b0f	68 00 00 00 00	 push	 OFFSET ?no_collapse@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00b14	68 00 00 00 00	 push	 OFFSET ??_C@_0M@PFMGNBM@No?5collapse@
  00b19	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00b1e	83 c4 08	 add	 esp, 8

; 417  :         ImGui::Checkbox("No close", &no_close); ImGui::SameLine(150);

  00b21	68 00 00 00 00	 push	 OFFSET ?no_close@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00b26	68 00 00 00 00	 push	 OFFSET ??_C@_08DGAKPBEJ@No?5close@
  00b2b	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00b30	83 c4 08	 add	 esp, 8
  00b33	51		 push	 ecx
  00b34	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b3c	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b41	51		 push	 ecx
  00b42	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43160000
  00b4a	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b4f	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b54	83 c4 08	 add	 esp, 8

; 418  :         ImGui::Checkbox("No nav", &no_nav); ImGui::SameLine(300);

  00b57	68 00 00 00 00	 push	 OFFSET ?no_nav@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00b5c	68 00 00 00 00	 push	 OFFSET ??_C@_06KFENEDHJ@No?5nav@
  00b61	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00b66	83 c4 08	 add	 esp, 8
  00b69	51		 push	 ecx
  00b6a	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@bf800000
  00b72	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b77	51		 push	 ecx
  00b78	f3 0f 10 05 00
	00 00 00	 movss	 xmm0, DWORD PTR __real@43960000
  00b80	f3 0f 11 04 24	 movss	 DWORD PTR [esp], xmm0
  00b85	e8 00 00 00 00	 call	 ?SameLine@ImGui@@YAXMM@Z ; ImGui::SameLine
  00b8a	83 c4 08	 add	 esp, 8

; 419  :         ImGui::Checkbox("No background", &no_background);

  00b8d	68 00 00 00 00	 push	 OFFSET ?no_background@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00b92	68 00 00 00 00	 push	 OFFSET ??_C@_0O@EHIGJHPL@No?5background@
  00b97	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00b9c	83 c4 08	 add	 esp, 8

; 420  :         ImGui::Checkbox("No bring to front", &no_bring_to_front);

  00b9f	68 00 00 00 00	 push	 OFFSET ?no_bring_to_front@?1??ShowDemoWindow@ImGui@@YAXPA_N@Z@4_NA
  00ba4	68 00 00 00 00	 push	 OFFSET ??_C@_0BC@FKMLNKJL@No?5bring?5to?5front@
  00ba9	e8 00 00 00 00	 call	 ?Checkbox@ImGui@@YA_NPBDPA_N@Z ; ImGui::Checkbox
  00bae	83 c4 08	 add	 esp, 8
$LN42@ShowDemoWi:

; 421  :     }
; 422  : 
; 423  :     // All demo contents
; 424  :     ShowDemoWindowWidgets();

  00bb1	e8 00 00 00 00	 call	 ?ShowDemoWindowWidgets@@YAXXZ ; ShowDemoWindowWidgets

; 425  :     ShowDemoWindowLayout();

  00bb6	e8 00 00 00 00	 call	 ?ShowDemoWindowLayout@@YAXXZ ; ShowDemoWindowLayout

; 426  :     ShowDemoWindowPopups();

  00bbb	e8 00 00 00 00	 call	 ?ShowDemoWindowPopups@@YAXXZ ; ShowDemoWindowPopups

; 427  :     ShowDemoWindowColumns();

  00bc0	e8 00 00 00 00	 call	 ?ShowDemoWindowColumns@@YAXXZ ; ShowDemoWindowColumns

; 428  :     ShowDemoWindowMisc();

  00bc5	e8 00 00 00 00	 call	 ?ShowDemoWindowMisc@@YAXXZ ; ShowDemoWindowMisc

; 429  : 
; 430  :     // End of ShowDemoWindow()
; 431  :     ImGui::End();

  00bca	e8 00 00 00 00	 call	 ?End@ImGui@@YAXXZ	; ImGui::End
$LN1@ShowDemoWi:

; 432  : }

  00bcf	52		 push	 edx
  00bd0	8b cd		 mov	 ecx, ebp
  00bd2	50		 push	 eax
  00bd3	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN48@ShowDemoWi
  00bd9	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00bde	58		 pop	 eax
  00bdf	5a		 pop	 edx
  00be0	5f		 pop	 edi
  00be1	5e		 pop	 esi
  00be2	5b		 pop	 ebx
  00be3	8b 4d fc	 mov	 ecx, DWORD PTR __$ArrayPad$[ebp]
  00be6	33 cd		 xor	 ecx, ebp
  00be8	e8 00 00 00 00	 call	 @__security_check_cookie@4
  00bed	81 c4 30 01 00
	00		 add	 esp, 304		; 00000130H
  00bf3	3b ec		 cmp	 ebp, esp
  00bf5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bfa	8b e5		 mov	 esp, ebp
  00bfc	5d		 pop	 ebp
  00bfd	c3		 ret	 0
  00bfe	66 90		 npad	 2
$LN48@ShowDemoWi:
  00c00	01 00 00 00	 DD	 1
  00c04	00 00 00 00	 DD	 $LN47@ShowDemoWi
$LN47@ShowDemoWi:
  00c08	dc ff ff ff	 DD	 -36			; ffffffdcH
  00c0c	04 00 00 00	 DD	 4
  00c10	00 00 00 00	 DD	 $LN46@ShowDemoWi
$LN46@ShowDemoWi:
  00c14	62		 DB	 98			; 00000062H
  00c15	61		 DB	 97			; 00000061H
  00c16	63		 DB	 99			; 00000063H
  00c17	6b		 DB	 107			; 0000006bH
  00c18	65		 DB	 101			; 00000065H
  00c19	6e		 DB	 110			; 0000006eH
  00c1a	64		 DB	 100			; 00000064H
  00c1b	5f		 DB	 95			; 0000005fH
  00c1c	66		 DB	 102			; 00000066H
  00c1d	6c		 DB	 108			; 0000006cH
  00c1e	61		 DB	 97			; 00000061H
  00c1f	67		 DB	 103			; 00000067H
  00c20	73		 DB	 115			; 00000073H
  00c21	00		 DB	 0
?ShowDemoWindow@ImGui@@YAXPA_N@Z ENDP			; ImGui::ShowDemoWindow
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImVec4@@QAE@MMMM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
__z$ = 16						; size = 4
__w$ = 20						; size = 4
??0ImVec4@@QAE@MMMM@Z PROC				; ImVec4::ImVec4, COMDAT
; _this$ = ecx

; 200  :     ImVec4(float _x, float _y, float _z, float _w) { x = _x; y = _y; z = _z; w = _w; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __x$[ebp]
  00035	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __y$[ebp]
  00041	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	f3 0f 10 45 10	 movss	 xmm0, DWORD PTR __z$[ebp]
  0004e	f3 0f 11 40 08	 movss	 DWORD PTR [eax+8], xmm0
  00053	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00056	f3 0f 10 45 14	 movss	 xmm0, DWORD PTR __w$[ebp]
  0005b	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0
  00060	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00063	5f		 pop	 edi
  00064	5e		 pop	 esi
  00065	5b		 pop	 ebx
  00066	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  0006c	3b ec		 cmp	 ebp, esp
  0006e	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00073	8b e5		 mov	 esp, ebp
  00075	5d		 pop	 ebp
  00076	c2 10 00	 ret	 16			; 00000010H
??0ImVec4@@QAE@MMMM@Z ENDP				; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImVec4@@QAE@XZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
??0ImVec4@@QAE@XZ PROC					; ImVec4::ImVec4, COMDAT
; _this$ = ecx

; 199  :     ImVec4()  { x = y = z = w = 0.0f; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	0f 57 c0	 xorps	 xmm0, xmm0
  00033	f3 0f 11 40 0c	 movss	 DWORD PTR [eax+12], xmm0
  00038	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0003b	0f 57 c0	 xorps	 xmm0, xmm0
  0003e	f3 0f 11 41 08	 movss	 DWORD PTR [ecx+8], xmm0
  00043	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00046	0f 57 c0	 xorps	 xmm0, xmm0
  00049	f3 0f 11 42 04	 movss	 DWORD PTR [edx+4], xmm0
  0004e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00051	0f 57 c0	 xorps	 xmm0, xmm0
  00054	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00058	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0005b	5f		 pop	 edi
  0005c	5e		 pop	 esi
  0005d	5b		 pop	 ebx
  0005e	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00064	3b ec		 cmp	 ebp, esp
  00066	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0006b	8b e5		 mov	 esp, ebp
  0006d	5d		 pop	 ebp
  0006e	c3		 ret	 0
??0ImVec4@@QAE@XZ ENDP					; ImVec4::ImVec4
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File D:\Programmieren\csgoHack\ProjektWolf\ProjektWolf\ImGui DirectX 9 Kiero Hook 2\imgui\imgui.h
;	COMDAT ??0ImVec2@@QAE@MM@Z
_TEXT	SEGMENT
_this$ = -8						; size = 4
__x$ = 8						; size = 4
__y$ = 12						; size = 4
??0ImVec2@@QAE@MM@Z PROC				; ImVec2::ImVec2, COMDAT
; _this$ = ecx

; 187  :     ImVec2(float _x, float _y) { x = _x; y = _y; }

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx
  00023	b9 00 00 00 00	 mov	 ecx, OFFSET __8BAA8EBB_imgui@h
  00028	e8 00 00 00 00	 call	 @__CheckForDebuggerJustMyCode@4
  0002d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00030	f3 0f 10 45 08	 movss	 xmm0, DWORD PTR __x$[ebp]
  00035	f3 0f 11 00	 movss	 DWORD PTR [eax], xmm0
  00039	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003c	f3 0f 10 45 0c	 movss	 xmm0, DWORD PTR __y$[ebp]
  00041	f3 0f 11 40 04	 movss	 DWORD PTR [eax+4], xmm0
  00046	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00049	5f		 pop	 edi
  0004a	5e		 pop	 esi
  0004b	5b		 pop	 ebx
  0004c	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  00052	3b ec		 cmp	 ebp, esp
  00054	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00059	8b e5		 mov	 esp, ebp
  0005b	5d		 pop	 ebp
  0005c	c2 08 00	 ret	 8
??0ImVec2@@QAE@MM@Z ENDP				; ImVec2::ImVec2
_TEXT	ENDS
END
